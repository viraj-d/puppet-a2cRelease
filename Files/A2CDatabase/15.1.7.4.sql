/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar UserName "A2CUser"
:setvar DatabaseName "A2CDB"
:setvar DefaultFilePrefix "A2CDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

Declare @AwardingOrganisationDetailId int
select @AwardingOrganisationDetailId=AwardingOrganisationDetailId from AwardingOrganisationDetails where AONumber='72'


declare @AwardingOrganisationCertificateIdListDeleted as listint
insert into @AwardingOrganisationCertificateIdListDeleted(ID)
select 
aocert.AwardingOrganisationCertificateId
from AwardingOrganisationCentreCertificates aocc
join AwardingOrganisationCertificates aocert
on aocc.AwardingOrganisationCertificateId=aocert.AwardingOrganisationCertificateId
join AwardingOrganisationCentres aocenter on aocenter.AwardingOrganisationCentreId= aocc.AwardingOrganisationCentreId
where aocenter.AwardingOrganisationDetailId=@AwardingOrganisationDetailId

Delete aocc from AwardingOrganisationCentreCertificates aocc
join AwardingOrganisationCertificates aocert
on aocc.AwardingOrganisationCertificateId=aocert.AwardingOrganisationCertificateId
join AwardingOrganisationCentres aocenter on 
aocenter.AwardingOrganisationCentreId= aocc.AwardingOrganisationCentreId
where aocenter.AwardingOrganisationDetailId=@AwardingOrganisationDetailId


Delete aocert 
from AwardingOrganisationCertificates aocert
where
aocert.AwardingOrganisationCertificateId in
(
	select deleteIds.ID  from
	@AwardingOrganisationCertificateIdListDeleted deleteIds
	left join AwardingOrganisationCentreCertificates aocentrecert 
	on deleteIds.ID 
	=aocentrecert.AwardingOrganisationCertificateId
	where aocentrecert.AwardingOrganisationCertificateId is null
)

Declare @AwardingOrganisationId int
select @AwardingOrganisationId=AwardingOrganisationId from AwardingOrganisations WHERE Name='OCR'
update AwardingOrganisationDetails set AwardingOrganisationId=@AwardingOrganisationId where AONumber='72'



GO

GO
PRINT N'Altering [dbo].[usp_DeleteA2CSentQueues]...';


GO


ALTER Procedure [dbo].[usp_DeleteA2CSentQueues]
@AwardingOrganisationCentreId int,
@A2CSendRequestId int,
@Feedback nvarchar(max),
@IsSuccessful bit,
@OutgoingSequence bigint
as
begin
	if @IsSuccessful=1 
	begin
		Declare @OutgoingSequenceCurrent bigint		
		select @OutgoingSequenceCurrent=OutgoingSequence
		from AwardingOrganisationCentres where AwardingOrganisationCentreId=@AwardingOrganisationCentreId
		if @OutgoingSequenceCurrent=@OutgoingSequence
		begin
			if @OutgoingSequence=4294967295
			begin
				update AwardingOrganisationCentres
				set OutgoingSequence= 1
				where AwardingOrganisationCentreId=@AwardingOrganisationCentreId
			end
			else
			begin
				update AwardingOrganisationCentres
				set OutgoingSequence= OutgoingSequence + 1
				where AwardingOrganisationCentreId=@AwardingOrganisationCentreId
			end
			
		end
	end
	delete from A2CSentQueues where 
	AwardingOrganisationCentreId = @AwardingOrganisationCentreId
	
	declare @A2CRequestId int
	declare @A2COutSequenceRequestId int
	declare @A2CFeedbackMessageId int

	set @A2CRequestId=0
	set @A2COutSequenceRequestId=0
	set @A2CFeedbackMessageId=0

	select @A2CRequestId=A2CRequestId,@A2COutSequenceRequestId=A2COutSequenceRequestId,@A2CFeedbackMessageId=A2CFeedbackMessageId
	from A2CSendRequests where AwardingOrganisationCentreId = @AwardingOrganisationCentreId and A2CSendRequestId = @A2CSendRequestId 

	update A2CSendRequests set Status=2
	where AwardingOrganisationCentreId = @AwardingOrganisationCentreId and A2CSendRequestId = @A2CSendRequestId 


	if @A2CRequestId>0
	begin
		update A2CRequests set Feedback=@Feedback,LastModifiedDate=getutcdate()
		where AwardingOrganisationCentreId = @AwardingOrganisationCentreId and A2CRequestId = @A2CRequestId 
	end
	if @A2COutSequenceRequestId>0
	begin
		update A2COutSequenceRequests set Feedback=@Feedback,LastModifiedDate=getutcdate()
		where AwardingOrganisationCentreId = @AwardingOrganisationCentreId and A2COutSequenceRequestId = @A2COutSequenceRequestId 
	end
	if @A2CFeedbackMessageId>0
	begin
		update A2CFeedbackMessages set AOFeedback=@Feedback,LastModifiedDate=getutcdate()
		where AwardingOrganisationCentreId = @AwardingOrganisationCentreId and A2CFeedbackMessageId = @A2CFeedbackMessageId 
	end

end
GO
PRINT N'Altering [dbo].[usp_SelectA2CTransactionLog]...';


GO
ALTER PROCEDURE [dbo].[usp_SelectA2CTransactionLog]
@SchoolId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[TransactionDate] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
	@Take int = (@PageNumber * @PageSize),
	@WhereClause nvarchar(max) = '[SchoolId] = ' + cast(@SchoolId as nvarchar(10)) +
								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end


SET @TotalCount = 0;
	
	

	declare @CountQuery as nvarchar(max) = 'Select @TotalCountOut = Count(1) from
	(
select at.SchoolId,at.A2CTransactionId,are.A2CTransactionRequestId,case when are.A2CTransactionRequestId is not null then are.CentreNumber 
else at.CentreNumber end as CentreNumber,case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then adEDI.AONumber + '' '' + aoEDI.Name 
when arpem.A2CTransactionResponseEnvelopeMessageId is not null then adMessage.AONumber + '' '' + aoMessage.Name 
else ad.AONumber + '' '' + ao.Name end as AwardingOrganisation,
at.LastModifiedDate TransactionDate,
case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then  arpeetrMaster.TransactionName
when arpem.A2CTransactionResponseEnvelopeMessageId is not null then  arpemtrMaster.TransactionName
else am.TransactionName  end as TransactionName,
case when arpem.A2CTransactionResponseEnvelopeMessageId is not null then arpem.MessageId else atm.A2CMessageGuid end as MessageGuid,
case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then arpee.FileName
else atedi.FileName end as FileName,
case when arpem.A2CTransactionResponseEnvelopeMessageId is not null then arpem.IncomingSequence
else  atm.OutgoingSequence end as Sequence,
arpem.A2CTransactionResponseEnvelopeMessageId,
srm.SignalResponseText
from A2CTransactions at inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId
inner join AwardingOrganisationCentres aoc on at.SchoolId=aoc.A2CSchoolId and at.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
inner join AwardingOrganisations ao on ao.AwardingOrganisationId=ad.AwardingOrganisationId
left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 
left join A2CTransactionResponses arp on are.SchoolId=arp.SchoolId and are.A2CTransactionRequestId=arp.A2CTransactionRequestId
left join A2CTransactionResponseEnvelopes arpe on arpe.SchoolId=arp.SchoolId and arpe.A2CTransactionResponseId=arp.A2CTransactionResponseId
left join A2CTransactionResponseEnvelopeMessages arpem on arpe.SchoolId=arpem.SchoolId and arpe.A2CTransactionResponseEnvelopeId=arpem.A2CTransactionResponseEnvelopeId
left join A2CTransactionResponseEnvelopeSignals ares on arpe.SchoolId = ares.SchoolId and arpe.A2CTransactionResponseEnvelopeId = ares.A2CTransactionResponseEnvelopeId
left join SignalResponseMasters srm on ares.SignalResponseMasterId =  srm.SignalResponseMasterId
left join AwardingOrganisationCentres aocMessage on arpem.SchoolId=aocMessage.A2CSchoolId and arpem.MessageAwardingOrganisationCentreId=aocMessage.AwardingOrganisationCentreId
left join AwardingOrganisationDetails adMessage on aocMessage.AwardingOrganisationDetailId=adMessage.AwardingOrganisationDetailId
left join AwardingOrganisations aoMessage on aoMessage.AwardingOrganisationId=adMessage.AwardingOrganisationId
left join A2CTransactionMasters arpemtrMaster on arpemtrMaster.A2CTransactionMasterId = arpem.A2CTransactionMasterId
left join A2CTransactionResponseEnvelopeEDIs arpee on arpee.SchoolId=arpe.SchoolId and arpee.A2CTransactionResponseEnvelopeId=arpe.A2CTransactionResponseEnvelopeId
left join A2CTransactionMasters arpeetrMaster on arpeetrMaster.A2CTransactionMasterId = arpee.A2CTransactionMasterId
left join AwardingOrganisationCentres aocEDI on arpee.SchoolId=aocEDI.A2CSchoolId and arpee.MessageAwardingOrganisationCentreId=aocEDI.AwardingOrganisationCentreId
left join AwardingOrganisationDetails adEDI on aocEDI.AwardingOrganisationDetailId=adEDI.AwardingOrganisationDetailId 
left join AwardingOrganisations aoEDI on aoEDI.AwardingOrganisationId=adEDI.AwardingOrganisationId
) t
Where ' + @WhereClause
	 
	 

	 Declare @ListQuery as nvarchar(max)
	 Declare @ListQuery1 as nvarchar(max)
	
	--print 'ttt1'
	Set @ListQuery=
	'select SchoolId, A2CTransactionId, A2CTransactionRequestId, CentreNumber,AwardingOrganisation,TransactionDate,TransactionName,MessageGuid,FileName,Sequence,RN,
	CASE Transactionname
		WHEN ''ProcessRequestProductCatalogue'' THEN
			ISNULL(SignalResponseText, ''RPC'')
		ELSE	
			CAST(A2CTransactionResponseEnvelopeMessageId AS nvarchar(500))
	END AS Feedback, IsFeedbackMessage from 
(select SchoolId, A2CTransactionId, A2CTransactionRequestId, CentreNumber,AwardingOrganisation,TransactionDate,TransactionName,MessageGuid,FileName,Sequence ,
A2CTransactionResponseEnvelopeMessageId, IsFeedbackMessage,SignalResponseText,ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
from (select at.SchoolId,at.A2CTransactionId,are.A2CTransactionRequestId,case when are.A2CTransactionRequestId is not null then are.CentreNumber 
else at.CentreNumber end as CentreNumber,case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then adEDI.AONumber + '' '' + aoEDI.Name 
when arpem.A2CTransactionResponseEnvelopeMessageId is not null then adMessage.AONumber + '' '' + aoMessage.Name 
else ad.AONumber + '' '' + ao.Name end as AwardingOrganisation,
at.LastModifiedDate TransactionDate,
case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then  arpeetrMaster.TransactionName
when arpem.A2CTransactionResponseEnvelopeMessageId is not null then  arpemtrMaster.TransactionName
else am.TransactionName  end as TransactionName,
case when arpem.A2CTransactionResponseEnvelopeMessageId is not null then arpem.MessageId else atm.A2CMessageGuid end as MessageGuid,
case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then arpee.FileName
else atedi.FileName end as FileName,
case when arpem.A2CTransactionResponseEnvelopeMessageId is not null then arpem.IncomingSequence
else  atm.OutgoingSequence end as Sequence,
arpem.A2CTransactionResponseEnvelopeMessageId,arpem.IsFeedbackMessage,
srm.SignalResponseText'
SET @ListQuery1 = 'from A2CTransactions at inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId
inner join AwardingOrganisationCentres aoc on at.SchoolId=aoc.A2CSchoolId and at.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
inner join AwardingOrganisations ao on ao.AwardingOrganisationId=ad.AwardingOrganisationId
left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 
left join A2CTransactionResponses arp on are.SchoolId=arp.SchoolId and are.A2CTransactionRequestId=arp.A2CTransactionRequestId
left join A2CTransactionResponseEnvelopes arpe on arpe.SchoolId=arp.SchoolId and arpe.A2CTransactionResponseId=arp.A2CTransactionResponseId
left join A2CTransactionResponseEnvelopeMessages arpem on arpe.SchoolId=arpem.SchoolId and arpe.A2CTransactionResponseEnvelopeId=arpem.A2CTransactionResponseEnvelopeId
left join A2CTransactionResponseEnvelopeSignals ares on arpe.SchoolId = ares.SchoolId and arpe.A2CTransactionResponseEnvelopeId = ares.A2CTransactionResponseEnvelopeId
left join SignalResponseMasters srm on ares.SignalResponseMasterId =  srm.SignalResponseMasterId
left join AwardingOrganisationCentres aocMessage on arpem.SchoolId=aocMessage.A2CSchoolId and arpem.MessageAwardingOrganisationCentreId=aocMessage.AwardingOrganisationCentreId
left join AwardingOrganisationDetails adMessage on aocMessage.AwardingOrganisationDetailId=adMessage.AwardingOrganisationDetailId
left join AwardingOrganisations aoMessage on aoMessage.AwardingOrganisationId=adMessage.AwardingOrganisationId
left join A2CTransactionMasters arpemtrMaster on arpemtrMaster.A2CTransactionMasterId = arpem.A2CTransactionMasterId
left join A2CTransactionResponseEnvelopeEDIs arpee on arpee.SchoolId=arpe.SchoolId and arpee.A2CTransactionResponseEnvelopeId=arpe.A2CTransactionResponseEnvelopeId
left join A2CTransactionMasters arpeetrMaster on arpeetrMaster.A2CTransactionMasterId = arpee.A2CTransactionMasterId
left join AwardingOrganisationCentres aocEDI on arpee.SchoolId=aocEDI.A2CSchoolId and arpee.MessageAwardingOrganisationCentreId=aocEDI.AwardingOrganisationCentreId
left join AwardingOrganisationDetails adEDI on aocEDI.AwardingOrganisationDetailId=adEDI.AwardingOrganisationDetailId 
left join AwardingOrganisations aoEDI on aoEDI.AwardingOrganisationId=adEDI.AwardingOrganisationId
) t where ' + @WhereClause + 
') t1 where t1.RN between @Skip AND @Take'
    --print @ListQuery
	--print 'ttt2'
	
	DECLARE @ListQueryFinal AS NVARCHAR(MAX)
	SET @ListQueryFinal = @ListQuery + ' ' + @ListQuery1
	--print @ListQuery
	--print @ListQuery1
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQueryFinal, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take


END
GO
PRINT N'Creating [DBO].[usp_CheckIncomingSequenceAlreadyUsed]...';


GO
CREATE PROCEDURE DBO.[usp_CheckIncomingSequenceAlreadyUsed]
	@Sequence BIGINT, 
	@SchoolId INT,
	@AwardingOrganisationCentreId INT
AS
	IF EXISTS
		(SELECT 
			M.IncomingSequence 
		FROM 
			A2CTransactionResponseEnvelopeMessages M 
		WHERE 
			M.SchoolId = @SchoolId AND M.AwardingOrganisationCentreId = @AwardingOrganisationCentreId
			AND M.IncomingSequence = @Sequence)
		SELECT 1
	ELSE
		SELECT 0
GO
PRINT N'Creating [dbo].[usp_SelectAwardingOrganisationCentreLastSequenceNumber]...';


GO
Create Procedure usp_SelectAwardingOrganisationCentreLastSequenceNumber
(
@SchoolId int,
@awardingOrganisationCentreId int
)
As
begin
	select OutgoingSequence from AwardingOrganisationCentres where 
	A2CSchoolId=@SchoolId and
	AwardingOrganisationCentreId=@awardingOrganisationCentreId
end
GO
PRINT N'Creating [dbo].[usp_UpdateSelectAwardingOrganisationCentreLastSequenceNumber]...';


GO
Create Procedure usp_UpdateSelectAwardingOrganisationCentreLastSequenceNumber
(
@SchoolId int,
@awardingOrganisationCentreId int,
@outgoingSequence bigint
)
As
begin
	declare @outgoingSequenceToOutput bigint
	select @outgoingSequenceToOutput = OutgoingSequence from AwardingOrganisationCentres where 
	A2CSchoolId=@SchoolId and
	AwardingOrganisationCentreId=@awardingOrganisationCentreId
	update AwardingOrganisationCentres 
	set OutgoingSequence=@outgoingSequence
	where A2CSchoolId=@SchoolId and
	AwardingOrganisationCentreId=@awardingOrganisationCentreId
	select @outgoingSequenceToOutput
end
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.7.4';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

UPDATE ScreenMasters SET ScreenName = 'AddUser', ScreenDescription = 'Add User' WHERE ScreenName = 'AddSchoolUser'
UPDATE ScreenMasters SET ScreenName = 'ViewUsers', ScreenDescription = 'View Users' WHERE ScreenName = 'ViewSchoolUsers'
UPDATE ScreenMasters SET ScreenDescription = 'Edit Sequence Number' WHERE ScreenName = 'EditSequence'

Insert into ScreenMasters(ScreenMasterId, ScreenName,ScreenDescription)
Select	temp.ScreenMasterId, temp.ScreenName,temp.ScreenDescription
From	(Select 1023 ScreenMasterId, 'PollNow' ScreenName,'Poll Now' ScreenDescription
		union all
		Select 1022, 'EditSequence','Edit Sequence Number'	
		union all
		Select 1024, 'EditUser','Edit User'		
		) As temp
		Left Join ScreenMasters sm 
		on temp.ScreenMasterId = sm.ScreenMasterId
Where sm.ScreenMasterId is null

GO

GO
PRINT N'Update complete.';


GO
