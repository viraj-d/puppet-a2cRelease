/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar UserName "A2CUser"
:setvar DatabaseName "A2CDB"
:setvar DefaultFilePrefix "A2CDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/


Insert into AwardingOrganisations(Name, EndPoint,ContactEmail)
Select	temp.Name, temp.EndPoint,temp.ContactEmail
From	(
		Select 'NCFE' Name, 'https://a2cint.ncfe.org.uk/A2CWebService.svc' EndPoint,'ChristopherSemens@ncfe.org.uk' ContactEmail
		union all
		Select 'CIE' Name, 'https://qa-esb.cambridgeassessment.org.uk:10443/a2c' EndPoint,'Trott.S@cambridgeassessment.org.uk' ContactEmail
		union all
		Select 'OCR' Name, 'https://qa-esb.cambridgeassessment.org.uk:10443/a2c' EndPoint,'Trott.S@cambridgeassessment.org.uk' ContactEmail
		union all
		Select 'AQA' Name, 'https://a2c.aqa.org.uk:10443' EndPoint,'scassidy@aqa.org.uk' ContactEmail
		union all
		Select 'CCEA' Name, 'https://a2c.ccea.org.uk:10443' EndPoint,'ddonaghy@ccea.org.uk' ContactEmail
		union all
		Select 'City & Guilds' Name, 'https://a2cssl.cityandguilds.com:10443' EndPoint,'Martin.O''Reilly@cityandguilds.com' ContactEmail		
		union all
		Select 'WJEC' Name, 'https://a2c-transport-test.wjec.co.uk:10443/services/a2c' EndPoint,'paul.davies@wjec.co.uk' ContactEmail
		union all
		Select 'Pearson' Name, 'https://a2ctest.pearson.com/ebxmlservice/' EndPoint,'beatrice.otugo@pearson.com' ContactEmail	
		) As temp
		Left Join AwardingOrganisations sm 
		on temp.Name = sm.Name
Where sm.Name is null

Insert into AwardingOrganisationDetails(AwardingOrganisationId, AONumber)
Select	temp.AwardingOrganisationId, temp.AONumber
From	(
		Select  AwardingOrganisationId,  '29' AONumber from AwardingOrganisations ao  where ao.Name='NCFE'
		union all
		Select  AwardingOrganisationId,  '72' AONumber from AwardingOrganisations ao  where ao.Name='OCR'
		union all
		Select  AwardingOrganisationId,  '01' AONumber from AwardingOrganisations ao  where ao.Name='OCR'
		union all
		Select  AwardingOrganisationId,  '70' AONumber from AwardingOrganisations ao  where ao.Name='AQA'
		union all
		Select  AwardingOrganisationId,  '61' AONumber from AwardingOrganisations ao  where ao.Name='CCEA'
		union all
		Select  AwardingOrganisationId,  '73' AONumber from AwardingOrganisations ao  where ao.Name='City & Guilds'
		union all
		Select  AwardingOrganisationId,  '40' AONumber from AwardingOrganisations ao  where ao.Name='WJEC'
		union all
		Select  AwardingOrganisationId,  '41' AONumber from AwardingOrganisations ao  where ao.Name='WJEC'
		union all
		Select  AwardingOrganisationId,  '10' AONumber from AwardingOrganisations ao  where ao.Name='Pearson'
		union all
		Select  AwardingOrganisationId,  '11' AONumber from AwardingOrganisations ao  where ao.Name='Pearson'
		union all
		Select  AwardingOrganisationId,  '13' AONumber from AwardingOrganisations ao  where ao.Name='Pearson'
		union all
		Select  AwardingOrganisationId,  '14' AONumber from AwardingOrganisations ao  where ao.Name='Pearson'
		union all
		Select  AwardingOrganisationId,  '15' AONumber from AwardingOrganisations ao  where ao.Name='Pearson'
		union all
		Select  AwardingOrganisationId,  '02' AONumber from AwardingOrganisations ao  where ao.Name='CIE'
		) As temp
		Left Join AwardingOrganisationDetails sm 
		on temp.AONumber = sm.AONumber
Where sm.AONumber is null



GO
PRINT N'Dropping FK_A2CTransactionResponseEnvelopeSignalErrors_A2CTransactionResponseEnvelopeSignals...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignalErrors] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignalErrors_A2CTransactionResponseEnvelopeSignals];


GO
ALTER TABLE [dbo].[A2CTransactionResponseErrors] DROP CONSTRAINT [FK_A2CTransactionResponseErrors_A2CTransactionResponses];



/*******************************************end********************************************/


if not EXISTS(SELECT 1 FROM sys.Tables WHERE  Name = N'tmpA2CTransactionRequestsData' AND Type = N'U')
begin

CREATE TABLE [dbo].[tmpA2CTransactionRequestsData](
	[A2CTransactionRequestDataId] [int] IDENTITY(1000,1) NOT NULL,
	[SchoolId] [int] NOT NULL,
	[AwardingOrganisationCentreId] [int] NOT NULL,
	[A2CTransactionRequestId] [int] NOT NULL,
	[LastModifiedDate] [datetime] NOT NULL,
	[Id] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[Envelope] [varbinary](max) FILESTREAM  NULL,
 CONSTRAINT [UQ__A2CTransRequestDatatmp__3214EC06A4AD1F24] UNIQUE NONCLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] FILESTREAM_ON [FileStream]

ALTER TABLE [dbo].[tmpA2CTransactionRequestsData] ADD  CONSTRAINT [DF_tmpA2CTransactionRequestsData_Id]  DEFAULT (newid()) FOR [Id]

end

GO

if not EXISTS(SELECT 1 FROM sys.Tables WHERE  Name = N'tmpA2CTransactionResponseEnvelopeEDIsData' AND Type = N'U')
begin

CREATE TABLE [dbo].[tmpA2CTransactionResponseEnvelopeEDIsData](
	[A2CTransactionResponseEnvelopeEDIDataId] [int] IDENTITY(1000,1) NOT NULL,
	[SchoolId] [int] NOT NULL,
	[AwardingOrganisationCentreId] [int] NOT NULL,
	[A2CTransactionResponseEnvelopeEDIId] [int] NOT NULL,
	[LastModifiedDate] [datetime] NOT NULL,
	[Id] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[data] [varbinary](max) FILESTREAM  NULL,
 CONSTRAINT [UQ1__A2CTransEnvelope__3214EC06C5BC8BDB] UNIQUE NONCLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] FILESTREAM_ON [FileStream]

ALTER TABLE [dbo].[tmpA2CTransactionResponseEnvelopeEDIsData] ADD  CONSTRAINT [DF_tmpA2CTransactionResponseEnvelopeEDIsData_Id]  DEFAULT (newid()) FOR [Id]

end

GO

if not EXISTS(SELECT 1 FROM sys.Tables WHERE  Name = N'tmpA2CTransactionResponseEnvelopeMessagesData' AND Type = N'U')
begin

CREATE TABLE [dbo].[tmpA2CTransactionResponseEnvelopeMessagesData](
	[A2CTransactionResponseEnvelopeMessageDataId] [int] IDENTITY(1000,1) NOT NULL,
	[SchoolId] [int] NOT NULL,
	[AwardingOrganisationCentreId] [int] NOT NULL,
	[A2CTransactionResponseEnvelopeMessageId] [int] NOT NULL,
	[Id] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[data] [varbinary](max) FILESTREAM  NULL,
	[LastModifiedDate] [datetime] NULL,
 CONSTRAINT [UQ1__A2CTransactionResponseEnvelopeMessagesData_3214EC06E7A133DC] UNIQUE NONCLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] FILESTREAM_ON [FileStream]

ALTER TABLE [dbo].[tmpA2CTransactionResponseEnvelopeMessagesData] ADD  CONSTRAINT [DF_tmpA2CTransactionResponseEnvelopeMessagesData_Id]  DEFAULT (newid()) FOR [Id]

end

GO

if not EXISTS(SELECT 1 FROM sys.Tables WHERE  Name = N'tmpA2CTransactionResponseEnvelopesData' AND Type = N'U')
begin

CREATE TABLE [dbo].[tmpA2CTransactionResponseEnvelopesData](
	[A2CTransactionResponseEnvelopeDataId] [int] IDENTITY(1000,1) NOT NULL,
	[SchoolId] [int] NOT NULL,
	[AwardingOrganisationCentreId] [int] NOT NULL,
	[A2CTransactionResponseEnvelopeId] [int] NOT NULL,
	[LastModifiedDate] [datetime] NOT NULL,
	[Id] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
	[ResponseEnvelope] [varbinary](max) FILESTREAM  NULL,
 CONSTRAINT [UQ__A2CTransData1__3214EC068F756BDD] UNIQUE NONCLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] FILESTREAM_ON [FileStream]


ALTER TABLE [dbo].[tmpA2CTransactionResponseEnvelopesData] ADD  CONSTRAINT [DF_tmpA2CTransactionResponseEnvelopesData_Id]  DEFAULT (newid()) FOR [Id]

end

declare @schoolId int

select @schoolId=min(A2CSchoolId) from A2CSchools

while(exists(select A2CSchoolId from A2CSchools where A2CSchoolId=@schoolId))
begin

declare @A2CTransactionResponseEnvelopeMessageId  int  
select @A2CTransactionResponseEnvelopeMessageId = min(A2CTransactionResponseEnvelopeMessageId) from 
A2CTransactionResponseEnvelopeMessages where SchoolId=@schoolId

while(exists(select 1 from A2CTransactionResponseEnvelopeMessages 
		where A2CTransactionResponseEnvelopeMessageId>=@A2CTransactionResponseEnvelopeMessageId
		and SchoolId=@schoolId))
begin

declare @A2CTransactionResponseEnvelopeMessageIdMin int
declare @A2CTransactionResponseEnvelopeMessageIdMax int
set @A2CTransactionResponseEnvelopeMessageIdMin= @A2CTransactionResponseEnvelopeMessageId 
set @A2CTransactionResponseEnvelopeMessageIdMax= @A2CTransactionResponseEnvelopeMessageId + 999

insert into tmpA2CTransactionResponseEnvelopeMessagesData
( 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionResponseEnvelopeMessageId,
LastModifiedDate,
data
)
select 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionResponseEnvelopeMessageId,
LastModifiedDate,
data
from A2CTransactionResponseEnvelopeMessages 
where A2CTransactionResponseEnvelopeMessageId>=@A2CTransactionResponseEnvelopeMessageIdMin
and A2CTransactionResponseEnvelopeMessageId<=@A2CTransactionResponseEnvelopeMessageIdMax
and SchoolId=@schoolId

set @A2CTransactionResponseEnvelopeMessageId = @A2CTransactionResponseEnvelopeMessageIdMax + 1

end



declare @A2CTransactionResponseEnvelopeEdiId  int  
select @A2CTransactionResponseEnvelopeEdiId  = min(A2CTransactionResponseEnvelopeEDIId) from 
A2CTransactionResponseEnvelopeEDIs where SchoolId=@schoolId

while(exists(select 1 from A2CTransactionResponseEnvelopeEDIs 
		where A2CTransactionResponseEnvelopeEDIId>=@A2CTransactionResponseEnvelopeEdiId
		and SchoolId=@schoolId))
begin

declare @A2CTransactionResponseEnvelopeEdiIdMin int
declare @A2CTransactionResponseEnvelopeEdiIdMax int
set @A2CTransactionResponseEnvelopeEdiIdMin= @A2CTransactionResponseEnvelopeEdiId 
set @A2CTransactionResponseEnvelopeEdiIdMax= @A2CTransactionResponseEnvelopeEdiId + 999

insert into tmpA2CTransactionResponseEnvelopeEDIsData
( 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionResponseEnvelopeEDIId,
LastModifiedDate,
data
)
select 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionResponseEnvelopeEDIId,
LastModifiedDate,
data
from A2CTransactionResponseEnvelopeEDIs 
where A2CTransactionResponseEnvelopeEDIId>=@A2CTransactionResponseEnvelopeEdiIdMin
and A2CTransactionResponseEnvelopeEDIId<=@A2CTransactionResponseEnvelopeEdiIdMax
and SchoolId=@schoolId

set @A2CTransactionResponseEnvelopeEdiId = @A2CTransactionResponseEnvelopeEdiIdMax + 1

end


declare @A2CTransactionRequestId  int  
select @A2CTransactionRequestId  = min(A2CTransactionRequestId) from 
A2CTransactionRequests where SchoolId=@schoolId

while(exists(select 1 from A2CTransactionRequests 
		where A2CTransactionRequestId>=@A2CTransactionRequestId
		and SchoolId=@schoolId))
begin

declare @A2CTransactionRequestIdMin int
declare @A2CTransactionRequestIdMax int
set @A2CTransactionRequestIdMin= @A2CTransactionRequestId 
set @A2CTransactionRequestIdMax= @A2CTransactionRequestId + 999

insert into tmpA2CTransactionRequestsData
( 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionRequestId,
LastModifiedDate,
Envelope
)
select 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionRequestId,
LastModifiedDate,
Envelope
from A2CTransactionRequests 
where A2CTransactionRequestId>=@A2CTransactionRequestIdMin
and A2CTransactionRequestId<=@A2CTransactionRequestIdMax
and SchoolId=@schoolId

set @A2CTransactionRequestId = @A2CTransactionRequestIdMax + 1

end


declare @A2CTransactionResponseEnvelopeId  int  
select @A2CTransactionResponseEnvelopeId  = min(A2CTransactionResponseEnvelopeId) from 
A2CTransactionResponseEnvelopes where SchoolId=@schoolId

while(exists(select 1 from A2CTransactionResponseEnvelopes 
		where A2CTransactionResponseEnvelopeId>=@A2CTransactionResponseEnvelopeId
		and SchoolId=@schoolId))
begin

declare @A2CTransactionResponseEnvelopeIdMin int
declare @A2CTransactionResponseEnvelopeIdMax int
set @A2CTransactionResponseEnvelopeIdMin= @A2CTransactionResponseEnvelopeId 
set @A2CTransactionResponseEnvelopeIdMax= @A2CTransactionResponseEnvelopeId + 999

insert into tmpA2CTransactionResponseEnvelopesData
( 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionResponseEnvelopeId,
LastModifiedDate,
ResponseEnvelope
)
select 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionResponseEnvelopeId,
LastModifiedDate,
ResponseEnvelope
from A2CTransactionResponseEnvelopes 
where A2CTransactionResponseEnvelopeId>=@A2CTransactionResponseEnvelopeIdMin
and A2CTransactionResponseEnvelopeId<=@A2CTransactionResponseEnvelopeIdMax
and SchoolId=@schoolId

set @A2CTransactionResponseEnvelopeId = @A2CTransactionResponseEnvelopeIdMax + 1

end

select @schoolId=min(A2CSchoolId) from A2CSchools where A2CSchoolId>@schoolId

end

GO

ALTER TABLE [dbo].[A2CTransactionRequests] DROP Column Envelope

GO

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes] DROP Column ResponseEnvelope

GO

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP Column data


GO

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] DROP Column data

GO

GO
PRINT N'Dropping DF__A2CTransacti__Id__0D99FE17...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests] DROP CONSTRAINT [DF__A2CTransacti__Id__0D99FE17];


GO
PRINT N'Dropping DF__A2CTransacti__Id__24285DB4...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] DROP CONSTRAINT [DF__A2CTransacti__Id__24285DB4];


GO
PRINT N'Dropping DF__A2CTransacti__Id__27F8EE98...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP CONSTRAINT [DF__A2CTransacti__Id__27F8EE98];


GO
PRINT N'Dropping DF__A2CTransacti__Id__34B3CB38...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes] DROP CONSTRAINT [DF__A2CTransacti__Id__34B3CB38];


GO
PRINT N'Dropping DF_A2CTransactionRequests_LastModifiedDate...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests] DROP CONSTRAINT [DF_A2CTransactionRequests_LastModifiedDate];


GO
PRINT N'Dropping DF_A2CTransactionResponseEDIs_LastModifiedDate...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] DROP CONSTRAINT [DF_A2CTransactionResponseEDIs_LastModifiedDate];


GO
PRINT N'Dropping DF_A2CTransactionResponseEnvelopeMessages_DataImportStatus...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP CONSTRAINT [DF_A2CTransactionResponseEnvelopeMessages_DataImportStatus];


GO
PRINT N'Dropping DF_A2CTransactionResponseEnvelopeMessages_ImportPriority...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP CONSTRAINT [DF_A2CTransactionResponseEnvelopeMessages_ImportPriority];


GO
PRINT N'Dropping DF_A2CTransactionResponseMessages_LastModifiedDate...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP CONSTRAINT [DF_A2CTransactionResponseMessages_LastModifiedDate];


GO
PRINT N'Dropping DF_A2CTransactionResponseEnvelopes_LastModifiedDate...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes] DROP CONSTRAINT [DF_A2CTransactionResponseEnvelopes_LastModifiedDate];


GO
PRINT N'Dropping FK_A2CTransactionRequests_A2CTransactions...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests] DROP CONSTRAINT [FK_A2CTransactionRequests_A2CTransactions];


GO
PRINT N'Dropping FK_A2CTransactionRequests_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests] DROP CONSTRAINT [FK_A2CTransactionRequests_AwardingOrganisationCentres];


GO
PRINT N'Dropping FK_A2CTransactionResponses_A2CTransactionRequests...';


GO
ALTER TABLE [dbo].[A2CTransactionResponses] DROP CONSTRAINT [FK_A2CTransactionResponses_A2CTransactionRequests];


GO
PRINT N'Dropping FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionMasters...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionMasters];


GO
PRINT N'Dropping FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionResponseEnvelopes...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionResponseEnvelopes];


GO
PRINT N'Dropping FK_A2CTransactionResponseEnvelopeEDIs_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_AwardingOrganisationCentres];


GO
PRINT N'Dropping FK_A2CFeedbackMessages_A2CTransactionResponseEnvelopeMessages...';


GO
ALTER TABLE [dbo].[A2CFeedbackMessages] DROP CONSTRAINT [FK_A2CFeedbackMessages_A2CTransactionResponseEnvelopeMessages];


GO
PRINT N'Dropping FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionResponseEnvelopes...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionResponseEnvelopes];


GO
PRINT N'Dropping FK_A2CTransactionResponseEnvelopeMessages_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_AwardingOrganisationCentres];


GO
PRINT N'Dropping FK_A2CTransactionResponseEnvelopes_A2CTransactionResponses...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopes_A2CTransactionResponses];


GO
PRINT N'Dropping FK_A2CTransactionResponseEnvelopeSignals_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignals_AwardingOrganisationCentres];


GO
PRINT N'Dropping UQ__A2CTrans__3214EC06A4AD1F24...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests] DROP CONSTRAINT [UQ__A2CTrans__3214EC06A4AD1F24];


GO
PRINT N'Dropping UQ__A2CTrans__3214EC06C5BC8BDB...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] DROP CONSTRAINT [UQ__A2CTrans__3214EC06C5BC8BDB];


GO
PRINT N'Dropping UQ__A2CTrans__3214EC06E7A133DC...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP CONSTRAINT [UQ__A2CTrans__3214EC06E7A133DC];


GO
PRINT N'Dropping UQ__A2CTrans__3214EC068F756BDD...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes] DROP CONSTRAINT [UQ__A2CTrans__3214EC068F756BDD];


GO
/*
The column [dbo].[A2CTransactionRequests].[Envelope] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionRequests].[Id] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionRequests]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionRequests] (
    [A2CTransactionRequestId]      INT            IDENTITY (1000, 1) NOT NULL,
    [SchoolId]                     INT            NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [A2CTransactionId]             INT            NOT NULL,
    [A2CTransactionGuid]           NVARCHAR (50)  NOT NULL,
    [EndPoint]                     NVARCHAR (300) NULL,
    [LastModifiedDate]             DATETIME       CONSTRAINT [DF_A2CTransactionRequests_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [CentreNumber]                 NVARCHAR (50)  NULL,
    CONSTRAINT [tmp_ms_xx_constraint_pk_A2CTransactionRequests] PRIMARY KEY CLUSTERED ([SchoolId] ASC, [A2CTransactionRequestId] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionRequests])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionRequests] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionRequests] ([SchoolId], [A2CTransactionRequestId], [AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionGuid], [EndPoint], [LastModifiedDate], [CentreNumber])
        SELECT   [SchoolId],
                 [A2CTransactionRequestId],
                 [AwardingOrganisationCentreId],
                 [A2CTransactionId],
                 [A2CTransactionGuid],
                 [EndPoint],
                 [LastModifiedDate],
                 [CentreNumber]
        FROM     [dbo].[A2CTransactionRequests]
        ORDER BY [SchoolId] ASC, [A2CTransactionRequestId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionRequests] OFF;
    END

DROP TABLE [dbo].[A2CTransactionRequests];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionRequests]', N'A2CTransactionRequests';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_pk_A2CTransactionRequests]', N'pk_A2CTransactionRequests', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[A2CTransactionRequests].[ix_A2CTransactionRequestsTransactionLog]...';


GO
CREATE NONCLUSTERED INDEX [ix_A2CTransactionRequestsTransactionLog]
    ON [dbo].[A2CTransactionRequests]([SchoolId] ASC, [A2CTransactionId] ASC)
    INCLUDE([A2CTransactionRequestId], [LastModifiedDate], [CentreNumber]);


GO
/*
The column [dbo].[A2CTransactionResponseEnvelopeEDIs].[data] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopeEDIs].[Id] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionResponseEnvelopeEDIs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeEDIs] (
    [A2CTransactionResponseEnvelopeEDIId] INT            IDENTITY (1000, 1) NOT NULL,
    [SchoolId]                            INT            NOT NULL,
    [AwardingOrganisationCentreId]        INT            NOT NULL,
    [A2CTransactionResponseEnvelopeId]    INT            NOT NULL,
    [FileName]                            NVARCHAR (100) NULL,
    [LastModifiedDate]                    DATETIME       CONSTRAINT [DF_A2CTransactionResponseEDIs_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [MessageAwardingOrganisationCentreId] INT            NULL,
    [A2CTransactionMasterId]              INT            NULL,
    CONSTRAINT [tmp_ms_xx_constraint_pk_A2CTransactionResponseEnvelopeEDIs] PRIMARY KEY CLUSTERED ([SchoolId] ASC, [A2CTransactionResponseEnvelopeEDIId] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionResponseEnvelopeEDIs])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeEDIs] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeEDIs] ([SchoolId], [A2CTransactionResponseEnvelopeEDIId], [AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeId], [FileName], [LastModifiedDate], [MessageAwardingOrganisationCentreId], [A2CTransactionMasterId])
        SELECT   [SchoolId],
                 [A2CTransactionResponseEnvelopeEDIId],
                 [AwardingOrganisationCentreId],
                 [A2CTransactionResponseEnvelopeId],
                 [FileName],
                 [LastModifiedDate],
                 [MessageAwardingOrganisationCentreId],
                 [A2CTransactionMasterId]
        FROM     [dbo].[A2CTransactionResponseEnvelopeEDIs]
        ORDER BY [SchoolId] ASC, [A2CTransactionResponseEnvelopeEDIId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeEDIs] OFF;
    END

DROP TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeEDIs]', N'A2CTransactionResponseEnvelopeEDIs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_pk_A2CTransactionResponseEnvelopeEDIs]', N'pk_A2CTransactionResponseEnvelopeEDIs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
/*
The column [dbo].[A2CTransactionResponseEnvelopeMessages].[data] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopeMessages].[Id] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionResponseEnvelopeMessages]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeMessages] (
    [A2CTransactionResponseEnvelopeMessageId] INT           IDENTITY (1000, 1) NOT NULL,
    [SchoolId]                                INT           NOT NULL,
    [AwardingOrganisationCentreId]            INT           NOT NULL,
    [A2CTransactionResponseEnvelopeId]        INT           NOT NULL,
    [MessageId]                               NVARCHAR (50) NULL,
    [RefMessageId]                            NVARCHAR (50) NULL,
    [TimeStamp]                               DATETIME      NULL,
    [A2CMessageId]                            INT           NULL,
    [A2CTransactionMasterId]                  INT           NULL,
    [IncomingSequence]                        INT           NULL,
    [LastModifiedDate]                        DATETIME      CONSTRAINT [DF_A2CTransactionResponseMessages_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [IsFeedbackMessage]                       BIT           NULL,
    [DataImportStatus]                        SMALLINT      CONSTRAINT [DF_A2CTransactionResponseEnvelopeMessages_DataImportStatus] DEFAULT ((0)) NULL,
    [MessageAwardingOrganisationCentreId]     INT           NULL,
    [IsMessageLevelFeedbackMessage]           BIT           NULL,
    [IsRedCodeFeedback]                       BIT           NULL,
    [ImportPriority]                          INT           CONSTRAINT [DF_A2CTransactionResponseEnvelopeMessages_ImportPriority] DEFAULT ((9999)) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_pk_A2CTransactionResponseEnvelopeMessages] PRIMARY KEY CLUSTERED ([SchoolId] ASC, [A2CTransactionResponseEnvelopeMessageId] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionResponseEnvelopeMessages])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeMessages] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeMessages] ([SchoolId], [A2CTransactionResponseEnvelopeMessageId], [AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeId], [MessageId], [RefMessageId], [TimeStamp], [A2CMessageId], [A2CTransactionMasterId], [IncomingSequence], [LastModifiedDate], [IsFeedbackMessage], [DataImportStatus], [MessageAwardingOrganisationCentreId], [IsMessageLevelFeedbackMessage], [IsRedCodeFeedback], [ImportPriority])
        SELECT   [SchoolId],
                 [A2CTransactionResponseEnvelopeMessageId],
                 [AwardingOrganisationCentreId],
                 [A2CTransactionResponseEnvelopeId],
                 [MessageId],
                 [RefMessageId],
                 [TimeStamp],
                 [A2CMessageId],
                 [A2CTransactionMasterId],
                 [IncomingSequence],
                 [LastModifiedDate],
                 [IsFeedbackMessage],
                 [DataImportStatus],
                 [MessageAwardingOrganisationCentreId],
                 [IsMessageLevelFeedbackMessage],
                 [IsRedCodeFeedback],
                 [ImportPriority]
        FROM     [dbo].[A2CTransactionResponseEnvelopeMessages]
        ORDER BY [SchoolId] ASC, [A2CTransactionResponseEnvelopeMessageId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeMessages] OFF;
    END

DROP TABLE [dbo].[A2CTransactionResponseEnvelopeMessages];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeMessages]', N'A2CTransactionResponseEnvelopeMessages';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_pk_A2CTransactionResponseEnvelopeMessages]', N'pk_A2CTransactionResponseEnvelopeMessages', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
/*
The column [dbo].[A2CTransactionResponseEnvelopes].[Id] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopes].[ResponseEnvelope] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionResponseEnvelopes]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopes] (
    [A2CTransactionResponseEnvelopeId] INT      IDENTITY (1000, 1) NOT NULL,
    [SchoolId]                         INT      NOT NULL,
    [AwardingOrganisationCentreId]     INT      NOT NULL,
    [A2CTransactionResponseId]         INT      NOT NULL,
    [IsSignalMessage]                  BIT      NULL,
    [LastModifiedDate]                 DATETIME CONSTRAINT [DF_A2CTransactionResponseEnvelopes_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [IsEDIMessage]                     BIT      NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CTransactionResponseEnvelopes] PRIMARY KEY CLUSTERED ([SchoolId] ASC, [A2CTransactionResponseEnvelopeId] ASC) WITH (FILLFACTOR = 75, PAD_INDEX = ON)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionResponseEnvelopes])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopes] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopes] ([SchoolId], [A2CTransactionResponseEnvelopeId], [AwardingOrganisationCentreId], [A2CTransactionResponseId], [IsSignalMessage], [LastModifiedDate], [IsEDIMessage])
        SELECT   [SchoolId],
                 [A2CTransactionResponseEnvelopeId],
                 [AwardingOrganisationCentreId],
                 [A2CTransactionResponseId],
                 [IsSignalMessage],
                 [LastModifiedDate],
                 [IsEDIMessage]
        FROM     [dbo].[A2CTransactionResponseEnvelopes]
        ORDER BY [SchoolId] ASC, [A2CTransactionResponseEnvelopeId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopes] OFF;
    END

DROP TABLE [dbo].[A2CTransactionResponseEnvelopes];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopes]', N'A2CTransactionResponseEnvelopes';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CTransactionResponseEnvelopes]', N'PK_A2CTransactionResponseEnvelopes', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopes].[Ix_A2CTransactionResponseEnvelopesTransactionLog]...';


GO
CREATE NONCLUSTERED INDEX [Ix_A2CTransactionResponseEnvelopesTransactionLog]
    ON [dbo].[A2CTransactionResponseEnvelopes]([SchoolId] ASC, [A2CTransactionResponseId] ASC)
    INCLUDE([A2CTransactionResponseEnvelopeId])
    ON [INDEXES];


GO
PRINT N'Creating [dbo].[A2CTransactionRequestsData]...';


GO
CREATE TABLE [dbo].[A2CTransactionRequestsData] (
    [SchoolId]                     INT                        NOT NULL,
    [A2CTransactionRequestId]      INT                        NOT NULL,
    [AwardingOrganisationCentreId] INT                        NOT NULL,
    [LastModifiedDate]             DATETIME                   NOT NULL,
    [Id]                           UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [Envelope]                     VARBINARY (MAX) FILESTREAM NULL,
    CONSTRAINT [PK_A2CTransactionRequestsData_1] PRIMARY KEY CLUSTERED ([SchoolId] ASC, [A2CTransactionRequestId] ASC),
    CONSTRAINT [UQ__A2CTransRequestData__3214EC06A4AD1F24] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeEDIsData]...';


GO
CREATE TABLE [dbo].[A2CTransactionResponseEnvelopeEDIsData] (
    [A2CTransactionResponseEnvelopeEDIId] INT                        NOT NULL,
    [SchoolId]                            INT                        NOT NULL,
    [AwardingOrganisationCentreId]        INT                        NOT NULL,
    [LastModifiedDate]                    DATETIME                   NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [data]                                VARBINARY (MAX) FILESTREAM NULL,
    CONSTRAINT [PK_A2CTransactionResponseEnvelopeEDIsData] PRIMARY KEY CLUSTERED ([A2CTransactionResponseEnvelopeEDIId] ASC, [SchoolId] ASC),
    CONSTRAINT [UQ__A2CTransEnvelope__3214EC06C5BC8BDB] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeMessagesData]...';


GO
CREATE TABLE [dbo].[A2CTransactionResponseEnvelopeMessagesData] (
    [A2CTransactionResponseEnvelopeMessageId] INT                        NOT NULL,
    [SchoolId]                                INT                        NOT NULL,
    [AwardingOrganisationCentreId]            INT                        NOT NULL,
    [Id]                                      UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [data]                                    VARBINARY (MAX) FILESTREAM NULL,
    [LastModifiedDate]                        DATETIME                   NULL,
    CONSTRAINT [PK_A2CTransactionResponseEnvelopeMessagesData_1] PRIMARY KEY CLUSTERED ([A2CTransactionResponseEnvelopeMessageId] ASC, [SchoolId] ASC),
    CONSTRAINT [UQ__A2CTransactionResponseEnvelopeMessagesData_3214EC06E7A133DC] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopesData]...';


GO
CREATE TABLE [dbo].[A2CTransactionResponseEnvelopesData] (
    [A2CTransactionResponseEnvelopeId] INT                        NOT NULL,
    [SchoolId]                         INT                        NOT NULL,
    [AwardingOrganisationCentreId]     INT                        NOT NULL,
    [LastModifiedDate]                 DATETIME                   NOT NULL,
    [Id]                               UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [ResponseEnvelope]                 VARBINARY (MAX) FILESTREAM NULL,
    CONSTRAINT [PK_A2CTransactionResponseEnvelopesData] PRIMARY KEY CLUSTERED ([A2CTransactionResponseEnvelopeId] ASC, [SchoolId] ASC),
    CONSTRAINT [UQ__A2CTransData__3214EC068F756BDD] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];


GO
PRINT N'Creating DF_A2CTransactionRequestsData_Id...';


GO
ALTER TABLE [dbo].[A2CTransactionRequestsData]
    ADD CONSTRAINT [DF_A2CTransactionRequestsData_Id] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating DF_A2CTransactionRequestsData_LastModifiedDate...';


GO
ALTER TABLE [dbo].[A2CTransactionRequestsData]
    ADD CONSTRAINT [DF_A2CTransactionRequestsData_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating DF_A2CTransactionResponseEnvelopeEDIsData_Id...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIsData]
    ADD CONSTRAINT [DF_A2CTransactionResponseEnvelopeEDIsData_Id] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating DF_A2CTransactionResponseEnvelopeEDIsData_LastModifiedDate...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIsData]
    ADD CONSTRAINT [DF_A2CTransactionResponseEnvelopeEDIsData_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating DF_A2CTransactionResponseEnvelopeMessagesData_Id...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessagesData]
    ADD CONSTRAINT [DF_A2CTransactionResponseEnvelopeMessagesData_Id] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating DF_A2CTransactionResponseEnvelopeMessagesData_LastModifiedDate...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessagesData]
    ADD CONSTRAINT [DF_A2CTransactionResponseEnvelopeMessagesData_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating DF__A2CTransactiData__Id__34B3CB38...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopesData]
    ADD CONSTRAINT [DF__A2CTransactiData__Id__34B3CB38] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating DF_A2CTransactionResponseEnvelopesData_LastModifiedDate...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopesData]
    ADD CONSTRAINT [DF_A2CTransactionResponseEnvelopesData_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating FK_A2CTransactionRequests_A2CTransactions...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionRequests_A2CTransactions] FOREIGN KEY ([SchoolId], [A2CTransactionId]) REFERENCES [dbo].[A2CTransactions] ([SchoolId], [A2CTransactionId]);


GO
PRINT N'Creating FK_A2CTransactionRequests_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionRequests_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating FK_A2CTransactionResponses_A2CTransactionRequests...';


GO
ALTER TABLE [dbo].[A2CTransactionResponses] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponses_A2CTransactionRequests] FOREIGN KEY ([SchoolId], [A2CTransactionRequestId]) REFERENCES [dbo].[A2CTransactionRequests] ([SchoolId], [A2CTransactionRequestId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionMasters...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionMasters] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionResponseEnvelopes...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionResponseEnvelopes] FOREIGN KEY ([SchoolId], [A2CTransactionResponseEnvelopeId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopes] ([SchoolId], [A2CTransactionResponseEnvelopeId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopeEDIs_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_AwardingOrganisationCentres] FOREIGN KEY ([MessageAwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating FK_A2CFeedbackMessages_A2CTransactionResponseEnvelopeMessages...';


GO
ALTER TABLE [dbo].[A2CFeedbackMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CFeedbackMessages_A2CTransactionResponseEnvelopeMessages] FOREIGN KEY ([SchoolId], [A2CTransactionResponseEnvelopeMessageId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopeMessages] ([SchoolId], [A2CTransactionResponseEnvelopeMessageId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionResponseEnvelopes...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionResponseEnvelopes] FOREIGN KEY ([SchoolId], [A2CTransactionResponseEnvelopeId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopes] ([SchoolId], [A2CTransactionResponseEnvelopeId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopeMessages_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopes_A2CTransactionResponses...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopes_A2CTransactionResponses] FOREIGN KEY ([SchoolId], [A2CTransactionResponseId]) REFERENCES [dbo].[A2CTransactionResponses] ([SchoolId], [A2CTransactionResponseId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopeSignals_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignals_AwardingOrganisationCentres] FOREIGN KEY ([SchoolId], [A2CTransactionResponseEnvelopeId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopes] ([SchoolId], [A2CTransactionResponseEnvelopeId]);


GO
PRINT N'Creating FK_A2CTransactionRequestsData_A2CTransactionRequestsData...';


GO
ALTER TABLE [dbo].[A2CTransactionRequestsData] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionRequestsData_A2CTransactionRequestsData] FOREIGN KEY ([SchoolId], [A2CTransactionRequestId]) REFERENCES [dbo].[A2CTransactionRequests] ([SchoolId], [A2CTransactionRequestId]);


GO
PRINT N'Creating FK_A2CTransactionRequestsData_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CTransactionRequestsData] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionRequestsData_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopeEDIsData_A2CTransactionResponseEnvelopeEDIs...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIsData] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIsData_A2CTransactionResponseEnvelopeEDIs] FOREIGN KEY ([SchoolId], [A2CTransactionResponseEnvelopeEDIId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopeEDIs] ([SchoolId], [A2CTransactionResponseEnvelopeEDIId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopeEDIsData_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIsData] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIsData_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopeMessagesData_A2CTransactionResponseEnvelopeMessages...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessagesData] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessagesData_A2CTransactionResponseEnvelopeMessages] FOREIGN KEY ([SchoolId], [A2CTransactionResponseEnvelopeMessageId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopeMessages] ([SchoolId], [A2CTransactionResponseEnvelopeMessageId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopeMessagesData_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessagesData] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessagesData_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopesData_A2CTransactionResponseEnvelopes...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopesData] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopesData_A2CTransactionResponseEnvelopes] FOREIGN KEY ([SchoolId], [A2CTransactionResponseEnvelopeId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopes] ([SchoolId], [A2CTransactionResponseEnvelopeId]);


GO
PRINT N'Creating FK_A2CTransactionResponseEnvelopesData_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopesData] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopesData_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Altering [dbo].[usp_DeleteBackDatedA2CTransactionRequests]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

ALTER PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionRequests]   
@ReferencedTransactionID INT  
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @InformationText NVARCHAR(MAX)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionRequestsSchools ( SchoolID INT NULL)

			INSERT INTO #A2CTransactionRequestsSchools 
				
			SELECT DISTINCT REQ.SchoolId  FROM A2CTransactionRequests REQ WITH (NOLOCK) 
					WHERE REQ.A2CTransactionId  <= @ReferencedTransactionID AND REQ.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionRequestsSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionRequestsSchools

				/*************Delete requestdata table***********************/
				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactionRequests REQ WITH (NOLOCK) 
									INNER JOIN A2CTransactionRequestsData REQDATA WITH (NOLOCK) ON REQ.SchoolId=REQDATA.SchoolId AND REQ.A2CTransactionRequestId=REQDATA.A2CTransactionRequestId 
									LEFT OUTER JOIN A2CTransactionResponses RES WITH (NOLOCK)  ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId
									WHERE RES.A2CTransactionResponseId IS NULL AND REQ.A2CTransactionId  <= @ReferencedTransactionID AND REQ.SchoolId = @TempSchoolID ))
				BEGIN
					DELETE TOP (1000) REQDATA
					FROM A2CTransactionRequests REQ WITH (NOLOCK) 
									INNER JOIN A2CTransactionRequestsData REQDATA WITH (NOLOCK) ON REQ.SchoolId=REQDATA.SchoolId AND REQ.A2CTransactionRequestId=REQDATA.A2CTransactionRequestId 
									LEFT OUTER JOIN A2CTransactionResponses RES WITH (NOLOCK)  ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId
									WHERE RES.A2CTransactionResponseId IS NULL AND REQ.A2CTransactionId  <= @ReferencedTransactionID AND REQ.SchoolId = @TempSchoolID
				END

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactionRequests REQ WITH (NOLOCK) 
									LEFT OUTER JOIN A2CTransactionResponses RES WITH (NOLOCK)  ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId
									WHERE RES.A2CTransactionResponseId IS NULL AND REQ.A2CTransactionId  <= @ReferencedTransactionID AND REQ.SchoolId = @TempSchoolID ))
				BEGIN
					DELETE TOP (1000) REQ
					FROM A2CTransactionRequests REQ WITH (NOLOCK) 
									LEFT OUTER JOIN A2CTransactionResponses RES WITH (NOLOCK)  ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId
									WHERE RES.A2CTransactionResponseId IS NULL AND REQ.A2CTransactionId  <= @ReferencedTransactionID AND REQ.SchoolId = @TempSchoolID
				END

				DELETE FROM #A2CTransactionRequestsSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Transaction requests deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionRequestsSchools
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionRequests' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeEDIs]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

ALTER PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeEDIs]   
@ReferencedTransactionID INT  
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @InformationText NVARCHAR(MAX)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionResponseEnvelopeEDIsSchools ( SchoolID INT NULL)

			INSERT INTO #A2CTransactionResponseEnvelopeEDIsSchools 
				
			SELECT DISTINCT T.SchoolId  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionResponseEnvelopeEDIsSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionResponseEnvelopeEDIsSchools

				/********************Delete EDI Data***************/
				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeEDIsData EEDIData WITH(NOLOCK) ON EEDIData.A2CTransactionResponseEnvelopeEDIId = EEDI.A2CTransactionResponseEnvelopeEDIId AND EEDIData.SchoolId = EEDI.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					DELETE TOP (1000) EEDIData FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeEDIsData EEDIData WITH(NOLOCK) ON EEDIData.A2CTransactionResponseEnvelopeEDIId = EEDI.A2CTransactionResponseEnvelopeEDIId AND EEDIData.SchoolId = EEDI.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID
				END

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					DELETE TOP (1000) EEDI FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID
				END

				DELETE FROM #A2CTransactionResponseEnvelopeEDIsSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Envelope EDIs deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionResponseEnvelopeEDIsSchools
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionResponseEnvelopeEDIs' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessages]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO


ALTER PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessages]   
@ReferencedTransactionID INT 
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionResponseEnvelopeMessagesSchools ( SchoolID INT NULL)
			CREATE TABLE #A2CTransactionResponseEnvelopeMessageIDs ( A2CTransactionResponseEnvelopeMessageId INT NULL)
			DECLARE @InformationText NVARCHAR(MAX)

			INSERT INTO #A2CTransactionResponseEnvelopeMessagesSchools 

			SELECT DISTINCT T.SchoolId  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE (EMSG.IsFeedbackMessage IS NULL OR EMSG.IsFeedbackMessage = 0) AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionResponseEnvelopeMessagesSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionResponseEnvelopeMessagesSchools

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE (EMSG.IsFeedbackMessage IS NULL OR EMSG.IsFeedbackMessage = 0) AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					INSERT INTO #A2CTransactionResponseEnvelopeMessageIDs 
					SELECT DISTINCT TOP 1000 EMSG.A2CTransactionResponseEnvelopeMessageId
					FROM A2CTransactions T WITH (NOLOCK) 
						INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId
						INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId
						INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId
						INNER JOIN A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId
						WHERE (EMSG.IsFeedbackMessage IS NULL OR EMSG.IsFeedbackMessage = 0) AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID

					WHILE (EXISTS (SELECT TOP 1 1 FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CFeedbackMessageDetails FMD WITH (NOLOCK) ON FM.A2CFeedbackMessageId = FMD.A2CFeedbackMessageId))
					BEGIN
						DELETE TOP (1000) FMD
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CFeedbackMessageDetails FMD WITH (NOLOCK) ON FM.A2CFeedbackMessageId = FMD.A2CFeedbackMessageId
					END

					WHILE (EXISTS (SELECT TOP 1 1 FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CSendRequests FMD WITH (NOLOCK) ON FM.A2CFeedbackMessageId = FMD.A2CFeedbackMessageId))
					BEGIN
						DELETE TOP (1000) SR
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CSendRequests SR WITH (NOLOCK) ON FM.A2CFeedbackMessageId = SR.A2CFeedbackMessageId
					END

					WHILE (EXISTS (SELECT TOP 1 1 FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId))
					BEGIN
						DELETE TOP (1000) FM
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
					END

					/********************Delete Messagedata*******************/
					DELETE REM
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CTransactionResponseEnvelopeMessagesData  REM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = REM.A2CTransactionResponseEnvelopeMessageId
						Where REM.SchoolId=@TempSchoolID

					DELETE REM
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CTransactionResponseEnvelopeMessages REM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = REM.A2CTransactionResponseEnvelopeMessageId
						Where REM.SchoolId=@TempSchoolID

					DELETE FROM #A2CTransactionResponseEnvelopeMessageIDs
				END

				DELETE FROM #A2CTransactionResponseEnvelopeMessagesSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Envelope messages deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionResponseEnvelopeMessagesSchools
			DROP TABLE #A2CTransactionResponseEnvelopeMessageIDs
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessages' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessagesFeedBack]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO


ALTER PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessagesFeedBack]   
@ReferencedTransactionID INT 
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionResponseEnvelopeMessagesSchools ( SchoolID INT NULL)
			CREATE TABLE #A2CTransactionResponseEnvelopeMessageIDs ( A2CTransactionResponseEnvelopeMessageId INT NULL)
			DECLARE @InformationText NVARCHAR(MAX)

			INSERT INTO #A2CTransactionResponseEnvelopeMessagesSchools 

			SELECT DISTINCT T.SchoolId  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE EMSG.IsFeedbackMessage = 1 AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionResponseEnvelopeMessagesSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionResponseEnvelopeMessagesSchools

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE EMSG.IsFeedbackMessage = 1 AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					INSERT INTO #A2CTransactionResponseEnvelopeMessageIDs 
					SELECT DISTINCT TOP 1000 EMSG.A2CTransactionResponseEnvelopeMessageId
					FROM A2CTransactions T WITH (NOLOCK) 
						INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId
						INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId
						INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId
						INNER JOIN A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId
						WHERE EMSG.IsFeedbackMessage = 1 AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID

					WHILE (EXISTS (SELECT TOP 1 1 FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CFeedbackMessageDetails FMD WITH (NOLOCK) ON FM.A2CFeedbackMessageId = FMD.A2CFeedbackMessageId))
					BEGIN
						DELETE TOP (1000) FMD
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CFeedbackMessageDetails FMD WITH (NOLOCK) ON FM.A2CFeedbackMessageId = FMD.A2CFeedbackMessageId
					END

					WHILE (EXISTS (SELECT TOP 1 1 FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CSendRequests FMD WITH (NOLOCK) ON FM.A2CFeedbackMessageId = FMD.A2CFeedbackMessageId))
					BEGIN
						DELETE TOP (1000) SR
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CSendRequests SR WITH (NOLOCK) ON FM.A2CFeedbackMessageId = SR.A2CFeedbackMessageId
					END

					WHILE (EXISTS (SELECT TOP 1 1 FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId))
					BEGIN
						DELETE TOP (1000) FM
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
					END

					/********************Delete Messagedata*******************/
					DELETE REM
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CTransactionResponseEnvelopeMessagesData  REM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = REM.A2CTransactionResponseEnvelopeMessageId
						Where REM.SchoolId=@TempSchoolID

					DELETE REM
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CTransactionResponseEnvelopeMessages REM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = REM.A2CTransactionResponseEnvelopeMessageId
						Where REM.SchoolId=@TempSchoolID

					DELETE FROM #A2CTransactionResponseEnvelopeMessageIDs
				END

				DELETE FROM #A2CTransactionResponseEnvelopeMessagesSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Feedback envelope messages deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionResponseEnvelopeMessagesSchools
			DROP TABLE #A2CTransactionResponseEnvelopeMessageIDs
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessagesFeedBack' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopes]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

ALTER PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopes]   
@ReferencedTransactionID INT  
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @InformationText NVARCHAR(MAX)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionResponseEnvelopesSchools ( SchoolID INT NULL)

			INSERT INTO #A2CTransactionResponseEnvelopesSchools 
				
			SELECT DISTINCT T.SchoolId  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionResponseEnvelopesSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionResponseEnvelopesSchools
				/*********************Delete Envelope data**********************/
				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopesData ENVData WITH(NOLOCK) ON ENVData.A2CTransactionResponseEnvelopeId = ENV.A2CTransactionResponseEnvelopeId AND  ENVData.SchoolId = ENV.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeSignals ESG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = ESG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = ESG.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE EEDI.A2CTransactionResponseEnvelopeEDIId IS NULL AND  ESG.A2CTransactionResponseEnvelopeSignalId IS NULL AND EMSG.A2CTransactionResponseEnvelopeMessageId IS NULL
						AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					DELETE TOP (1000) ENVData 
					FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopesData ENVData WITH(NOLOCK) ON ENVData.A2CTransactionResponseEnvelopeId = ENV.A2CTransactionResponseEnvelopeId AND  ENVData.SchoolId = ENV.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeSignals ESG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = ESG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = ESG.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE EEDI.A2CTransactionResponseEnvelopeEDIId IS NULL AND  ESG.A2CTransactionResponseEnvelopeSignalId IS NULL AND EMSG.A2CTransactionResponseEnvelopeMessageId IS NULL
						AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID
				END

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeSignals ESG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = ESG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = ESG.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE EEDI.A2CTransactionResponseEnvelopeEDIId IS NULL AND  ESG.A2CTransactionResponseEnvelopeSignalId IS NULL AND EMSG.A2CTransactionResponseEnvelopeMessageId IS NULL
						AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					DELETE TOP (1000) ENV 
					FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeSignals ESG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = ESG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = ESG.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE EEDI.A2CTransactionResponseEnvelopeEDIId IS NULL AND  ESG.A2CTransactionResponseEnvelopeSignalId IS NULL AND EMSG.A2CTransactionResponseEnvelopeMessageId IS NULL
						AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID
				END

				DELETE FROM #A2CTransactionResponseEnvelopesSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Response envelopes deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionResponseEnvelopesSchools
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionResponseEnvelopes' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionRequests]...';


GO



ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionRequests]
 @A2CTransactionId int,
@A2CTransactionGuid nvarchar(50),
@EndPoint nvarchar(300),
@Envelope varbinary (max),
@AwardingOrganisationCentreId int,
@SchoolId int ,
@CentreNumber nvarchar(50)
AS



BEGIN

	Insert into A2CTransactionRequests (SchoolId,A2CTransactionId ,A2CTransactionGuid,EndPoint,AwardingOrganisationCentreId,CentreNumber)
values(@SchoolId,@A2CTransactionId,@A2CTransactionGuid,@EndPoint,@AwardingOrganisationCentreId,@CentreNumber)

	Declare @A2CTransactionRequestId int
	SELECT @A2CTransactionRequestId = CAST(SCOPE_IdENTITY() AS INT)

	Insert into A2CTransactionRequestsData(SchoolId,A2CTransactionRequestId,AwardingOrganisationCentreId,Envelope)
	values(@SchoolId,@A2CTransactionRequestId,@AwardingOrganisationCentreId
	,@Envelope)

Select @A2CTransactionRequestId

END
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopeEDIs]...';


GO
ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeEDIs]
@AwardingOrganisationCentreId int,
@A2CTransactionResponseEnvelopeId int,
@data varbinary(max) ,
@FileName nvarchar(100),
@AwardingOrganisationNumber nvarchar(200),
@CentreNumber nvarchar(200),
@A2CSchoolId int,
@TransactionName nvarchar(100)=null,
@A2CTransactionRequestId int
AS
BEGIN
	
	DECLARE @A2CTransactionMasterId INT
	Declare @MessageAwardingOrganisationCentreId int
	EXEC @A2CTransactionMasterId= [usp_Select_A2CTransactionMasters_IdByName] @TransactionName

	
	Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
	inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
	inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
	where 
	aoc.A2CSchoolId=@A2CSchoolId and
	c.CentreNumber=@CentreNumber and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
	and ad.AONumber=@AwardingOrganisationNumber

	declare @AOAssignCentre nvarchar(200)
	set @AOAssignCentre=@CentreNumber
	If @MessageAwardingOrganisationCentreId is null
	begin
		Select @CentreNumber = c.CentreNumber, @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
		inner join AwardingOrganisationAOAssignedCentres aoassign on aoassign.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		and aoassign.A2CSchoolId=aoc.A2CSchoolId
		where 
		aoc.A2CSchoolId=@A2CSchoolId 
		and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
		and aoassign.AOAssignCentreNumber=@CentreNumber
		and ad.AONumber=@AwardingOrganisationNumber
	end

	Insert into A2CTransactionResponseEnvelopeEDIs (SchoolId,AwardingOrganisationCentreId,A2CTransactionResponseEnvelopeId,FileName, MessageAwardingOrganisationCentreId,A2CTransactionMasterId)
	values(@A2CSchoolId,@AwardingOrganisationCentreId,@A2CTransactionResponseEnvelopeId,@FileName,@MessageAwardingOrganisationCentreId,@A2CTransactionMasterId)
	
	Declare @A2CTransactionResponseEnvelopeEDIId int
	SELECT @A2CTransactionResponseEnvelopeEDIId = CAST(SCOPE_IdENTITY() AS INT)

	

	Insert into A2CTransactionResponseEnvelopeEDIsData(SchoolId,A2CTransactionResponseEnvelopeEDIId,AwardingOrganisationCentreId,data)
	values(@A2CSchoolId, @A2CTransactionResponseEnvelopeEDIId,@AwardingOrganisationCentreId,@data)


	update A2CTransactionRequests set CentreNumber=@AOAssignCentre where A2CTransactionRequestId=@A2CTransactionRequestId
	and SchoolId=@A2CSchoolId

	select @CentreNumber
END
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]...';


GO
ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]
@A2CSchoolId int,
@AwardingOrganisationDetailId int,
@CentreId int,
@A2CTransactionResponseEnvelopeId int,
@MessageId nvarchar(50),
@RefMessageId nvarchar(50)=null,
@TimeStamp datetime,
@TransactionName nvarchar(100)=null,
@IncomingSequence bigint=null,
@data varbinary(max),
@IsFeedbackMessage  bit,
@AwardingOrganisationCentreId int,
@AwardingOrganisationNumber nvarchar(200),
@CentreNumber nvarchar(200),
@IsMessageLevelFeedbackMessage bit,
@A2CTransactionRequestId int,
@DataImportStatus int,
@IsRedCodeFeedback bit
AS
BEGIN
	DECLARE @A2CTransactionMasterId INT
	Declare @MessageAwardingOrganisationCentreId int
	EXEC @A2CTransactionMasterId= [usp_Select_A2CTransactionMasters_IdByName] @TransactionName
	Declare @A2CMessageId int

	Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
	inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
	inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
	where 
	aoc.A2CSchoolId=@A2CSchoolId and
	c.CentreNumber=@CentreNumber and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
	and ad.AONumber=@AwardingOrganisationNumber

	If @MessageAwardingOrganisationCentreId is null
	begin
		Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
		inner join AwardingOrganisationAOAssignedCentres aoassign on aoassign.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		and aoassign.A2CSchoolId=aoc.A2CSchoolId
		where 
		aoc.A2CSchoolId=@A2CSchoolId 
		and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
		and aoassign.AOAssignCentreNumber=@CentreNumber
		and ad.AONumber=@AwardingOrganisationNumber
	end
	
	if @IncomingSequence=0
	begin
		set @IncomingSequence=null
	end

	Insert into A2CTransactionResponseEnvelopeMessages (SchoolId,A2CTransactionResponseEnvelopeId,MessageId,RefMessageId,[TimeStamp],A2CTransactionMasterId,IncomingSequence,IsFeedbackMessage,A2CMessageId,AwardingOrganisationCentreId,MessageAwardingOrganisationCentreId,IsMessageLevelFeedbackMessage,DataImportStatus,IsRedCodeFeedback)
	values(@A2CSchoolId,@A2CTransactionResponseEnvelopeId,@MessageId,@RefMessageId,@TimeStamp,@A2CTransactionMasterId,@IncomingSequence,@IsFeedbackMessage,@A2CMessageId,@AwardingOrganisationCentreId,@MessageAwardingOrganisationCentreId,@IsMessageLevelFeedbackMessage,@DataImportStatus,@IsRedCodeFeedback)
	
	Declare @A2CTransactionResponseEnvelopeMessagesId int
	SELECT @A2CTransactionResponseEnvelopeMessagesId = CAST(SCOPE_IdENTITY() AS INT)

	select @A2CTransactionResponseEnvelopeMessagesId

	Insert into A2CTransactionResponseEnvelopeMessagesData(SchoolId,A2CTransactionResponseEnvelopeMessageId,AwardingOrganisationCentreId,data)
	values(@A2CSchoolId, @A2CTransactionResponseEnvelopeMessagesId,@AwardingOrganisationCentreId,@data)
	
	

	declare @MaxSequenceLimit bigint
	declare @IncomingSequencePresent bigint=0
	set @MaxSequenceLimit=4294967295 
	select @IncomingSequencePresent = isnull(IncomingSequence,0)
	from AwardingOrganisationCentres
	where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId	

	if @IncomingSequence is not null and @IncomingSequence>0 and @MessageAwardingOrganisationCentreId>0
		begin	
				if @IncomingSequence=1 and @MaxSequenceLimit=@IncomingSequencePresent
				begin
						--print 'update'	
						update AwardingOrganisationCentres
						set IncomingSequence=@IncomingSequence
						where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId
				end
				else
				begin
					--print 'innn'
					declare @OutSequence bigint
					set @OutSequence=@IncomingSequence	
					if not exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId and SequenceNumber<@OutSequence)
					and (@OutSequence - 1 = @IncomingSequencePresent)
					begin
					--print 'innn111'
						while exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  and SequenceNumber= @OutSequence + 1)
						begin
							---print 'delete' + cast(@OutSequence + 1 as varchar(max))
							delete from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  and SequenceNumber= @OutSequence + 1			
			
							update A2CTransactionResponseEnvelopeMessages set DataImportStatus=0 where 			
							SchoolId=@A2CSchoolId and AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  
							and DataImportStatus=-1 and IncomingSequence=@OutSequence+ 1	

							set @OutSequence= @OutSequence+ 1	
						end
					end

					if not exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId and
						SequenceNumber<=@OutSequence)
					begin	
						--print 'insertupdate'
						if @OutSequence>@IncomingSequence or @IncomingSequencePresent + 1 = @IncomingSequence 
						begin
								--print 'update'	
								update AwardingOrganisationCentres
								set IncomingSequence=@OutSequence
								where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId
						end
					end
	
					if @OutSequence<=@IncomingSequence and @IncomingSequence > @IncomingSequencePresent + 1 
					begin
						--print 'insertoutsequence'	

						if not exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId and
						SequenceNumber=@IncomingSequence)
						begin		
							insert into OutSequence(AwardingOrganisationCentreId,SequenceNumber)
							select @MessageAwardingOrganisationCentreId,@IncomingSequence							
						end		
							update A2CTransactionResponseEnvelopeMessages set DataImportStatus=-1 where 			
							SchoolId=@A2CSchoolId and AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  
							and DataImportStatus=0 and IncomingSequence=@IncomingSequence
					end	
			end
	end

	update A2CTransactionRequests set CentreNumber=@CentreNumber where A2CTransactionRequestId=@A2CTransactionRequestId
	and SchoolId=@A2CSchoolId

	END
GO
PRINT N'Altering [dbo].[usp_SelectA2CTransactionToResend]...';


GO
ALTER Procedure [dbo].[usp_SelectA2CTransactionToResend]
(
@ListA2CTransactionRequestsId ListInt readonly,
@SchoolId int
)
as
begin

		select at.AwardingOrganisationCentreId,at.SchoolId, are.CentreNumber,am.TransactionName, 
		atm.OutgoingSequence,atm.A2CMessageGuid,atedi.FileName
		,aredata.Envelope, are.A2CTransactionRequestId
		from A2CTransactions at 
		inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId		
		inner join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 						
		inner join A2CTransactionRequestsData aredata on aredata.SchoolId=are.SchoolId and aredata.A2CTransactionRequestId=are.A2CTransactionRequestId
		inner join @ListA2CTransactionRequestsId list on list.ID=are.A2CTransactionRequestId		
		left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
		left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
		where are.SchoolId=@SchoolId
		order by AwardingOrganisationCentreId,OutgoingSequence,at.LastModifiedDate

end
GO
PRINT N'Altering [dbo].[usp_SelectEnvelopeByTransactionRequestId]...';


GO

---usp_SelectEnvelopeByTransactionRequestId 1000,1001,1270
ALTER Procedure [dbo].[usp_SelectEnvelopeByTransactionRequestId]
(
@SchoolId int,
@A2CTransactionRequestId int
)
as
begin
select envelope from A2CTransactionRequestsData where 
SchoolId=@SchoolId and A2CTransactionRequestId  = @A2CTransactionRequestId
end
GO
PRINT N'Altering [dbo].[usp_SelectEnvelopeByTransactionRequestIdAndTransactionMessageId]...';


GO
ALTER Procedure [dbo].[usp_SelectEnvelopeByTransactionRequestIdAndTransactionMessageId]
(
@SchoolId int,
@A2CTransactionRequestId int,
@A2CTransactionMessageId int
)
as
begin
select ard.Envelope from A2CTransactionRequests ar
	inner join A2CTransactionRequestsData ard on ard.SchoolId=ar.SchoolId and ard.A2CTransactionRequestId=ar.A2CTransactionRequestId
	inner join dbo.A2CTransactionMessages am on ar.SchoolId=am.SchoolId and ar.A2CTransactionId=am.A2CTransactionId
where ar.SchoolId=@SchoolId 
	and ar.A2CTransactionRequestId  = @A2CTransactionRequestId 
	and am.A2CTransactionMessageId=@A2CTransactionMessageId
end
GO
PRINT N'Altering [dbo].[usp_GetTransactionResponseEnvelopeEDI]...';


GO



ALTER  PROCEDURE [dbo].[usp_GetTransactionResponseEnvelopeEDI]
@SchoolId int,
@TransactionResponseEnvelopeEdiId int

As
Begin

	SET NOCOUNT ON;

	SELECT edi.[A2CTransactionResponseEnvelopeEDIId], edi.[AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeId], ediData.[data], [FileName], edi.[SchoolID] AS A2CSchoolId 
    FROM [dbo].[A2CTransactionResponseEnvelopeEDIs] edi
	Inner Join A2CTransactionResponseEnvelopeEDIsData ediData on edi.SchoolId=ediData.SchoolId and edi.A2CTransactionResponseEnvelopeEDIId=ediData.A2CTransactionResponseEnvelopeEDIId
	WHERE edi.[SchoolID] = @SchoolId AND edi.[A2CTransactionResponseEnvelopeEDIId] = @TransactionResponseEnvelopeEdiId 
	
End
GO
PRINT N'Altering [dbo].[usp_GetXMLFeedbackForResponseEnvelopeMessage]...';


GO

ALTER PROCEDURE [dbo].[usp_GetXMLFeedbackForResponseEnvelopeMessage]
@SchoolId AS INT,
@A2CTransactionResponseEnvelopeMessageId AS INT

AS
	SET NOCOUNT ON;

	SELECT CAST(AREMD.data AS XML) AS XMLFeedback, IsMessageLevelFeedbackMessage FROM A2CTransactionResponseEnvelopeMessages AREM
	Inner Join A2CTransactionResponseEnvelopeMessagesData AREMD on AREMD.SchoolId=AREM.SchoolId AND AREM.A2CTransactionResponseEnvelopeMessageId=AREMD.A2CTransactionResponseEnvelopeMessageId
	WHERE IsFeedbackMessage=1 
		AND AREM.A2CTransactionResponseEnvelopeMessageId = @A2CTransactionResponseEnvelopeMessageId 
		AND AREM.SchoolId = @SchoolId 
		AND DataImportStatus <> -3 --"Currupted file received"
	UNION ALL
	SELECT CAST('<FileError>File is unreadable or currupted</FileError>' AS XML) AS XMLFeedback, CAST(0 AS BIT) AS IsMessageLevelFeedbackMessage
	FROM A2CTransactionResponseEnvelopeMessages AREM	
	WHERE IsFeedbackMessage=1 
		AND AREM.A2CTransactionResponseEnvelopeMessageId = @A2CTransactionResponseEnvelopeMessageId 
		AND AREM.SchoolId = @SchoolId 
		AND DataImportStatus = -3
GO
PRINT N'Altering [dbo].[USP_IMPORTPRODUCTCATALOGE]...';


GO
ALTER PROCEDURE [dbo].[USP_IMPORTPRODUCTCATALOGE](
	@AwardingOrganisationCentreIdPrimaryKey			int, 
	@A2CTransactionResponseEnvelopeMessageId		int,
	@SchoolID										int		
) AS BEGIN
	
	BEGIN TRY

		---------------------------------------------------
		----- Variable Declarations -----------------------
		---------------------------------------------------
		--- common ---
		DECLARE 
			@AwardingOrganisationCentreId	int,
			@XMLDATA						XML,					
			@AOQEPreferenceExists			bit,
			@QEAvailabilityExists			bit,
			@QEFeeCategoryExists			bit,
			@QELearnerIdentifierExists		bit,
			@QEPreferenceExists				bit,
			@QualificationElementExists		bit,
			@TransactionName				nvarchar(100),
			@MessageID						nvarchar(100),			
			@ScreenMasterId					int,
			@CentreNumber					nvarchar(100),
			@AONumber						nvarchar(100),
			@ErrorMessage					nvarchar(MAX),
			@IsError						bit = 0
		
		--- used in cursors ---	
		DECLARE 
			@QualificationElementId			int,
			@QualificationElementGradeId	int,
			@Party_Id_Administrator			[nvarchar](32),
			@Performance_Points				Decimal(6,2),
			@Level_1_Threshold				Decimal(5,2),
			@Level_2_Threshold				Decimal(5,2),
			@Level_3_Threshold				Decimal(5,2),
			@Record_Delete_Flag				[nvarchar](1),
			@Party_RR_Reference_Type		[nvarchar](32),
			@Learner_Id_Mandatory_Flag		[nvarchar](1),
			@QE_Fee_Category_Type			[nvarchar](100),
			@Fee_Period_Start_Date_Time		[nvarchar](100),
			@Fee_Period_Title				[nvarchar](100),
			@Fee_Period_End_Date_Time		[nvarchar](100),
			@Fee_Amount						[Decimal](9,2),
			@Fee_Additional_Text			[nvarchar](400),
			@QEAvailabilityKeyEventId		int,			
			@Fee_Additional_Information		[nvarchar](400),
			@Currency_Type					[nvarchar](80),
			@Qualification_Framework_Type	[nvarchar](100),
			@Qual_Frmwrk_Level_Type			[nvarchar](20),
			@Qual_Frmwrk_Level_Tier_Type	[nvarchar](10),
			@Age_Range_Type					[nvarchar](32),
			@Party_Id_Creator				[nvarchar](32),
			@QE_Preference					[nvarchar](100),
			@QEAvailabilityMaximumMarkId	int,
			@QE_Grade						[nvarchar](50),
			@Grade_Boundary_Lower_Limit		int,
			@QE_Outcome_Type				[nvarchar](32),
			@QE_Grade_Effective_Date		Date,
			@QE_Grade_Eff_End_Date			Date,
			@QE_Grade_Description			nvarchar(1500),
			@QE_Grade_Sequence_Order		int,
			@curStatus						int
									
					
		-----------------------------------------------------------------
		----- Required data validation & Set Values for variables -------
		-----------------------------------------------------------------
		IF 
			ISNULL(@AwardingOrganisationCentreIdPrimaryKey,0)		= 0 OR			
			ISNULL(@A2CTransactionResponseEnvelopeMessageId,0)		= 0 OR
			ISNULL(@SchoolID,0)										= 0
		BEGIN
			print 'one of input parameters is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Invalid input parameter.', 16, 1);			
		END

		--Get the xml data to import
		SELECT 	
			@AwardingOrganisationCentreId=ISNULL(AT.MessageAwardingOrganisationCentreId,0),
			@XMLDATA=CAST(ATD.DATA AS XML)
		FROM 
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGES AT
			INNER JOIN A2CTRANSACTIONRESPONSEENVELOPEMESSAGESDATA ATD ON
			AT.A2CTransactionResponseEnvelopeMessageId = ATD.A2CTransactionResponseEnvelopeMessageId and
			AT.SchoolId = ATD.SchoolId and
			AT.AWARDINGORGANISATIONCENTREID = ATD.AWARDINGORGANISATIONCENTREID
		WHERE
			AT.SchoolId = @SchoolID AND
			AT.AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND
			AT.A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId
		
		IF @AwardingOrganisationCentreId=0
		BEGIN
			print 'Awarding Organisation Centre Id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Awarding Organisation Centre Id not found.', 16, 1);
		END
				
		IF @XMLDATA is null OR DATALENGTH(@XMLDATA)=0
		BEGIN
			print 'XML data not found, so stop further processing'
			set @IsError=1
			RAISERROR ('XML data not found.', 16, 1);
		END

		--Get Message ID and other details		
		select 
			@CentreNumber = C.CentreNumber 
		from 
			AwardingOrganisationCentres AOC
			inner join Centres C on AOC.CentreId=C.CentreId
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		select 
			@AONumber = AOD.AONumber 
		from 
			AwardingOrganisationCentres AOC
			inner join AwardingOrganisationDetails AOD on AOC.AwardingOrganisationDetailId=AOD.AwardingOrganisationDetailId
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		Select 
			@ScreenMasterId = SM.ScreenMasterId 
		from 
			ScreenMasters SM 
		where 
			SM.ScreenName='ImportProductCatalogue'

		IF @ScreenMasterId=0
		BEGIN
			print 'Screen Master Id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Screen Master Id not found.', 16, 1);			
		END			

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@TransactionName = CN.value('(a2c:TransactionName/text())[1]','[nvarchar](100)')
		From	
			@XMLDATA.nodes('/a2c:A2CMessage/a2c:MsgHeader/a2c:TransactionInfo') as Q(CN) 

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@MessageID = CN.value('(a2c:MessageID/text())[1]','[nvarchar](100)')
		From	
			@XMLDATA.nodes('/a2c:A2CMessage/a2c:MsgHeader/a2c:MsgInfo') as Q(CN) 

		IF @MessageID IS NULL
			SET @MessageID=''

		---------------------------------------------------
		---------------------------------------------------
		----- Mandatory/Primary Datablocks Validation -----
		---------------------------------------------------
		---------------------------------------------------	
		--In case a mandatory or primary datablock is missing from the catalogue, 
		--the error should be logged into Business error logs and 
		--the XML should not be imported. It should be ignored.	

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@AOQEPreferenceExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference/a2c:AOQEPreference_CN/a2c:AOQEPreference_ID'),
			@QEAvailabilityExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN/a2c:QEAvailability_ID'),
			@QEFeeCategoryExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QEFeeCategory_DS/a2c:QEFeeCategory/a2c:QEFeeCategory_ID'),
			@QELearnerIdentifierExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QELearnerIdentifier_DS/a2c:QELearnerIdentifier/a2c:QELearnerIdentifier_CN/a2c:QELearnerIdentifier_ID'),
			@QEPreferenceExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference/a2c:AOQEPreference_CN/a2c:AOQEPreference_ID'),
			@QualificationElementExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QualificationElement/a2c:QualificationElement_CN/a2c:QualificationElement_ID')
		
		IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUE'
		BEGIN
			IF 
				(@AOQEPreferenceExists = 1		AND
				@QEAvailabilityExists = 1		AND
				@QEFeeCategoryExists = 1		AND
				@QELearnerIdentifierExists = 1	AND
				@QEPreferenceExists = 1			AND
				@QualificationElementExists = 1) 
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUE Transaction, Mandatory/Primary Datablocks exist.'
			END
			ELSE
			BEGIN
			
				print 'inside PROCESSPRODUCTCATALOGUE Transaction, Mandatory/Primary Datablock(s) missing, so cannot process this XML, stop further processing & EXIT'

				IF @AOQEPreferenceExists = 0
				BEGIN
					PRINT 'Datablock AO QE Preference is missing'
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock AO QE Preference is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)		
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEAvailabilityExists = 0
				BEGIN
					PRINT 'Datablock QE Availability is missing'
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Availability is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEFeeCategoryExists = 0
				BEGIN
					PRINT 'Datablock QE Fee Category is missing'
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Fee Category is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''		
					set @IsError=1
				END

				IF @QELearnerIdentifierExists = 0
				BEGIN
					PRINT 'Datablock QE Learner Identifier is missing'
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Learner Identifier is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)		
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEPreferenceExists = 0
				BEGIN
					PRINT 'Datablock QE Preference is missing'
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Preference is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QualificationElementExists = 0
				BEGIN
					PRINT 'Datablock Qualification Element is missing'
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock Qualification Element is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END				

				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUESTATIC'
		BEGIN
			IF @QualificationElementExists = 1
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUESTATIC Transaction, Mandatory/Primary Datablock exists.'
			END
			ELSE
			BEGIN
				PRINT 'Datablock Qualification Element is missing'
				SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock Qualification Element is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
		
				INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)

				SET @ErrorMessage = ''
				set @IsError=1

				print 'inside PROCESSPRODUCTCATALOGUESTATIC Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'

				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUEINSTANCE'
		BEGIN
			IF @QEAvailabilityExists = 1
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUEINSTANCE Transaction, Mandatory/Primary Datablock exists.'
			END
			ELSE
			BEGIN
				PRINT 'Datablock QE Availability is missing'
				SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Availability is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
		
				INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)

				SET @ErrorMessage = ''
				set @IsError=1

				print 'inside PROCESSPRODUCTCATALOGUEINSTANCE Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'
				
				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE
		BEGIN
			print 'Transaction Name OTHER THAN PRODUCT CATALOGUE, so stop further processing'
			set @IsError=1			
			RAISERROR ('Transaction Name OTHER THAN PRODUCT CATALOGUE', 16, 1);
		END	
		---------------------------------------------------
		----- Datablocks Validation Finish ----------------
		---------------------------------------------------

		---------------------------------------------------
		---------------------------------------------------
		-----STEP 1: IMPORT QUALIFICATION ELEMENTS---------
		---------------------------------------------------
		---------------------------------------------------

		BEGIN TRY

			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID], 
				QE.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]', '[nvarchar](50)') AO_Qualification_Element_Id,
				QE.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]', '[nvarchar](32)') Qualification_Element_Type,
				QE.value('(a2c:QE_Description/text())[1]','[nvarchar](3500)') QE_Description,
				QE.value('(a2c:Qualification_Element_Title/text())[1]','[nvarchar](200)') Qualification_Element_Title,
				QE.value('(a2c:QE_Short_Title/text())[1]','[nvarchar](50)') QE_Short_Title,
				QE.value('(a2c:QE_Effective_Version_Date/text())[1]','[nvarchar](100)') QE_Effective_Version_Date,
				QE.value('(a2c:QE_Effective_Version_End_Date/text())[1]','[nvarchar](100)') QE_Effective_Version_End_Date,
				QE.value('(a2c:Private_Learner_Type/text())[1]','[nvarchar](32)') Private_Learner_Type,
				QE.value('(a2c:QE_Moderation_Type/text())[1]','[nvarchar](32)') QE_Moderation_Type,
				QE.value('(a2c:First_Language_Required_Flag/text())[1]','[nvarchar](1)') First_Language_Required_Flag,
				QE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag,
				QE.value('(a2c:Qualification_Reference_Number/text())[1]','[nvarchar](10)') Qualification_Reference_Number,
				QE.value('(a2c:Learning_Aim_Code/text())[1]','[nvarchar](10)') Learning_Aim_Code,
				QE.value('(a2c:QE_Admin_Code/text())[1]','[nvarchar](50)') QE_Admin_Code,
				QE.value('(a2c:Scheme/a2c:Assessment_Max_Learner_Age/text())[1]','int') Assessment_Max_Learner_Age,
				QE.value('(a2c:Scheme/a2c:Assessment_Min_Learner_Age/text())[1]','int') Assessment_Min_Learner_Age,
				QE.value('(a2c:Scheme/a2c:First_Teaching_Date/text())[1]','[nvarchar](100)') First_Teaching_Date,
				QE.value('(a2c:Scheme/a2c:Last_Teaching_Date/text())[1]','[nvarchar](100)') Last_Teaching_Date,
				QE.value('(a2c:Scheme/a2c:QE_Centre_Auth_Agreement_Text/text())[1]','[nvarchar](400)') QE_Centre_Auth_Agreement_Text,
				QE.value('(a2c:Scheme/a2c:Qualification_Type/text())[1]','[nvarchar](50)') Qualification_Type,
				QE.value('(a2c:Scheme/a2c:Series_Based_Flag/text())[1]','[nvarchar](1)') Series_Based_Flag,
				QE.value('(a2c:Scheme/a2c:QE_Website_URL_Locator_Id/text())[1]','[nvarchar](1000)') QE_Website_URL_Locator_Id,
				QE.value('(a2c:Scheme/a2c:Date_Of_Birth_Reqd_Flag/text())[1]','[nvarchar](1)') Date_Of_Birth_Reqd_Flag,
				QE.value('(a2c:Scheme/a2c:Legal_Sex_Required_Flag/text())[1]','[nvarchar](1)') Legal_Sex_Required_Flag,
				QE.value('(a2c:Scheme/a2c:QE_Availability_Text/text())[1]','[nvarchar](3000)') QE_Availability_Text,
				QE.value('(a2c:Award/a2c:Accreditation_End_Review_Date/text())[1]','[nvarchar](100)') Accreditation_End_Review_Date,
				QE.value('(a2c:Award/a2c:Accreditation_Start_Date/text())[1]','[nvarchar](100)') Accreditation_Start_Date,
				QE.value('(a2c:Award/a2c:AO_Accred_Version_Number/text())[1]','[nvarchar](4)') AO_Accred_Version_Number,
				QE.value('(a2c:Award/a2c:Assessment_Language_Type/text())[1]','[nvarchar](50)') Assessment_Language_Type,
				QE.value('(a2c:Award/a2c:Award_Level_Type/text())[1]','[nvarchar](32)') Award_Level_Type,
				QE.value('(a2c:Award/a2c:Award_Type/text())[1]','[nvarchar](60)') Award_Type,
				QE.value('(a2c:Award/a2c:Cert_of_Unit_Credit_Issued_Flag/text())[1]','[nvarchar](1)') Cert_of_Unit_Credit_Issued_Flag,
				QE.value('(a2c:Award/a2c:Certification_End_Date/text())[1]','[nvarchar](100)') Certification_End_Date,
				QE.value('(a2c:Award/a2c:Certification_Start_Date/text())[1]','[nvarchar](100)') Certification_Start_Date,
				QE.value('(a2c:Award/a2c:Contributing_Units_Listed_Flag/text())[1]','[nvarchar](1)') Contributing_Units_Listed_Flag,
				QE.value('(a2c:Award/a2c:Course_Length_Type/text())[1]','[nvarchar](32)') Course_Length_Type,
				QE.value('(a2c:Award/a2c:Endorsed_Title_Reqd_Flag/text())[1]','[nvarchar](1)') Endorsed_Title_Reqd_Flag,
				QE.value('(a2c:Award/a2c:Guided_Learning_Hours_Max/text())[1]','int') Guided_Learning_Hours_Max,
				QE.value('(a2c:Award/a2c:Guided_Learning_Hours_Min/text())[1]','int') Guided_Learning_Hours_Min,
				QE.value('(a2c:Award/a2c:Operational_End_Date/text())[1]','[nvarchar](100)') Operational_End_Date,
				QE.value('(a2c:Award/a2c:Operational_Start_Date/text())[1]','[nvarchar](100)') Operational_Start_Date,
				QE.value('(a2c:Award/a2c:QE_Delivery_Model_Type/text())[1]','[nvarchar](32)') QE_Delivery_Model_Type,
				QE.value('(a2c:Award/a2c:QE_Evid_Reqmnt_Provided_Flag/text())[1]','[nvarchar](1)') QE_Evid_Reqmnt_Provided_Flag,
				QE.value('(a2c:Award/a2c:QE_Evidence_Requirement_Type/text())[1]','[nvarchar](32)') QE_Evidence_Requirement_Type,
				QE.value('(a2c:Award/a2c:Registration_Expiry_Months/text())[1]','int') Registration_Expiry_Months,
				QE.value('(a2c:Award/a2c:Resit_Rule_Text/text())[1]','[nvarchar](400)') Resit_Rule_Text,
				QE.value('(a2c:Award/a2c:Statement_Of_Credit_Issued_Flag/text())[1]','[nvarchar](1)') Statement_Of_Credit_Issued_Flag,
				QE.value('(a2c:Award/a2c:Study_Guide_Available_Type/text())[1]','[nvarchar](20)') Study_Guide_Available_Type,
				QE.value('(a2c:Award/a2c:Study_Guide_Details/text())[1]','[nvarchar](400)') Study_Guide_Details,
				QE.value('(a2c:Award/a2c:Study_Guide_Reference/text())[1]','[nvarchar](100)') Study_Guide_Reference,
				QE.value('(a2c:Award/a2c:Study_Guide_Reference_Type/text())[1]','[nvarchar](32)') Study_Guide_Reference_Type,
				QE.value('(a2c:Award/a2c:QE_Classification/text())[1]','[nvarchar](32)') QE_Classification,
				QE.value('(a2c:Award/a2c:Party_Id_Accreditor/text())[1]','[nvarchar](32)') Party_Id_Accreditor,
				QE.value('(a2c:Award/a2c:Party_Id_Sector_Lead/text())[1]','[nvarchar](32)') Party_Id_Sector_Lead,
				QE.value('(a2c:Award/a2c:Party_Role_Type_Assessor/text())[1]','[nvarchar](50)') Party_Role_Type_Assessor,
				QE.value('(a2c:LearningUnit/a2c:Learning_Unit_Level_Type/text())[1]','[nvarchar](32)') Learning_Unit_Level_Type,
				QE.value('(a2c:LearningUnit/a2c:Maximum_Resits_Allowed/text())[1]','int') Maximum_Resits_Allowed,
				QE.value('(a2c:Assessable/a2c:Extra_Time_Required_Flag/text())[1]','[nvarchar](1)') Extra_Time_Required_Flag,
				QE.value('(a2c:Assessable/a2c:Assessment_Method_Type/text())[1]','[nvarchar](40)') Assessment_Method_Type,
				QE.value('(a2c:Assessable/a2c:Assmnt_Actual_DateTime_Reqd_Flag/text())[1]','[nvarchar](1)') Assmnt_Actual_DateTime_Reqd_Flag,
				QE.value('(a2c:Assessable/a2c:Attendance_Data_Required_Flag/text())[1]','[nvarchar](1)') Attendance_Data_Required_Flag,
				QE.value('(a2c:Assessable/a2c:Cambridge_Assmnt_TimeZone_Num/text())[1]','int') Cambridge_Assmnt_TimeZone_Num,
				QE.value('(a2c:Assessable/a2c:Carry_Forward_Permissible_Flag/text())[1]','[nvarchar](1)') Carry_Forward_Permissible_Flag,
				QE.value('(a2c:Assessable/a2c:Maximum_Extra_Time_Minutes/text())[1]','int') Maximum_Extra_Time_Minutes,
				QE.value('(a2c:Assessable/a2c:On_Demand_Flag/text())[1]','[nvarchar](1)') On_Demand_Flag,
				QE.value('(a2c:Assessable/a2c:QE_Timetabled_Flag/text())[1]','[nvarchar](1)') QE_Timetabled_Flag,
				QE.value('(a2c:Assessable/a2c:Test_Day_Photograph_Reqd_Flag/text())[1]','[nvarchar](1)') Test_Day_Photograph_Reqd_Flag,
				QE.value('(a2c:Assessable/a2c:Tier_Level_Type/text())[1]','[nvarchar](20)') Tier_Level_Type,
				QE.value('(a2c:Assessable/a2c:Tier_Level_Common_Reference/text())[1]','[nvarchar](12)') Tier_Level_Common_Reference,
				QE.value('(a2c:Assessable/a2c:Time_Allowed_Mins/text())[1]','int') Time_Allowed_Mins,
				QE.value('(a2c:Assessable/a2c:Party_Role_Type_Assessor/text())[1]','[nvarchar](50)') AssessableParty_Role_Type_Assessor,
				QE.value('(a2c:Assessable/a2c:Party_Role_Type_ADT_Decider/text())[1]','[nvarchar](50)') Party_Role_Type_ADT_Decider,
				QE.value('(a2c:Assessable/a2c:Assessment_Medium_Type/text())[1]','[nvarchar](20)') Assessment_Medium_Type,
				QE.value('(a2c:Pathway/a2c:Equals_Indicator_Flag/text())[1]','[nvarchar](1)') Equals_Indicator_Flag,
				QE.value('(a2c:Pathway/a2c:Mandatory_In_Group_Flag/text())[1]','[nvarchar](1)') Mandatory_In_Group_Flag,
				QE.value('(a2c:Pathway/a2c:Minimum_Unit_Selection/text())[1]','int') Minimum_Unit_Selection,
				QE.value('(a2c:Pathway/a2c:Maximum_Unit_Selection/text())[1]','int') Maximum_Unit_Selection,
				QE.value('(a2c:Pathway/a2c:Minimum_Pathway_Selection/text())[1]','int') Minimum_Pathway_Selection,
				QE.value('(a2c:Pathway/a2c:Maximum_Pathway_Selection/text())[1]','int') Maximum_Pathway_Selection,
				QE.value('(a2c:Pathway/a2c:Minimum_Credit_Value/text())[1]','int') Minimum_Credit_Value
			into 
				#QE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QualificationElement/a2c:QualificationElement_CN') as QualificationElement_CN(QE) 

			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QE 
					WHERE ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')='')
			BEGIN
				PRINT 'Qualification Element - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type) 'RowRank' 
			FROM 
				#QE)
			SELECT 
				* 
			INTO 
				#QEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type 
					ORDER BY 
						[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type) 'RowRank' 
				FROM #QE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock Qualification Element - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id + ', Qualification_Element_Type=' + Qualification_Element_Type + ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy pk column to temp table
			ALTER TABLE #QE ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]
				
			---------------------------------------------------
			-----STEP 1.1: IMPORT [QualificationElement]-------
			---------------------------------------------------
			BEGIN TRY

				MERGE 
					[dbo].[QualificationElement] AS [target]
				USING 
					(SELECT * from #QE) AS source
				ON 
					([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
					[target].[QualificationElementId] = source.[QualificationElementId])
				WHEN MATCHED THEN 
				UPDATE SET 
					[QE_Description] = LTRIM(RTRIM(source.[QE_Description])),
					[Qualification_Element_Title] = LTRIM(RTRIM(source.[Qualification_Element_Title])),
					[QE_Short_Title] = LTRIM(RTRIM(source.[QE_Short_Title])),
					[QE_Effective_Version_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_Date]),
					[QE_Effective_Version_End_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_End_Date]),
					[Private_Learner_Type] = LTRIM(RTRIM(source.[Private_Learner_Type])),
					[QE_Moderation_Type] = LTRIM(RTRIM(source.[QE_Moderation_Type])),
					[First_Language_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[First_Language_Required_Flag]),
					[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]),
					[Qualification_Reference_Number] = LTRIM(RTRIM(source.[Qualification_Reference_Number])),
					[Learning_Aim_Code] = LTRIM(RTRIM(source.[Learning_Aim_Code])),
					[QE_Admin_Code] = LTRIM(RTRIM(source.[QE_Admin_Code]))
				WHEN NOT MATCHED THEN	
				INSERT (
					[AwardingOrganisationCentreId],
					[AO_Qualification_Element_Id],
					[Qualification_Element_Type],
					[QE_Description],
					[Qualification_Element_Title],
					[QE_Short_Title],
					[QE_Effective_Version_Date],
					[QE_Effective_Version_End_Date],
					[Private_Learner_Type],
					[QE_Moderation_Type],
					[First_Language_Required_Flag],
					[Record_Delete_Flag],
					[Qualification_Reference_Number],
					[Learning_Aim_Code],
					[QE_Admin_Code])
				VALUES (
					source.[AOCentreID],
					source.[AO_Qualification_Element_Id],
					LTRIM(RTRIM(source.[Qualification_Element_Type])),
					LTRIM(RTRIM(source.[QE_Description])),
					LTRIM(RTRIM(source.[Qualification_Element_Title])),
					LTRIM(RTRIM(source.[QE_Short_Title])),
					DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_Date]),
					DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_End_Date]),
					LTRIM(RTRIM(source.[Private_Learner_Type])),
					LTRIM(RTRIM(source.[QE_Moderation_Type])),
					DBO.FN_A2C_GETFLAG(source.[First_Language_Required_Flag]), 
					DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]),
					LTRIM(RTRIM(source.[Qualification_Reference_Number])),
					LTRIM(RTRIM(source.[Learning_Aim_Code])),
					LTRIM(RTRIM(source.[QE_Admin_Code]))
					);

				--Update newly created PKs of [dbo].[QualificationElement]
				Update 
					Q 
				set 
					[QualificationElementId]=QE.QualificationElementId
				from 
					#QE Q inner join [dbo].[QualificationElement] QE
				on 
					Q.AOCentreID=QE.AwardingOrganisationCentreId 
					and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
					and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Qualification Element block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, 
					@MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Element'
					
			END CATCH;

			
			---------------------------------------------------
			-----STEP 1.2: IMPORT [Scheme]---------------------
			---------------------------------------------------
			BEGIN TRY
				
				MERGE [dbo].[Scheme] AS [target]
				USING (SELECT * from #QE where #QE.Qualification_Element_Type='Scheme' and #QE.[QualificationElementId] is not null) AS source
				ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
					[target].[QualificationElementId] = source.[QualificationElementId])
				WHEN MATCHED THEN 
				UPDATE SET 
					[Assessment_Max_Learner_Age] = source.[Assessment_Max_Learner_Age],
					[Assessment_Min_Learner_Age] = source.[Assessment_Min_Learner_Age],
					[First_Teaching_Date] = DBO.FN_A2C_GETDATETIME(source.[First_Teaching_Date]),
					[Last_Teaching_Date] = DBO.FN_A2C_GETDATETIME(source.[Last_Teaching_Date]),
					[QE_Centre_Auth_Agreement_Text] = source.[QE_Centre_Auth_Agreement_Text],
					[Qualification_Type] = source.[Qualification_Type],
					[Series_Based_Flag] = DBO.FN_A2C_GETFLAG(source.[Series_Based_Flag]),
					[QE_Website_URL_Locator_Id] = source.[QE_Website_URL_Locator_Id],
					[Date_Of_Birth_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Date_Of_Birth_Reqd_Flag]),
					[Legal_Sex_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Legal_Sex_Required_Flag]),
					[QE_Availability_Text] = source.[QE_Availability_Text]
				WHEN NOT MATCHED THEN	
				INSERT (
					[QualificationElementId],
					[AwardingOrganisationCentreId],
					[Assessment_Max_Learner_Age],
					[Assessment_Min_Learner_Age],
					[First_Teaching_Date],
					[Last_Teaching_Date],
					[QE_Centre_Auth_Agreement_Text],
					[Qualification_Type],
					[Series_Based_Flag],
					[QE_Website_URL_Locator_Id],
					[Date_Of_Birth_Reqd_Flag],
					[Legal_Sex_Required_Flag],
					[QE_Availability_Text])
				VALUES (
					source.[QualificationElementId],
					source.[AOCentreID],
					source.[Assessment_Max_Learner_Age],
					source.[Assessment_Min_Learner_Age],
					DBO.FN_A2C_GETDATETIME(source.[First_Teaching_Date]),
					DBO.FN_A2C_GETDATETIME(source.[Last_Teaching_Date]),
					source.[QE_Centre_Auth_Agreement_Text],
					source.[Qualification_Type],
					DBO.FN_A2C_GETFLAG(source.[Series_Based_Flag]),
					source.[QE_Website_URL_Locator_Id],
					DBO.FN_A2C_GETFLAG(source.[Date_Of_Birth_Reqd_Flag]),
					DBO.FN_A2C_GETFLAG(source.[Legal_Sex_Required_Flag]),
					source.[QE_Availability_Text]
					);

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Scheme block'

				set @IsError=1
		
				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Scheme'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.3: IMPORT [Award]----------------------
			---------------------------------------------------
			BEGIN TRY

			MERGE [dbo].[Award] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Award' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Accreditation_End_Review_Date] = DBO.FN_A2C_GETDATETIME(source.[Accreditation_End_Review_Date]),
				[Accreditation_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Accreditation_Start_Date]),
				[AO_Accred_Version_Number] = 		source.[AO_Accred_Version_Number],
				[Assessment_Language_Type] = 		source.[Assessment_Language_Type],
				[Award_Level_Type] = 		source.[Award_Level_Type],
				[Award_Type] = 		source.[Award_Type],
				[Cert_of_Unit_Credit_Issued_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Cert_of_Unit_Credit_Issued_Flag]),
				[Certification_End_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Certification_End_Date]),
				[Certification_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Certification_Start_Date]),
				[Contributing_Units_Listed_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Contributing_Units_Listed_Flag]),
				[Course_Length_Type] = 		source.[Course_Length_Type],
				[Endorsed_Title_Reqd_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Endorsed_Title_Reqd_Flag]),
				[Guided_Learning_Hours_Max] = 		source.[Guided_Learning_Hours_Max],
				[Guided_Learning_Hours_Min] = 		source.[Guided_Learning_Hours_Min],
				[Operational_End_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Operational_End_Date]),
				[Operational_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Operational_Start_Date]),
				[QE_Delivery_Model_Type] = 		source.[QE_Delivery_Model_Type],
				[QE_Evid_Reqmnt_Provided_Flag] = 		DBO.FN_A2C_GETFLAG(source.[QE_Evid_Reqmnt_Provided_Flag]),
				[QE_Evidence_Requirement_Type] = 		source.[QE_Evidence_Requirement_Type],
				[Registration_Expiry_Months] = 		source.[Registration_Expiry_Months],
				[Resit_Rule_Text] = 		source.[Resit_Rule_Text],
				[Statement_Of_Credit_Issued_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Statement_Of_Credit_Issued_Flag]),
				[Study_Guide_Available_Type] = 		source.[Study_Guide_Available_Type],
				[Study_Guide_Details] = 		source.[Study_Guide_Details],
				[Study_Guide_Reference] = 		source.[Study_Guide_Reference],
				[Study_Guide_Reference_Type] = 		source.[Study_Guide_Reference_Type],
				[QE_Classification] = 		source.[QE_Classification],
				[Party_Id_Accreditor] = 		source.[Party_Id_Accreditor],
				[Party_Id_Sector_Lead] = 		source.[Party_Id_Sector_Lead],
				[Party_Role_Type_Assessor] = 		source.[Party_Role_Type_Assessor]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Accreditation_End_Review_Date],
				[Accreditation_Start_Date],
				[AO_Accred_Version_Number],
				[Assessment_Language_Type],
				[Award_Level_Type],
				[Award_Type],
				[Cert_of_Unit_Credit_Issued_Flag],
				[Certification_End_Date],
				[Certification_Start_Date],
				[Contributing_Units_Listed_Flag],
				[Course_Length_Type],
				[Endorsed_Title_Reqd_Flag],
				[Guided_Learning_Hours_Max],
				[Guided_Learning_Hours_Min],
				[Operational_End_Date],
				[Operational_Start_Date],
				[QE_Delivery_Model_Type],
				[QE_Evid_Reqmnt_Provided_Flag],
				[QE_Evidence_Requirement_Type],
				[Registration_Expiry_Months],
				[Resit_Rule_Text],
				[Statement_Of_Credit_Issued_Flag],
				[Study_Guide_Available_Type],
				[Study_Guide_Details],
				[Study_Guide_Reference],
				[Study_Guide_Reference_Type],
				[QE_Classification],
				[Party_Id_Accreditor],
				[Party_Id_Sector_Lead],
				[Party_Role_Type_Assessor])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETDATETIME(source.[Accreditation_End_Review_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Accreditation_Start_Date]),
				source.[AO_Accred_Version_Number],
				source.[Assessment_Language_Type],
				source.[Award_Level_Type],
				source.[Award_Type],
				DBO.FN_A2C_GETFLAG(source.[Cert_of_Unit_Credit_Issued_Flag]),
				DBO.FN_A2C_GETDATETIME(source.[Certification_End_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Certification_Start_Date]),
				DBO.FN_A2C_GETFLAG(source.[Contributing_Units_Listed_Flag]),
				source.[Course_Length_Type],
				DBO.FN_A2C_GETFLAG(source.[Endorsed_Title_Reqd_Flag]),
				source.[Guided_Learning_Hours_Max],
				source.[Guided_Learning_Hours_Min],
				DBO.FN_A2C_GETDATETIME(source.[Operational_End_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Operational_Start_Date]),
				source.[QE_Delivery_Model_Type],
				DBO.FN_A2C_GETFLAG(source.[QE_Evid_Reqmnt_Provided_Flag]),
				source.[QE_Evidence_Requirement_Type],
				source.[Registration_Expiry_Months],
				source.[Resit_Rule_Text],
				DBO.FN_A2C_GETFLAG(source.[Statement_Of_Credit_Issued_Flag]),
				source.[Study_Guide_Available_Type],
				source.[Study_Guide_Details],
				source.[Study_Guide_Reference],
				source.[Study_Guide_Reference_Type],
				source.[QE_Classification],
				source.[Party_Id_Accreditor],
				source.[Party_Id_Sector_Lead],
				source.[Party_Role_Type_Assessor]
				);

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Award block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Award'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.4: IMPORT [Learning Unit]--------------
			---------------------------------------------------
			BEGIN TRY

			MERGE [dbo].[LearningUnit] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Learning Unit' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Learning_Unit_Level_Type] = source.[Learning_Unit_Level_Type],
				[Maximum_Resits_Allowed] = source.[Maximum_Resits_Allowed]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Learning_Unit_Level_Type],
				[Maximum_Resits_Allowed])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				source.[Learning_Unit_Level_Type],
				source.[Maximum_Resits_Allowed]
				);
	
			END TRY
			BEGIN CATCH
				PRINT 'Exception in Learning Unit block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Learning Unit'
					
			END CATCH;
		
			---------------------------------------------------
			-----STEP 1.5: IMPORT [Assessable]-----------------
			---------------------------------------------------
			BEGIN TRY 
						
			MERGE [dbo].[Assessable] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Assessable' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Extra_Time_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Extra_Time_Required_Flag]),
				[Assessment_Method_Type] = LTRIM(RTRIM(source.[Assessment_Method_Type])),
				[Assmnt_Actual_DateTime_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Assmnt_Actual_DateTime_Reqd_Flag]),
				[Attendance_Data_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Attendance_Data_Required_Flag]),
				[Cambridge_Assmnt_TimeZone_Num] = source.[Cambridge_Assmnt_TimeZone_Num],
				[Carry_Forward_Permissible_Flag] = DBO.FN_A2C_GETFLAG(source.[Carry_Forward_Permissible_Flag]),
				[Maximum_Extra_Time_Minutes] = source.[Maximum_Extra_Time_Minutes],
				[On_Demand_Flag] = DBO.FN_A2C_GETFLAG(source.[On_Demand_Flag]),
				[QE_Timetabled_Flag] = DBO.FN_A2C_GETFLAG(source.[QE_Timetabled_Flag]),
				[Test_Day_Photograph_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Test_Day_Photograph_Reqd_Flag]),
				[Tier_Level_Type] = LTRIM(RTRIM(source.[Tier_Level_Type])),
				[Tier_Level_Common_Reference] = LTRIM(RTRIM(source.[Tier_Level_Common_Reference])),
				[Time_Allowed_Mins] = source.[Time_Allowed_Mins],
				[Party_Role_Type_Assessor] = LTRIM(RTRIM(source.[AssessableParty_Role_Type_Assessor])),
				[Party_Role_Type_ADT_Decider] = LTRIM(RTRIM(source.[Party_Role_Type_ADT_Decider])),
				[Assessment_Medium_Type] = LTRIM(RTRIM(source.[Assessment_Medium_Type]))
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Extra_Time_Required_Flag],
				[Assessment_Method_Type],
				[Assmnt_Actual_DateTime_Reqd_Flag],
				[Attendance_Data_Required_Flag],
				[Cambridge_Assmnt_TimeZone_Num],
				[Carry_Forward_Permissible_Flag],
				[Maximum_Extra_Time_Minutes],
				[On_Demand_Flag],
				[QE_Timetabled_Flag],
				[Test_Day_Photograph_Reqd_Flag],
				[Tier_Level_Type],
				[Tier_Level_Common_Reference],
				[Time_Allowed_Mins],
				[Party_Role_Type_Assessor],
				[Party_Role_Type_ADT_Decider],
				[Assessment_Medium_Type])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETFLAG(source.[Extra_Time_Required_Flag]),
				LTRIM(RTRIM(source.[Assessment_Method_Type])),
				DBO.FN_A2C_GETFLAG(source.[Assmnt_Actual_DateTime_Reqd_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Attendance_Data_Required_Flag]),
				source.[Cambridge_Assmnt_TimeZone_Num],
				DBO.FN_A2C_GETFLAG(source.[Carry_Forward_Permissible_Flag]),
				source.[Maximum_Extra_Time_Minutes],
				DBO.FN_A2C_GETFLAG(source.[On_Demand_Flag]),
				DBO.FN_A2C_GETFLAG(source.[QE_Timetabled_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Test_Day_Photograph_Reqd_Flag]),
				LTRIM(RTRIM(source.[Tier_Level_Type])),
				LTRIM(RTRIM(source.[Tier_Level_Common_Reference])),
				source.[Time_Allowed_Mins],
				LTRIM(RTRIM(source.[AssessableParty_Role_Type_Assessor])),
				LTRIM(RTRIM(source.[Party_Role_Type_ADT_Decider])),
				LTRIM(RTRIM(source.[Assessment_Medium_Type])));

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Assessable block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Assessable'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.6: IMPORT [Pathway]--------------------
			---------------------------------------------------
			BEGIN TRY
		
			MERGE [dbo].[Pathway] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Pathway' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Equals_Indicator_Flag] = DBO.FN_A2C_GETFLAG(source.[Equals_Indicator_Flag]),
				[Mandatory_In_Group_Flag] = DBO.FN_A2C_GETFLAG(source.[Mandatory_In_Group_Flag]),
				[Minimum_Unit_Selection] = source.[Minimum_Unit_Selection],
				[Maximum_Unit_Selection] = source.[Maximum_Unit_Selection],
				[Minimum_Pathway_Selection] = source.[Minimum_Pathway_Selection],
				[Maximum_Pathway_Selection] = source.[Maximum_Pathway_Selection],
				[Minimum_Credit_Value] = source.[Minimum_Credit_Value]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Equals_Indicator_Flag],
				[Mandatory_In_Group_Flag],
				[Minimum_Unit_Selection],
				[Maximum_Unit_Selection],
				[Minimum_Pathway_Selection],
				[Maximum_Pathway_Selection],
				[Minimum_Credit_Value])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETFLAG(source.[Equals_Indicator_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Mandatory_In_Group_Flag]),
				source.[Minimum_Unit_Selection],
				source.[Maximum_Unit_Selection],
				source.[Minimum_Pathway_Selection],
				source.[Maximum_Pathway_Selection],
				source.[Minimum_Credit_Value]);

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QE', 'U') IS NOT NULL
			  DROP TABLE #QE;

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Pathway block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Pathway'
					
			END CATCH;
		END TRY
		BEGIN CATCH
			PRINT 'Exception in QUALIFICATION ELEMENTS - Common block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QUALIFICATION ELEMENTS - Common'
					
		END CATCH;

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 2: IMPORT QE Relationships -------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QER.value('(a2c:QERelationship_ID/a2c:AO_Party_Id_Parent/text())[1]','[nvarchar](32)') AO_Party_Id_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:AO_QE_Id_Parent/text())[1]','[nvarchar](50)') AO_QE_Id_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:QE_Type_Parent/text())[1]','[nvarchar](32)') QE_Type_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:AO_Party_Id_Child/text())[1]','[nvarchar](32)') AO_Party_Id_Child,
				QER.value('(a2c:QERelationship_ID/a2c:AO_QE_Id_Child/text())[1]','[nvarchar](50)') AO_QE_Id_Child,
				QER.value('(a2c:QERelationship_ID/a2c:QE_Type_Child/text())[1]','[nvarchar](32)') QE_Type_Child,
				QER.value('(a2c:QE_Relationship_Type/text())[1]','[nvarchar](32)') QE_Relationship_Type,
				QER.value('(a2c:QE_Relationship_Rule_Type/text())[1]','[nvarchar](20)') QE_Relationship_Rule_Type,
				QER.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into 
				#QER
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QERelationship') as QERelationship(QER) 
	
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QER 
					WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')='')
			BEGIN
				PRINT 'QE Relationship - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Relationship" - Record AO_QE_Id_Parent="' +  ISNULL(AO_QE_Id_Parent,'') 
					+ '", QE_Type_Parent="' + ISNULL(QE_Type_Parent,'') 
					+ '", AO_QE_Id_Child="' + ISNULL(AO_QE_Id_Child,'') 
					+ '", QE_Type_Child="' + ISNULL(QE_Type_Child,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QER 
				WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QER 
				WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child, QE_Type_Child   
					ORDER BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child, QE_Type_Child ) 'RowRank' 
				FROM 
					#QER)
			SELECT 
				* 
			INTO 
				#QERDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QERDUPS)
			BEGIN

				print 'duplicate records found in QE Relationship'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child, QE_Type_Child   
					ORDER BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child, QE_Type_Child ) 'RowRank' 
				FROM 
					#QER)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Relationship - Record AO_QE_Id_Parent=' 
					+  AO_QE_Id_Parent + ', QE_Type_Parent=' + QE_Type_Parent + ', AO_QE_Id_Child=' 
					+ AO_QE_Id_Child + ', QE_Type_Child=' + QE_Type_Child + ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QERDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QERDUPS', 'U') IS NOT NULL
				DROP TABLE #QERDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy ref columns to temp table for parent and child QEs
			ALTER TABLE #QER ADD [ParentQEId] INT null, [ChildQEId] INT null

			--Update existing IDs for parent QEs
			Update Q 
				set [ParentQEId]=QE.QualificationElementId
			from 
				#QER Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Parent=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Parent=QE.[Qualification_Element_Type]

			--Update existing IDs for child QEs
			Update Q 
				set [ChildQEId]=QE.QualificationElementId
			from 
				#QER Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Child=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Child=QE.[Qualification_Element_Type]
	
			--merge [QERelationship]
			MERGE [dbo].[QERelationship] AS [target]
			USING (SELECT * from #QER where [ParentQEId] is not null and [ChildQEId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId_Parent] = source.[ParentQEId] AND
				[target].[QualificationElementId_Child] = source.[ChildQEId])
			WHEN MATCHED THEN 
			UPDATE SET			
				[QE_Relationship_Type] = source.[QE_Relationship_Type],
				[QE_Relationship_Rule_Type] = source.[QE_Relationship_Rule_Type],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId_Parent],
				[QualificationElementId_Child],
				[QE_Relationship_Type],
				[QE_Relationship_Rule_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[ParentQEId],
				source.[ChildQEId],
				source.[QE_Relationship_Type],
				source.[QE_Relationship_Rule_Type],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QER', 'U') IS NOT NULL
				DROP TABLE #QER;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Relationships block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Relationships'
					
		END CATCH;

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 3: IMPORT QE LearnerIdentifier ---------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QELearnerIdentifier_ID/a2c:Party_RR_Reference_Type/text())[1]','[nvarchar](32)') Party_RR_Reference_Type,
				QECN.value('(a2c:Learner_Id_Mandatory_Flag/text())[1]','[nvarchar](1)') Learner_Id_Mandatory_Flag,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into 
				#QELI
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QELearnerIdentifier_DS/a2c:QELearnerIdentifier') as QLI(QEID) 
				CROSS APPLY QLI.QEID.nodes('a2c:QELearnerIdentifier_CN') as QEL(QECN)
		
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QELI 
					WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')='')
			BEGIN
				PRINT 'QE LearnerIdentifier - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE LearnerIdentifier - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", Party_RR_Reference_Type="' + ISNULL(Party_RR_Reference_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELI 
				WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QELI 
				WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type  
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type ) 'RowRank' 
			FROM 
				#QELI)
			SELECT 
				* 
			INTO 
				#QELIDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QELIDUPS)
			BEGIN

				print 'duplicate records found in QE Learner Identifier'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type  
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type ) 'RowRank' 
				FROM 
					#QELI)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Learner Identifier - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', Party_RR_Reference_Type=' + Party_RR_Reference_Type 
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELIDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELIDUPS', 'U') IS NOT NULL
			  DROP TABLE #QELIDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			----------------------------------------
			----- update references ----------------
			----------------------------------------
			--add dummy pk column to temp table
			ALTER TABLE #QELI ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QELI Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]


			----------------------------------------
			----- insert/update using cursor -------
			----------------------------------------
			--get data in cursor						
			DECLARE QELICURSOR CURSOR LOCAL FAST_FORWARD FOR 
			SELECT
				[QualificationElementId],
				Party_RR_Reference_Type,
				Learner_Id_Mandatory_Flag,				
				Record_Delete_Flag 
			from 
				#QELI 
			where [QualificationElementId] is not null
				and Party_RR_Reference_Type is not null

			-- open cursor
			OPEN QELICURSOR

			FETCH NEXT FROM QELICURSOR 
			INTO @QualificationElementId,
				@Party_RR_Reference_Type,
				@Learner_Id_Mandatory_Flag,
				@Record_Delete_Flag

			-- process each record in cursor
			WHILE @@FETCH_STATUS = 0
			BEGIN
				
				--first update record
				UPDATE [dbo].[QELearnerIdentifier] 
				SET [Learner_Id_Mandatory_Flag] = DBO.FN_A2C_GETFLAG(@Learner_Id_Mandatory_Flag),
					[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(@Record_Delete_Flag)						
				WHERE 
					AwardingOrganisationCentreId = @AwardingOrganisationCentreId AND
					QualificationElementId = @QualificationElementId AND					
					Party_RR_Reference_Type = LTRIM(RTRIM(@Party_RR_Reference_Type))
				
				--if no record was updated, then insert record					
				IF @@ROWCOUNT = 0
				BEGIN
					INSERT [dbo].[QELearnerIdentifier](
						[AwardingOrganisationCentreId],
						[QualificationElementId],
						Party_RR_Reference_Type,
						[Learner_Id_Mandatory_Flag],
						[Record_Delete_Flag])
					VALUES (
						@AwardingOrganisationCentreId,
						@QualificationElementId,
						LTRIM(RTRIM(@Party_RR_Reference_Type)),
						DBO.FN_A2C_GETFLAG(@Learner_Id_Mandatory_Flag),
						DBO.FN_A2C_GETFLAG(@Record_Delete_Flag))
				END
								
				--get next record
				FETCH NEXT FROM QELICURSOR 
				INTO @QualificationElementId,
					@Party_RR_Reference_Type,
					@Learner_Id_Mandatory_Flag,
					@Record_Delete_Flag	

			END

			--release cursor
			CLOSE QELICURSOR;
			DEALLOCATE QELICURSOR;
			
			--merge [QELearnerIdentifier]
			--MERGE [dbo].[QELearnerIdentifier] AS [target]
			--USING (SELECT * from #QELI where [QualificationElementId] is not null) AS source
			--ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
			--	[target].[QualificationElementId] = source.[QualificationElementId] AND
			--	[target].[Party_RR_Reference_Type] = LTRIM(RTRIM(source.[Party_RR_Reference_Type])))
			--WHEN MATCHED THEN 
			--UPDATE SET					
			--	[Learner_Id_Mandatory_Flag] = DBO.FN_A2C_GETFLAG(source.[Learner_Id_Mandatory_Flag]),
			--	[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			--WHEN NOT MATCHED THEN	
			--INSERT (
			--	[AwardingOrganisationCentreId],
			--	[QualificationElementId],
			--	[Party_RR_Reference_Type],
			--	[Learner_Id_Mandatory_Flag],
			--	[Record_Delete_Flag])
			--VALUES (
			--	source.[AOCentreID],
			--	source.[QualificationElementId],
			--	LTRIM(RTRIM(source.[Party_RR_Reference_Type])),
			--	DBO.FN_A2C_GETFLAG(source.[Learner_Id_Mandatory_Flag]),
			--	DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELI', 'U') IS NOT NULL
				DROP TABLE #QELI;
		
		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Learner Identifier block'
		
			SET @curStatus = Cursor_Status('LOCAL', 'QELICURSOR'); 
			IF @curStatus >= 0 
			BEGIN
				CLOSE QELICURSOR;
				DEALLOCATE QELICURSOR;
			END
			ELSE IF @curStatus = -1 --may have been closed already so just deallocate
			BEGIN
				DEALLOCATE QELICURSOR;
			END;

			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Learner Identifier'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 4: IMPORT QE Preference ----------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				PID.value('(a2c:Party_ID/a2c:Party_Id_Creator/text())[1]','[nvarchar](32)') Party_Id_Creator,
				QEP.value('(a2c:QEPreference_ID/a2c:QE_Preference/text())[1]','[nvarchar](100)') QE_Preference,
				QEP.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag	
			into 
				#QEPR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEPreference_DS/a2c:QEPreference') as QEPreference_DS(PID)
				CROSS APPLY
				QEPreference_DS.PID.nodes('a2c:QEPreference_CN') as QEPreference_CN(QEP)

			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEPR 
					WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')='')
			BEGIN
				PRINT 'QE Preference - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Preference - Record Party_Id_Creator="' +  ISNULL(Party_Id_Creator,'') 
					+ '", QE_Preference="' + ISNULL(QE_Preference,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEPR 
				WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEPR 
				WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], Party_Id_Creator, QE_Preference ) 'RowRank' 
				FROM 
					#QEPR)
			SELECT 
				* 
			INTO 
				#QEPRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEPRDUPS)
			BEGIN

				print 'duplicate records found in QE Preference'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], Party_Id_Creator, QE_Preference ) 'RowRank' 
				FROM 
					#QEPR)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Preference - Record Party_Id_Creator=' +  Party_Id_Creator 
					+ ', QE_Preference=' + QE_Preference + ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEPRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEPRDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEPRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			----------------------------------------
			----- insert/update using cursor -------
			----------------------------------------
			--get data in cursor						
			DECLARE QEPRCURSOR CURSOR LOCAL FAST_FORWARD FOR 
			SELECT
				Party_Id_Creator,
				QE_Preference,
				Record_Delete_Flag 
			from 
				#QEPR 
			
			-- open cursor
			OPEN QEPRCURSOR

			FETCH NEXT FROM QEPRCURSOR 
			INTO @Party_Id_Creator,
				@QE_Preference,
				@Record_Delete_Flag

			-- process each record in cursor
			WHILE @@FETCH_STATUS = 0
			BEGIN
											
				--first update record
				UPDATE [dbo].QEPreference 
				SET [Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(@Record_Delete_Flag)						
				WHERE 
					AwardingOrganisationCentreId = @AwardingOrganisationCentreId AND
					[Party_Id_Creator] = LTRIM(RTRIM(@Party_Id_Creator)) AND
					[QE_Preference] = LTRIM(RTRIM(@QE_Preference))
				
				--if no record was updated, then insert record					
				IF @@ROWCOUNT = 0
				BEGIN
					INSERT [dbo].QEPreference(
						[AwardingOrganisationCentreId],
						[Party_Id_Creator],
						[QE_Preference],
						[Record_Delete_Flag])
					VALUES (
						@AwardingOrganisationCentreId,
						LTRIM(RTRIM(@Party_Id_Creator)),
						LTRIM(RTRIM(@QE_Preference)),
						DBO.FN_A2C_GETFLAG(@Record_Delete_Flag))
				END

				--get next record
				FETCH NEXT FROM QEPRCURSOR 
				INTO @Party_Id_Creator,
					@QE_Preference,
					@Record_Delete_Flag
			END

			--release cursor
			CLOSE QEPRCURSOR;
			DEALLOCATE QEPRCURSOR;


			--merge [QEPreference]
			--MERGE [dbo].[QEPreference] AS [target]
			--USING (SELECT * from #QEPR) AS source
			--ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
			--	[target].[Party_Id_Creator] = LTRIM(RTRIM(source.[Party_Id_Creator])) AND
			--	[target].[QE_Preference] = LTRIM(RTRIM(source.[QE_Preference])))
			--WHEN MATCHED THEN 
			--UPDATE SET		
			--	[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			--WHEN NOT MATCHED THEN	
			--INSERT (
			--	[AwardingOrganisationCentreId],
			--	[Party_Id_Creator],
			--	[QE_Preference],
			--	[Record_Delete_Flag])
			--VALUES (
			--	source.[AOCentreID],
			--	LTRIM(RTRIM(source.[Party_Id_Creator])),
			--	LTRIM(RTRIM(source.[QE_Preference])),
			--	DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEPR', 'U') IS NOT NULL
				DROP TABLE #QEPR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Preference block'
		
			SET @curStatus = Cursor_Status('LOCAL', 'QEPRCURSOR'); 
			IF @curStatus >= 0 
			BEGIN
				CLOSE QEPRCURSOR;
				DEALLOCATE QEPRCURSOR;
			END
			ELSE IF @curStatus = -1 --may have been closed already so just deallocate
			BEGIN
				DEALLOCATE QEPRCURSOR;
			END;

			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Preference'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 5: IMPORT AO QE Preference -------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:AOQEPreference_ID/a2c:Party_Id_Creator/text())[1]','[nvarchar](32)') Party_Id_Creator,
				QECN.value('(a2c:AOQEPreference_ID/a2c:QE_Preference/text())[1]','[nvarchar](100)') QE_Preference,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into 
				#AOQEPR	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference') as AOQEPreference(QEID) 
				CROSS APPLY 
				AOQEPreference.QEID.nodes('a2c:AOQEPreference_CN') as AOQEPreference_CN(QECN) 
					
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #AOQEPR 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR ISNULL(Party_Id_Creator,'')=''
						OR ISNULL(QE_Preference,'')='')
			BEGIN
				PRINT 'AO QE Preference - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock AO QE Preference - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", Party_Id_Creator="' + ISNULL(Party_Id_Creator,'') 
					+ '", QE_Preference="' + ISNULL(QE_Preference,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#AOQEPR 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#AOQEPR 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference) 'RowRank' 
				FROM 
					#AOQEPR)
			SELECT 
				* 
			INTO 
				#AOQEPRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #AOQEPRDUPS)
			BEGIN

				print 'duplicate records found in AO QE Preference'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference) 'RowRank' 
				FROM 
					#AOQEPR)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock AO QE Preference - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', Party_Id_Creator=' +  Party_Id_Creator 
					+ ', QE_Preference=' + QE_Preference + ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#AOQEPRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#AOQEPRDUPS', 'U') IS NOT NULL
			  DROP TABLE #AOQEPRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

		
			--add dummy fk column to temp table
			ALTER TABLE #AOQEPR ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#AOQEPR Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--add dummy fk column to temp table
			ALTER TABLE #AOQEPR ADD [QEPreferenceId] INT null

			--Update existing PKs of [dbo].[QEPreference]
			Update Q 
				set [QEPreferenceId]=QEP.[QEPreferenceId]
			from 
				#AOQEPR Q inner join [dbo].[QEPreference] QEP
			on 
				Q.AOCentreID=QEP.AwardingOrganisationCentreId 
				and Q.[Party_Id_Creator]=QEP.[Party_Id_Creator] 
				and Q.[QE_Preference]=QEP.[QE_Preference]

			--merge [AOQEPreference]
			MERGE [dbo].[AOQEPreference] AS [target]
			USING (SELECT * from #AOQEPR where [QualificationElementId] is not null and [QEPreferenceId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEPreferenceId] = source.[QEPreferenceId])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEPreferenceId],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QEPreferenceId],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#AOQEPR', 'U') IS NOT NULL
				DROP TABLE #AOQEPR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in AO QE Preference block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId,  
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'AO QE Preference'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 6: IMPORT QE Availability --------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				QECN.value('(a2c:QEA_Effective_End_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_End_Date_Time,
				QECN.value('(a2c:SLA_OnDemand_Result_Clndr_Days/text())[1]','int') SLA_OnDemand_Result_Clndr_Days,
				QECN.value('(a2c:Series_Label/text())[1]','[nvarchar](50)') Series_Label,
				QECN.value('(a2c:OnDemand_Entry_Calendar_Days/text())[1]','int') OnDemand_Entry_Calendar_Days,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag	
			into 
				#QEA	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QEAvailability_CN(QECN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEA 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QE Availability - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEA 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEA 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEA)
			SELECT 
				* 
			INTO 
				#QEADUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEADUPS)
			BEGIN

				print 'duplicate records found in QE Availability'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEA)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Availability - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type + ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) 
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEADUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEADUPS', 'U') IS NOT NULL
			  DROP TABLE #QEADUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEA ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEA Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]
	
			--merge [QEAvailability]
			MERGE [dbo].[QEAvailability] AS [target]
			USING (SELECT * from #QEA where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]))
			WHEN MATCHED THEN 
			UPDATE SET				
				[QEA_Effective_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_End_Date_Time]),
				[SLA_OnDemand_Result_Clndr_Days] = source.[SLA_OnDemand_Result_Clndr_Days],
				[Series_Label] = LTRIM(RTRIM(source.[Series_Label])),
				[OnDemand_Entry_Calendar_Days] = source.[OnDemand_Entry_Calendar_Days],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEA_Effective_Start_Date_Time],
				[QEA_Effective_End_Date_Time],
				[SLA_OnDemand_Result_Clndr_Days],
				[Series_Label],
				[OnDemand_Entry_Calendar_Days],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_End_Date_Time]),
				source.[SLA_OnDemand_Result_Clndr_Days],
				LTRIM(RTRIM(source.[Series_Label])),
				source.[OnDemand_Entry_Calendar_Days],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEA', 'U') IS NOT NULL
				DROP TABLE #QEA;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability'
					
		END CATCH

		---------------------------------------------------
		----- STEP 6.1: IMPORT QE Availability Key Event --
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				KE.value('(a2c:QEAvailabilityKeyEvent_ID/a2c:Key_Event_Name/text())[1]','[nvarchar](100)') Key_Event_Name,
				KE.value('(a2c:Key_Event_Start_Date_Time/text())[1]','[nvarchar](100)') Key_Event_Start_Date_Time,
				KE.value('(a2c:Key_Event_End_Date_Time/text())[1]','[nvarchar](100)') Key_Event_End_Date_Time,
				KE.value('(a2c:Key_Event_Additional_Text/text())[1]','[nvarchar](400)') Key_Event_Additional_Text,
				KE.value('(a2c:Time_Period_Type/text())[1]','[nvarchar](32)') Time_Period_Type,
				KE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag	
			into 
				#QEAKE	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QE(QECN) 
				CROSS APPLY QE.QECN.nodes('a2c:QEAvailabilityKeyEvent') as QEA(KE)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAKE 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
						OR ISNULL(Key_Event_Name,'')='')
			BEGIN
				PRINT 'QE Availability Key Event - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", Key_Event_Name="' + ISNULL(Key_Event_Name,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAKE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name) 'RowRank' 
				FROM 
					#QEAKE)
			SELECT 
				* 
			INTO 
				#QEAKEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAKEDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Key Event'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name) 'RowRank' 
				FROM 
					#QEAKE)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) 
					+ ', Key_Event_Name=' + Key_Event_Name + ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEDUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAKEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy fk column to temp table
			ALTER TABLE #QEAKE ADD [QualificationElementId] INT null, [QEAvailabilityId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAKE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QEAvailability]
			Update Q 
				set [QEAvailabilityId]=QE.[QEAvailabilityId]
			from 
				#QEAKE Q inner join [QEAvailability] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QualificationElementId]=QE.[QualificationElementId] 
				and DBO.FN_A2C_GETDATETIME(Q.[QEA_Effective_Start_Date_Time])=QE.[QEA_Effective_Start_Date_Time]	
	
			--merge [QEAvailabilityKeyEvent]
			MERGE [dbo].[QEAvailabilityKeyEvent] AS [target]
			USING (SELECT * from #QEAKE 
					where [QualificationElementId] is not null 
					and [QEAvailabilityId] is not null
					and [Key_Event_Name] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityId] = source.[QEAvailabilityId] AND
				[target].[Key_Event_Name] =  LTRIM(RTRIM(source.[Key_Event_Name])))
			WHEN MATCHED THEN 
			UPDATE SET				
				[Key_Event_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Key_Event_Start_Date_Time]),
				[Key_Event_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Key_Event_End_Date_Time]),
				[Key_Event_Additional_Text] = LTRIM(RTRIM(source.[Key_Event_Additional_Text])),
				[Time_Period_Type] = LTRIM(RTRIM(source.[Time_Period_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityId],
				[Key_Event_Name],
				[Key_Event_Start_Date_Time],
				[Key_Event_End_Date_Time],
				[Key_Event_Additional_Text],
				[Time_Period_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityId],
				LTRIM(RTRIM(source.[Key_Event_Name])),
				DBO.FN_A2C_GETDATETIME(source.[Key_Event_Start_Date_Time]),
				DBO.FN_A2C_GETDATETIME(source.[Key_Event_End_Date_Time]),
				LTRIM(RTRIM(source.[Key_Event_Additional_Text])),
				LTRIM(RTRIM(source.[Time_Period_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKE', 'U') IS NOT NULL
				DROP TABLE #QEAKE;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Key Event block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Key Event'
					
		END CATCH

		----------------------------------------------------------
		----- STEP 6.2: IMPORT QE Availability Key Event Fee -----
		----------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				KE.value('(a2c:QEAvailabilityKeyEvent_ID/a2c:Key_Event_Name/text())[1]','[nvarchar](100)') Key_Event_Name,	
				KEFEE.value('(a2c:QEAvailabilityKeyEventFee_ID/a2c:QE_Fee_Category_Type/text())[1]','[nvarchar](100)') QE_Fee_Category_Type,
				KEFEE.value('(a2c:QEAvailabilityKeyEventFee_ID/a2c:Fee_Period_Start_Date_Time/text())[1]','[nvarchar](100)') Fee_Period_Start_Date_Time,
				KEFEE.value('(a2c:Fee_Period_Title/text())[1]','[nvarchar](100)') Fee_Period_Title,
				KEFEE.value('(a2c:Fee_Period_End_Date_Time/text())[1]','[nvarchar](100)') Fee_Period_End_Date_Time,
				KEFEE.value('(a2c:Fee_Amount/text())[1]','[Decimal](9,2)') Fee_Amount,
				KEFEE.value('(a2c:Fee_Additional_Text/text())[1]','[nvarchar](400)') Fee_Additional_Text,
				KEFEE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag	
			into 
				#QEAKEFEE	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QE(QECN) 
				CROSS APPLY QE.QECN.nodes('a2c:QEAvailabilityKeyEvent') as QEA(KE)
				CROSS APPLY QEA.KE.nodes('a2c:QEAvailabilityKeyEventFee') as QEAKE(KEFEE)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAKEFEE 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
						OR ISNULL(Key_Event_Name,'')=''
						OR ISNULL(QE_Fee_Category_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QE Availability Key Event Fee - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event Fee - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", Key_Event_Name="' + ISNULL(Key_Event_Name,'') 
					+ '", QE_Fee_Category_Type="' + ISNULL(QE_Fee_Category_Type,'') 
					+ '", Fee_Period_Start_Date_Time="' + CASE WHEN Fee_Period_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(Fee_Period_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEFEE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
					OR ISNULL(QE_Fee_Category_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEAKEFEE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
					OR ISNULL(QE_Fee_Category_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL					
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAKEFEE)
			SELECT 
				* 
			INTO 
				#QEAKEFEEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAKEFEEDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Key Event Fee'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAKEFEE)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event Fee - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id + ', Qualification_Element_Type=' 
					+ Qualification_Element_Type + ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) + ', Key_Event_Name=' + Key_Event_Name 
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEFEEDUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEFEEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAKEFEEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			----------------------------------------
			----- update references ----------------
			----------------------------------------
			--add dummy fk column to temp table
			ALTER TABLE #QEAKEFEE ADD [QualificationElementId] INT null, [QEAvailabilityId] INT null, [QEAvailabilityKeyEventId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAKEFEE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QEAvailability]
			Update Q 
				set [QEAvailabilityId]=QE.[QEAvailabilityId]
			from 
				#QEAKEFEE Q inner join [QEAvailability] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QualificationElementId]=QE.[QualificationElementId] 
				and DBO.FN_A2C_GETDATETIME(Q.[QEA_Effective_Start_Date_Time])=QE.[QEA_Effective_Start_Date_Time]	

			--Update existing PKs of [dbo].[QEAvailabilityKeyEvent]
			Update Q 
				set [QEAvailabilityKeyEventId]=QE.[QEAvailabilityKeyEventId]
			from 
				#QEAKEFEE Q inner join [QEAvailabilityKeyEvent] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QEAvailabilityId]=QE.[QEAvailabilityId] 
				and LTRIM(RTRIM(Q.[Key_Event_Name]))=LTRIM(RTRIM(QE.[Key_Event_Name]))
	

			----------------------------------------
			----- insert/update using cursor -------
			----------------------------------------
			--get data in cursor						
			DECLARE QEAKEFEECURSOR CURSOR LOCAL FAST_FORWARD FOR 
			SELECT
				[QEAvailabilityKeyEventId],
				[QE_Fee_Category_Type],
				[Fee_Period_Start_Date_Time],
				[Fee_Period_Title],
				[Fee_Period_End_Date_Time],
				[Fee_Amount],
				[Fee_Additional_Text],
				[Record_Delete_Flag] 
			from 
				#QEAKEFEE 
			where [QEAvailabilityKeyEventId] is not null 
				and [QE_Fee_Category_Type] is not null
				and DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NOT NULL

			-- open cursor
			OPEN QEAKEFEECURSOR

			FETCH NEXT FROM QEAKEFEECURSOR 
			INTO @QEAvailabilityKeyEventId,
				@QE_Fee_Category_Type,
				@Fee_Period_Start_Date_Time,
				@Fee_Period_Title,
				@Fee_Period_End_Date_Time,
				@Fee_Amount,
				@Fee_Additional_Text,
				@Record_Delete_Flag

			-- process each record in cursor
			WHILE @@FETCH_STATUS = 0
			BEGIN							
				
				--first update record
				UPDATE [dbo].[QEAvailabilityKeyEventFee] 
				SET [Fee_Period_Title] = LTRIM(RTRIM(@Fee_Period_Title)),
					[Fee_Period_End_Date_Time] = DBO.FN_A2C_GETDATETIME(@Fee_Period_End_Date_Time),
					[Fee_Amount] = @Fee_Amount,
					[Fee_Additional_Text] = LTRIM(RTRIM(@Fee_Additional_Text)),		
					[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(@Record_Delete_Flag)						
				WHERE 
					[AwardingOrganisationCentreId] = @AwardingOrganisationCentreId AND
					[QEAvailabilityKeyEventId] = @QEAvailabilityKeyEventId AND
					[QE_Fee_Category_Type] =  LTRIM(RTRIM(@QE_Fee_Category_Type)) AND
					[Fee_Period_Start_Date_Time] =  DBO.FN_A2C_GETDATETIME(@Fee_Period_Start_Date_Time)
				
				--if no record was updated, then insert record					
				IF @@ROWCOUNT = 0
				BEGIN
					INSERT [dbo].[QEAvailabilityKeyEventFee](
							[AwardingOrganisationCentreId],
							[QEAvailabilityKeyEventId],
							[QE_Fee_Category_Type],
							[Fee_Period_Start_Date_Time],
							[Fee_Period_Title],
							[Fee_Period_End_Date_Time],
							[Fee_Amount],
							[Fee_Additional_Text],
							[Record_Delete_Flag])
					VALUES (
						@AwardingOrganisationCentreId,
						@QEAvailabilityKeyEventId,
						LTRIM(RTRIM(@QE_Fee_Category_Type)),
						DBO.FN_A2C_GETDATETIME(@Fee_Period_Start_Date_Time),
						LTRIM(RTRIM(@Fee_Period_Title)),
						DBO.FN_A2C_GETDATETIME(@Fee_Period_End_Date_Time),
						@Fee_Amount,
						LTRIM(RTRIM(@Fee_Additional_Text)),
						DBO.FN_A2C_GETFLAG(@Record_Delete_Flag))
				END
								
				--get next record
				FETCH NEXT FROM QEAKEFEECURSOR 
				INTO @QEAvailabilityKeyEventId,
					@QE_Fee_Category_Type,
					@Fee_Period_Start_Date_Time,
					@Fee_Period_Title,
					@Fee_Period_End_Date_Time,
					@Fee_Amount,
					@Fee_Additional_Text,
					@Record_Delete_Flag
			END

			--release cursor
			CLOSE QEAKEFEECURSOR;
			DEALLOCATE QEAKEFEECURSOR;


			--merge [QEAvailabilityKeyEventFee]
			--MERGE [dbo].[QEAvailabilityKeyEventFee] AS [target]
			--USING (SELECT * from #QEAKEFEE 
			--		where [QEAvailabilityKeyEventId] is not null 
			--		and [QE_Fee_Category_Type] is not null
			--		and DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NOT NULL) AS source
			--ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
			--	[target].[QEAvailabilityKeyEventId] = source.[QEAvailabilityKeyEventId] AND
			--	[target].[QE_Fee_Category_Type] =  LTRIM(RTRIM(source.[QE_Fee_Category_Type])) AND
			--	[target].[Fee_Period_Start_Date_Time] =  DBO.FN_A2C_GETDATETIME(source.[Fee_Period_Start_Date_Time]))
			--WHEN MATCHED THEN 
			--UPDATE SET				
			--	[Fee_Period_Title] = LTRIM(RTRIM(source.[Fee_Period_Title])),
			--	[Fee_Period_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Fee_Period_End_Date_Time]),
			--	[Fee_Amount] = source.[Fee_Amount],
			--	[Fee_Additional_Text] = LTRIM(RTRIM(source.[Fee_Additional_Text])),		
			--	[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			--WHEN NOT MATCHED THEN	
			--INSERT (
			--	[AwardingOrganisationCentreId],
			--	[QEAvailabilityKeyEventId],
			--	[QE_Fee_Category_Type],
			--	[Fee_Period_Start_Date_Time],
			--	[Fee_Period_Title],
			--	[Fee_Period_End_Date_Time],
			--	[Fee_Amount],
			--	[Fee_Additional_Text],
			--	[Record_Delete_Flag])
			--VALUES (
			--	source.[AOCentreID],
			--	source.[QEAvailabilityKeyEventId],
			--	LTRIM(RTRIM(source.[QE_Fee_Category_Type])),
			--	DBO.FN_A2C_GETDATETIME(source.[Fee_Period_Start_Date_Time]),
			--	LTRIM(RTRIM(source.[Fee_Period_Title])),
			--	DBO.FN_A2C_GETDATETIME(source.[Fee_Period_End_Date_Time]),
			--	source.[Fee_Amount],
			--	LTRIM(RTRIM(source.[Fee_Additional_Text])),
			--	DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEFEE', 'U') IS NOT NULL
				DROP TABLE #QEAKEFEE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Key Event Fee block'
		
			SET @curStatus = Cursor_Status('LOCAL', 'QEAKEFEECURSOR'); 
			IF @curStatus >= 0 
			BEGIN
				CLOSE QEAKEFEECURSOR;
				DEALLOCATE QEAKEFEECURSOR;
			END
			ELSE IF @curStatus = -1 --may have been closed already so just deallocate
			BEGIN
				DEALLOCATE QEAKEFEECURSOR;
			END;

			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Key Event Fee'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 7: IMPORT QE Fee Category --------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				FEE.value('(a2c:QEFeeCategory_ID/a2c:QE_Fee_Category_Type/text())[1]','[nvarchar](100)') QE_Fee_Category_Type,
				FEE.value('(a2c:Fee_Additional_Information/text())[1]','[nvarchar](400)') Fee_Additional_Information,
				FEE.value('(a2c:Currency_Type/text())[1]','[nvarchar](80)') Currency_Type,
				FEE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into 
				#QEFEE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEFeeCategory_DS/a2c:QEFeeCategory') as QE(FEE)

		
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFEE 
					WHERE ISNULL(QE_Fee_Category_Type,'')='')
			BEGIN
				PRINT 'QE Fee Category - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Fee Category" - Record QE_Fee_Category_Type="' +  ISNULL(QE_Fee_Category_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFEE 
				WHERE 
					ISNULL(QE_Fee_Category_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFEE 
				WHERE 
					ISNULL(QE_Fee_Category_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Fee_Category_Type 
				ORDER BY 
					[AOCentreID], QE_Fee_Category_Type) 'RowRank' 
			FROM 
				#QEFEE)
			SELECT 
				* 
			INTO 
				#QEFEEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFEEDUPS)
			BEGIN

				print 'duplicate records found in QE Fee Category'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Fee_Category_Type 
					ORDER BY 
						[AOCentreID], QE_Fee_Category_Type) 'RowRank' 
				FROM 
					#QEFEE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Fee Category - Record QE_Fee_Category_Type=' +  QE_Fee_Category_Type + ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFEEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFEEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFEEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			----------------------------------------
			----- insert/update using cursor -------
			----------------------------------------
			--get data in cursor						
			DECLARE QEFEECURSOR CURSOR LOCAL FAST_FORWARD FOR 
			SELECT
				[QE_Fee_Category_Type],
				[Fee_Additional_Information],
				[Currency_Type],
				Record_Delete_Flag 
			from 
				#QEFEE 
			where QE_Fee_Category_Type is not null 
				
			-- open cursor
			OPEN QEFEECURSOR

			FETCH NEXT FROM QEFEECURSOR 
			INTO @QE_Fee_Category_Type,
				@Fee_Additional_Information,
				@Currency_Type,
				@Record_Delete_Flag

			-- process each record in cursor
			WHILE @@FETCH_STATUS = 0
			BEGIN
								
				--first update record
				UPDATE [dbo].QEFeeCategory 
				SET [Fee_Additional_Information] = LTRIM(RTRIM(@Fee_Additional_Information)),
					[Currency_Type] = LTRIM(RTRIM(@Currency_Type)),
					[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(@Record_Delete_Flag)						
				WHERE 
					AwardingOrganisationCentreId = @AwardingOrganisationCentreId AND
					[QE_Fee_Category_Type] = LTRIM(RTRIM(@QE_Fee_Category_Type))
				
				--if no record was updated, then insert record					
				IF @@ROWCOUNT = 0
				BEGIN
					INSERT [dbo].QEFeeCategory(
						[AwardingOrganisationCentreId],
						[QE_Fee_Category_Type],
						[Fee_Additional_Information],
						[Currency_Type],
						[Record_Delete_Flag])
					VALUES (
						@AwardingOrganisationCentreId,
						LTRIM(RTRIM(@QE_Fee_Category_Type)),
						LTRIM(RTRIM(@Fee_Additional_Information)),
						LTRIM(RTRIM(@Currency_Type)),
						DBO.FN_A2C_GETFLAG(@Record_Delete_Flag))
				END
								
				--get next record
				FETCH NEXT FROM QEFEECURSOR 
				INTO @QE_Fee_Category_Type,
					@Fee_Additional_Information,
					@Currency_Type,
					@Record_Delete_Flag
			END

			--release cursor
			CLOSE QEFEECURSOR;
			DEALLOCATE QEFEECURSOR;

			--merge [QEFeeCategory]
			--MERGE [dbo].[QEFeeCategory] AS [target]
			--USING (SELECT * from #QEFEE) AS source
			--ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
			--	[target].[QE_Fee_Category_Type] = LTRIM(RTRIM(source.[QE_Fee_Category_Type])))
			--WHEN MATCHED THEN 
			--UPDATE SET		
			--	[Fee_Additional_Information] = LTRIM(RTRIM(source.[Fee_Additional_Information])),
			--	[Currency_Type] = LTRIM(RTRIM(source.[Currency_Type])),
			--	[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			--WHEN NOT MATCHED THEN	
			--INSERT (
			--	[AwardingOrganisationCentreId],
			--	[QE_Fee_Category_Type],
			--	[Fee_Additional_Information],
			--	[Currency_Type],
			--	[Record_Delete_Flag])
			--VALUES (
			--	source.[AOCentreID],
			--	LTRIM(RTRIM(source.[QE_Fee_Category_Type])),
			--	LTRIM(RTRIM(source.[Fee_Additional_Information])),
			--	LTRIM(RTRIM(source.[Currency_Type])),
			--	DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFEE', 'U') IS NOT NULL
				DROP TABLE #QEFEE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Fee Category block'
		
			SET @curStatus = Cursor_Status('LOCAL', 'QEFEECURSOR'); 
			IF @curStatus >= 0 
			BEGIN
				CLOSE QEFEECURSOR;
				DEALLOCATE QEFEECURSOR;
			END
			ELSE IF @curStatus = -1 --may have been closed already so just deallocate
			BEGIN
				DEALLOCATE QEFEECURSOR;
			END;

			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId,
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Fee Category'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 8: IMPORT Qualification Framework ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],	
				QF.value('(a2c:QualificationFrameworkParty_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](32)') Party_Id_Administrator,
				PQF.value('(a2c:QualificationFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](100)') Qualification_Framework_Type,
				QFL.value('(a2c:Qual_Frmwrk_Level_Type_ID/a2c:Qual_Frmwrk_Level_Type/text())[1]','[nvarchar](20)') Qual_Frmwrk_Level_Type,
				QFL.value('(a2c:Qual_Frmwrk_Level_Tier_Type/text())[1]','[nvarchar](10)') Qual_Frmwrk_Level_Tier_Type,
				QFL.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into
				#QEFM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationFramework_DS/a2c:QualificationFramework') as Q(QF) 
				CROSS APPLY Q.QF.nodes('a2c:PartyQualificationFramework_CN') as QE(PQF) 
				CROSS APPLY QE.PQF.nodes('a2c:QualificationFrameworkLevel_CN') as QF(QFL) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFM 
					WHERE ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')='')
			BEGIN
				PRINT 'Qualification Framework - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Framework" - Record Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type="' +  ISNULL(Qual_Frmwrk_Level_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFM 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFM 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
				ORDER BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
			FROM 
				#QEFM)
			SELECT 
				* 
			INTO 
				#QEFMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFMDUPS)
			BEGIN

				print 'duplicate records found in Qualification Framework'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
					ORDER BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
				FROM 
					#QEFM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Framework - Record Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type=' +  Qual_Frmwrk_Level_Type 
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			----------------------------------------
			----- insert/update using cursor -------
			----------------------------------------
			--get data in cursor						
			DECLARE QEFMCURSOR CURSOR LOCAL FAST_FORWARD FOR 
			SELECT				
				Party_Id_Administrator,
				Qualification_Framework_Type,
				Qual_Frmwrk_Level_Type,
				Qual_Frmwrk_Level_Tier_Type,				
				Record_Delete_Flag 
			from 
				#QEFM 
			where [Party_Id_Administrator] is not null
				and Qualification_Framework_Type is not null
				and Qual_Frmwrk_Level_Type is not null
				
			-- open cursor
			OPEN QEFMCURSOR

			FETCH NEXT FROM QEFMCURSOR 
			INTO @Party_Id_Administrator,
				@Qualification_Framework_Type,
				@Qual_Frmwrk_Level_Type,
				@Qual_Frmwrk_Level_Tier_Type,
				@Record_Delete_Flag

			-- process each record in cursor
			WHILE @@FETCH_STATUS = 0
			BEGIN
				
				--first update record
				UPDATE [dbo].QualificationFramework 
				SET [Qual_Frmwrk_Level_Tier_Type] = LTRIM(RTRIM(@Qual_Frmwrk_Level_Tier_Type)),
					[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(@Record_Delete_Flag)						
				WHERE 
					AwardingOrganisationCentreId = @AwardingOrganisationCentreId AND					
					Party_Id_Administrator = LTRIM(RTRIM(@Party_Id_Administrator)) AND					
					[Qualification_Framework_Type] = LTRIM(RTRIM(@Qualification_Framework_Type)) AND
					[Qual_Frmwrk_Level_Type] = LTRIM(RTRIM(@Qual_Frmwrk_Level_Type))
				
				--if no record was updated, then insert record					
				IF @@ROWCOUNT = 0
				BEGIN
					INSERT [dbo].QualificationFramework(
						[AwardingOrganisationCentreId],
						[Party_Id_Administrator],
						[Qualification_Framework_Type],
						[Qual_Frmwrk_Level_Type],
						[Qual_Frmwrk_Level_Tier_Type],
						[Record_Delete_Flag])
					VALUES (
						@AwardingOrganisationCentreId,
						LTRIM(RTRIM(@Party_Id_Administrator)),
						LTRIM(RTRIM(@Qualification_Framework_Type)),
						LTRIM(RTRIM(@Qual_Frmwrk_Level_Type)),
						LTRIM(RTRIM(@Qual_Frmwrk_Level_Tier_Type)),
						DBO.FN_A2C_GETFLAG(@Record_Delete_Flag))
				END

				--get next record
				FETCH NEXT FROM QEFMCURSOR 
				INTO @Party_Id_Administrator,
					@Qualification_Framework_Type,
					@Qual_Frmwrk_Level_Type,
					@Qual_Frmwrk_Level_Tier_Type,
					@Record_Delete_Flag
			END

			--release cursor
			CLOSE QEFMCURSOR;
			DEALLOCATE QEFMCURSOR;


			--merge [QualificationFramework]
			--MERGE [dbo].[QualificationFramework] AS [target]
			--USING (SELECT * from #QEFM) AS source
			--ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
			--	[target].[Party_Id_Administrator] = LTRIM(RTRIM(source.[Party_Id_Administrator])) AND
			--	[target].[Qualification_Framework_Type] = LTRIM(RTRIM(source.[Qualification_Framework_Type])) AND
			--	[target].[Qual_Frmwrk_Level_Type] = LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Type])))
			--WHEN MATCHED THEN 
			--UPDATE SET		
			--	[Qual_Frmwrk_Level_Tier_Type] = LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Tier_Type])),
			--	[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			--WHEN NOT MATCHED THEN	
			--INSERT (
			--	[AwardingOrganisationCentreId],
			--	[Party_Id_Administrator],
			--	[Qualification_Framework_Type],
			--	[Qual_Frmwrk_Level_Type],
			--	[Qual_Frmwrk_Level_Tier_Type],
			--	[Record_Delete_Flag])
			--VALUES (
			--	source.[AOCentreID],
			--	LTRIM(RTRIM(source.[Party_Id_Administrator])),
			--	LTRIM(RTRIM(source.[Qualification_Framework_Type])),
			--	LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Type])),
			--	LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Tier_Type])),
			--	DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFM', 'U') IS NOT NULL
				DROP TABLE #QEFM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Qualification Framework block'
		
			SET @curStatus = Cursor_Status('LOCAL', 'QEFMCURSOR'); 
			IF @curStatus >= 0 
			BEGIN
				CLOSE QEFMCURSOR;
				DEALLOCATE QEFMCURSOR;
			END
			ELSE IF @curStatus = -1 --may have been closed already so just deallocate
			BEGIN
				DEALLOCATE QEFMCURSOR;
			END;

			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId,  
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Framework'
					
		END CATCH

		----------------------------------------------------------------
		----- STEP 8.1 : IMPORT Qualification Framework Hierarchy ------
		----------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select
				@AwardingOrganisationCentreId [AOCentreID],	
				QF.value('(a2c:QualificationFrameworkParty_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](32)') Party_Id_Administrator,
				PQF.value('(a2c:QualificationFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](100)') Qualification_Framework_Type,
				QFH.value('(a2c:QualFrameworkHierarchy_ID/a2c:Qual_Frmwrk_Level_Type_Parent/text())[1]','[nvarchar](20)') Qual_Frmwrk_Level_Type_Parent,
				QFH.value('(a2c:QualFrameworkHierarchy_ID/a2c:Qual_Frmwrk_Level_Type_Child/text())[1]','[nvarchar](20)') Qual_Frmwrk_Level_Type_Child,
				QFH.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into
				#QEFMHR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationFramework_DS/a2c:QualificationFramework') as Q(QF) 
				CROSS APPLY Q.QF.nodes('a2c:PartyQualificationFramework_CN') as QE(PQF) 
				CROSS APPLY QE.PQF.nodes('a2c:QualFrameworkHierarchy') as QF(QFH) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFMHR 
					WHERE ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')='')
			BEGIN
				PRINT 'Qualification Framework Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Framework Hierarchy" - Record Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type_Parent="' +  ISNULL(Qual_Frmwrk_Level_Type_Parent,'') 
					+ '", Qual_Frmwrk_Level_Type_Child="' +  ISNULL(Qual_Frmwrk_Level_Type_Child,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMHR 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFMHR 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child  
				ORDER BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child) 'RowRank' 
			FROM 
				#QEFMHR)
			SELECT 
				* 
			INTO 
				#QEFMHRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFMHRDUPS)
			BEGIN

				print 'duplicate records found in Qualification Framework Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child  
					ORDER BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child) 'RowRank' 
				FROM 
					#QEFMHR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Framework Hierarchy - Record Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type_Parent=' +  Qual_Frmwrk_Level_Type_Parent 
					+ ', Qual_Frmwrk_Level_Type_Child=' +  Qual_Frmwrk_Level_Type_Child 
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMHRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMHRDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFMHRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEFMHR ADD [QualificationFrameworkId_Parent] INT null, [QualificationFrameworkId_Child] INT null

			--Update existing PKs of [dbo].[QualificationFramework]
			Update Q 
				set [QualificationFrameworkId_Parent]=QE.[QualificationFrameworkId]
			from 
				#QEFMHR Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=LTRIM(RTRIM(QE.[Party_Id_Administrator])) 
				and Q.[Qualification_Framework_Type]=LTRIM(RTRIM(QE.[Qualification_Framework_Type]))
				and Q.Qual_Frmwrk_Level_Type_Parent=LTRIM(RTRIM(QE.[Qual_Frmwrk_Level_Type]))

			Update Q 
				set [QualificationFrameworkId_Child]=QE.[QualificationFrameworkId]
			from 
				#QEFMHR Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=LTRIM(RTRIM(QE.[Party_Id_Administrator])) 
				and Q.[Qualification_Framework_Type]=LTRIM(RTRIM(QE.[Qualification_Framework_Type]))
				and Q.Qual_Frmwrk_Level_Type_Child=LTRIM(RTRIM(QE.[Qual_Frmwrk_Level_Type]))

			--merge [QualificationFrameworkHierarchy]
			MERGE [dbo].[QualificationFrameworkHierarchy] AS [target]
			USING (SELECT * from #QEFMHR where [QualificationFrameworkId_Parent] is not null and [QualificationFrameworkId_Child] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationFrameworkId_Parent] = source.[QualificationFrameworkId_Parent] AND
				[target].[QualificationFrameworkId_Child] = source.[QualificationFrameworkId_Child])
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationFrameworkId_Parent],
				[QualificationFrameworkId_Child],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationFrameworkId_Parent],
				source.[QualificationFrameworkId_Child],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMHR', 'U') IS NOT NULL
				DROP TABLE #QEFMHR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Qualification Framework Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Framework Hierarchy'
					
		END CATCH

		----------------------------------------------------------------
		----- STEP 8.2: IMPORT Qualification Element Framework ---------
		----------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QF.value('(a2c:QEFramework_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QF.value('(a2c:QEFramework_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QF.value('(a2c:QEFramework_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](32)') Party_Id_Administrator,
				QF.value('(a2c:QEFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](100)') Qualification_Framework_Type,
				QF.value('(a2c:QEFramework_ID/a2c:Qual_Frmwrk_Level_Type/text())[1]','[nvarchar](20)') Qual_Frmwrk_Level_Type,
				QF.value('(a2c:QE_Framework_Credit_Value/text())[1]','[nvarchar](max)') QE_Framework_Credit_Value,
				QF.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag	
			into
				#QELEFM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementFramework_DS/a2c:QualificationElementFramework') as Q(QF) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QELEFM 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Framework - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Framework" - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' +  ISNULL(Qualification_Element_Type,'') 
					+ '", Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type="' +  ISNULL(Qual_Frmwrk_Level_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELEFM 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QELEFM 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
			FROM 
				#QELEFM)
			SELECT 
				* 
			INTO 
				#QELEFMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QELEFMDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Framework'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
				FROM 
					#QELEFM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Framework - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type 
					+ ', Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type=' +  Qual_Frmwrk_Level_Type
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELEFMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELEFMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QELEFMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QELEFM ADD [QualificationElementId] INT null, [QualificationFrameworkId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QELEFM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QualificationFramework]
			Update Q 
				set [QualificationFrameworkId]=QE.[QualificationFrameworkId]
			from 
				#QELEFM Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=QE.[Party_Id_Administrator] 
				and Q.[Qualification_Framework_Type]=QE.[Qualification_Framework_Type]
				and Q.[Qual_Frmwrk_Level_Type]=QE.[Qual_Frmwrk_Level_Type]

			--merge [QualificationElementFramework]
			MERGE [dbo].[QualificationElementFramework] AS [target]
			USING (SELECT * from #QELEFM where [QualificationElementId] is not null and [QualificationFrameworkId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QualificationFrameworkId] = source.[QualificationFrameworkId])
			WHEN MATCHED THEN 
			UPDATE SET		
				[QE_Framework_Credit_Value] = source.[QE_Framework_Credit_Value],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QualificationFrameworkId],
				[QE_Framework_Credit_Value],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QualificationFrameworkId],
				source.[QE_Framework_Credit_Value],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELEFM', 'U') IS NOT NULL
				DROP TABLE #QELEFM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Framework block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Framework'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 9: IMPORT Sector Subject Area ----------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 			
				@AwardingOrganisationCentreId [AOCentreID],	
				CN.value('(a2c:SectorSubjectArea_ID/a2c:Sector_Subject_Area/text())[1]','decimal(3,1)') Sector_Subject_Area,
				CN.value('(a2c:Sector_Subject_Area_Descr/text())[1]','[nvarchar](100)') Sector_Subject_Area_Descr,
				CN.value('(a2c:Sector_Subject_Area_Level_Type/text())[1]','[nvarchar](8)') Sector_Subject_Area_Level_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into
				#SSA
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:SectorSubjectArea_DS/a2c:SectorSubjectArea/a2c:SectorSubjectArea_CN') as SSA(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSA 
					WHERE Sector_Subject_Area IS NULL)
			BEGIN
				PRINT 'Sector Subject Area - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Sector Subject Area" - Record Sector_Subject_Area="' 
					+  CASE WHEN Sector_Subject_Area IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSA 
				WHERE 
					Sector_Subject_Area IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSA 
				WHERE 
					Sector_Subject_Area IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Sector_Subject_Area
				ORDER BY 
					[AOCentreID], Sector_Subject_Area) 'RowRank' 
			FROM 
				#SSA)
			SELECT 
				* 
			INTO 
				#SSADUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSADUPS)
			BEGIN

				print 'duplicate records found in Sector Subject Area'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Sector_Subject_Area
					ORDER BY 
						[AOCentreID], Sector_Subject_Area) 'RowRank' 
				FROM 
					#SSA)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Sector Subject Area - Record Sector_Subject_Area=' +  cast(Sector_Subject_Area as nvarchar)
					+ ' - Duplicate record.' as ErrorMessage, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSADUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSADUPS', 'U') IS NOT NULL
			  DROP TABLE #SSADUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [SectorSubjectArea]
			MERGE [dbo].[SectorSubjectArea] AS [target]
			USING (SELECT * from #SSA) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Sector_Subject_Area] = source.[Sector_Subject_Area])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Sector_Subject_Area_Descr] = LTRIM(RTRIM(source.[Sector_Subject_Area_Descr])),
				[Sector_Subject_Area_Level_Type] = LTRIM(RTRIM(source.[Sector_Subject_Area_Level_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Sector_Subject_Area],
				[Sector_Subject_Area_Descr],
				[Sector_Subject_Area_Level_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[Sector_Subject_Area],
				LTRIM(RTRIM(source.[Sector_Subject_Area_Descr])),
				LTRIM(RTRIM(source.[Sector_Subject_Area_Level_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSA', 'U') IS NOT NULL
				DROP TABLE #SSA;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Sector Subject Area block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Sector Subject Area'
					
		END CATCH


		-------------------------------------------------------------
		----- STEP 9.1: IMPORT Sector Subject Area Hierarchy --------
		-------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 			
				@AwardingOrganisationCentreId [AOCentreID],	
				CN.value('(a2c:SectorSubjectAreaHierarchy_ID/a2c:Sector_Subject_Area_Parent/text())[1]','decimal(3,1)') Sector_Subject_Area_Parent,
				CN.value('(a2c:SectorSubjectAreaHierarchy_ID/a2c:Sector_Subject_Area_Child/text())[1]','decimal(3,1)') Sector_Subject_Area_Child,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into
				#SSAHR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:SectorSubjectArea_DS/a2c:SectorSubjectArea/a2c:SectorSubjectAreaHierarchy') as SSA(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSAHR 
					WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL)
			BEGIN
				PRINT 'Sector Subject Area Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Sector Subject Area Hierarchy" - Record Sector_Subject_Area_Parent="' 
					+  CASE WHEN Sector_Subject_Area_Parent IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area_Parent AS VARCHAR) END
					+ '", Sector_Subject_Area_Child="' 
					+  CASE WHEN Sector_Subject_Area_Child IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area_Child AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAHR 
				WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSAHR 
				WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child
				ORDER BY 
					[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child) 'RowRank' 
			FROM 
				#SSAHR)
			SELECT 
				* 
			INTO 
				#SSAHRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSAHRDUPS)
			BEGIN

				print 'duplicate records found in Sector Subject Area Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child
					ORDER BY 
						[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child) 'RowRank' 
				FROM 
					#SSAHR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Sector Subject Area Hierarchy - Record Sector_Subject_Area_Parent=' +  CAST(Sector_Subject_Area_Parent AS VARCHAR)
					+ ' , Sector_Subject_Area_Child=' +  CAST(Sector_Subject_Area_Child AS VARCHAR)
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAHRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAHRDUPS', 'U') IS NOT NULL
			  DROP TABLE #SSAHRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #SSAHR ADD [SectorSubjectAreaId_Parent] INT null, [SectorSubjectAreaId_Child] INT null

			--Update existing PKs of [dbo].[SectorSubjectArea]
			Update Q 
				set [SectorSubjectAreaId_Parent]=QE.[SectorSubjectAreaId]
			from 
				#SSAHR Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area_Parent=QE.[Sector_Subject_Area] 

			Update Q 
				set [SectorSubjectAreaId_Child]=QE.[SectorSubjectAreaId]
			from 
				#SSAHR Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area_Child=QE.[Sector_Subject_Area] 
		
			--merge [SectorSubjectAreaHierarchy]
			MERGE [dbo].[SectorSubjectAreaHierarchy] AS [target]
			USING (SELECT * from #SSAHR where [SectorSubjectAreaId_Parent] is not null and [SectorSubjectAreaId_Child] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[SectorSubjectAreaId_Parent] = source.[SectorSubjectAreaId_Parent] AND
				[target].[SectorSubjectAreaId_Child] = source.[SectorSubjectAreaId_Child])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[SectorSubjectAreaId_Parent],
				[SectorSubjectAreaId_Child],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[SectorSubjectAreaId_Parent],
				source.[SectorSubjectAreaId_Child],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAHR', 'U') IS NOT NULL
				DROP TABLE #SSAHR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Sector Subject Area Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId,  
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Sector Subject Area Hierarchy'
					
		END CATCH
			
		-------------------------------------------------------------
		----- STEP 9.2: IMPORT QE Sector Subject Area  --------------
		-------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],	
				QE.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QE.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				CN.value('(a2c:SectorSubjectArea_ID/a2c:Sector_Subject_Area/text())[1]','decimal(3,1)') Sector_Subject_Area,
				CN.value('(a2c:QE_Sector_Subject_Area_Eff_Date/text())[1]','[nvarchar](100)') QE_Sector_Subject_Area_Eff_Date,
				CN.value('(a2c:QE_Sector_Subject_Area_End_Date/text())[1]','[nvarchar](100)') QE_Sector_Subject_Area_End_Date,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into
				#SSAQE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QESectorSubjectArea_DS/a2c:QESectorSubjectArea/a2c:QualificationElement') as SSA(QE)
				CROSS APPLY SSA.QE.nodes('a2c:QESectorSubjectArea_CN') as SS(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSAQE 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL)
			BEGIN
				PRINT 'QE Sector Subject Area - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Sector Subject Area" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", Sector_Subject_Area="' 
					+  CASE WHEN Sector_Subject_Area IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAQE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSAQE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area) 'RowRank' 
			FROM 
				#SSAQE)
			SELECT 
				* 
			INTO 
				#SSAQEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSAQEDUPS)
			BEGIN

				print 'duplicate records found in QE Sector Subject Area'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area) 'RowRank' 
				FROM 
					#SSAQE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Sector Subject Area - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ' , Qualification_Element_Type=' +  Qualification_Element_Type
					+ ' , Sector_Subject_Area=' +  CAST(Sector_Subject_Area AS NVARCHAR)
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAQEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAQEDUPS', 'U') IS NOT NULL
			  DROP TABLE #SSAQEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #SSAQE ADD [QualificationElementId] INT null, [SectorSubjectAreaId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#SSAQE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[SectorSubjectArea]
			Update Q 
				set [SectorSubjectAreaId]=QE.[SectorSubjectAreaId]
			from 
				#SSAQE Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area=QE.[Sector_Subject_Area] 
		
			--merge [QESectorSubjectArea]
			MERGE [dbo].[QESectorSubjectArea] AS [target]
			USING (SELECT * from #SSAQE where [QualificationElementId] is not null and [SectorSubjectAreaId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[SectorSubjectAreaId] = source.[SectorSubjectAreaId])
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Sector_Subject_Area_Eff_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_Eff_Date]),
				[QE_Sector_Subject_Area_End_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_End_Date]),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[SectorSubjectAreaId],
				[QE_Sector_Subject_Area_Eff_Date],
				[QE_Sector_Subject_Area_End_Date],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[SectorSubjectAreaId],
				DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_Eff_Date]),
				DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_End_Date]),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAQE', 'U') IS NOT NULL
				DROP TABLE #SSAQE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Sector Subject Area block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId,  
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Sector Subject Area'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 10: IMPORT QE Assessment Material ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				CN.value('(a2c:QEAssessmentMaterial_ID/a2c:QE_Assmnt_Material_Id/text())[1]','[nvarchar](25)') QE_Assmnt_Material_Id,
				CN.value('(a2c:QE_Assmnt_Material_Name/text())[1]','[nvarchar](100)') QE_Assmnt_Material_Name,
				CN.value('(a2c:QE_Assmnt_Material_Source/text())[1]','[nvarchar](400)') QE_Assmnt_Material_Source,
				CN.value('(a2c:QE_Assmnt_Material_Description/text())[1]','[nvarchar](250)') QE_Assmnt_Material_Description,
				CN.value('(a2c:QE_Assmnt_Material_Source_Type/text())[1]','[nvarchar](32)') QE_Assmnt_Material_Source_Type,
				CN.value('(a2c:QE_Assmnt_Material_Medium_Type/text())[1]','[nvarchar](20)') QE_Assmnt_Material_Medium_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into
				#QEAM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityAssessmentMaterial_DS/a2c:QEAvailabilityAssessmentMaterial/a2c:QEAssessmentMaterial_CN') as Q(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAM 
					WHERE ISNULL(QE_Assmnt_Material_Id,'')='')
			BEGIN
				PRINT 'QE Assessment Material - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Assessment Material" - Record QE_Assmnt_Material_Id="' + ISNULL(QE_Assmnt_Material_Id,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Assmnt_Material_Id
				ORDER BY 
					[AOCentreID], QE_Assmnt_Material_Id) 'RowRank' 
			FROM 
				#QEAM)
			SELECT 
				* 
			INTO 
				#QEAMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAMDUPS)
			BEGIN

				print 'duplicate records found in QE Assessment Material'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Assmnt_Material_Id
					ORDER BY 
						[AOCentreID], QE_Assmnt_Material_Id) 'RowRank' 
				FROM 
					#QEAM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Assessment Material - Record QE_Assmnt_Material_Id=' +  QE_Assmnt_Material_Id
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QEAssessmentMaterial]
			MERGE [dbo].[QEAssessmentMaterial] AS [target]
			USING (SELECT * from #QEAM) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QE_Assmnt_Material_Id] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Id])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[QE_Assmnt_Material_Name] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Name])),
				[QE_Assmnt_Material_Source] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Source])),
				[QE_Assmnt_Material_Description] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Description])),
				[QE_Assmnt_Material_Source_Type] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Source_Type])),
				[QE_Assmnt_Material_Medium_Type] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Medium_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QE_Assmnt_Material_Id],
				[QE_Assmnt_Material_Name],
				[QE_Assmnt_Material_Source],
				[QE_Assmnt_Material_Description],
				[QE_Assmnt_Material_Source_Type],
				[QE_Assmnt_Material_Medium_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Id])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Name])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Source])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Description])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Source_Type])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Medium_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAM', 'U') IS NOT NULL
				DROP TABLE #QEAM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Assessment Material block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId,  
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Assessment Material'
					
		END CATCH

		---------------------------------------------------
		----- STEP 10.1: IMPORT QEA Assessment Material ---
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				CN.value('(a2c:QEAssessmentMaterial_ID/a2c:QE_Assmnt_Material_Id/text())[1]','[nvarchar](25)') QE_Assmnt_Material_Id,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				QEA.value('(a2c:Number_Per_Learner/text())[1]','int') Number_Per_Learner,
				QEA.value('(a2c:Number_Per_Centre/text())[1]','int') Number_Per_Centre,
				QEA.value('(a2c:Assmnt_Material_Release_Date/text())[1]','date') Assmnt_Material_Release_Date,
				QEA.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into
				#QEAAM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityAssessmentMaterial_DS/a2c:QEAvailabilityAssessmentMaterial/a2c:QEAssessmentMaterial_CN') as Q(CN) 
				CROSS APPLY Q.CN.nodes('a2c:QEAAssessmentMaterial') as QE(QEA)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAAM 
					WHERE ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QEA Assessment Material - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QEA Assessment Material" - Record QE_Assmnt_Material_Id="' + ISNULL(QE_Assmnt_Material_Id,'')
					+ '", AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEAAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time
				ORDER BY 
					[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time) 'RowRank' 
			FROM 
				#QEAAM)
			SELECT 
				* 
			INTO 
				#QEAAMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAAMDUPS)
			BEGIN

				print 'duplicate records found in QEA Assessment Material'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time
					ORDER BY 
						[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAAM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QEA Assessment Material - Record QE_Assmnt_Material_Id=' +  QE_Assmnt_Material_Id
					+ ', AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type
					+ ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100))
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAAMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAAMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAAMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAAM ADD [QualificationElementId] INT null, [QEAssessmentMaterialId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAAM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QEAAssessmentMaterial]]
			Update Q 
				set [QEAssessmentMaterialId]=QE.[QEAssessmentMaterialId]
			from 
				#QEAAM Q inner join [dbo].[QEAssessmentMaterial] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.QE_Assmnt_Material_Id=QE.[QE_Assmnt_Material_Id]

			--merge [QEAAssessmentMaterial]
			MERGE [dbo].[QEAAssessmentMaterial] AS [target]
			USING (SELECT * from #QEAAM where [QualificationElementId] is not null and [QEAssessmentMaterialId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEAssessmentMaterialId] = source.[QEAssessmentMaterialId] AND
				[target].QEA_Effective_Start_Date_Time = DBO.FN_A2C_GETDATETIME(source.QEA_Effective_Start_Date_Time))
			WHEN MATCHED THEN 
			UPDATE SET				
				[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				[Number_per_Learner] = source.[Number_per_Learner],
				[Number_per_Centre] = source.[Number_per_Centre],
				[Assmnt_Material_Release_Date] = source.[Assmnt_Material_Release_Date],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEAssessmentMaterialId],
				[QEA_Effective_Start_Date_Time],
				[Number_per_Learner],
				[Number_per_Centre],
				[Assmnt_Material_Release_Date],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QEAssessmentMaterialId],
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				source.[Number_per_Learner],
				source.[Number_per_Centre],
				source.[Assmnt_Material_Release_Date],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAAM', 'U') IS NOT NULL
				DROP TABLE #QEAAM;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QEA Assessment Material block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QEA Assessment Material'
					
		END CATCH

		----------------------------------------------------------------------
		----------------------------------------------------------------------
		----- STEP 11: IMPORT Qualification Element Grade --------------------
		----------------------------------------------------------------------
		----------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Grade/text())[1]','[nvarchar](50)') QE_Grade,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Outcome_Type/text())[1]','[nvarchar](32)') QE_Outcome_Type,
				CN.value('(a2c:QE_Grade_Effective_Date/text())[1]','date') QE_Grade_Effective_Date,
				CN.value('(a2c:QE_Grade_Eff_End_Date/text())[1]','date') QE_Grade_Eff_End_Date,
				CN.value('(a2c:QE_Grade_Description/text())[1]','[nvarchar](1500)') QE_Grade_Description,
				CN.value('(a2c:QE_Grade_Sequence_Order/text())[1]','int') QE_Grade_Sequence_Order,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into 
				#QEG	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementGrade_DS/a2c:QualificationElementGrade') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QualificationElementGrade_CN') as QEG(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEG 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Grade - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Grade" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '", QE_Outcome_Type="' + ISNULL(QE_Outcome_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEG 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEG 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type) 'RowRank' 
			FROM 
				#QEG)
			SELECT 
				* 
			INTO 
				#QEGDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEGDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Grade'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type) 'RowRank' 
				FROM 
					#QEG)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Grade - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Grade=' +  ISNULL(QE_Grade,'')
					+ ', QE_Outcome_Type=' +  ISNULL(QE_Outcome_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEGDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			----------------------------------------
			----- update references ----------------
			----------------------------------------
			--add dummy fk column to temp table
			ALTER TABLE #QEG ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEG Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			----------------------------------------
			----- insert/update using cursor -------
			----------------------------------------
			--get data in cursor						
			DECLARE QEGCURSOR CURSOR LOCAL FAST_FORWARD FOR 
			SELECT
				[QualificationElementId],
				[QE_Grade],
				[QE_Outcome_Type],
				[QE_Grade_Effective_Date],
				[QE_Grade_Eff_End_Date],
				[QE_Grade_Description],
				[QE_Grade_Sequence_Order],
				Record_Delete_Flag 
			from 
				#QEG 
			where 
				[QualificationElementId] is not null
				AND QE_Grade is not null
				AND QE_Outcome_Type is not null

			-- open cursor
			OPEN QEGCURSOR

			FETCH NEXT FROM QEGCURSOR 
			INTO @QualificationElementId,
				@QE_Grade,
				@QE_Outcome_Type,
				@QE_Grade_Effective_Date,
				@QE_Grade_Eff_End_Date,
				@QE_Grade_Description,
				@QE_Grade_Sequence_Order,
				@Record_Delete_Flag

			-- process each record in cursor
			WHILE @@FETCH_STATUS = 0
			BEGIN
				
				--first update record
				UPDATE 
					[dbo].QualificationElementGrade 
				SET 
					QE_Grade_Effective_Date = @QE_Grade_Effective_Date,
					QE_Grade_Eff_End_Date = @QE_Grade_Eff_End_Date,
					QE_Grade_Description = LTRIM(RTRIM(@QE_Grade_Description)),
					QE_Grade_Sequence_Order = @QE_Grade_Sequence_Order,
					[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(@Record_Delete_Flag)						
				WHERE 
					AwardingOrganisationCentreId = @AwardingOrganisationCentreId AND					
					[QualificationElementId] = @QualificationElementId AND
					[QE_Grade] = LTRIM(RTRIM(@QE_Grade)) AND
					[QE_Outcome_Type] = LTRIM(RTRIM(@QE_Outcome_Type))
				
				--if no record was updated, then insert record					
				IF @@ROWCOUNT = 0
				BEGIN
					INSERT [dbo].QualificationElementGrade(
						[AwardingOrganisationCentreId],
						[QualificationElementId],
						[QE_Grade],
						[QE_Outcome_Type],
						[QE_Grade_Effective_Date],
						[QE_Grade_Eff_End_Date],
						[QE_Grade_Description],
						[QE_Grade_Sequence_Order],
						[Record_Delete_Flag])
					VALUES (
						@AwardingOrganisationCentreId,
						@QualificationElementId,
						LTRIM(RTRIM(@QE_Grade)),
						LTRIM(RTRIM(@QE_Outcome_Type)),
						@QE_Grade_Effective_Date,
						@QE_Grade_Eff_End_Date,
						LTRIM(RTRIM(@QE_Grade_Description)),
						@QE_Grade_Sequence_Order,
						DBO.FN_A2C_GETFLAG(@Record_Delete_Flag))
				END

				--get next record
				FETCH NEXT FROM QEGCURSOR 
				INTO @QualificationElementId,
					@QE_Grade,
					@QE_Outcome_Type,
					@QE_Grade_Effective_Date,
					@QE_Grade_Eff_End_Date,
					@QE_Grade_Description,
					@QE_Grade_Sequence_Order,
					@Record_Delete_Flag
			END

			--release cursor
			CLOSE QEGCURSOR;
			DEALLOCATE QEGCURSOR;

			--merge [QualificationElementGrade]
			--MERGE [dbo].[QualificationElementGrade] AS [target]
			--USING (SELECT * from #QEG where [QualificationElementId] is not null) AS source
			--ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
			--	[target].[QualificationElementId] = source.[QualificationElementId] AND
			--	[target].[QE_Grade] = LTRIM(RTRIM(source.[QE_Grade])) AND
			--	[target].[QE_Outcome_Type] = LTRIM(RTRIM(source.[QE_Outcome_Type])))
			--WHEN MATCHED THEN 
			--UPDATE SET				
			--	[QE_Grade_Effective_Date] = source.[QE_Grade_Effective_Date],
			--	[QE_Grade_Eff_End_Date] = source.[QE_Grade_Eff_End_Date],
			--	[QE_Grade_Description] = LTRIM(RTRIM(source.[QE_Grade_Description])),
			--	[QE_Grade_Sequence_Order] = source.[QE_Grade_Sequence_Order],
			--	[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			--WHEN NOT MATCHED THEN	
			--INSERT (
			--	[AwardingOrganisationCentreId],
			--	[QualificationElementId],
			--	[QE_Grade],
			--	[QE_Outcome_Type],
			--	[QE_Grade_Effective_Date],
			--	[QE_Grade_Eff_End_Date],
			--	[QE_Grade_Description],
			--	[QE_Grade_Sequence_Order],
			--	[Record_Delete_Flag])
			--VALUES (
			--	source.[AOCentreID],
			--	source.[QualificationElementId],
			--	LTRIM(RTRIM(source.[QE_Grade])),
			--	LTRIM(RTRIM(source.[QE_Outcome_Type])),
			--	source.[QE_Grade_Effective_Date],
			--	source.[QE_Grade_Eff_End_Date],
			--	LTRIM(RTRIM(source.[QE_Grade_Description])),
			--	source.[QE_Grade_Sequence_Order],
			--	DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEG', 'U') IS NOT NULL
				DROP TABLE #QEG;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Grade block'
		
			SET @curStatus = Cursor_Status('LOCAL', 'QEGCURSOR'); 
			IF @curStatus >= 0 
			BEGIN
				CLOSE QEGCURSOR;
				DEALLOCATE QEGCURSOR;
			END
			ELSE IF @curStatus = -1 --may have been closed already so just deallocate
			BEGIN
				DEALLOCATE QEGCURSOR;
			END;

			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Grade'
					
		END CATCH

		-------------------------------------------------------
		----- STEP 11.1: IMPORT QE Grade Performance Points ---
		-------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Grade/text())[1]','[nvarchar](50)') QE_Grade,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Outcome_Type/text())[1]','[nvarchar](32)') QE_Outcome_Type,
				PPN.value('(a2c:QEGradePerformancePoints_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](32)') Party_Id_Administrator,
				PPN.value('(a2c:Performance_Points/text())[1]','Decimal(6,2)') Performance_Points,
				PPN.value('(a2c:Level_1_Threshold/text())[1]','Decimal(5,2)') Level_1_Threshold,
				PPN.value('(a2c:Level_2_Threshold/text())[1]','Decimal(5,2)') Level_2_Threshold,
				PPN.value('(a2c:Level_3_Threshold/text())[1]','Decimal(5,2)') Level_3_Threshold,
				PPN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into 
				#QEGPPT	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementGrade_DS/a2c:QualificationElementGrade') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QualificationElementGrade_CN') as QEG(CN) 
				CROSS APPLY QEG.CN.nodes('a2c:QEGradePerformancePoints') as QEGP(PPN) 

			
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEGPPT 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')='')
			BEGIN
				PRINT 'QE Grade Performance Points - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Grade Performance Points" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '", QE_Outcome_Type="' + ISNULL(QE_Outcome_Type,'')
					+ '", Party_Id_Administrator="' + ISNULL(Party_Id_Administrator,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGPPT 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEGPPT 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator) 'RowRank' 
			FROM 
				#QEGPPT)
			SELECT 
				* 
			INTO 
				#QEGPPTDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEGPPTDUPS)
			BEGIN

				print 'duplicate records found in QE Grade Performance Points'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator) 'RowRank' 
				FROM 
					#QEGPPT)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Grade - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Grade=' +  ISNULL(QE_Grade,'')
					+ ', QE_Outcome_Type=' +  ISNULL(QE_Outcome_Type,'')
					+ ', Party_Id_Administrator=' +  ISNULL(Party_Id_Administrator,'')
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGPPTDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGPPTDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEGPPTDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			----------------------------------------
			----- update references ----------------
			----------------------------------------
			--add dummy fk column to temp table
			ALTER TABLE #QEGPPT ADD [QualificationElementId] INT null, [QualificationElementGradeId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEGPPT Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QualificationElementGrade]]
			Update Q 
				set [QualificationElementGradeId]=QE.[QualificationElementGradeId]
			from 
				#QEGPPT Q inner join [dbo].[QualificationElementGrade] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.QualificationElementId=QE.QualificationElementId
				and LTRIM(RTRIM(Q.[QE_Grade]))=LTRIM(RTRIM(QE.[QE_Grade]))
				and LTRIM(RTRIM(Q.[QE_Outcome_Type]))=LTRIM(RTRIM(QE.[QE_Outcome_Type]))

			----------------------------------------
			----- insert/update using cursor -------
			----------------------------------------
			--get data in cursor						
			DECLARE QEGPPTCURSOR CURSOR LOCAL FAST_FORWARD FOR 
			SELECT
				[QualificationElementId],
				[QualificationElementGradeId],
				Party_Id_Administrator,
				Performance_Points,
				Level_1_Threshold,
				Level_2_Threshold,
				Level_3_Threshold,
				Record_Delete_Flag 
			from 
				#QEGPPT 
			where [QualificationElementId] is not null 
				and [QualificationElementGradeId] is not null
				and [Party_Id_Administrator] is not null

			-- open cursor
			OPEN QEGPPTCURSOR

			FETCH NEXT FROM QEGPPTCURSOR 
			INTO @QualificationElementId,
				@QualificationElementGradeId,
				@Party_Id_Administrator,
				@Performance_Points,
				@Level_1_Threshold,
				@Level_2_Threshold,
				@Level_3_Threshold,
				@Record_Delete_Flag

			-- process each record in cursor
			WHILE @@FETCH_STATUS = 0
			BEGIN

				--first update record
				UPDATE [dbo].[QEGradePerformancePoints] 
				SET [Performance_Points] = @Performance_Points,
					[Level_1_Threshold] = @Level_1_Threshold,
					[Level_2_Threshold] = @Level_2_Threshold,
					[Level_3_Threshold] = @Level_3_Threshold,
					[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(@Record_Delete_Flag)						
				WHERE 
					AwardingOrganisationCentreId = @AwardingOrganisationCentreId AND
					QualificationElementId = @QualificationElementId AND
					QualificationElementGradeId = @QualificationElementGradeId AND
					Party_Id_Administrator = LTRIM(RTRIM(@Party_Id_Administrator))
				
				--if no record was updated, then insert record					
				IF @@ROWCOUNT = 0
				BEGIN
					INSERT [dbo].[QEGradePerformancePoints](
						[AwardingOrganisationCentreId],
						[QualificationElementId],
						[QualificationElementGradeId],
						[Party_Id_Administrator],
						[Performance_Points],
						[Level_1_Threshold],
						[Level_2_Threshold],
						[Level_3_Threshold],
						[Record_Delete_Flag])
					VALUES (
						@AwardingOrganisationCentreId,
						@QualificationElementId,
						@QualificationElementGradeId,
						LTRIM(RTRIM(@Party_Id_Administrator)),
						@Performance_Points,
						@Level_1_Threshold,
						@Level_2_Threshold,
						@Level_3_Threshold,
						DBO.FN_A2C_GETFLAG(@Record_Delete_Flag))
				END

				--get next record
				FETCH NEXT FROM QEGPPTCURSOR 
				INTO @QualificationElementId,
					@QualificationElementGradeId,
					@Party_Id_Administrator,
					@Performance_Points,
					@Level_1_Threshold,
					@Level_2_Threshold,
					@Level_3_Threshold,
					@Record_Delete_Flag
			END

			--release cursor
			CLOSE QEGPPTCURSOR;
			DEALLOCATE QEGPPTCURSOR;

			--merge [QEGradePerformancePoints]
			--MERGE [dbo].[QEGradePerformancePoints] AS [target]
			--USING (SELECT * from #QEGPPT 
			--		where [QualificationElementId] is not null 
			--		and [QualificationElementGradeId] is not null
			--		and [Party_Id_Administrator] is not null) AS source
			--ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
			--	[target].[QualificationElementId] = source.[QualificationElementId] AND
			--	[target].[QualificationElementGradeId] = source.[QualificationElementGradeId] AND
			--	LTRIM(RTRIM([target].[Party_Id_Administrator]))=LTRIM(RTRIM(source.[Party_Id_Administrator])))
			--WHEN MATCHED THEN 
			--UPDATE SET
			--	[Performance_Points] = source.[Performance_Points],
			--	[Level_1_Threshold] = source.[Level_1_Threshold],
			--	[Level_2_Threshold] = source.[Level_2_Threshold],
			--	[Level_3_Threshold] = source.[Level_3_Threshold],
			--	[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			--WHEN NOT MATCHED THEN	
			--INSERT (
			--	[AwardingOrganisationCentreId],
			--	[QualificationElementId],
			--	[QualificationElementGradeId],
			--	[Party_Id_Administrator],
			--	[Performance_Points],
			--	[Level_1_Threshold],
			--	[Level_2_Threshold],
			--	[Level_3_Threshold],
			--	[Record_Delete_Flag])
			--VALUES (
			--	source.[AOCentreID],
			--	source.[QualificationElementId],
			--	source.[QualificationElementGradeId],
			--	LTRIM(RTRIM(source.[Party_Id_Administrator])),
			--	source.[Performance_Points],
			--	source.[Level_1_Threshold],
			--	source.[Level_2_Threshold],
			--	source.[Level_3_Threshold],
			--	DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGPPT', 'U') IS NOT NULL
				DROP TABLE #QEGPPT;			

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Grade Performance Points block'
		
			SET @curStatus = Cursor_Status('LOCAL', 'QEGPPTCURSOR'); 
			IF @curStatus >= 0 
			BEGIN
				CLOSE QEGPPTCURSOR;
				DEALLOCATE QEGPPTCURSOR;
			END
			ELSE IF @curStatus = -1 --may have been closed already so just deallocate
			BEGIN
				DEALLOCATE QEGPPTCURSOR;
			END;

			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId,  
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Grade Performance Points'
					
		END CATCH
					
		---------------------------------------------------
		---------------------------------------------------
		----- STEP 12: IMPORT QE Objective Statement ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				CN.value('(a2c:QEObjectiveStatement_ID/a2c:QE_Objective_Statement_Name/text())[1]','[nvarchar](32)') QE_Objective_Statement_Name,
				CN.value('(a2c:QE_Objective_Statement_Text/text())[1]','[nvarchar](500)') QE_Objective_Statement_Text,
				CN.value('(a2c:QE_Objctv_Stmnt_Level_Seq_Num/text())[1]','int') QE_Objctv_Stmnt_Level_Seq_Num,
				CN.value('(a2c:QE_Objective_Statement_Level/text())[1]','[nvarchar](8)') QE_Objective_Statement_Level,
				CN.value('(a2c:QE_Objective_Statement_Descr/text())[1]','[nvarchar](1000)') QE_Objective_Statement_Descr,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into 
				#QEOS
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEObjectiveStatement_DS/a2c:QEObjectiveStatement') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QEObjectiveStatement_CN') as QEO(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEOS 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')='')
			BEGIN
				PRINT 'QE Objective Statement - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Objective Statement" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Objective_Statement_Name="' + ISNULL(QE_Objective_Statement_Name,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOS 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEOS 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name 
			ORDER BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name) 'RowRank' 
			FROM 
				#QEOS)
			SELECT 
				* 
			INTO 
				#QEOSDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEOSDUPS)
			BEGIN

				print 'duplicate records found in QE Objective Statement'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name) 'RowRank' 
				FROM 
					#QEOS)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Objective Statement - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Objective_Statement_Name=' +  ISNULL(QE_Objective_Statement_Name,'')
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEOSDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEOS ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEOS Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QEObjectiveStatement]
			MERGE [dbo].[QEObjectiveStatement] AS [target]
			USING (SELECT * from #QEOS where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QE_Objective_Statement_Name] = LTRIM(RTRIM(source.[QE_Objective_Statement_Name])))
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Objective_Statement_Text] = LTRIM(RTRIM(source.[QE_Objective_Statement_Text])),
				[QE_Objctv_Stmnt_Level_Seq_Num] = source.[QE_Objctv_Stmnt_Level_Seq_Num],
				[QE_Objective_Statement_Level] = LTRIM(RTRIM(source.[QE_Objective_Statement_Level])),
				[QE_Objective_Statement_Descr] = LTRIM(RTRIM(source.[QE_Objective_Statement_Descr])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QE_Objective_Statement_Name],
				[QE_Objective_Statement_Text],
				[QE_Objctv_Stmnt_Level_Seq_Num],
				[QE_Objective_Statement_Level],
				[QE_Objective_Statement_Descr],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[QE_Objective_Statement_Name])),
				LTRIM(RTRIM(source.[QE_Objective_Statement_Text])),
				source.[QE_Objctv_Stmnt_Level_Seq_Num],
				LTRIM(RTRIM(source.[QE_Objective_Statement_Level])),
				LTRIM(RTRIM(source.[QE_Objective_Statement_Descr])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOS', 'U') IS NOT NULL
				DROP TABLE #QEOS;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Objective Statement block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Objective Statement'
					
		END CATCH

		---------------------------------------------------------------
		----- STEP 12.1: IMPORT QE Objective Statement Hierarchy ------
		---------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:AO_QE_Id_First/text())[1]','[nvarchar](50)') AO_QE_Id_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Type_First/text())[1]','[nvarchar](32)') QE_Type_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Objctv_Stmnt_Name_First/text())[1]','[nvarchar](32)') QE_Objctv_Stmnt_Name_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:AO_QE_Id_Second/text())[1]','[nvarchar](50)') AO_QE_Id_Second,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Type_Second/text())[1]','[nvarchar](32)') QE_Type_Second,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Objctv_Stmnt_Name_Second/text())[1]','[nvarchar](32)') QE_Objctv_Stmnt_Name_Second,
				QEID.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into 
				#QEOSH
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEObjectiveStatement_DS/a2c:QEObjectiveStatementHierarchy') as QE(QEID)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEOSH 
					WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')='')
			BEGIN
				PRINT 'QE Objective Statement Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Objective Statement Hierarchy" - Record AO_QE_Id_First="' + ISNULL(AO_QE_Id_First,'')
					+ '", QE_Type_First="' + ISNULL(QE_Type_First,'')
					+ '", QE_Objctv_Stmnt_Name_First="' + ISNULL(QE_Objctv_Stmnt_Name_First,'')
					+ '", AO_QE_Id_Second="' + ISNULL(AO_QE_Id_Second,'')
					+ '", QE_Type_Second="' + ISNULL(QE_Type_Second,'')
					+ '", QE_Objctv_Stmnt_Name_Second="' + ISNULL(QE_Objctv_Stmnt_Name_Second,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSH 
				WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEOSH 
				WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second
			ORDER BY 
				[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second) 'RowRank' 
			FROM 
				#QEOSH)
			SELECT 
				* 
			INTO 
				#QEOSHDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEOSHDUPS)
			BEGIN

				print 'duplicate records found in QE Objective Statement Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second
				ORDER BY 
					[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second) 'RowRank' 
				FROM 
					#QEOSH)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Objective Statement Hierarchy - Record AO_QE_Id_First=' +  ISNULL(AO_QE_Id_First,'')
					+ ', QE_Type_First=' +  ISNULL(QE_Type_First,'')
					+ ', QE_Objctv_Stmnt_Name_First=' +  ISNULL(QE_Objctv_Stmnt_Name_First,'')
					+ ', AO_QE_Id_Second=' +  ISNULL(AO_QE_Id_Second,'')
					+ ', QE_Type_Second=' +  ISNULL(QE_Type_Second,'')
					+ ', QE_Objctv_Stmnt_Name_Second=' +  ISNULL(QE_Objctv_Stmnt_Name_Second,'')
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSHDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSHDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEOSHDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk columns to temp table
			ALTER TABLE #QEOSH ADD 
			[QualificationElementId_First] INT null,
			[QEObjectiveStatementId_First] INT null,
			[QualificationElementId_Second] INT null,
			[QEObjectiveStatementId_Second] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId_First]=QE.QualificationElementId
			from 
				#QEOSH Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_First=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_First=QE.[Qualification_Element_Type]

			Update Q 
				set [QualificationElementId_Second]=QE.QualificationElementId
			from 
				#QEOSH Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Second=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Second=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QEObjectiveStatement]]
			Update Q 
				set [QEObjectiveStatementId_First]=QE.[QEObjectiveStatementId]
			from 
				#QEOSH Q inner join [dbo].[QEObjectiveStatement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId_First]=QE.[QualificationElementId] 
				and Q.QE_Objctv_Stmnt_Name_First=QE.QE_Objective_Statement_Name

			Update Q 
				set [QEObjectiveStatementId_Second]=QE.[QEObjectiveStatementId]
			from 
				#QEOSH Q inner join [dbo].[QEObjectiveStatement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId_Second]=QE.[QualificationElementId] 
				and Q.QE_Objctv_Stmnt_Name_Second=QE.QE_Objective_Statement_Name

			--merge [QEObjectiveStatementHierarchy]
			MERGE [dbo].[QEObjectiveStatementHierarchy] AS [target]
			USING (SELECT * from #QEOSH where 
				[QualificationElementId_First] is not null and
				[QEObjectiveStatementId_First] is not null and
				[QualificationElementId_Second] is not null and
				[QEObjectiveStatementId_Second] is not null
			) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId_First] = source.[QualificationElementId_First] AND
				[target].[QEObjectiveStatementId_First] = source.[QEObjectiveStatementId_First] AND
				[target].[QualificationElementId_Second] = source.[QualificationElementId_Second] AND
				[target].[QEObjectiveStatementId_Second] = source.[QEObjectiveStatementId_Second])
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId_First],
				[QEObjectiveStatementId_First],
				[QualificationElementId_Second],
				[QEObjectiveStatementId_Second],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId_First],
				source.[QEObjectiveStatementId_First],
				source.[QualificationElementId_Second],
				source.[QEObjectiveStatementId_Second],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSH', 'U') IS NOT NULL
				DROP TABLE #QEOSH;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Objective Statement Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Objective Statement Hierarchy'
					
		END CATCH

		-----------------------------------------------------------------------
		-----------------------------------------------------------------------
		----- STEP 13: IMPORT Qualification Element Age Range -----------------
		-----------------------------------------------------------------------
		-----------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEID.value('(a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				CN.value('(a2c:AgeRange_ID/a2c:Age_Range_Type/text())[1]','[nvarchar](32)') Age_Range_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into 
				#QEAR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementAgeRange_DS/a2c:QualificationElementAgeRange/a2c:QualificationElementAgeRange_CN/a2c:QEAgeRange_ID') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QEAgeRange_CN') as QEO(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAR 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Age Range - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Age Range" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", Age_Range_Type="' + ISNULL(Age_Range_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAR 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAR 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------
		
			
			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type 
			ORDER BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type) 'RowRank' 
			FROM 
				#QEAR)
			SELECT 
				* 
			INTO 
				#QEARDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEARDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Age Range'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type) 'RowRank' 
				FROM 
					#QEAR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Age Range - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', Age_Range_Type=' +  ISNULL(Age_Range_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEARDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEARDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEARDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			----------------------------------------
			----- update references ----------------
			----------------------------------------
			--add dummy fk column to temp table
			ALTER TABLE #QEAR ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAR Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]


			----------------------------------------
			----- insert/update using cursor -------
			----------------------------------------
			--get data in cursor						
			DECLARE QEARCURSOR CURSOR LOCAL FAST_FORWARD FOR 
			SELECT
				[QualificationElementId],
				[Age_Range_Type],
				Record_Delete_Flag 
			from 
				#QEAR 
			where [QualificationElementId] is not null 
			and [Age_Range_Type] is not null

			-- open cursor
			OPEN QEARCURSOR

			FETCH NEXT FROM QEARCURSOR 
			INTO @QualificationElementId,
				@Age_Range_Type,
				@Record_Delete_Flag

			-- process each record in cursor
			WHILE @@FETCH_STATUS = 0
			BEGIN
				
				--first update record
				UPDATE [dbo].QualificationElementAgeRange 
				SET [Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(@Record_Delete_Flag)						
				WHERE 
					AwardingOrganisationCentreId = @AwardingOrganisationCentreId AND
					QualificationElementId = @QualificationElementId AND
					[Age_Range_Type] = LTRIM(RTRIM(@Age_Range_Type))
				
				--if no record was updated, then insert record					
				IF @@ROWCOUNT = 0
				BEGIN
					INSERT [dbo].QualificationElementAgeRange(
						[AwardingOrganisationCentreId],
						[QualificationElementId],
						[Age_Range_Type],
						[Record_Delete_Flag])
					VALUES (
						@AwardingOrganisationCentreId,
						@QualificationElementId,
						LTRIM(RTRIM(@Age_Range_Type)),
						DBO.FN_A2C_GETFLAG(@Record_Delete_Flag))
				END

				--get next record
				FETCH NEXT FROM QEARCURSOR 
				INTO @QualificationElementId,
					@Age_Range_Type,
					@Record_Delete_Flag
			END

			--release cursor
			CLOSE QEARCURSOR;
			DEALLOCATE QEARCURSOR;


			--merge [QualificationElementAgeRange]
			--MERGE [dbo].[QualificationElementAgeRange] AS [target]
			--USING (SELECT * from #QEAR where [QualificationElementId] is not null and [Age_Range_Type] is not null) AS source
			--ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
			--	[target].[QualificationElementId] = source.[QualificationElementId] AND
			--	[target].[Age_Range_Type] = LTRIM(RTRIM(source.[Age_Range_Type])))
			--WHEN MATCHED THEN 
			--UPDATE SET
			--	[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			--WHEN NOT MATCHED THEN	
			--INSERT (
			--	[AwardingOrganisationCentreId],
			--	[QualificationElementId],
			--	[Age_Range_Type],
			--	[Record_Delete_Flag])
			--VALUES (
			--	source.[AOCentreID],
			--	source.[QualificationElementId],
			--	LTRIM(RTRIM(source.[Age_Range_Type])),
			--	DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAR', 'U') IS NOT NULL
				DROP TABLE #QEAR;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Age Range block'
		
			SET @curStatus = Cursor_Status('LOCAL', 'QEARCURSOR'); 
			IF @curStatus >= 0 
			BEGIN
				CLOSE QEARCURSOR;
				DEALLOCATE QEARCURSOR;
			END
			ELSE IF @curStatus = -1 --may have been closed already so just deallocate
			BEGIN
				DEALLOCATE QEARCURSOR;
			END;

			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Age Range'
					
		END CATCH

		--------------------------------------------------------
		--------------------------------------------------------
		----- STEP 14: IMPORT QE Availability Maximum Mark -----
		--------------------------------------------------------
		--------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEA.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QEA.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				CN.value('(a2c:QEAvailabilityMaximumMark_ID/a2c:QE_Outcome_Value_Type/text())[1]','[nvarchar](32)') QE_Outcome_Value_Type,
				CN.value('(a2c:QE_Availability_Maximum_Mark/text())[1]','int') QE_Availability_Maximum_Mark,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into 
				#QEAMM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityGradeBoundary_DS/a2c:QEAvailabilityMaximumMark/a2c:QEAvailability') as QE(QEA)
				CROSS APPLY QE.QEA.nodes('a2c:QEAvailabilityMaximumMark_CN') as QEM(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAMM 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')='')
			BEGIN
				PRINT 'QE Availability Maximum Mark - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Availability Maximum Mark" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", QE_Outcome_Value_Type="' + ISNULL(QE_Outcome_Value_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMM 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAMM 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type 
			ORDER BY
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type) 'RowRank' 
			FROM 
				#QEAMM)
			SELECT 
				* 
			INTO 
				#QEAMMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAMMDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Maximum Mark'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type 
				ORDER BY
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type) 'RowRank' 
				FROM 
					#QEAMM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Maximum Mark - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QEA_Effective_Start_Date_Time=' + cast(QEA_Effective_Start_Date_Time as varchar)
					+ ', QE_Outcome_Value_Type=' +  ISNULL(QE_Outcome_Value_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAMMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAMM ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAMM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QEAvailabilityMaximumMark]
			MERGE [dbo].[QEAvailabilityMaximumMark] AS [target]
			USING (SELECT * from #QEAMM 
					where [QualificationElementId] is not null
					and DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) is not null
					and [QE_Outcome_Value_Type] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.QEA_Effective_Start_Date_Time) AND
				[target].[QE_Outcome_Value_Type] = LTRIM(RTRIM(source.[QE_Outcome_Value_Type])))
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Availability_Maximum_Mark] = source.[QE_Availability_Maximum_Mark],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEA_Effective_Start_Date_Time],
				[QE_Outcome_Value_Type],
				[QE_Availability_Maximum_Mark],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				DBO.FN_A2C_GETDATETIME(source.QEA_Effective_Start_Date_Time),
				LTRIM(RTRIM(source.[QE_Outcome_Value_Type])),
				source.[QE_Availability_Maximum_Mark],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMM', 'U') IS NOT NULL
				DROP TABLE #QEAMM;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Maximum Mark block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Maximum Mark'
					
		END CATCH

		-------------------------------------------------------------------------
		----- STEP 14.1: IMPORT QE Availability Maximum Mark Grade Boundary -----
		-------------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEA.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QEA.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				CN.value('(a2c:QEAvailabilityMaximumMark_ID/a2c:QE_Outcome_Value_Type/text())[1]','[nvarchar](32)') QE_Outcome_Value_Type,
				GB.value('(a2c:QEAMaxMarkGradeBoundary_ID/a2c:QE_Grade/text())[1]','[nvarchar](50)') QE_Grade,
				GB.value('(a2c:Grade_Boundary_Lower_Limit/text())[1]','int') Grade_Boundary_Lower_Limit,
				GB.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](1)') Record_Delete_Flag
			into 
				#QEMMGB	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityGradeBoundary_DS/a2c:QEAvailabilityMaximumMark/a2c:QEAvailability') as QE(QEA)
				CROSS APPLY QE.QEA.nodes('a2c:QEAvailabilityMaximumMark_CN') as QEM(CN)
				CROSS APPLY QEM.CN.nodes('a2c:QEAMaxMarkGradeBoundary') as QEMM(GB) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEMMGB 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')='')
			BEGIN
				PRINT 'QE Availability Maximum Mark Grade Boundary - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Availability Maximum Mark Grade Boundary" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", QE_Outcome_Value_Type="' + ISNULL(QE_Outcome_Value_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEMMGB 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEMMGB 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade 
			ORDER BY
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade) 'RowRank' 
			FROM 
				#QEMMGB)
			SELECT 
				* 
			INTO 
				#QEMMGBDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEMMGBDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Maximum Mark'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade 
				ORDER BY
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade) 'RowRank' 
				FROM 
					#QEMMGB)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Maximum Mark - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type
					+ ', QEA_Effective_Start_Date_Time=' + cast(QEA_Effective_Start_Date_Time as varchar)
					+ ', QE_Outcome_Value_Type=' +  QE_Outcome_Value_Type
					+ ', QE_Grade=' +  QE_Grade
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEMMGBDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEMMGBDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEMMGBDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			----------------------------------------
			----- update references ----------------
			----------------------------------------
			--add dummy fk column to temp table
			ALTER TABLE #QEMMGB ADD [QualificationElementId] INT null, [QEAvailabilityMaximumMarkId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEMMGB Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and LTRIM(RTRIM(Q.[AO_Qualification_Element_Id]))=LTRIM(RTRIM(QE.[AO_Qualification_Element_Id])) 
				and LTRIM(RTRIM(Q.[Qualification_Element_Type]))=LTRIM(RTRIM(QE.[Qualification_Element_Type]))

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QEAvailabilityMaximumMarkId]=QE.[QEAvailabilityMaximumMarkId]
			from 
				#QEMMGB Q inner join [dbo].[QEAvailabilityMaximumMark] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId]=QE.[QualificationElementId]		
				and DBO.FN_A2C_GETDATETIME(Q.QEA_Effective_Start_Date_Time)=QE.QEA_Effective_Start_Date_Time
				and LTRIM(RTRIM(Q.[QE_Outcome_Value_Type]))=LTRIM(RTRIM(QE.[QE_Outcome_Value_Type]))


			----------------------------------------
			----- insert/update using cursor -------
			----------------------------------------
			--get data in cursor						
			DECLARE QEMMGBCURSOR CURSOR LOCAL FAST_FORWARD FOR 
			SELECT
				QEAvailabilityMaximumMarkId,
				QE_Grade,
				Grade_Boundary_Lower_Limit,
				Record_Delete_Flag 
			from 
				#QEMMGB 
			where [QualificationElementId] is not null
				and [QEAvailabilityMaximumMarkId] is not null
				and [QE_Grade] is not null

			-- open cursor
			OPEN QEMMGBCURSOR

			FETCH NEXT FROM QEMMGBCURSOR 
			INTO @QEAvailabilityMaximumMarkId,
				@QE_Grade,
				@Grade_Boundary_Lower_Limit,
				@Record_Delete_Flag

			-- process each record in cursor
			WHILE @@FETCH_STATUS = 0
			BEGIN
				
				--first update record
				UPDATE 
					[dbo].QEAMaxMarkGradeBoundary 
				SET 
					[Grade_Boundary_Lower_Limit] = @Grade_Boundary_Lower_Limit,
					[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(@Record_Delete_Flag)						
				WHERE 
					AwardingOrganisationCentreId = @AwardingOrganisationCentreId AND					
					[QEAvailabilityMaximumMarkId] = @QEAvailabilityMaximumMarkId AND
					[QE_Grade] = LTRIM(RTRIM(@QE_Grade))
				
				--if no record was updated, then insert record					
				IF @@ROWCOUNT = 0
				BEGIN
					INSERT [dbo].QEAMaxMarkGradeBoundary(
						[AwardingOrganisationCentreId],
						[QEAvailabilityMaximumMarkId],
						[QE_Grade],
						[Grade_Boundary_Lower_Limit],
						[Record_Delete_Flag])
					VALUES (
						@AwardingOrganisationCentreId,
						@QEAvailabilityMaximumMarkId,
						LTRIM(RTRIM(@QE_Grade)),
						@Grade_Boundary_Lower_Limit,
						DBO.FN_A2C_GETFLAG(@Record_Delete_Flag))
				END

				--get next record
				FETCH NEXT FROM QEMMGBCURSOR 
				INTO @QEAvailabilityMaximumMarkId,
					@QE_Grade,
					@Grade_Boundary_Lower_Limit,
					@Record_Delete_Flag
			END

			--release cursor
			CLOSE QEMMGBCURSOR;
			DEALLOCATE QEMMGBCURSOR;


			--merge [QEAMaxMarkGradeBoundary]
			--MERGE [dbo].[QEAMaxMarkGradeBoundary] AS [target]
			--USING (SELECT * from #QEMMGB 
			--		where [QualificationElementId] is not null
			--		and [QEAvailabilityMaximumMarkId] is not null) AS source
			--ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
			--	[target].[QEAvailabilityMaximumMarkId] = source.[QEAvailabilityMaximumMarkId] AND
			--	[target].[QE_Grade] = LTRIM(RTRIM(source.[QE_Grade])))
			--WHEN MATCHED THEN 
			--UPDATE SET
			--	[Grade_Boundary_Lower_Limit] = source.[Grade_Boundary_Lower_Limit],
			--	[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			--WHEN NOT MATCHED THEN	
			--INSERT (
			--	[AwardingOrganisationCentreId],
			--	[QEAvailabilityMaximumMarkId],
			--	[QE_Grade],
			--	[Grade_Boundary_Lower_Limit],
			--	[Record_Delete_Flag])
			--VALUES (
			--	source.[AOCentreID],
			--	source.[QEAvailabilityMaximumMarkId],
			--	LTRIM(RTRIM(source.[QE_Grade])),
			--	source.[Grade_Boundary_Lower_Limit],
			--	DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEMMGB', 'U') IS NOT NULL
				DROP TABLE #QEMMGB;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Maximum Mark Grade Boundary block'
		
			SET @curStatus = Cursor_Status('LOCAL', 'QEMMGBCURSOR'); 
			IF @curStatus >= 0 
			BEGIN
				CLOSE QEMMGBCURSOR;
				DEALLOCATE QEMMGBCURSOR;
			END
			ELSE IF @curStatus = -1 --may have been closed already so just deallocate
			BEGIN
				DEALLOCATE QEMMGBCURSOR;
			END;

			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Maximum Mark Grade Boundary'
					
		END CATCH

		-------------------------------------------------------------------------
		----- STEP 14.1 finished ------------------------------------------------
		-------------------------------------------------------------------------

		--UPDATE IMPORT STATUS
		IF @IsError=1
		BEGIN
			PRINT 'Exiting with error'
			--update import status
			UPDATE 
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
			SET 
				DATAIMPORTSTATUS = 2
			WHERE
				SchoolId = @SchoolID AND
				AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId

		END
		ELSE
		BEGIN
			--NO ERROR ENCOUNTERED
			--UPDATE SUCESS STATUS
			UPDATE 
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
			SET 
				DATAIMPORTSTATUS = 1
			WHERE
				SchoolId = @SchoolID AND
				AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND				
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId	
			
			-- Insert success Feedback message
			EXEC usp_Insert_A2CFeedbackMessages  @A2CTransactionResponseEnvelopeMessageId,@SchoolID, @AwardingOrganisationCentreId, '0001', 1, 'Message successfully processed',1

			PRINT 'Exiting with success'	
		END

	END TRY
	BEGIN CATCH

		PRINT 'Exception in Main block/Common area'
		
		IF @ScreenMasterId=0 OR @SchoolID=0 OR @AwardingOrganisationCentreId=0--REQUIRED THIS DATA TO LOG ERROR IN ERROR TABLE, IF ZERO THEN CANT LOG ERROR
		BEGIN
			PRINT ERROR_NUMBER() 		
			PRINT ERROR_LINE() 
			PRINT ERROR_MESSAGE()			
		END
		ELSE
		BEGIN
			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId,
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, 
				@MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Main block/Common area'			
		END

		--update import status
		UPDATE 
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
		SET 
			DATAIMPORTSTATUS = 2
		WHERE
			SchoolId = @SchoolID AND
			AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId

		PRINT 'Exiting with error from Main block/Common area'

	END CATCH;
END
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopes]...';


GO



ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopes]
@A2CTransactionResponseId int,
@IsSignalMessage bit,
@ResponseEnvelope varbinary(max) ,
@IsEDIMessage bit,
@AwardingOrganisationCentreId int,
@SchoolId int
AS
BEGIN
	Insert into A2CTransactionResponseEnvelopes (SchoolId,A2CTransactionResponseId,IsSignalMessage,IsEDIMessage,AwardingOrganisationCentreId)
	values(@SchoolId,@A2CTransactionResponseId,@IsSignalMessage
	,@IsEDIMessage,@AwardingOrganisationCentreId)

	Declare @A2CTransactionResponseEnvelopeId int
SELECT @A2CTransactionResponseEnvelopeId = CAST(SCOPE_IdENTITY() AS INT)

Insert into A2CTransactionResponseEnvelopesData(SchoolId,A2CTransactionResponseEnvelopeId,AwardingOrganisationCentreId,ResponseEnvelope)
	values(@SchoolId,@A2CTransactionResponseEnvelopeId,@AwardingOrganisationCentreId
	,@ResponseEnvelope)

Select @A2CTransactionResponseEnvelopeId
END
GO
PRINT N'Altering [dbo].[usp_CheckSMTPConfigured]...';


GO
ALTER PROCEDURE [dbo].[usp_CheckSMTPConfigured]	
	@ApplicationName varchar(Max),
	@IsRecordExist bit Output
AS
BEGIN
    SET NOCOUNT ON;		

	Set @IsRecordExist = 0

	IF UPPER(LTRIM(RTRIM(ISNULL(@ApplicationName,'')))) = 'FACILITY'		
	BEGIN
		--this parameter is only used for Facility
		IF EXISTS (SELECT HostName FROM dbo.SMTPEmailProviders)
		BEGIN
			declare @host nvarchar(250);
			SELECT top 1 @host=HostName FROM dbo.SMTPEmailProviders order by HostName desc;
			if len(@host)>0
				Set @IsRecordExist = 1		
			else
				Set @IsRecordExist = 0
		END
		ELSE
		BEGIN
			Set @IsRecordExist = 0
		END
	END	
END
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.11.1';


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeMessages].[DataImportStatus].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0 not imported(pending), 1 imported successfully, 2 imported with error, -3 file unreadable or schema validation fail, -2 validation failure, -1 out of sequence,-4 ignored-will not be processed (wrt A2C-750)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CTransactionResponseEnvelopeMessages', @level2type = N'COLUMN', @level2name = N'DataImportStatus';


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeMessages].[IsRedCodeFeedback].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'feedback column should be displayed in red when the message has a feedback code : 0002, 0003, 0004, 0005, 0006, 0007, 0008, 0009, 0010, 0016, 0017, 0019, 0202', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CTransactionResponseEnvelopeMessages', @level2type = N'COLUMN', @level2name = N'IsRedCodeFeedback';


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeMessages].[ImportPriority].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Decides import sequence (w.r.t. A2C-750), in normal cases all rows have default value 9999, but in case of edit incoming sequence number and resolving out of sequence scenario, when user decided to process pending messages, then those pending messages must be processed first, before processing any new messages. those pending messages will have import priority less than 9999, so will be picked up first by the import job', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CTransactionResponseEnvelopeMessages', @level2type = N'COLUMN', @level2name = N'ImportPriority';


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeSignals]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeSignals]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedA2CTransactionResponseErrors]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedA2CTransactionResponseErrors]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedA2CTransactionResponses]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedA2CTransactionResponses]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedA2CTransactions]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedA2CTransactions]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedFeedbacks]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedFeedbacks]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedMessages]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedMessages]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_GetA2CFeedbackMessages]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetA2CFeedbackMessages]';


GO
PRINT N'Refreshing [dbo].[usp_ProcessEditIncomingSequenceNumber]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_ProcessEditIncomingSequenceNumber]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/



if EXISTS(SELECT 1 FROM sys.Tables WHERE  Name = N'tmpA2CTransactionResponseEnvelopeMessagesData' AND Type = N'U')
begin


insert into A2CTransactionResponseEnvelopeMessagesData
( 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionResponseEnvelopeMessageId,
LastModifiedDate,
data
)
select 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionResponseEnvelopeMessageId,
LastModifiedDate,
data
from tmpA2CTransactionResponseEnvelopeMessagesData 

drop table tmpA2CTransactionResponseEnvelopeMessagesData

end

if EXISTS(SELECT 1 FROM sys.Tables WHERE  Name = N'tmpA2CTransactionResponseEnvelopeEDIsData' AND Type = N'U')
begin


insert into A2CTransactionResponseEnvelopeEDIsData
( 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionResponseEnvelopeEDIId,
LastModifiedDate,
data
)
select 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionResponseEnvelopeEDIId,
LastModifiedDate,
data
from tmpA2CTransactionResponseEnvelopeEDIsData 

drop table tmpA2CTransactionResponseEnvelopeEDIsData

end


if EXISTS(SELECT 1 FROM sys.Tables WHERE  Name = N'tmpA2CTransactionRequestsData' AND Type = N'U')
begin


insert into A2CTransactionRequestsData
( 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionRequestId,
LastModifiedDate,
Envelope
)
select 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionRequestId,
LastModifiedDate,
Envelope
from tmpA2CTransactionRequestsData 

drop table tmpA2CTransactionRequestsData

end


if EXISTS(SELECT 1 FROM sys.Tables WHERE  Name = N'tmpA2CTransactionResponseEnvelopesData' AND Type = N'U')
begin


insert into A2CTransactionResponseEnvelopesData
( 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionResponseEnvelopeId,
LastModifiedDate,
ResponseEnvelope
)
select 
SchoolId,
AwardingOrganisationCentreId,
A2CTransactionResponseEnvelopeId,
LastModifiedDate,
ResponseEnvelope
from tmpA2CTransactionResponseEnvelopesData 

drop table tmpA2CTransactionResponseEnvelopesData

end



GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeSignalErrors_A2CTransactionResponseEnvelopeSignals]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignalErrors] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignalErrors_A2CTransactionResponseEnvelopeSignals] FOREIGN KEY ([SchoolId], [A2CTransactionResponseEnvelopeSignalId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopeSignals] ([SchoolId], [A2CTransactionResponseEnvelopeSignalId]);

GO
ALTER TABLE [dbo].[A2CTransactionResponseErrors] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseErrors_A2CTransactionResponses] FOREIGN KEY ([SchoolId], [A2CTransactionResponseId]) REFERENCES [dbo].[A2CTransactionResponses] ([SchoolId], [A2CTransactionResponseId]);


GO

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignalErrors] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignalErrors_A2CTransactionResponseEnvelopeSignals];

ALTER TABLE [dbo].[A2CTransactionResponseErrors] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseErrors_A2CTransactionResponses];

GO
PRINT N'Update complete.';



	declare @AwardingOrganisationCentreId int

	--get data in cursor						
	DECLARE AOCentreCURSOR CURSOR FAST_FORWARD FOR 
	SELECT
		AwardingOrganisationCentreId
	from 
		AwardingOrganisationCentres

	-- open cursor
	OPEN AOCentreCURSOR

	FETCH NEXT FROM AOCentreCURSOR 
	INTO @AwardingOrganisationCentreId

	-- process each record in cursor
	WHILE @@FETCH_STATUS = 0
	BEGIN

		delete [QEAMaxMarkGradeBoundary] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QEAvailabilityMaximumMark] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QualificationElementAgeRange] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QEObjectiveStatementHierarchy] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QEObjectiveStatement] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QEGradePerformancePoints] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QualificationElementGrade] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QEAAssessmentMaterial] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QEAssessmentMaterial] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QESectorSubjectArea] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [SectorSubjectAreaHierarchy] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [SectorSubjectArea] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QualificationElementFramework] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QualificationFrameworkHierarchy] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QualificationFramework] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QEFeeCategory] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QEAvailabilityKeyEventFee] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QEAvailabilityKeyEvent] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QEAvailability] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [AOQEPreference] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QEPreference] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QELearnerIdentifier] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QERelationship] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [Pathway] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [Assessable] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [LearningUnit] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [Award] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [Scheme] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
		delete [QualificationElement] where [AwardingOrganisationCentreId]=@AwardingOrganisationCentreId
							
								
		--get next record
		FETCH NEXT FROM AOCentreCURSOR 
		INTO @AwardingOrganisationCentreId

	END

	--release cursor
	CLOSE AOCentreCURSOR;
	DEALLOCATE AOCentreCURSOR;

	DBCC CHECKIDENT('QEAMaxMarkGradeBoundary' , RESEED, 1000)
	DBCC CHECKIDENT('QEAvailabilityMaximumMark' , RESEED, 1000)
	DBCC CHECKIDENT('QualificationElementAgeRange' , RESEED, 1000)
	DBCC CHECKIDENT('QEObjectiveStatementHierarchy' , RESEED, 1000)
	DBCC CHECKIDENT('QEObjectiveStatement' , RESEED, 1000)
	DBCC CHECKIDENT('QEGradePerformancePoints' , RESEED, 1000)
	DBCC CHECKIDENT('QualificationElementGrade' , RESEED, 1000)
	DBCC CHECKIDENT('QEAAssessmentMaterial' , RESEED, 1000)
	DBCC CHECKIDENT('QEAssessmentMaterial' , RESEED, 1000)
	DBCC CHECKIDENT('QESectorSubjectArea' , RESEED, 1000)
	DBCC CHECKIDENT('SectorSubjectAreaHierarchy' , RESEED, 1000)
	DBCC CHECKIDENT('SectorSubjectArea' , RESEED, 1000)
	DBCC CHECKIDENT('QualificationElementFramework' , RESEED, 1000)
	DBCC CHECKIDENT('QualificationFrameworkHierarchy' , RESEED, 1000)
	DBCC CHECKIDENT('QualificationFramework' , RESEED, 1000)
	DBCC CHECKIDENT('QEFeeCategory' , RESEED, 1000)
	DBCC CHECKIDENT('QEAvailabilityKeyEventFee' , RESEED, 1000)
	DBCC CHECKIDENT('QEAvailabilityKeyEvent' , RESEED, 1000)
	DBCC CHECKIDENT('QEAvailability' , RESEED, 1000)
	DBCC CHECKIDENT('AOQEPreference' , RESEED, 1000)
	DBCC CHECKIDENT('QEPreference' , RESEED, 1000)
	DBCC CHECKIDENT('QELearnerIdentifier' , RESEED, 1000)
	DBCC CHECKIDENT('QualificationElement' , RESEED, 1000)
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[A2CTransactionRequests] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionRequests_A2CTransactions];

ALTER TABLE [dbo].[A2CTransactionRequests] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionRequests_AwardingOrganisationCentres];

ALTER TABLE [dbo].[A2CTransactionResponses] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponses_A2CTransactionRequests];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionMasters];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionResponseEnvelopes];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_AwardingOrganisationCentres];

ALTER TABLE [dbo].[A2CFeedbackMessages] WITH CHECK CHECK CONSTRAINT [FK_A2CFeedbackMessages_A2CTransactionResponseEnvelopeMessages];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionResponseEnvelopes];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_AwardingOrganisationCentres];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopes_A2CTransactionResponses];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignals_AwardingOrganisationCentres];

ALTER TABLE [dbo].[A2CTransactionRequestsData] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionRequestsData_A2CTransactionRequestsData];

ALTER TABLE [dbo].[A2CTransactionRequestsData] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionRequestsData_AwardingOrganisationCentres];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIsData] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIsData_A2CTransactionResponseEnvelopeEDIs];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIsData] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIsData_AwardingOrganisationCentres];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessagesData] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessagesData_A2CTransactionResponseEnvelopeMessages];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessagesData] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessagesData_AwardingOrganisationCentres];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopesData] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopesData_A2CTransactionResponseEnvelopes];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopesData] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopesData_AwardingOrganisationCentres];


GO
PRINT N'Update complete.';


GO
