/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar UserName "A2CUser"
:setvar DatabaseName "A2CDB"
:setvar DefaultFilePrefix "A2CDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Altering [dbo].[A2CTransactionResponseEnvelopeMessages]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages]
    ADD [ImportPriority] INT CONSTRAINT [DF_A2CTransactionResponseEnvelopeMessages_ImportPriority] DEFAULT ((9999)) NOT NULL;


GO
PRINT N'Creating [dbo].[usp_ProcessEditIncomingSequenceNumber]...';


GO
CREATE PROCEDURE usp_ProcessEditIncomingSequenceNumber
	@SchoolId int,
	@awardingOrganisationCentreId int,
	@NewSequence bigint,
	@IgnorePendingMessages bit
AS
	BEGIN TRAN SEQUPDATE

	BEGIN TRY

		--resolve out of sequence scenario
		
		IF(@IgnorePendingMessages = 1) --step 1 - ignore pending out of sequence messages if ignore option checkbox selected
		BEGIN
			update 
				m
			set 
				m.DataImportStatus = -4 --ignored message status
			from 
				A2CTransactionResponseEnvelopeMessages m
				inner join OutSequence os
				on os.AwardingOrganisationCentreId = m.AwardingOrganisationCentreId
			where 
				os.SequenceNumber = m.IncomingSequence
				and m.DataImportStatus = -1 --those marked as out of sequence
				and m.AwardingOrganisationCentreId = @awardingOrganisationCentreId
				and os.AwardingOrganisationCentreId = @awardingOrganisationCentreId
				and m.SchoolId = @SchoolId
		END
		ELSE --STEP 2 - mark pending out of sequence messages for processing
		BEGIN
			-- to do
			print 'to do'
		END

		--step 3 - delete out of sequence messages from tracking table
		delete from OutSequence where AwardingOrganisationCentreId=@awardingOrganisationCentreId
	
		--step 4 - update incoming sequence column
		update 
			AwardingOrganisationCentres
		set
			IncomingSequence = isnull(@NewSequence,1) - 1	
		where 
			A2CSchoolId=@SchoolId and
			AwardingOrganisationCentreId=@awardingOrganisationCentreId
			
		select 1		
		COMMIT TRAN SEQUPDATE
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN SEQUPDATE

		--rethrow error as catch will eat error
		DECLARE @ErrorMessage NVARCHAR(MAX);
		DECLARE @ErrorSeverity INT;
		DECLARE @ErrorState INT;

		SELECT 
			@ErrorMessage = ERROR_MESSAGE(),
			@ErrorSeverity = ERROR_SEVERITY(),
			@ErrorState = ERROR_STATE();

		RAISERROR (@ErrorMessage, -- Message text.
				   @ErrorSeverity, -- Severity.
				   @ErrorState -- State.
				   );
	END CATCH
GO
PRINT N'Creating [dbo].[usp_SelectExpectedAndPendingIncomingSequenceNumbers]...';


GO
CREATE Procedure usp_SelectExpectedAndPendingIncomingSequenceNumbers 
(
	@SchoolId int,
	@awardingOrganisationCentreId int,
	@IncomingSequence bigint OUTPUT
)
As
begin

	--select all pending messages
	DECLARE @SequenceNumbers VARCHAR(MAX) 
	
	select 
		@SequenceNumbers = COALESCE(@SequenceNumbers + ', ', '') + convert(varchar(10), SequenceNumber) 
	from
		OutSequence 
	where 		
		AwardingOrganisationCentreId=@awardingOrganisationCentreId
	order by 
		SequenceNumber

	select @SequenceNumbers

	--select Incoming Sequence
	select 
		@IncomingSequence = IncomingSequence 
	from 
		AwardingOrganisationCentres 
	where 
		A2CSchoolId=@SchoolId and
		AwardingOrganisationCentreId=@awardingOrganisationCentreId
end
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.10.4';


GO
PRINT N'Altering [dbo].[A2CTransactionResponseEnvelopeMessages].[DataImportStatus].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'0 not imported(pending), 1 imported successfully, 2 imported with error, -3 file unreadable or schema validation fail, -2 validation failure, -1 out of sequence,-4 ignored-will not be processed (wrt A2C-750)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CTransactionResponseEnvelopeMessages', @level2type = N'COLUMN', @level2name = N'DataImportStatus';


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeMessages].[ImportPriority].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Decides import sequence (w.r.t. A2C-750), in normal cases all rows have default value 9999, but in case of edit incoming sequence number and resolving out of sequence scenario, when user decided to process pending messages, then those pending messages must be processed first, before processing any new messages. those pending messages will have import priority less than 9999, so will be picked up first by the import job', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CTransactionResponseEnvelopeMessages', @level2type = N'COLUMN', @level2name = N'ImportPriority';


GO
PRINT N'Refreshing [DBO].[usp_CheckIncomingSequenceAlreadyUsed]...';


GO
EXECUTE sp_refreshsqlmodule N'[DBO].[usp_CheckIncomingSequenceAlreadyUsed]';


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessages]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessages]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessagesFeedBack]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessagesFeedBack]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopes]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopes]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_GetA2CFeedbackMessages]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetA2CFeedbackMessages]';


GO
PRINT N'Refreshing [dbo].[usp_GetXMLFeedbackForResponseEnvelopeMessage]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetXMLFeedbackForResponseEnvelopeMessage]';


GO
PRINT N'Refreshing [dbo].[USP_IMPORTPRODUCTCATALOGE]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_IMPORTPRODUCTCATALOGE]';


GO
PRINT N'Refreshing [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]';


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedMessages]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedMessages]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedFeedbacks]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedFeedbacks]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

Insert into ScreenMasters(ScreenMasterId, ScreenName,ScreenDescription)
Select	temp.ScreenMasterId, temp.ScreenName,temp.ScreenDescription
From	(Select 1025 ScreenMasterId, 'ViewAndResend' ScreenName,'View and Resend Messages' ScreenDescription
		union all
		Select 1026, 'EditIncomingSequenceNumber','Edit Incoming Sequence Number'	
		union all
		Select 1027, 'Widget','Widget'
		) As temp
		Left Join ScreenMasters sm 
		on temp.ScreenMasterId = sm.ScreenMasterId
Where sm.ScreenMasterId is null
GO

GO
PRINT N'Update complete.';


GO
