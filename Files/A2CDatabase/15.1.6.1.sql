/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/


IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Altering [dbo].[A2CTransactionResponseEnvelopeEDIs]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs]
    ADD [A2CTransactionMasterId] INT NULL,
        [IsResultFile]           BIT CONSTRAINT [DF_A2CTransactionResponseEnvelopeEDIs_IsResultFile] DEFAULT ((0)) NOT NULL;


GO
PRINT N'Creating [dbo].[SystemConfigurations]...';


GO
CREATE TABLE [dbo].[SystemConfigurations] (
    [SystemConfigurationId]            INT             IDENTITY (1000, 1) NOT NULL,
    [A2CApplicationUrl]                NVARCHAR (2083) NOT NULL,
    [ContactEmail]                     NVARCHAR (256)  NOT NULL,
    [ContactPhoneNumber]               NVARCHAR (50)   NOT NULL,
    [PickupFileFromEdiFolderInMinutes] SMALLINT        NOT NULL,
    [SendA2CRequestInMinutes]          SMALLINT        NOT NULL,
    [PollingInMinutes]                 SMALLINT        NOT NULL,
    [LastModified]                     DATETIME        NOT NULL,
    CONSTRAINT [PK_SystemConfigurations] PRIMARY KEY CLUSTERED ([SystemConfigurationId] ASC)
);


GO
PRINT N'Creating [dbo].[DF_SystemConfigurations_LastModified]...';


GO
ALTER TABLE [dbo].[SystemConfigurations]
    ADD CONSTRAINT [DF_SystemConfigurations_LastModified] DEFAULT (getutcdate()) FOR [LastModified];


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionMasters]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionMasters] FOREIGN KEY ([A2CTransactionMasterId]) REFERENCES [dbo].[A2CTransactionMasters] ([A2CTransactionMasterId]);


GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopeEDIs]...';


GO





ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeEDIs]
@AwardingOrganisationCentreId int,
@A2CTransactionResponseEnvelopeId int,
@data varbinary(max) ,
@FileName nvarchar(100),
@AwardingOrganisationNumber nvarchar(200),
@CentreNumber nvarchar(200),
@A2CSchoolId int,
@TransactionName nvarchar(100)=null,
@IsResultFile bit
AS
BEGIN
	
	DECLARE @A2CTransactionMasterId INT
	Declare @MessageAwardingOrganisationCentreId int
	EXEC @A2CTransactionMasterId= [usp_Select_A2CTransactionMasters_IdByName] @TransactionName

	
	Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
	inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
	inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
	where 
	aoc.A2CSchoolId=@A2CSchoolId and
	c.CentreNumber=@CentreNumber and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
	and ad.AONumber=@AwardingOrganisationNumber

	If @MessageAwardingOrganisationCentreId is null
	begin
		Select @CentreNumber = c.CentreNumber, @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
		inner join AwardingOrganisationAOAssignedCentres aoassign on aoassign.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		and aoassign.A2CSchoolId=aoc.A2CSchoolId
		where 
		aoc.A2CSchoolId=@A2CSchoolId 
		and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
		and aoassign.AOAssignCentreNumber=@CentreNumber
		and ad.AONumber=@AwardingOrganisationNumber
	end

	Insert into A2CTransactionResponseEnvelopeEDIs (AwardingOrganisationCentreId,A2CTransactionResponseEnvelopeId,[data],FileName, MessageAwardingOrganisationCentreId,A2CTransactionMasterId,IsResultFile)
	values(@AwardingOrganisationCentreId,@A2CTransactionResponseEnvelopeId,@data,@FileName,@MessageAwardingOrganisationCentreId,@A2CTransactionMasterId,@IsResultFile)
	
	select @CentreNumber
END
GO
PRINT N'Altering [dbo].[usp_GetSMTPProviderDetails]...';


GO
ALTER PROCEDURE [dbo].[usp_GetSMTPProviderDetails]
	@SchoolId int = NULL,
	@ApplicationName varchar(Max),
	@IsRecordExist bit Output
AS
BEGIN

    SET NOCOUNT ON;	

	DECLARE @SSURECORDEXIST BIT = 0
	DECLARE @SCHOOLRECORDEXISTS BIT = 0
	DECLARE @ISFACILITY BIT = 0 --this parameter is only used for Facility

	Set @IsRecordExist = 0

	IF UPPER(LTRIM(RTRIM(ISNULL(@ApplicationName,'')))) = 'FACILITY'
		SET @ISFACILITY = 1

	IF @ISFACILITY = 1
	BEGIN
		--this parameter is only used for Facility
		IF EXISTS (SELECT * FROM dbo.SMTPEmailProviders where SchoolId is null or (SchoolId = @SchoolId and ISNULL(EmailConfigurationChoice,0) <> 0))
			Set @IsRecordExist = 1
		ELSE
			Set @IsRecordExist = 0
	END

	IF EXISTS (SELECT * FROM dbo.SMTPEmailProviders WHERE SchoolId is null)
		SET @SSURECORDEXIST = 1

	IF EXISTS (SELECT * FROM dbo.SMTPEmailProviders WHERE SchoolId = @SchoolId)
		SET @SCHOOLRECORDEXISTS = 1

	--NO RECORDS FOUND AT ALL
	IF (@SSURECORDEXIST = 0 AND @SCHOOLRECORDEXISTS = 0)
	BEGIN
		--SELECT NULL		
		RETURN
	END

	--GET RECORD FOR SSU
	IF @SSURECORDEXIST = 1
	BEGIN		
		SELECT TOP 1
			ISNULL(SP.HostName,'') as Host, ISNULL(SP.Port,0) AS Port,ISNULL(SP.UserName,'') AS UserName,ISNULL(SP.[Password],'') AS [Password],
			ISNULL(SP.FromEmail,'') AS FromEmail,SP.SchoolId,ISNULL(SP.[AuthenticationRequired],0) AS AuthenticationRequired
		INTO
			#SSU			
		FROM
			dbo.SMTPEmailProviders SP         
		WHERE
			SP.SchoolId is null	
		ORDER BY 
			SP.SMTPEmailProviderId ASC
	END

	--SELECT DATA AS PER EMAIL CHOICE
	IF @SchoolId IS NULL
	BEGIN
		IF @SSURECORDEXIST = 1
			SELECT * FROM #SSU
		ELSE
			--SELECT NULL
			RETURN
	END
	ELSE
	BEGIN
		IF @SCHOOLRECORDEXISTS = 0
		BEGIN
			--NO RECORD EXIST AT SCHOOL LEVEL, SELECT SSU DETAILS
			IF @SSURECORDEXIST = 1
				SELECT * FROM #SSU
			ELSE
				--SELECT NULL
				RETURN
		END
		ELSE
		BEGIN
			--RECORD EXISTS AT SCHOOL LEVEL
			SELECT TOP 1
				ISNULL(SP.HostName,'') as Host, ISNULL(SP.Port,0) AS Port,ISNULL(SP.UserName,'') AS UserName,ISNULL(SP.[Password],'') AS [Password],
				ISNULL(SP.FromEmail,'') AS FromEmail,SP.SchoolId,ISNULL(SP.[AuthenticationRequired],0) AS [AuthenticationRequired],
				CASE @ISFACILITY WHEN 1 THEN ISNULL(SP.[EmailConfigurationChoice],1) ELSE ISNULL(SP.[EmailConfigurationChoice],2) END AS [EmailConfigurationChoice]
			INTO
				#SCHOOL
			FROM   
				dbo.SMTPEmailProviders SP 
			WHERE  
				SP.SchoolId = @SchoolId
			ORDER BY 
				SP.SMTPEmailProviderId ASC

			--NOW SELECT DATA AS PER SCHOOL CONFIGURATION CHOICE
			IF (SELECT [EmailConfigurationChoice] FROM #SCHOOL) = 1 --SMTP OPTION SELECTED
			BEGIN
				SELECT * FROM #SCHOOL
			END			
			ELSE IF (SELECT [EmailConfigurationChoice] FROM #SCHOOL) = 2 --AMAZON CLOUD OPTION SELECTED
			BEGIN	
				IF @SSURECORDEXIST = 1	
				BEGIN		
					--SELECT ALL DETAILS OF SSU EXCEPT EMAID ADDRESS
					UPDATE #SSU SET FromEmail = S.FromEmail FROM #SCHOOL S	
					SELECT * FROM #SSU
				END
				ELSE
					--SELECT NULL
					RETURN
			END			
			ELSE  --NONE OPTION SELECTED
			BEGIN
				IF @SSURECORDEXIST = 1
					SELECT * FROM #SSU
				ELSE
					--SELECT NULL
					RETURN
			END
		END
	END
END
GO
PRINT N'Creating [dbo].[usp_GetErrorLogs]...';


GO
CREATE PROCEDURE [dbo].[usp_GetErrorLogs]
	@SchoolId int = null,
	@OrderBy nvarchar(255) = '[LastModifiedDate] desc',
	@GridWhereClause nvarchar(max) = null,
	@PageNumber int = 1,
	@PageSize int = 20,
	@TotalCount int = 0 OUTPUT
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;

	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' ISNULL(SchoolId,0)=  ' + cast(ISNULL(@SchoolId,0) as nvarchar(10)) +								 
								 case when (@GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0) then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							(select
								ErrorLogId,
								E.A2CSchoolId as SchoolId,
								C.CentreNumber as Centre,
								AOD.AONumber + '' '' + AO.Name as AwardingOrganization,
								E.LastModifiedDate,
								ISNULL(S.ScreenDescription,'''') as Screen,
								'''' as [Description]
							from ErrorLogs E
								left outer join AwardingOrganisationCentres AOC on E.AwardingOrganisationCentreId=AOC.AwardingOrganisationCentreId
								left outer join Centres C on AOC.CentreId = C.CentreId
								left outer join AwardingOrganisationDetails AOD on AOC.AwardingOrganisationDetailId=AOD.AwardingOrganisationDetailId
								left outer join AwardingOrganisations AO on AOD.AwardingOrganisationId = AO.AwardingOrganisationId
								left outer join ScreenMasters S on E.ScreenMasterId = S.ScreenMasterId											 											
							) q1
						where ' + @WhereClause,							

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(select
												ErrorLogId,
												E.A2CSchoolId as SchoolId,
												C.CentreNumber as Centre,
												AOD.AONumber + '' '' + AO.Name as AwardingOrganization,
												E.LastModifiedDate,
												ISNULL(S.ScreenDescription,'''') as Screen,
												'''' as [Description]
											 from ErrorLogs E
											 left outer join AwardingOrganisationCentres AOC on E.AwardingOrganisationCentreId=AOC.AwardingOrganisationCentreId
											 left outer join Centres C on AOC.CentreId = C.CentreId
											 left outer join AwardingOrganisationDetails AOD on AOC.AwardingOrganisationDetailId=AOD.AwardingOrganisationDetailId
											 left outer join AwardingOrganisations AO on AOD.AwardingOrganisationId = AO.AwardingOrganisationId
											 left outer join ScreenMasters S on E.ScreenMasterId = S.ScreenMasterId											 											
											) q1
										where ' + @WhereClause + ') q2 
									WHERE q2.RowNumber BETWEEN @Skip AND @Take'
										
	EXECUTE sp_executesql @CountQuery, N'@TotalCountOut int OUTPUT', @TotalCountOut = @TotalCount OUTPUT

	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take	
End
GO
PRINT N'Creating [dbo].[usp_GetSystemConfigurations]...';


GO

CREATE PROCEDURE [dbo].[usp_GetSystemConfigurations]
AS   
BEGIN


SELECT [SystemConfigurationId]
      ,[A2CApplicationUrl]
      ,[ContactEmail]
      ,[ContactPhoneNumber]
      ,[PickupFileFromEdiFolderInMinutes]
      ,[SendA2CRequestInMinutes]
      ,[PollingInMinutes]
      ,[LastModified]
  FROM [dbo].[SystemConfigurations]

 END
GO
PRINT N'Creating [dbo].[USP_UpdateSystemConfiguration]...';


GO
CREATE PROCEDURE [dbo].[USP_UpdateSystemConfiguration]

@FieldNames NVARCHAR (MAX),
@FieldValues NVARCHAR (MAX),
@Delimiter VARCHAR(1)
AS

BEGIN

    SET NOCOUNT ON;

	DECLARE @FieldName NVARCHAR(MAX);
	DECLARE @posFieldName INT;
	DECLARE @posFieldValue INT;
	DECLARE @FieldValue NVARCHAR(MAX);
	Declare @stringToSplitFieldName NVARCHAR (MAX);
	DECLARE @stringToSplitFieldValue NVARCHAR (MAX);
	DECLARE @UpdatedFileds NVARCHAR (MAX);
		
	DECLARE @UpdateSQL NVARCHAR(MAX);
	Set @stringToSplitFieldName=@FieldNames;
	Set @stringToSplitFieldValue=@FieldValues;

	--Declare @inputUserData TABLE (UserId uniqueidentifier primary key, NewPassword nvarchar(128));

	-- Slipt Userid and insert in to temp table
	SET @UpdatedFileds = '';
	WHILE LEN(@stringToSplitFieldName) > 0
	BEGIN

		SELECT @posFieldName  = CHARINDEX(@Delimiter, @stringToSplitFieldName)
		SELECT @posFieldValue  = CHARINDEX(@Delimiter, @stringToSplitFieldValue)

		if @posFieldName = 0
			Begin
				SELECT @posFieldName = LEN(@stringToSplitFieldName)
				SELECT @FieldName = SUBSTRING(@stringToSplitFieldName, 1, @posFieldName)
				SELECT @posFieldValue = LEN(@stringToSplitFieldValue)
				SELECT @FieldValue = SUBSTRING(@stringToSplitFieldValue, 1, @posFieldValue)
			End
		Else
			Begin
				SELECT @FieldName = SUBSTRING(@stringToSplitFieldName, 1, @posFieldName-1)
				SELECT @FieldValue = SUBSTRING(@stringToSplitFieldValue, 1, @posFieldValue-1)
			End

		--SET @UpdateSQL = 'UPDATE	[dbo].[SystemConfigurations] SET ' + @FieldName + ' = ''' + @FieldValue + '''	
		--		, [LastModified] = GETUTCDATE()'
		--		EXEC( @UpdateSQL)

		if(len(@UpdatedFileds) > 0)
		SET @UpdatedFileds = @UpdatedFileds + ', '
		 SET @UpdatedFileds = @UpdatedFileds + @FieldName + ' = ''' + @FieldValue + '''';
			
		SELECT @stringToSplitFieldName = SUBSTRING(@stringToSplitFieldName, @posFieldName+1, LEN(@stringToSplitFieldName)-@posFieldName)
		SELECT @stringToSplitFieldValue = SUBSTRING(@stringToSplitFieldValue, @posFieldValue+1, LEN(@stringToSplitFieldValue)-@posFieldValue)
	END
	PRINT @UpdatedFileds
	SET @UpdateSQL = 'UPDATE	[dbo].[SystemConfigurations] SET ' + @UpdatedFileds +', [LastModified] = GETUTCDATE()'
				EXEC( @UpdateSQL)
	
END
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.6.1';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

Insert into ScreenMasters(ScreenMasterId, ScreenName,ScreenDescription)
Select	temp.ScreenMasterId, temp.ScreenName,temp.ScreenDescription
From	(Select 1018 ScreenMasterId, 'SchoolApplicationConfiguration' ScreenName,'School Application Configuration' ScreenDescription
		union all
		Select 1019, 'BusinessErrorLog','Business Error Log'
		) As temp
		Left Join ScreenMasters sm 
		on temp.ScreenMasterId = sm.ScreenMasterId
Where sm.ScreenMasterId is null

--Insert Default Value in System Configurations 

DECLARE @SystemConfigurationId INT
DECLARE @A2CApplicationURL NVARCHAR(2083)
DECLARE @ContactEmail NVARCHAR(256)
DECLARE @ContactPhoneNumber NVARCHAR(50)
DECLARE @PickUpFileFromEDIFolderInMinutes SMALLINT
DECLARE @SendA2CRequestInMinutes SMALLINT
DECLARE @PollingInMinutes SMALLINT

SET	@A2CApplicationURL = 'https://a2c.abhsindia.local:4431/Account/LogOn'
SET	@ContactEmail = 'a2capplication-admin@a2ccore.net'
SET @ContactPhoneNumber = '08456888400'
SET @PickUpFileFromEDIFolderInMinutes = 5
SET @SendA2CRequestInMinutes = 5
SET @PollingInMinutes = 5

SELECT @SystemConfigurationId = SystemConfigurationId FROM SystemConfigurations

IF ISNULL(@SystemConfigurationId, 0) = 0
BEGIN
	INSERT INTO [dbo].[SystemConfigurations]([A2CApplicationURL], [ContactEmail], [ContactPhoneNumber], [PickUpFileFromEDIFolderInMinutes], [SendA2CRequestInMinutes],
												[PollingInMinutes])
     VALUES
           (@A2CApplicationURL, @ContactEmail, @ContactPhoneNumber, @PickUpFileFromEDIFolderInMinutes, @SendA2CRequestInMinutes, @PollingInMinutes)
END
ELSE
BEGIN
	UPDATE [dbo].[SystemConfigurations]
	SET		[A2CApplicationURL] = @A2CApplicationURL,
			[ContactEmail] = @ContactEmail,
			[ContactPhoneNumber] = @ContactPhoneNumber,
			[PickUpFileFromEDIFolderInMinutes] = @PickUpFileFromEDIFolderInMinutes,
			[SendA2CRequestInMinutes] = @SendA2CRequestInMinutes,
			[PollingInMinutes] = @PollingInMinutes,
			[LastModified] = GETUTCDATE()
	 WHERE	[SystemConfigurationId] = @SystemConfigurationId
END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionMasters];


GO
PRINT N'Update complete.';


GO
