/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar UserName "A2CUser"
:setvar DatabaseName "A2CDB"
:setvar DefaultFilePrefix "A2CDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

update AwardingOrganisationCentres set incomingsequence=0 where incomingsequence is null
GO

GO
PRINT N'Dropping DF_A2COutSequenceRequests_LastModifiedDate...';


GO
ALTER TABLE [dbo].[A2COutSequenceRequests] DROP CONSTRAINT [DF_A2COutSequenceRequests_LastModifiedDate];


GO
PRINT N'Dropping DF_A2CSendRequests_LastModifiedDate...';


GO
ALTER TABLE [dbo].[A2CSendRequests] DROP CONSTRAINT [DF_A2CSendRequests_LastModifiedDate];


GO
PRINT N'Dropping DF_A2CSendRequests_Status...';


GO
ALTER TABLE [dbo].[A2CSendRequests] DROP CONSTRAINT [DF_A2CSendRequests_Status];


GO
PRINT N'Dropping FK_A2CSendRequests_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CSendRequests] DROP CONSTRAINT [FK_A2CSendRequests_AwardingOrganisationCentres];


GO
/*
The column [dbo].[A2COutSequenceRequests].[AOAssignCentreNumber] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[A2COutSequenceRequests]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2COutSequenceRequests] (
    [A2COutSequenceRequestId]      INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [Feedback]                     NVARCHAR (MAX) NULL,
    [LastModifiedDate]             DATETIME       CONSTRAINT [DF_A2COutSequenceRequests_LastModifiedDate] DEFAULT (getutcdate()) NULL,
    [LastSequence]                 BIGINT         NULL,
    [PendingSequence]              NVARCHAR (MAX) NULL,
    [MissingSequence]              NVARCHAR (MAX) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2COutSequenceRequests] PRIMARY KEY CLUSTERED ([A2COutSequenceRequestId] ASC, [AwardingOrganisationCentreId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2COutSequenceRequests])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2COutSequenceRequests] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2COutSequenceRequests] ([A2COutSequenceRequestId], [AwardingOrganisationCentreId], [Feedback], [LastModifiedDate], [LastSequence], [PendingSequence], [MissingSequence])
        SELECT   [A2COutSequenceRequestId],
                 [AwardingOrganisationCentreId],
                 [Feedback],
                 [LastModifiedDate],
                 [LastSequence],
                 [PendingSequence],
                 [MissingSequence]
        FROM     [dbo].[A2COutSequenceRequests]
        ORDER BY [A2COutSequenceRequestId] ASC, [AwardingOrganisationCentreId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2COutSequenceRequests] OFF;
    END

DROP TABLE [dbo].[A2COutSequenceRequests];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2COutSequenceRequests]', N'A2COutSequenceRequests';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2COutSequenceRequests]', N'PK_A2COutSequenceRequests', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[A2CSendRequests]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CSendRequests] (
    [A2CSendRequestId]             INT      IDENTITY (1, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT      NULL,
    [A2CRequestId]                 INT      NULL,
    [A2COutSequenceRequestId]      INT      NULL,
    [A2CFeedbackMessageId]         INT      NULL,
    [Status]                       TINYINT  CONSTRAINT [DF_A2CSendRequests_Status] DEFAULT ((0)) NULL,
    [LastModifiedDate]             DATETIME CONSTRAINT [DF_A2CSendRequests_LastModifiedDate] DEFAULT (getutcdate()) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CSendRequests] PRIMARY KEY CLUSTERED ([A2CSendRequestId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CSendRequests])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CSendRequests] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CSendRequests] ([A2CSendRequestId], [AwardingOrganisationCentreId], [A2CRequestId], [Status], [LastModifiedDate])
        SELECT   [A2CSendRequestId],
                 [AwardingOrganisationCentreId],
                 [A2CRequestId],
                 [Status],
                 [LastModifiedDate]
        FROM     [dbo].[A2CSendRequests]
        ORDER BY [A2CSendRequestId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CSendRequests] OFF;
    END

DROP TABLE [dbo].[A2CSendRequests];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CSendRequests]', N'A2CSendRequests';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CSendRequests]', N'PK_A2CSendRequests', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[A2CSendRequests].[IX_A2CSendRequests]...';


GO
CREATE NONCLUSTERED INDEX [IX_A2CSendRequests]
    ON [dbo].[A2CSendRequests]([AwardingOrganisationCentreId] ASC, [A2CSendRequestId] ASC);


GO
PRINT N'Creating [dbo].[A2CSendRequests].[IX_A2CSendRequests_1]...';


GO
CREATE NONCLUSTERED INDEX [IX_A2CSendRequests_1]
    ON [dbo].[A2CSendRequests]([AwardingOrganisationCentreId] ASC, [A2CRequestId] ASC);


GO
PRINT N'Altering [dbo].[AwardingOrganisationCentres]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCentres] ALTER COLUMN [IncomingSequence] BIGINT NOT NULL;


GO
PRINT N'Creating [dbo].[A2CFeedbackMessageDetails]...';


GO
CREATE TABLE [dbo].[A2CFeedbackMessageDetails] (
    [A2CFeedbackMessageDetailId]   INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [A2CFeedbackMessageId]         INT            NOT NULL,
    [Code]                         VARCHAR (4)    NULL,
    [Severity]                     TINYINT        NULL,
    [FeedbackMessage]              NVARCHAR (MAX) NULL,
    [FeedbackLevel]                TINYINT        NULL,
    CONSTRAINT [PK_A2CFeedbackMessageDetails] PRIMARY KEY CLUSTERED ([A2CFeedbackMessageDetailId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CFeedbackMessages]...';


GO
CREATE TABLE [dbo].[A2CFeedbackMessages] (
    [A2CFeedbackMessageId]                    INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]            INT            NOT NULL,
    [A2CTransactionResponseEnvelopeMessageId] INT            NOT NULL,
    [SchoolId]                                INT            NOT NULL,
    [AOFeedback]                              NVARCHAR (MAX) NULL,
    [LastModifiedDate]                        DATETIME       NOT NULL,
    CONSTRAINT [PK_A2CFeedbackMessages] PRIMARY KEY CLUSTERED ([A2CFeedbackMessageId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating DF_A2CFeedbackMessages_LastModifiedDate...';


GO
ALTER TABLE [dbo].[A2CFeedbackMessages]
    ADD CONSTRAINT [DF_A2CFeedbackMessages_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating DF_AwardingOrganisationCentres_IncomingSequence...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCentres]
    ADD CONSTRAINT [DF_AwardingOrganisationCentres_IncomingSequence] DEFAULT ((0)) FOR [IncomingSequence];


GO
PRINT N'Creating FK_A2CSendRequests_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CSendRequests] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CSendRequests_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating FK_A2CSendRequests_A2CFeedbackMessages...';


GO
ALTER TABLE [dbo].[A2CSendRequests] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CSendRequests_A2CFeedbackMessages] FOREIGN KEY ([A2CFeedbackMessageId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[A2CFeedbackMessages] ([A2CFeedbackMessageId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating FK_A2CSendRequests_A2COutSequenceRequests...';


GO
ALTER TABLE [dbo].[A2CSendRequests] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CSendRequests_A2COutSequenceRequests] FOREIGN KEY ([A2COutSequenceRequestId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[A2COutSequenceRequests] ([A2COutSequenceRequestId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating FK_A2CSendRequests_A2CSendRequests...';


GO
ALTER TABLE [dbo].[A2CSendRequests] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CSendRequests_A2CSendRequests] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CRequestId]) REFERENCES [dbo].[A2CRequests] ([AwardingOrganisationCentreId], [A2CRequestId]);


GO
PRINT N'Creating FK_A2CFeedbackMessageDetails_A2CFeedbackMessages...';


GO
ALTER TABLE [dbo].[A2CFeedbackMessageDetails] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CFeedbackMessageDetails_A2CFeedbackMessages] FOREIGN KEY ([A2CFeedbackMessageId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[A2CFeedbackMessages] ([A2CFeedbackMessageId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating FK_A2CFeedbackMessages_A2CSchools...';


GO
ALTER TABLE [dbo].[A2CFeedbackMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CFeedbackMessages_A2CSchools] FOREIGN KEY ([SchoolId]) REFERENCES [dbo].[A2CSchools] ([A2CSchoolId]);


GO
PRINT N'Creating FK_A2CFeedbackMessages_A2CTransactionResponseEnvelopeMessages...';


GO
ALTER TABLE [dbo].[A2CFeedbackMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CFeedbackMessages_A2CTransactionResponseEnvelopeMessages] FOREIGN KEY ([SchoolId], [A2CTransactionResponseEnvelopeMessageId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopeMessages] ([SchoolId], [A2CTransactionResponseEnvelopeMessageId]);


GO
PRINT N'Creating FK_A2CFeedbackMessages_AwardingOrganisationCentres...';


GO
ALTER TABLE [dbo].[A2CFeedbackMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CFeedbackMessages_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Altering [dbo].[usp_DeleteA2CSentQueues]...';


GO

ALTER Procedure [dbo].[usp_DeleteA2CSentQueues]
@AwardingOrganisationCentreId int,
@A2CSendRequestId int,
@Feedback nvarchar(max),
@IsSuccessful bit,
@OutgoingSequence bigint
as
begin
	if @IsSuccessful=1 
	begin
		Declare @OutgoingSequenceCurrent bigint		
		select @OutgoingSequenceCurrent=OutgoingSequence
		from AwardingOrganisationCentres where AwardingOrganisationCentreId=@AwardingOrganisationCentreId
		if @OutgoingSequenceCurrent=@OutgoingSequence
		begin
			update AwardingOrganisationCentres
			set OutgoingSequence= OutgoingSequence + 1
			where AwardingOrganisationCentreId=@AwardingOrganisationCentreId
		end
	end
	delete from A2CSentQueues where 
	AwardingOrganisationCentreId = @AwardingOrganisationCentreId
	
	declare @A2CRequestId int
	declare @A2COutSequenceRequestId int
	declare @A2CFeedbackMessageId int

	set @A2CRequestId=0
	set @A2COutSequenceRequestId=0
	set @A2CFeedbackMessageId=0

	select @A2CRequestId=A2CRequestId,@A2COutSequenceRequestId=A2COutSequenceRequestId,@A2CFeedbackMessageId=A2CFeedbackMessageId
	from A2CSendRequests where AwardingOrganisationCentreId = @AwardingOrganisationCentreId and A2CSendRequestId = @A2CSendRequestId 

	update A2CSendRequests set Status=2
	where AwardingOrganisationCentreId = @AwardingOrganisationCentreId and A2CSendRequestId = @A2CSendRequestId 


	if @A2CRequestId>0
	begin
		update A2CRequests set Feedback=@Feedback,LastModifiedDate=getutcdate()
		where AwardingOrganisationCentreId = @AwardingOrganisationCentreId and A2CRequestId = @A2CRequestId 
	end
	if @A2COutSequenceRequestId>0
	begin
		update A2COutSequenceRequests set Feedback=@Feedback,LastModifiedDate=getutcdate()
		where AwardingOrganisationCentreId = @AwardingOrganisationCentreId and A2COutSequenceRequestId = @A2COutSequenceRequestId 
	end
	if @A2CFeedbackMessageId>0
	begin
		update A2CFeedbackMessages set AOFeedback=@Feedback,LastModifiedDate=getutcdate()
		where AwardingOrganisationCentreId = @AwardingOrganisationCentreId and A2CFeedbackMessageId = @A2CFeedbackMessageId 
	end

end
GO
PRINT N'Altering [dbo].[usp_InsertCheckA2CSentQueues]...';


GO


--delete from A2CSentQueues
--update A2CSendRequests set Status=0 where Status=1
--select * from A2CSentQueues
--usp_InsertCheckA2CSentQueues 1003
ALTER Procedure [dbo].[usp_InsertCheckA2CSentQueues]
(
@AwardingOrganisationCentreId int
)
as
begin
if not exists(select 1 from A2CSentQueues where AwardingOrganisationCentreId=@AwardingOrganisationCentreId)
and exists(select 1 from
A2CSendRequests a2cSendR
where a2cSendR.AwardingOrganisationCentreId = 
@AwardingOrganisationCentreId and status=0)
begin

insert into A2CSentQueues(AwardingOrganisationCentreId)
values(@AwardingOrganisationCentreId)

declare @A2CSendRequestId int
select top 1 @A2CSendRequestId=A2CSendRequestId from
A2CSendRequests a2cSendR
where a2cSendR.AwardingOrganisationCentreId = @AwardingOrganisationCentreId and status=0
order by a2cSendR.A2CSendRequestId asc

update A2CSendRequests set Status=1 
where A2CSendRequestId =@A2CSendRequestId
and AwardingOrganisationCentreId = @AwardingOrganisationCentreId

	Select 
	  a2cSendR.A2CSendRequestId
	, a2csendr.A2CRequestId
	, a2csendr.A2COutSequenceRequestId
	, a2csendr.A2CFeedbackMessageId
	, a2cSendR.AwardingOrganisationCentreId
	, case when a2cR.A2CRequestId!=null then 
			a2cR.AOAssignCentreNumber
		else 
			AOAssign.AOAssignCentreNumber
		end	 as AOAssignCentreNumber	
	, aoc.CentreId
	, aoc.AwardingOrganisationDetailId
	, c.CentreNumber
	, aoc.A2CSchoolId
	, aoc.OutgoingSequence
	from A2CSendRequests a2cSendR
	inner join AwardingOrganisationCentres aoc on aoc.AwardingOrganisationCentreId=a2cSendR.AwardingOrganisationCentreId
	inner join Centres c on aoc.A2CSchoolId=c.A2CSchoolId and c.CentreId=aoc.CentreId
	left join A2CRequests a2cR on a2cr.AwardingOrganisationCentreId=a2csendr.AwardingOrganisationCentreId and  a2cr.A2CRequestId=a2csendr.A2CRequestId
	left join A2COutSequenceRequests a2cOutSequence on a2cOutSequence.AwardingOrganisationCentreId=a2csendr.AwardingOrganisationCentreId and  a2cOutSequence.A2COutSequenceRequestId=a2csendr.A2COutSequenceRequestId
	left join A2CFeedbackMessages feedbackMessages on feedbackMessages.AwardingOrganisationCentreId=a2csendr.AwardingOrganisationCentreId and  feedbackMessages.A2CFeedbackMessageId=a2csendr.A2CFeedbackMessageId	
	left Join AwardingOrganisationAOAssignedCentres AOAssign on AOAssign.A2CSchoolId=AOC.A2CSchoolId
	and AOAssign.AwardingOrganisationDetailId=AOC.AwardingOrganisationDetailId AND AOAssign.CentreId=AOC.CentreId
	where a2csendr.A2CSendRequestId=@A2CSendRequestId


	end
end
GO
PRINT N'Altering [dbo].[usp_SelectA2CRequestListToSend]...';


GO



---EXEC usp_SelectA2CRequestListToSend
ALTER PROCEDURE [dbo].[usp_SelectA2CRequestListToSend]
AS
BEGIN
Select 
distinct a2cSendR.AwardingOrganisationCentreId,
aoc.A2CSchoolId
from
A2CSendRequests a2cSendR
inner join AwardingOrganisationCentres aoc on aoc.AwardingOrganisationCentreId=a2cSendR.AwardingOrganisationCentreId
where a2csendr.Status=0
END
GO
PRINT N'Altering [dbo].[usp_GetActiveAwardingOrganisation]...';


GO

ALTER PROCEDURE [dbo].[usp_GetActiveAwardingOrganisation]
AS
BEGIN
	SET NOCOUNT ON;

	Select	Distinct AO.AwardingOrganisationId AwardingOrganisationId, 
			AO.Name AoName, 
			AO.[EndPoint] [EndPoint],
			(SELECT PollingInMinutes * 60 FROM SystemConfigurations) AS Frequency
	From	AwardingOrganisationCentreCertificates AOCC
		JOIN AwardingOrganisationCentres AOCE
			ON AOCC.AwardingOrganisationCentreId = AOCE.AwardingOrganisationCentreId
		JOIN AwardingOrganisationCertificates AOC
			ON AOCC.AwardingOrganisationCertificateId = AOC.AwardingOrganisationCertificateId
		JOIN Centres C
			ON AOCE.CentreId = C.CentreId
		JOIN A2CSchools S
			ON C.A2CSchoolId = S.A2CSchoolId
			AND AOCE.A2CSchoolId = S.A2CSchoolId
			AND AOC.A2CSchoolId = S.A2CSchoolId
		JOIN AwardingOrganisations AO
			ON AOC.AwardingOrganisationId = AO.AwardingOrganisationId
END
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]...';


GO
ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]
@A2CSchoolId int,
@AwardingOrganisationDetailId int,
@CentreId int,
@A2CTransactionResponseEnvelopeId int,
@MessageId nvarchar(50),
@RefMessageId nvarchar(50)=null,
@TimeStamp datetime,
@TransactionName nvarchar(100)=null,
@IncomingSequence bigint=null,
@data varbinary(max),
@IsFeedbackMessage  bit,
@AwardingOrganisationCentreId int,
@AwardingOrganisationNumber nvarchar(200),
@CentreNumber nvarchar(200),
@IsMessageLevelFeedbackMessage bit,
@A2CTransactionRequestId int,
@DataImportStatus int
AS
BEGIN
	DECLARE @A2CTransactionMasterId INT
	Declare @MessageAwardingOrganisationCentreId int
	EXEC @A2CTransactionMasterId= [usp_Select_A2CTransactionMasters_IdByName] @TransactionName
	Declare @A2CMessageId int

	Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
	inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
	inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
	where 
	aoc.A2CSchoolId=@A2CSchoolId and
	c.CentreNumber=@CentreNumber and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
	and ad.AONumber=@AwardingOrganisationNumber

	If @MessageAwardingOrganisationCentreId is null
	begin
		Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
		inner join AwardingOrganisationAOAssignedCentres aoassign on aoassign.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		and aoassign.A2CSchoolId=aoc.A2CSchoolId
		where 
		aoc.A2CSchoolId=@A2CSchoolId 
		and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
		and aoassign.AOAssignCentreNumber=@CentreNumber
		and ad.AONumber=@AwardingOrganisationNumber
	end
	
	Insert into A2CTransactionResponseEnvelopeMessages (SchoolId,A2CTransactionResponseEnvelopeId,MessageId,RefMessageId,[TimeStamp],A2CTransactionMasterId,IncomingSequence,[data],IsFeedbackMessage,A2CMessageId,AwardingOrganisationCentreId,MessageAwardingOrganisationCentreId,IsMessageLevelFeedbackMessage,DataImportStatus)
	values(@A2CSchoolId,@A2CTransactionResponseEnvelopeId,@MessageId,@RefMessageId,@TimeStamp,@A2CTransactionMasterId,@IncomingSequence,@data,@IsFeedbackMessage,@A2CMessageId,@AwardingOrganisationCentreId,@MessageAwardingOrganisationCentreId,@IsMessageLevelFeedbackMessage,@DataImportStatus)
	select cast(SCOPE_IdENTITY() as int)

	declare @MaxSequenceLimit bigint
	declare @IncomingSequencePresent bigint=0
	set @MaxSequenceLimit=4294967295 
	select @IncomingSequencePresent = isnull(IncomingSequence,0)
	from AwardingOrganisationCentres
	where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId	

	if @IncomingSequence is not null and @IncomingSequence>0 and @MessageAwardingOrganisationCentreId>0
		begin	
				if @IncomingSequence=1 and @MaxSequenceLimit=@IncomingSequencePresent
				begin
						--print 'update'	
						update AwardingOrganisationCentres
						set IncomingSequence=@IncomingSequence
						where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId
				end
				else
				begin
					--print 'innn'
					declare @OutSequence bigint
					set @OutSequence=@IncomingSequence	
					if not exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId and SequenceNumber<@OutSequence)
					and (@OutSequence - 1 = @IncomingSequencePresent)
					begin
					--print 'innn111'
						while exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  and SequenceNumber= @OutSequence + 1)
						begin
							---print 'delete' + cast(@OutSequence + 1 as varchar(max))
							delete from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  and SequenceNumber= @OutSequence + 1			
			
							update A2CTransactionResponseEnvelopeMessages set DataImportStatus=0 where 			
							SchoolId=@A2CSchoolId and AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  
							and DataImportStatus=-1 and IncomingSequence=@OutSequence+ 1	

							set @OutSequence= @OutSequence+ 1	
						end
					end

					if not exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId and
						SequenceNumber<=@OutSequence)
					begin	
						--print 'insertupdate'
						if @OutSequence>@IncomingSequence or @IncomingSequencePresent + 1 = @IncomingSequence 
						begin
								--print 'update'	
								update AwardingOrganisationCentres
								set IncomingSequence=@OutSequence
								where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId
						end
					end
	
					if @OutSequence<=@IncomingSequence and @IncomingSequence > @IncomingSequencePresent + 1 
					begin
						--print 'insertoutsequence'	

						if not exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId and
						SequenceNumber=@IncomingSequence)
						begin		
							insert into OutSequence(AwardingOrganisationCentreId,SequenceNumber)
							select @MessageAwardingOrganisationCentreId,@IncomingSequence							
						end		
							update A2CTransactionResponseEnvelopeMessages set DataImportStatus=-1 where 			
							SchoolId=@A2CSchoolId and AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  
							and DataImportStatus=0 and IncomingSequence=@IncomingSequence
					end	
			end
	end

	update A2CTransactionRequests set CentreNumber=@CentreNumber where A2CTransactionRequestId=@A2CTransactionRequestId
	and SchoolId=@A2CSchoolId

	END
GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueLearningUnits]...';


GO




ALTER  PROCEDURE [dbo].[usp_GetProductCatalogueLearningUnits]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									L.Learning_Unit_Level_Type AS LearningUnitLevelType,					L.Maximum_Resits_Allowed AS MaximumResitsAllowed,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM LearningUnit L
								INNER JOIN QualificationElement QE ON L.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									L.Learning_Unit_Level_Type AS LearningUnitLevelType,					L.Maximum_Resits_Allowed AS MaximumResitsAllowed,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM LearningUnit L
								INNER JOIN QualificationElement QE ON L.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') LU
							WHERE LU.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Altering [dbo].[usp_GetXMLFeedbackForResponseEnvelopeMessage]...';


GO

ALTER  PROCEDURE [dbo].[usp_GetXMLFeedbackForResponseEnvelopeMessage]
@SchoolId AS INT,
@A2CTransactionResponseEnvelopeMessageId AS INT

AS
	SET NOCOUNT ON;

	SELECT CAST(data AS XML) AS XMLFeedback, IsMessageLevelFeedbackMessage FROM A2CTransactionResponseEnvelopeMessages
	WHERE IsFeedbackMessage=1 
		AND A2CTransactionResponseEnvelopeMessageId = @A2CTransactionResponseEnvelopeMessageId 
		AND SchoolId = @SchoolId 
		AND DataImportStatus <> -3 --"Currupted file received"
	UNION ALL
	SELECT CAST('<FileError>File is unreadable or currupted</FileError>' AS XML) AS XMLFeedback, CAST(0 AS BIT) AS IsMessageLevelFeedbackMessage
	FROM A2CTransactionResponseEnvelopeMessages
	WHERE IsFeedbackMessage=1 
		AND A2CTransactionResponseEnvelopeMessageId = @A2CTransactionResponseEnvelopeMessageId 
		AND SchoolId = @SchoolId 
		AND DataImportStatus = -3
GO
PRINT N'Altering [dbo].[usp_SelectA2CTransactionLog]...';


GO
ALTER PROCEDURE [dbo].[usp_SelectA2CTransactionLog]
@SchoolId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[TransactionDate] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
	@Take int = (@PageNumber * @PageSize),
	@WhereClause nvarchar(max) = '[SchoolId] = ' + cast(@SchoolId as nvarchar(10)) +
								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end


SET @TotalCount = 0;
	
	

	declare @CountQuery as nvarchar(max) = 'Select @TotalCountOut = Count(1) from
	(
select at.SchoolId,at.A2CTransactionId,are.A2CTransactionRequestId,case when are.A2CTransactionRequestId is not null then are.CentreNumber 
else at.CentreNumber end as CentreNumber,case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then adEDI.AONumber + '' '' + aoEDI.Name 
when arpem.A2CTransactionResponseEnvelopeMessageId is not null then adMessage.AONumber + '' '' + aoMessage.Name 
else ad.AONumber + '' '' + ao.Name end as AwardingOrganisation,
at.LastModifiedDate TransactionDate,
case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then  arpeetrMaster.TransactionName
when arpem.A2CTransactionResponseEnvelopeMessageId is not null then  arpemtrMaster.TransactionName
else am.TransactionName  end as TransactionName,
case when arpem.A2CTransactionResponseEnvelopeMessageId is not null then arpem.MessageId else atm.A2CMessageGuid end as MessageGuid,
case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then arpee.FileName
else atedi.FileName end as FileName,
case when arpem.A2CTransactionResponseEnvelopeMessageId is not null then arpem.IncomingSequence
else  atm.OutgoingSequence end as Sequence,
arpem.A2CTransactionResponseEnvelopeMessageId,
srm.SignalResponseText
from A2CTransactions at inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId
inner join AwardingOrganisationCentres aoc on at.SchoolId=aoc.A2CSchoolId and at.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
inner join AwardingOrganisations ao on ao.AwardingOrganisationId=ad.AwardingOrganisationId
left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 
left join A2CTransactionResponses arp on are.SchoolId=arp.SchoolId and are.A2CTransactionRequestId=arp.A2CTransactionRequestId
left join A2CTransactionResponseEnvelopes arpe on arpe.SchoolId=arp.SchoolId and arpe.A2CTransactionResponseId=arp.A2CTransactionResponseId
left join A2CTransactionResponseEnvelopeMessages arpem on arpe.SchoolId=arpem.SchoolId and arpe.A2CTransactionResponseEnvelopeId=arpem.A2CTransactionResponseEnvelopeId
left join A2CTransactionResponseEnvelopeSignals ares on arpe.SchoolId = ares.SchoolId and arpe.A2CTransactionResponseEnvelopeId = ares.A2CTransactionResponseEnvelopeId
left join SignalResponseMasters srm on ares.SignalResponseMasterId =  srm.SignalResponseMasterId
left join AwardingOrganisationCentres aocMessage on arpem.SchoolId=aocMessage.A2CSchoolId and arpem.MessageAwardingOrganisationCentreId=aocMessage.AwardingOrganisationCentreId
left join AwardingOrganisationDetails adMessage on aocMessage.AwardingOrganisationDetailId=adMessage.AwardingOrganisationDetailId
left join AwardingOrganisations aoMessage on aoMessage.AwardingOrganisationId=adMessage.AwardingOrganisationId
left join A2CTransactionMasters arpemtrMaster on arpemtrMaster.A2CTransactionMasterId = arpem.A2CTransactionMasterId
left join A2CTransactionResponseEnvelopeEDIs arpee on arpee.SchoolId=arpe.SchoolId and arpee.A2CTransactionResponseEnvelopeId=arpe.A2CTransactionResponseEnvelopeId
left join A2CTransactionMasters arpeetrMaster on arpeetrMaster.A2CTransactionMasterId = arpee.A2CTransactionMasterId
left join AwardingOrganisationCentres aocEDI on arpee.SchoolId=aocEDI.A2CSchoolId and arpee.MessageAwardingOrganisationCentreId=aocEDI.AwardingOrganisationCentreId
left join AwardingOrganisationDetails adEDI on aocEDI.AwardingOrganisationDetailId=adEDI.AwardingOrganisationDetailId 
left join AwardingOrganisations aoEDI on aoEDI.AwardingOrganisationId=adEDI.AwardingOrganisationId
) t
Where ' + @WhereClause
	 
	 

	 Declare @ListQuery as nvarchar(max)
	 Declare @ListQuery1 as nvarchar(max)
	
	--print 'ttt1'
	Set @ListQuery=
	'select SchoolId, A2CTransactionId, A2CTransactionRequestId, CentreNumber,AwardingOrganisation,TransactionDate,TransactionName,MessageGuid,FileName,Sequence,RN,
	CASE Transactionname
		WHEN ''ProcessRequestProductCatalogue'' THEN
			ISNULL(SignalResponseText, ''RPC'')
		ELSE	
			CAST(A2CTransactionResponseEnvelopeMessageId AS nvarchar(500))
	END AS Feedback, IsFeedbackMessage from 
(select SchoolId, A2CTransactionId, A2CTransactionRequestId, CentreNumber,AwardingOrganisation,TransactionDate,TransactionName,MessageGuid,FileName,Sequence ,
A2CTransactionResponseEnvelopeMessageId, IsFeedbackMessage,SignalResponseText,ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
from (select at.SchoolId,at.A2CTransactionId,are.A2CTransactionRequestId,case when are.A2CTransactionRequestId is not null then are.CentreNumber 
else at.CentreNumber end as CentreNumber,case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then adEDI.AONumber + '' '' + aoEDI.Name 
when arpem.A2CTransactionResponseEnvelopeMessageId is not null then adMessage.AONumber + '' '' + aoMessage.Name 
else ad.AONumber + '' '' + ao.Name end as AwardingOrganisation,
at.LastModifiedDate TransactionDate,
case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then  arpeetrMaster.TransactionName
when arpem.A2CTransactionResponseEnvelopeMessageId is not null then  arpemtrMaster.TransactionName
else am.TransactionName  end as TransactionName,
case when arpem.A2CTransactionResponseEnvelopeMessageId is not null then arpem.MessageId else atm.A2CMessageGuid end as MessageGuid,
case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then arpee.FileName
else atedi.FileName end as FileName,
case when arpem.A2CTransactionResponseEnvelopeMessageId is not null then arpem.IncomingSequence
else  atm.OutgoingSequence end as Sequence,
arpem.A2CTransactionResponseEnvelopeMessageId,arpem.IsFeedbackMessage,
srm.SignalResponseText'
SET @ListQuery1 = 'from A2CTransactions at inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId
inner join AwardingOrganisationCentres aoc on at.SchoolId=aoc.A2CSchoolId and at.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
inner join AwardingOrganisations ao on ao.AwardingOrganisationId=ad.AwardingOrganisationId
left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 
left join A2CTransactionResponses arp on are.SchoolId=arp.SchoolId and are.A2CTransactionRequestId=arp.A2CTransactionRequestId
left join A2CTransactionResponseEnvelopes arpe on arpe.SchoolId=arp.SchoolId and arpe.A2CTransactionResponseId=arp.A2CTransactionResponseId
left join A2CTransactionResponseEnvelopeMessages arpem on arpe.SchoolId=arpem.SchoolId and arpe.A2CTransactionResponseEnvelopeId=arpem.A2CTransactionResponseEnvelopeId
left join A2CTransactionResponseEnvelopeSignals ares on arpe.SchoolId = ares.SchoolId and arpe.A2CTransactionResponseEnvelopeId = ares.A2CTransactionResponseEnvelopeId
left join SignalResponseMasters srm on ares.SignalResponseMasterId =  srm.SignalResponseMasterId
left join AwardingOrganisationCentres aocMessage on arpem.SchoolId=aocMessage.A2CSchoolId and arpem.MessageAwardingOrganisationCentreId=aocMessage.AwardingOrganisationCentreId
left join AwardingOrganisationDetails adMessage on aocMessage.AwardingOrganisationDetailId=adMessage.AwardingOrganisationDetailId
left join AwardingOrganisations aoMessage on aoMessage.AwardingOrganisationId=adMessage.AwardingOrganisationId
left join A2CTransactionMasters arpemtrMaster on arpemtrMaster.A2CTransactionMasterId = arpem.A2CTransactionMasterId
left join A2CTransactionResponseEnvelopeEDIs arpee on arpee.SchoolId=arpe.SchoolId and arpee.A2CTransactionResponseEnvelopeId=arpe.A2CTransactionResponseEnvelopeId
left join A2CTransactionMasters arpeetrMaster on arpeetrMaster.A2CTransactionMasterId = arpee.A2CTransactionMasterId
left join AwardingOrganisationCentres aocEDI on arpee.SchoolId=aocEDI.A2CSchoolId and arpee.MessageAwardingOrganisationCentreId=aocEDI.AwardingOrganisationCentreId
left join AwardingOrganisationDetails adEDI on aocEDI.AwardingOrganisationDetailId=adEDI.AwardingOrganisationDetailId 
left join AwardingOrganisations aoEDI on aoEDI.AwardingOrganisationId=adEDI.AwardingOrganisationId
) t where ' + @WhereClause + 
') t1 where t1.RN between @Skip AND @Take'
    --print @ListQuery
	--print 'ttt2'
	
	DECLARE @ListQueryFinal AS NVARCHAR(MAX)
	SET @ListQueryFinal = @ListQuery + ' ' + @ListQuery1
	print @ListQuery
	print @ListQuery1
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQueryFinal, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take


END
GO
PRINT N'Creating [dbo].[usp_GetA2CFeedbackMessages]...';


GO
CREATE PROCEDURE usp_GetA2CFeedbackMessages
	@AwardingOrganisationCentreId INT,
	@A2CFeedbackMessageId INT
AS
BEGIN
	SELECT
		M.A2CFeedbackMessageId,
		D.Code,
		D.Severity as 'SeverityValue',
		D.FeedbackMessage,
		D.FeedbackLevel as 'FeedbackLevelValue',
		T.MessageId --this is used to send Ref_Message_Id in feedback message when needed
	FROM
		A2CFeedbackMessages M
		INNER JOIN A2CFeedbackMessageDetails D ON M.A2CFeedbackMessageId = D.A2CFeedbackMessageId
		INNER JOIN A2CTransactionResponseEnvelopeMessages T ON M.A2CTransactionResponseEnvelopeMessageId = T.A2CTransactionResponseEnvelopeMessageId
	WHERE
		M.A2CFeedbackMessageId = @A2CFeedbackMessageId AND
		M.AwardingOrganisationCentreId = @AwardingOrganisationCentreId
END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CFeedbackMessages]...';


GO
CREATE PROCEDURE [dbo].[usp_Insert_A2CFeedbackMessages]
	@A2CTransactionResponseEnvelopeMessageId int,
	@SchoolId int,
	@AwardingOrganisationCentreId int,
	@Code varchar(4),
	@Severity tinyint,
	@FeedbackMessage nvarchar(max),
	@FeedbackLevel tinyint
AS
BEGIN
	DECLARE @A2CFeedbackMessageId INT

	BEGIN TRAN

	--insert parent feedback row
	INSERT INTO [dbo].[A2CFeedbackMessages]
           ([A2CTransactionResponseEnvelopeMessageId]
           ,[SchoolId]
           ,[AwardingOrganisationCentreId]
           ,[AOFeedback])
     VALUES
           (@A2CTransactionResponseEnvelopeMessageId
           ,@SchoolId
           ,@AwardingOrganisationCentreId
           ,NULL)

	select @A2CFeedbackMessageId = cast(SCOPE_IdENTITY() as int)

	--insert child feedback row
	INSERT INTO [dbo].[A2CFeedbackMessageDetails]
           ([A2CFeedbackMessageId]
		   ,[AwardingOrganisationCentreId]
           ,[Code]
           ,[Severity]
           ,[FeedbackMessage]
           ,[FeedbackLevel])
     VALUES
           (@A2CFeedbackMessageId
		   ,@AwardingOrganisationCentreId
           ,@Code
           ,@Severity
           ,@FeedbackMessage
           ,@FeedbackLevel)	

	--insert into request log
	INSERT INTO [dbo].[A2CSendRequests]
           ([AwardingOrganisationCentreId]
           ,[A2CRequestId]
           ,[A2COutSequenceRequestId]
           ,[A2CFeedbackMessageId]
           ,[Status])
     VALUES
           (@AwardingOrganisationCentreId
           ,NULL
           ,NULL
           ,@A2CFeedbackMessageId
           ,0)

	--send output - parent row id
	select @A2CFeedbackMessageId

	COMMIT TRAN

END
GO
PRINT N'Creating [dbo].[Usp_InsertOutSequenceFeedback]...';


GO
CREATE Procedure Usp_InsertOutSequenceFeedback
As
Begin
	Declare @OutofSequenceMinute int
	set @OutofSequenceMinute=120
	if exists(
	select 1 from OutSequence where IsOutSequence=0 and AwardingOrganisationCentreId not in (select AwardingOrganisationCentreId from OutSequence where IsOutSequence=1)
	and DATEDIFF(MINUTE,LastModifiedDate,GETUTCDATE())>@OutofSequenceMinute
	)
	Begin
		Declare @AwardingOrganisationCentreId int=0
		While(exists(
		select 1 from OutSequence where IsOutSequence=0 and
		AwardingOrganisationCentreId not in (select AwardingOrganisationCentreId from OutSequence where IsOutSequence=1
		) and AwardingOrganisationCentreId>@AwardingOrganisationCentreId
			and DATEDIFF(MINUTE,LastModifiedDate,GETUTCDATE())>@OutofSequenceMinute
		))
		Begin
			Declare @AwardingOrganisationCentreIdToProceed int=0	  		
			select top 1 @AwardingOrganisationCentreIdToProceed = AwardingOrganisationCentreId from OutSequence where IsOutSequence=0 and
			AwardingOrganisationCentreId not in (select AwardingOrganisationCentreId from OutSequence where IsOutSequence=1
			) and AwardingOrganisationCentreId>@AwardingOrganisationCentreId
			and DATEDIFF(MINUTE,LastModifiedDate,GETUTCDATE())>@OutofSequenceMinute
			order by AwardingOrganisationCentreId
		
			Declare @LastSequence bigint
			Declare @MaxPendingSequence bigint
			Declare @MinPendingSequence bigint
			Declare @PendingSequence nvarchar(max)
			Declare @MissingSequence nvarchar(max)
			Set @PendingSequence =''
			Set @MissingSequence =''
			Select @LastSequence = IncomingSequence from AwardingOrganisationCentres where AwardingOrganisationCentreId=@AwardingOrganisationCentreIdToProceed
			Select @MaxPendingSequence = max(SequenceNumber)  from OutSequence where AwardingOrganisationCentreId=@AwardingOrganisationCentreIdToProceed
			Select @MinPendingSequence = @LastSequence + 1
	
			While @MinPendingSequence <= @MaxPendingSequence
			Begin
				if exists(Select 1 from OutSequence where AwardingOrganisationCentreId=@AwardingOrganisationCentreIdToProceed and SequenceNumber= @MinPendingSequence)
				Begin
					Set @PendingSequence =  @PendingSequence + cast(@MinPendingSequence as nvarchar(100)) + ','		
					update OutSequence set IsOutSequence=1 where 
					AwardingOrganisationCentreId=@AwardingOrganisationCentreIdToProceed and SequenceNumber= @MinPendingSequence
				End
				Else
				Begin
					Set @MissingSequence =  @MissingSequence + cast(@MinPendingSequence as nvarchar(100)) + ','
				End
				Set @MinPendingSequence= @MinPendingSequence + 1
			End
		
			if @LastSequence = (Select IncomingSequence from AwardingOrganisationCentres where AwardingOrganisationCentreId=@AwardingOrganisationCentreIdToProceed)
			begin
				insert into A2COutSequenceRequests(AwardingOrganisationCentreId,LastSequence,PendingSequence,MissingSequence)
				Values(@AwardingOrganisationCentreIdToProceed,@LastSequence,@PendingSequence,@MissingSequence)

				insert into A2CSendRequests(A2COutSequenceRequestId,AwardingOrganisationCentreId)
				values(SCOPE_IDENTITY(),@AwardingOrganisationCentreIdToProceed)
			end		
			Set @AwardingOrganisationCentreId=@AwardingOrganisationCentreIdToProceed
		end
	End

End




--select * from OutSequence osParent
--inner join OutSequence osChild on osParent.AwardingOrganisationCentreId=osChild.AwardingOrganisationCentreId
--where osParent.IsOutSequence=0
GO
PRINT N'Creating [dbo].[usp_Select_A2COutSequenceRequests]...';


GO
CREATE PROCEDURE [dbo].[usp_Select_A2COutSequenceRequests]
(
	@AwardingOrganisationCentreId int,
	@A2COutSequenceRequestId int
)
As
Begin
	Select LastSequence,PendingSequence,MissingSequence FROM A2COutSequenceRequests
	where AwardingOrganisationCentreId=@AwardingOrganisationCentreId
	and A2COutSequenceRequestId=@A2COutSequenceRequestId
End
GO
PRINT N'Creating [dbo].[A2CSendRequests].[A2CFeedbackMessageId].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'populated in case if feedback message is to be sent', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CSendRequests', @level2type = N'COLUMN', @level2name = N'A2CFeedbackMessageId';


GO
PRINT N'Altering [dbo].[A2CTransactionResponseEnvelopeMessages].[DataImportStatus].[MS_Description]...';


GO
EXECUTE sp_updateextendedproperty @name = N'MS_Description', @value = N'0 not imported, 1 imported successfully, 2 imported with error, -3 file unreadable or schema validation fail, -2 validation failure, -1 out of sequence', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CTransactionResponseEnvelopeMessages', @level2type = N'COLUMN', @level2name = N'DataImportStatus';


GO
PRINT N'Creating [dbo].[A2CFeedbackMessageDetails].[Code].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'represents error code as per a2c spec Appendix 7', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CFeedbackMessageDetails', @level2type = N'COLUMN', @level2name = N'Code';


GO
PRINT N'Creating [dbo].[A2CFeedbackMessageDetails].[Severity].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0=Advisory,1=Confirmation,2=Error,3=Warning (enum SeverityType in A2C.Global)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CFeedbackMessageDetails', @level2type = N'COLUMN', @level2name = N'Severity';


GO
PRINT N'Creating [dbo].[A2CFeedbackMessageDetails].[FeedbackLevel].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Attribute=0, Message=1,Transaction=2 (enum FeedbackLevel in A2C.Global)', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CFeedbackMessageDetails', @level2type = N'COLUMN', @level2name = N'FeedbackLevel';


GO
PRINT N'Creating [dbo].[A2CFeedbackMessages].[AOFeedback].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'tracking what was response from AO after sending this xml', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CFeedbackMessages', @level2type = N'COLUMN', @level2name = N'AOFeedback';


GO
PRINT N'Refreshing [dbo].[usp_DeleteA2CSentQueuesLongTime]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteA2CSentQueuesLongTime]';


GO
PRINT N'Refreshing [dbo].[usp_InsertA2CRequest]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertA2CRequest]';


GO
PRINT N'Refreshing [dbo].[usp_CheckQualificationElementExistOrNotByAOCentreId]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_CheckQualificationElementExistOrNotByAOCentreId]';


GO
PRINT N'Refreshing [dbo].[usp_GetAwardingOrganisationsHeavingProductCatalogueByCenterId]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetAwardingOrganisationsHeavingProductCatalogueByCenterId]';


GO
PRINT N'Refreshing [dbo].[usp_GetCentresByAwardingOrganization]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetCentresByAwardingOrganization]';


GO
PRINT N'Refreshing [dbo].[usp_GetSchoolsByAwardingOrganization]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetSchoolsByAwardingOrganization]';


GO
PRINT N'Refreshing [dbo].[USP_IMPORTPRODUCTCATALOGE]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_IMPORTPRODUCTCATALOGE]';


GO
PRINT N'Refreshing [dbo].[usp_Insert_A2CTransactionResponseEnvelopeEDIs]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Insert_A2CTransactionResponseEnvelopeEDIs]';


GO
PRINT N'Refreshing [dbo].[usp_InsertUpdate_AwardingOrganisationCentres]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_InsertUpdate_AwardingOrganisationCentres]';


GO
PRINT N'Refreshing [dbo].[usp_Select_AwardingOrganisationCentres]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Select_AwardingOrganisationCentres]';


GO
PRINT N'Refreshing [dbo].[usp_Select_AwardingOrganisationCentresByUniqueKeyWithAOCentre]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Select_AwardingOrganisationCentresByUniqueKeyWithAOCentre]';


GO
PRINT N'Refreshing [dbo].[usp_Select_AwardingOrganisationsByCentreId]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Select_AwardingOrganisationsByCentreId]';


GO
PRINT N'Refreshing [dbo].[usp_Select_CentresBySchoolIdLinkedAwardingOrganisation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Select_CentresBySchoolIdLinkedAwardingOrganisation]';

GO
PRINT N'Altering [Version]...';

GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.7.2';

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

UPDATE ScreenMasters SET ScreenName = 'AddUser', ScreenDescription = 'Add User' WHERE ScreenName = 'AddSchoolUser'
UPDATE ScreenMasters SET ScreenName = 'ViewUsers', ScreenDescription = 'View Users' WHERE ScreenName = 'ViewSchoolUsers'

Insert into ScreenMasters(ScreenMasterId, ScreenName,ScreenDescription)
Select	temp.ScreenMasterId, temp.ScreenName,temp.ScreenDescription
From	(Select 1023 ScreenMasterId, 'PollNow' ScreenName,'Poll Now' ScreenDescription
		union all
		Select 1022, 'EditSequence','Edit Sequence'	
		union all
		Select 1024, 'EditUser','Edit User'		
		) As temp
		Left Join ScreenMasters sm 
		on temp.ScreenMasterId = sm.ScreenMasterId
Where sm.ScreenMasterId is null
USE [msdb]
GO

DECLARE @Owner VARCHAR(200)   --Job Owner
DECLARE @DBName VARCHAR(200)  --Database Name
SET @Owner = '$(UserName)'
SET @DBName = '$(DatabaseName)'


/****** Object:  Job [OutOfSequenceFeedbackGeneration]    Script Date:  11-09-2015 12:18:17  ******/
IF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = N'OutOfSequenceFeedbackGeneration')
	EXEC msdb.dbo.sp_delete_job @job_name=N'OutOfSequenceFeedbackGeneration', @delete_unused_schedule=1


/****** Object:  Job [OutOfSequenceFeedbackGeneration]    Script Date: 11-09-2015 12:18:17 ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [[Data Import]]]    Script Date: 11-09-2015 12:18:17 ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Data Import]' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Data Import]'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'OutOfSequenceFeedbackGeneration', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'In Every 5 minutes, this Job will run and check pending feedback for more than 2 hours and will generate feedback....', 
		@category_name=N'[Data Import]', 
		@owner_login_name=@Owner, @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [GenerateFeedback]    Script Date: 11-09-2015 12:18:17 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'GenerateFeedback', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'Exec Usp_InsertOutSequenceFeedback', 
		@database_name=@DBName, 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'OutSequenceFeedbackSchedule', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=4, 
		@freq_subday_interval=5, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=0, 
		@active_start_date=20150909, 
		@active_end_date=99991231, 
		@active_start_time=0, 
		@active_end_time=235959, 
		@schedule_uid=N'f18d5bbb-4b85-4c7f-b774-1be449c29c65'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:

GO



GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[A2CSendRequests] WITH CHECK CHECK CONSTRAINT [FK_A2CSendRequests_AwardingOrganisationCentres];

ALTER TABLE [dbo].[A2CSendRequests] WITH CHECK CHECK CONSTRAINT [FK_A2CSendRequests_A2CFeedbackMessages];

ALTER TABLE [dbo].[A2CSendRequests] WITH CHECK CHECK CONSTRAINT [FK_A2CSendRequests_A2COutSequenceRequests];

ALTER TABLE [dbo].[A2CSendRequests] WITH CHECK CHECK CONSTRAINT [FK_A2CSendRequests_A2CSendRequests];

ALTER TABLE [dbo].[A2CFeedbackMessageDetails] WITH CHECK CHECK CONSTRAINT [FK_A2CFeedbackMessageDetails_A2CFeedbackMessages];

ALTER TABLE [dbo].[A2CFeedbackMessages] WITH CHECK CHECK CONSTRAINT [FK_A2CFeedbackMessages_A2CSchools];

ALTER TABLE [dbo].[A2CFeedbackMessages] WITH CHECK CHECK CONSTRAINT [FK_A2CFeedbackMessages_A2CTransactionResponseEnvelopeMessages];

ALTER TABLE [dbo].[A2CFeedbackMessages] WITH CHECK CHECK CONSTRAINT [FK_A2CFeedbackMessages_AwardingOrganisationCentres];


GO
PRINT N'Update complete.';


GO
