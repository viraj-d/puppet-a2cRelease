/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar UserName "A2CUser"
:setvar DatabaseName "A2CDB"
:setvar DefaultFilePrefix "A2CDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Altering [dbo].[FN_A2C_GETDATETIME]...';


GO


ALTER FUNCTION [dbo].[FN_A2C_GETDATETIME]
(
	@STRINGDATE NVARCHAR(100)
)
RETURNS DATETIME

AS BEGIN

	IF @STRINGDATE IS NULL
		RETURN NULL

	DECLARE @RETURNDATE DATETIME

	SET @STRINGDATE = LTRIM(RTRIM(@STRINGDATE))
		
	IF @STRINGDATE=''
		OR @STRINGDATE='0001-01-01' 
		OR @STRINGDATE='0001-01-01 00:00:00'
		OR @STRINGDATE='0001-01-01T00:00:00+00:00'
		OR @STRINGDATE='0001-01-01T00:00:00Z'
		OR @STRINGDATE='0001-01-01T00:00:01Z'
		RETURN NULL
	
	DECLARE @RETURNDATETIME2 DATETIME2
	SET @RETURNDATETIME2 = CONVERT(DATETIME2,CONVERT(datetimeoffset, @STRINGDATE, 127),127)
	SET @RETURNDATE = CONVERT(DATETIME, @RETURNDATETIME2, 127)

	--IF ISDATE(@STRINGDATE) = 1
	--	SET @RETURNDATE = CONVERT(DATETIME, @STRINGDATE, 127)		
	--ELSE		
	--	SET @RETURNDATE = NULL

	RETURN @RETURNDATE

END
GO
PRINT N'Altering [dbo].[usp_ActivateSelectedUsers]...';


GO
ALTER PROCEDURE [dbo].[usp_ActivateSelectedUsers]   
	@UserIds NVARCHAR (MAX),
	@newPasswords NVARCHAR (MAX)
AS
BEGIN

    SET NOCOUNT ON;

	DECLARE @userId uniqueidentifier;
	DECLARE @password nvarchar(256);
	DECLARE @posUser INT,@posPassword INT;
	Declare @stringToSplitUserId NVARCHAR (MAX),@stringToSplitPassword NVARCHAR (MAX);
		
	Set @stringToSplitUserId=@UserIds;
	Set @stringToSplitPassword=@newPasswords;

	Declare @inputUserData TABLE (UserId uniqueidentifier primary key, NewPassword nvarchar(128));

	-- Slipt Userid and insert in to temp table

	WHILE LEN(@stringToSplitUserId) > 0
	BEGIN

		SELECT @posUser  = CHARINDEX(',', @stringToSplitUserId)
		SELECT @posPassword  = CHARINDEX(',', @stringToSplitPassword)

		if @posUser = 0
			Begin
				SELECT @posUser = LEN(@stringToSplitUserId)
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser))
				SELECT @posPassword = LEN(@stringToSplitPassword)
				SELECT @password = SUBSTRING(@stringToSplitPassword, 1, @posPassword)
			End
		Else
			Begin
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser-1))
				SELECT @password = SUBSTRING(@stringToSplitPassword, 1, @posPassword-1)
			End

		INSERT INTO @inputUserData 
		SELECT @userId,@password 
			
		SELECT @stringToSplitUserId = SUBSTRING(@stringToSplitUserId, @posUser+1, LEN(@stringToSplitUserId)-@posUser)
		SELECT @stringToSplitPassword = SUBSTRING(@stringToSplitPassword, @posPassword+1, LEN(@stringToSplitPassword)-@posPassword)
	END

	UPDATE dbo.aspnet_Membership
			SET IsApproved=1,IsLockedOut = 0,
				FailedPasswordAttemptCount = 0,
				FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
				FailedPasswordAnswerAttemptCount = 0,
				FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
				LastLockoutDate = CONVERT( datetime, '17540101', 112 ),
				Password=iud.NewPassword,
				LastPasswordChangedDate=GETUTCDATE()
			FROM dbo.aspnet_Membership 
			INNER JOIN @inputUserData iud ON dbo.aspnet_Membership.UserId = iud.UserId

	
	UPDATE	U
	SET		IsFirstTimeLogin = 1
	FROM	dbo.Users U
	INNER JOIN @inputUserData iud ON U.UserId = iud.UserId
END
GO
PRINT N'Altering [dbo].[usp_GetProductCataloguePathwayChildNodes]...';


GO

ALTER  PROCEDURE [dbo].[usp_GetProductCataloguePathwayChildNodes]
@AwardingOrganisationCentreId int,
@QualificationElementId int

As
Begin 

	SET NOCOUNT ON;

	SELECT 
		QEC.QualificationElementId,  
		QEC.AO_Qualification_Element_Id AS AOQEID,
		QEC.Qualification_Element_Title AS QEShortTitle, 
		QEC.Qualification_Element_Type AS QualificationElementType,
		(SELECT COUNT(1) FROM QERelationship  R
			INNER JOIN QualificationElement QE ON R.QualificationElementId_Child = QE.QualificationElementId
			WHERE R.QualificationElementId_Parent = QEC.QualificationElementId
			AND QE.Record_Delete_Flag = 0 AND R.QE_Relationship_Type = 'Allowed'
		) AS ChildrenCount,
		P.Maximum_Unit_Selection AS MaximumUnitSelection,
		P.Minimum_Unit_Selection AS MinimumUnitSelection,
		P.Maximum_Pathway_Selection AS MaximumPathwaySelection,
		p.Minimum_Pathway_Selection AS MinimumPathwaySelection
	FROM QERelationship QER
		INNER JOIN QualificationElement QEC ON QER.QualificationElementId_Child = QEC.QualificationElementId 
		LEFT OUTER JOIN Pathway P ON QEC.QualificationElementId = P.QualificationElementId
	WHERE QER.QE_Relationship_Type = 'Allowed' AND QEC.Record_Delete_Flag = 0 AND
	QER.AwardingOrganisationCentreId = @AwardingOrganisationCentreId AND QER.QualificationElementId_Parent = @QualificationElementId
End
GO
PRINT N'Altering [dbo].[usp_GetProductCataloguePathwayRootNode]...';


GO


ALTER  PROCEDURE [dbo].[usp_GetProductCataloguePathwayRootNode]
@AwardingOrganisationCentreId int,
@QualificationElementId int

As
Begin

	SET NOCOUNT ON;

	SELECT 
		QEC.QualificationElementId,  
		QEC.AO_Qualification_Element_Id AS AOQEID,
		QEC.Qualification_Element_Title AS QEShortTitle, 
		QEC.Qualification_Element_Type AS QualificationElementType,
		(SELECT COUNT(1) FROM QERelationship  R
			INNER JOIN QualificationElement QE ON R.QualificationElementId_Child = QE.QualificationElementId
			WHERE R.QualificationElementId_Parent = QEC.QualificationElementId
			AND QE.Record_Delete_Flag = 0 AND R.QE_Relationship_Type = 'Allowed'
		) AS ChildrenCount,
		P.Maximum_Unit_Selection AS MaximumUnitSelection,
		P.Minimum_Unit_Selection AS MinimumUnitSelection,
		P.Maximum_Pathway_Selection AS MaximumPathwaySelection,
		p.Minimum_Pathway_Selection AS MinimumPathwaySelection
	FROM  QualificationElement QEC 
		LEFT OUTER JOIN Pathway P ON QEC.QualificationElementId = P.QualificationElementId
	WHERE QEC.AwardingOrganisationCentreId = @AwardingOrganisationCentreId AND QEC.QualificationElementId = @QualificationElementId
			AND QEC.Record_Delete_Flag = 0
	
End
GO
PRINT N'Altering [dbo].[usp_GetQualificationElementGrades]...';


GO


ALTER  PROCEDURE [dbo].[usp_GetQualificationElementGrades]
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'Grade',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@AwardingOrganisationCentreId int,
@QEQualificationElementId int
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' q1.AwardingOrganisationCentreId=  ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								 ' and q1.QualificationElementId=' + cast(@QEQualificationElementId as nvarchar(10)) +
								 case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							(  Select qeg.AwardingOrganisationCentreId,qeg.QualificationElementId as QualificationElementId,qeg.QE_Grade as Grade,qeg.QE_Grade_Description as [Description]
									,qeg.QE_Outcome_Type as Outcome, qeg.QE_Grade_Sequence_Order as Sequence, qegp.Performance_Points as PerformancePoints,qegp.Level_1_Threshold as Level1Threshold
									,qegp.Level_2_Threshold as Level2Threshold,qegp.Level_3_Threshold as Level3Threshold, qeg.QE_Grade_Effective_Date as EffectiveDate 
									,qeg.QE_Grade_Eff_End_Date as EffectiveEndDate, qegp.Party_Id_Administrator as [Owner] 
								from dbo.QualificationElementGrade qeg
									left join dbo.QEGradePerformancePoints qegp on qeg.QualificationElementGradeId=qegp.QualificationElementGradeId and qeg.AwardingOrganisationCentreId=qegp.AwardingOrganisationCentreId 
										and qeg.QualificationElementId  = qegp.QualificationElementId and qegp.Record_Delete_Flag=0
								where qeg.Record_Delete_Flag=0 
							) q1
							where '+@WhereClause,

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(   select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(
												Select qeg.AwardingOrganisationCentreId,qeg.QualificationElementId as QualificationElementId,qeg.QE_Grade as Grade,qeg.QE_Grade_Description as [Description]
													,qeg.QE_Outcome_Type as Outcome, qeg.QE_Grade_Sequence_Order as Sequence, qegp.Performance_Points as PerformancePoints,qegp.Level_1_Threshold as Level1Threshold
													,qegp.Level_2_Threshold as Level2Threshold,qegp.Level_3_Threshold as Level3Threshold, qeg.QE_Grade_Effective_Date as EffectiveDate 
													,qeg.QE_Grade_Eff_End_Date as EffectiveEndDate, qegp.Party_Id_Administrator as [Owner] 
												from dbo.QualificationElementGrade qeg
													left join dbo.QEGradePerformancePoints qegp on qeg.QualificationElementGradeId=qegp.QualificationElementGradeId and qeg.AwardingOrganisationCentreId=qegp.AwardingOrganisationCentreId 
														and qeg.QualificationElementId  = qegp.QualificationElementId and qegp.Record_Delete_Flag=0
												where qeg.Record_Delete_Flag=0 			
											) q1
											where ' + @WhereClause + ') q2 
										WHERE q2.RowNumber BETWEEN @Skip AND @Take'


	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

End
GO
PRINT N'Altering [dbo].[USP_IMPORTPRODUCTCATALOGE]...';


GO
ALTER PROCEDURE USP_IMPORTPRODUCTCATALOGE(
	@AwardingOrganisationCentreIdPrimaryKey			int, 
	@A2CTransactionResponseEnvelopeMessageId		int		
) AS BEGIN
	
	BEGIN TRY

		---------------------------------------------------
		----- Variable Declarations -----------------------
		---------------------------------------------------
		DECLARE 
			@AwardingOrganisationCentreId	int,
			@XMLDATA						XML,					
			@AOQEPreferenceExists			bit,
			@QEAvailabilityExists			bit,
			@QEFeeCategoryExists			bit,
			@QELearnerIdentifierExists		bit,
			@QEPreferenceExists				bit,
			@QualificationElementExists		bit,
			@TransactionName				nvarchar(100),
			@MessageID						nvarchar(100),
			@SchoolID						int,
			@ScreenMasterId					int,
			@CentreNumber					nvarchar(100),
			@AONumber						nvarchar(100),
			@ErrorMessage					nvarchar(MAX),
			@IsError						bit = 0
			
		-----------------------------------------------------------------
		----- Required data validation & Set Values for variables -------
		-----------------------------------------------------------------
		IF 
			ISNULL(@AwardingOrganisationCentreIdPrimaryKey,0)		= 0 OR			
			ISNULL(@A2CTransactionResponseEnvelopeMessageId,0)		= 0
		BEGIN
			print 'one of input parameters is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Invalid input parameter.', 16, 1);			
		END

		--Get the xml data to import
		SELECT 	
			@AwardingOrganisationCentreId=ISNULL(AT.MessageAwardingOrganisationCentreId,0),
			@XMLDATA=CAST(AT.DATA AS XML)
		FROM 
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGES AT
		WHERE
			AT.AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND
			AT.A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId
		
		IF @AwardingOrganisationCentreId=0
		BEGIN
			print 'Awarding Organisation Centre Id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Awarding Organisation Centre Id not found.', 16, 1);
		END
				
		IF @XMLDATA is null OR DATALENGTH(@XMLDATA)=0
		BEGIN
			print 'XML data not found, so stop further processing'
			set @IsError=1
			RAISERROR ('XML data not found.', 16, 1);
		END

		--Get SchoolID, Message ID and other details
		Select 
			@SchoolID=ISNULL(AOC.A2CSchoolId,0)
		from 
			AwardingOrganisationCentres AOC 
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		IF @SchoolID=0
		BEGIN
			print 'School id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('School Id not found.', 16, 1);
		END

		select 
			@CentreNumber = C.CentreNumber 
		from 
			AwardingOrganisationCentres AOC
			inner join Centres C on AOC.CentreId=C.CentreId
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		select 
			@AONumber = AOD.AONumber 
		from 
			AwardingOrganisationCentres AOC
			inner join AwardingOrganisationDetails AOD on AOC.AwardingOrganisationDetailId=AOD.AwardingOrganisationDetailId
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		Select 
			@ScreenMasterId = SM.ScreenMasterId 
		from 
			ScreenMasters SM 
		where 
			SM.ScreenName='ImportProductCatalogue'

		IF @ScreenMasterId=0
		BEGIN
			print 'Screen Master Id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Screen Master Id not found.', 16, 1);			
		END			

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@TransactionName = CN.value('(a2c:TransactionName/text())[1]','[nvarchar](100)')
		From	
			@XMLDATA.nodes('/a2c:A2CMessage/a2c:MsgHeader/a2c:TransactionInfo') as Q(CN) 

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@MessageID = CN.value('(a2c:MessageID/text())[1]','[nvarchar](100)')
		From	
			@XMLDATA.nodes('/a2c:A2CMessage/a2c:MsgHeader/a2c:MsgInfo') as Q(CN) 

		IF @MessageID IS NULL
			SET @MessageID=''

		---------------------------------------------------
		---------------------------------------------------
		----- Mandatory/Primary Datablocks Validation -----
		---------------------------------------------------
		---------------------------------------------------	
		--In case a mandatory or primary datablock is missing from the catalogue, 
		--the error should be logged into Business error logs and 
		--the XML should not be imported. It should be ignored.	

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@AOQEPreferenceExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference/a2c:AOQEPreference_CN/a2c:AOQEPreference_ID'),
			@QEAvailabilityExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN/a2c:QEAvailability_ID'),
			@QEFeeCategoryExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QEFeeCategory_DS/a2c:QEFeeCategory/a2c:QEFeeCategory_ID'),
			@QELearnerIdentifierExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QELearnerIdentifier_DS/a2c:QELearnerIdentifier/a2c:QELearnerIdentifier_CN/a2c:QELearnerIdentifier_ID'),
			@QEPreferenceExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference/a2c:AOQEPreference_CN/a2c:AOQEPreference_ID'),
			@QualificationElementExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QualificationElement/a2c:QualificationElement_CN/a2c:QualificationElement_ID')
		
		IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUE'
		BEGIN
			IF 
				(@AOQEPreferenceExists = 1		AND
				@QEAvailabilityExists = 1		AND
				@QEFeeCategoryExists = 1		AND
				@QELearnerIdentifierExists = 1	AND
				@QEPreferenceExists = 1			AND
				@QualificationElementExists = 1) 
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUE Transaction, Mandatory/Primary Datablocks exist.'
			END
			ELSE
			BEGIN
			
				print 'inside PROCESSPRODUCTCATALOGUE Transaction, some Mandatory/Primary Datablock(s) missing'

				IF @AOQEPreferenceExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock AO QE Preference is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)		
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEAvailabilityExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Availability is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEFeeCategoryExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Fee Category is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''		
					set @IsError=1
				END

				IF @QELearnerIdentifierExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Learner Identifier is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)		
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEPreferenceExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Preference is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QualificationElementExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock Qualification Element is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				print 'inside PROCESSPRODUCTCATALOGUE Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'

				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUESTATIC'
		BEGIN
			IF @QualificationElementExists = 1
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUESTATIC Transaction, Mandatory/Primary Datablock exists.'
			END
			ELSE
			BEGIN
				SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock Qualification Element is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
		
				INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)

				SET @ErrorMessage = ''
				set @IsError=1

				print 'inside PROCESSPRODUCTCATALOGUESTATIC Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'

				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUEINSTANCE'
		BEGIN
			IF @QEAvailabilityExists = 1
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUEINSTANCE Transaction, Mandatory/Primary Datablock exists.'
			END
			ELSE
			BEGIN
				SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Availability is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
		
				INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)

				SET @ErrorMessage = ''
				set @IsError=1

				print 'inside PROCESSPRODUCTCATALOGUEINSTANCE Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'
				
				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE
		BEGIN
			print 'Unknown Transaction Name, so stop further processing'
			set @IsError=1			
			RAISERROR ('Unknown Transaction Name.', 16, 1);
		END	
		---------------------------------------------------
		----- Datablocks Validation Finish ----------------
		---------------------------------------------------

		---------------------------------------------------
		---------------------------------------------------
		-----STEP 1: IMPORT QUALIFICATION ELEMENTS---------
		---------------------------------------------------
		---------------------------------------------------

		BEGIN TRY

			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID], 
				QE.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]', '[nvarchar](50)') AO_Qualification_Element_Id,
				QE.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]', '[nvarchar](32)') Qualification_Element_Type,
				QE.value('(a2c:QE_Description/text())[1]','[nvarchar](3500)') QE_Description,
				QE.value('(a2c:Qualification_Element_Title/text())[1]','[nvarchar](200)') Qualification_Element_Title,
				QE.value('(a2c:QE_Short_Title/text())[1]','[nvarchar](50)') QE_Short_Title,
				QE.value('(a2c:QE_Effective_Version_Date/text())[1]','[nvarchar](100)') QE_Effective_Version_Date,
				QE.value('(a2c:QE_Effective_Version_End_Date/text())[1]','[nvarchar](100)') QE_Effective_Version_End_Date,
				QE.value('(a2c:Private_Learner_Type/text())[1]','[nvarchar](32)') Private_Learner_Type,
				QE.value('(a2c:QE_Moderation_Type/text())[1]','[nvarchar](32)') QE_Moderation_Type,
				QE.value('(a2c:First_Language_Required_Flag/text())[1]','[nvarchar](100)') First_Language_Required_Flag,
				QE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag,
				QE.value('(a2c:Qualification_Reference_Number/text())[1]','[nvarchar](10)') Qualification_Reference_Number,
				QE.value('(a2c:Learning_Aim_Code/text())[1]','[nvarchar](10)') Learning_Aim_Code,
				QE.value('(a2c:QE_Admin_Code/text())[1]','[nvarchar](50)') QE_Admin_Code,
				QE.value('(a2c:Scheme/a2c:Assessment_Max_Learner_Age/text())[1]','int') Assessment_Max_Learner_Age,
				QE.value('(a2c:Scheme/a2c:Assessment_Min_Learner_Age/text())[1]','int') Assessment_Min_Learner_Age,
				QE.value('(a2c:Scheme/a2c:First_Teaching_Date/text())[1]','[nvarchar](100)') First_Teaching_Date,
				QE.value('(a2c:Scheme/a2c:Last_Teaching_Date/text())[1]','[nvarchar](100)') Last_Teaching_Date,
				QE.value('(a2c:Scheme/a2c:QE_Centre_Auth_Agreement_Text/text())[1]','[nvarchar](400)') QE_Centre_Auth_Agreement_Text,
				QE.value('(a2c:Scheme/a2c:Qualification_Type/text())[1]','[nvarchar](50)') Qualification_Type,
				QE.value('(a2c:Scheme/a2c:Series_Based_Flag/text())[1]','[nvarchar](100)') Series_Based_Flag,
				QE.value('(a2c:Scheme/a2c:QE_Website_URL_Locator_Id/text())[1]','[nvarchar](1000)') QE_Website_URL_Locator_Id,
				QE.value('(a2c:Scheme/a2c:Date_Of_Birth_Reqd_Flag/text())[1]','[nvarchar](100)') Date_Of_Birth_Reqd_Flag,
				QE.value('(a2c:Scheme/a2c:Legal_Sex_Required_Flag/text())[1]','[nvarchar](100)') Legal_Sex_Required_Flag,
				QE.value('(a2c:Scheme/a2c:QE_Availability_Text/text())[1]','[nvarchar](3000)') QE_Availability_Text,
				QE.value('(a2c:Award/a2c:Accreditation_End_Review_Date/text())[1]','[nvarchar](100)') Accreditation_End_Review_Date,
				QE.value('(a2c:Award/a2c:Accreditation_Start_Date/text())[1]','[nvarchar](100)') Accreditation_Start_Date,
				QE.value('(a2c:Award/a2c:AO_Accred_Version_Number/text())[1]','[nvarchar](4)') AO_Accred_Version_Number,
				QE.value('(a2c:Award/a2c:Assessment_Language_Type/text())[1]','[nvarchar](50)') Assessment_Language_Type,
				QE.value('(a2c:Award/a2c:Award_Level_Type/text())[1]','[nvarchar](32)') Award_Level_Type,
				QE.value('(a2c:Award/a2c:Award_Type/text())[1]','[nvarchar](60)') Award_Type,
				QE.value('(a2c:Award/a2c:Cert_of_Unit_Credit_Issued_Flag/text())[1]','[nvarchar](100)') Cert_of_Unit_Credit_Issued_Flag,
				QE.value('(a2c:Award/a2c:Certification_End_Date/text())[1]','[nvarchar](100)') Certification_End_Date,
				QE.value('(a2c:Award/a2c:Certification_Start_Date/text())[1]','[nvarchar](100)') Certification_Start_Date,
				QE.value('(a2c:Award/a2c:Contributing_Units_Listed_Flag/text())[1]','[nvarchar](100)') Contributing_Units_Listed_Flag,
				QE.value('(a2c:Award/a2c:Course_Length_Type/text())[1]','[nvarchar](32)') Course_Length_Type,
				QE.value('(a2c:Award/a2c:Endorsed_Title_Reqd_Flag/text())[1]','[nvarchar](100)') Endorsed_Title_Reqd_Flag,
				QE.value('(a2c:Award/a2c:Guided_Learning_Hours_Max/text())[1]','int') Guided_Learning_Hours_Max,
				QE.value('(a2c:Award/a2c:Guided_Learning_Hours_Min/text())[1]','int') Guided_Learning_Hours_Min,
				QE.value('(a2c:Award/a2c:Operational_End_Date/text())[1]','[nvarchar](100)') Operational_End_Date,
				QE.value('(a2c:Award/a2c:Operational_Start_Date/text())[1]','[nvarchar](100)') Operational_Start_Date,
				QE.value('(a2c:Award/a2c:QE_Delivery_Model_Type/text())[1]','[nvarchar](32)') QE_Delivery_Model_Type,
				QE.value('(a2c:Award/a2c:QE_Evid_Reqmnt_Provided_Flag/text())[1]','[nvarchar](100)') QE_Evid_Reqmnt_Provided_Flag,
				QE.value('(a2c:Award/a2c:QE_Evidence_Requirement_Type/text())[1]','[nvarchar](32)') QE_Evidence_Requirement_Type,
				QE.value('(a2c:Award/a2c:Registration_Expiry_Months/text())[1]','int') Registration_Expiry_Months,
				QE.value('(a2c:Award/a2c:Resit_Rule_Text/text())[1]','[nvarchar](400)') Resit_Rule_Text,
				QE.value('(a2c:Award/a2c:Statement_Of_Credit_Issued_Flag/text())[1]','[nvarchar](100)') Statement_Of_Credit_Issued_Flag,
				QE.value('(a2c:Award/a2c:Study_Guide_Available_Type/text())[1]','[nvarchar](20)') Study_Guide_Available_Type,
				QE.value('(a2c:Award/a2c:Study_Guide_Details/text())[1]','[nvarchar](400)') Study_Guide_Details,
				QE.value('(a2c:Award/a2c:Study_Guide_Reference/text())[1]','[nvarchar](100)') Study_Guide_Reference,
				QE.value('(a2c:Award/a2c:Study_Guide_Reference_Type/text())[1]','[nvarchar](32)') Study_Guide_Reference_Type,
				QE.value('(a2c:Award/a2c:QE_Classification/text())[1]','[nvarchar](32)') QE_Classification,
				QE.value('(a2c:Award/a2c:Party_Id_Accreditor/text())[1]','[nvarchar](32)') Party_Id_Accreditor,
				QE.value('(a2c:Award/a2c:Party_Id_Sector_Lead/text())[1]','[nvarchar](32)') Party_Id_Sector_Lead,
				QE.value('(a2c:Award/a2c:Party_Role_Type_Assessor/text())[1]','[nvarchar](50)') Party_Role_Type_Assessor,
				QE.value('(a2c:LearningUnit/a2c:Learning_Unit_Level_Type/text())[1]','[nvarchar](32)') Learning_Unit_Level_Type,
				QE.value('(a2c:LearningUnit/a2c:Maximum_Resits_Allowed/text())[1]','int') Maximum_Resits_Allowed,
				QE.value('(a2c:Assessable/a2c:Extra_Time_Required_Flag/text())[1]','[nvarchar](100)') Extra_Time_Required_Flag,
				QE.value('(a2c:Assessable/a2c:Assessment_Method_Type/text())[1]','[nvarchar](40)') Assessment_Method_Type,
				QE.value('(a2c:Assessable/a2c:Assmnt_Actual_DateTime_Reqd_Flag/text())[1]','[nvarchar](100)') Assmnt_Actual_DateTime_Reqd_Flag,
				QE.value('(a2c:Assessable/a2c:Attendance_Data_Required_Flag/text())[1]','[nvarchar](100)') Attendance_Data_Required_Flag,
				QE.value('(a2c:Assessable/a2c:Cambridge_Assmnt_TimeZone_Num/text())[1]','int') Cambridge_Assmnt_TimeZone_Num,
				QE.value('(a2c:Assessable/a2c:Carry_Forward_Permissible_Flag/text())[1]','[nvarchar](100)') Carry_Forward_Permissible_Flag,
				QE.value('(a2c:Assessable/a2c:Maximum_Extra_Time_Minutes/text())[1]','int') Maximum_Extra_Time_Minutes,
				QE.value('(a2c:Assessable/a2c:On_Demand_Flag/text())[1]','[nvarchar](100)') On_Demand_Flag,
				QE.value('(a2c:Assessable/a2c:QE_Timetabled_Flag/text())[1]','[nvarchar](100)') QE_Timetabled_Flag,
				QE.value('(a2c:Assessable/a2c:Test_Day_Photograph_Reqd_Flag/text())[1]','[nvarchar](100)') Test_Day_Photograph_Reqd_Flag,
				QE.value('(a2c:Assessable/a2c:Tier_Level_Type/text())[1]','[nvarchar](20)') Tier_Level_Type,
				QE.value('(a2c:Assessable/a2c:Tier_Level_Common_Reference/text())[1]','[nvarchar](12)') Tier_Level_Common_Reference,
				QE.value('(a2c:Assessable/a2c:Time_Allowed_Mins/text())[1]','int') Time_Allowed_Mins,
				QE.value('(a2c:Assessable/a2c:Party_Role_Type_Assessor/text())[1]','[nvarchar](50)') AssessableParty_Role_Type_Assessor,
				QE.value('(a2c:Assessable/a2c:Party_Role_Type_ADT_Decider/text())[1]','[nvarchar](50)') Party_Role_Type_ADT_Decider,
				QE.value('(a2c:Assessable/a2c:Assessment_Medium_Type/text())[1]','[nvarchar](20)') Assessment_Medium_Type,
				QE.value('(a2c:Pathway/a2c:Equals_Indicator_Flag/text())[1]','[nvarchar](100)') Equals_Indicator_Flag,
				QE.value('(a2c:Pathway/a2c:Mandatory_In_Group_Flag/text())[1]','[nvarchar](100)') Mandatory_In_Group_Flag,
				QE.value('(a2c:Pathway/a2c:Minimum_Unit_Selection/text())[1]','int') Minimum_Unit_Selection,
				QE.value('(a2c:Pathway/a2c:Maximum_Unit_Selection/text())[1]','int') Maximum_Unit_Selection,
				QE.value('(a2c:Pathway/a2c:Minimum_Pathway_Selection/text())[1]','int') Minimum_Pathway_Selection,
				QE.value('(a2c:Pathway/a2c:Maximum_Pathway_Selection/text())[1]','int') Maximum_Pathway_Selection,
				QE.value('(a2c:Pathway/a2c:Minimum_Credit_Value/text())[1]','int') Minimum_Credit_Value
			into 
				#QE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QualificationElement/a2c:QualificationElement_CN') as QualificationElement_CN(QE) 

			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QE 
					WHERE ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')='')
			BEGIN
				PRINT 'Qualification Element - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type) 'RowRank' 
			FROM 
				#QE)
			SELECT 
				* 
			INTO 
				#QEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type 
					ORDER BY 
						[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type) 'RowRank' 
				FROM #QE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock Qualification Element - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id + ', Qualification_Element_Type=' + Qualification_Element_Type + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy pk column to temp table
			ALTER TABLE #QE ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]
				
			---------------------------------------------------
			-----STEP 1.1: IMPORT [QualificationElement]-------
			---------------------------------------------------
			BEGIN TRY

				MERGE 
					[dbo].[QualificationElement] AS [target]
				USING 
					(SELECT * from #QE) AS source
				ON 
					([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
					[target].[QualificationElementId] = source.[QualificationElementId])
				WHEN MATCHED THEN 
				UPDATE SET 
					[QE_Description] = LTRIM(RTRIM(source.[QE_Description])),
					[Qualification_Element_Title] = LTRIM(RTRIM(source.[Qualification_Element_Title])),
					[QE_Short_Title] = LTRIM(RTRIM(source.[QE_Short_Title])),
					[QE_Effective_Version_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_Date]),
					[QE_Effective_Version_End_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_End_Date]),
					[Private_Learner_Type] = LTRIM(RTRIM(source.[Private_Learner_Type])),
					[QE_Moderation_Type] = LTRIM(RTRIM(source.[QE_Moderation_Type])),
					[First_Language_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[First_Language_Required_Flag]),
					[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]),
					[Qualification_Reference_Number] = LTRIM(RTRIM(source.[Qualification_Reference_Number])),
					[Learning_Aim_Code] = LTRIM(RTRIM(source.[Learning_Aim_Code])),
					[QE_Admin_Code] = LTRIM(RTRIM(source.[QE_Admin_Code]))
				WHEN NOT MATCHED THEN	
				INSERT (
					[AwardingOrganisationCentreId],
					[AO_Qualification_Element_Id],
					[Qualification_Element_Type],
					[QE_Description],
					[Qualification_Element_Title],
					[QE_Short_Title],
					[QE_Effective_Version_Date],
					[QE_Effective_Version_End_Date],
					[Private_Learner_Type],
					[QE_Moderation_Type],
					[First_Language_Required_Flag],
					[Record_Delete_Flag],
					[Qualification_Reference_Number],
					[Learning_Aim_Code],
					[QE_Admin_Code])
				VALUES (
					source.[AOCentreID],
					source.[AO_Qualification_Element_Id],
					LTRIM(RTRIM(source.[Qualification_Element_Type])),
					LTRIM(RTRIM(source.[QE_Description])),
					LTRIM(RTRIM(source.[Qualification_Element_Title])),
					LTRIM(RTRIM(source.[QE_Short_Title])),
					DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_Date]),
					DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_End_Date]),
					LTRIM(RTRIM(source.[Private_Learner_Type])),
					LTRIM(RTRIM(source.[QE_Moderation_Type])),
					DBO.FN_A2C_GETFLAG(source.[First_Language_Required_Flag]), 
					DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]),
					LTRIM(RTRIM(source.[Qualification_Reference_Number])),
					LTRIM(RTRIM(source.[Learning_Aim_Code])),
					LTRIM(RTRIM(source.[QE_Admin_Code]))
					);

				--Update newly created PKs of [dbo].[QualificationElement]
				Update 
					Q 
				set 
					[QualificationElementId]=QE.QualificationElementId
				from 
					#QE Q inner join [dbo].[QualificationElement] QE
				on 
					Q.AOCentreID=QE.AwardingOrganisationCentreId 
					and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
					and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Qualification Element block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, 
					@MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Element'
					
			END CATCH;

			
			---------------------------------------------------
			-----STEP 1.2: IMPORT [Scheme]---------------------
			---------------------------------------------------
			BEGIN TRY
				
				MERGE [dbo].[Scheme] AS [target]
				USING (SELECT * from #QE where #QE.Qualification_Element_Type='Scheme' and #QE.[QualificationElementId] is not null) AS source
				ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
					[target].[QualificationElementId] = source.[QualificationElementId])
				WHEN MATCHED THEN 
				UPDATE SET 
					[Assessment_Max_Learner_Age] = source.[Assessment_Max_Learner_Age],
					[Assessment_Min_Learner_Age] = source.[Assessment_Min_Learner_Age],
					[First_Teaching_Date] = DBO.FN_A2C_GETDATETIME(source.[First_Teaching_Date]),
					[Last_Teaching_Date] = DBO.FN_A2C_GETDATETIME(source.[Last_Teaching_Date]),
					[QE_Centre_Auth_Agreement_Text] = source.[QE_Centre_Auth_Agreement_Text],
					[Qualification_Type] = source.[Qualification_Type],
					[Series_Based_Flag] = DBO.FN_A2C_GETFLAG(source.[Series_Based_Flag]),
					[QE_Website_URL_Locator_Id] = source.[QE_Website_URL_Locator_Id],
					[Date_Of_Birth_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Date_Of_Birth_Reqd_Flag]),
					[Legal_Sex_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Legal_Sex_Required_Flag]),
					[QE_Availability_Text] = source.[QE_Availability_Text]
				WHEN NOT MATCHED THEN	
				INSERT (
					[QualificationElementId],
					[AwardingOrganisationCentreId],
					[Assessment_Max_Learner_Age],
					[Assessment_Min_Learner_Age],
					[First_Teaching_Date],
					[Last_Teaching_Date],
					[QE_Centre_Auth_Agreement_Text],
					[Qualification_Type],
					[Series_Based_Flag],
					[QE_Website_URL_Locator_Id],
					[Date_Of_Birth_Reqd_Flag],
					[Legal_Sex_Required_Flag],
					[QE_Availability_Text])
				VALUES (
					source.[QualificationElementId],
					source.[AOCentreID],
					source.[Assessment_Max_Learner_Age],
					source.[Assessment_Min_Learner_Age],
					DBO.FN_A2C_GETDATETIME(source.[First_Teaching_Date]),
					DBO.FN_A2C_GETDATETIME(source.[Last_Teaching_Date]),
					source.[QE_Centre_Auth_Agreement_Text],
					source.[Qualification_Type],
					DBO.FN_A2C_GETFLAG(source.[Series_Based_Flag]),
					source.[QE_Website_URL_Locator_Id],
					DBO.FN_A2C_GETFLAG(source.[Date_Of_Birth_Reqd_Flag]),
					DBO.FN_A2C_GETFLAG(source.[Legal_Sex_Required_Flag]),
					source.[QE_Availability_Text]
					);

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Scheme block'

				set @IsError=1
		
				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Scheme'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.3: IMPORT [Award]----------------------
			---------------------------------------------------
			BEGIN TRY

			MERGE [dbo].[Award] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Award' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Accreditation_End_Review_Date] = DBO.FN_A2C_GETDATETIME(source.[Accreditation_End_Review_Date]),
				[Accreditation_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Accreditation_Start_Date]),
				[AO_Accred_Version_Number] = 		source.[AO_Accred_Version_Number],
				[Assessment_Language_Type] = 		source.[Assessment_Language_Type],
				[Award_Level_Type] = 		source.[Award_Level_Type],
				[Award_Type] = 		source.[Award_Type],
				[Cert_of_Unit_Credit_Issued_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Cert_of_Unit_Credit_Issued_Flag]),
				[Certification_End_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Certification_End_Date]),
				[Certification_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Certification_Start_Date]),
				[Contributing_Units_Listed_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Contributing_Units_Listed_Flag]),
				[Course_Length_Type] = 		source.[Course_Length_Type],
				[Endorsed_Title_Reqd_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Endorsed_Title_Reqd_Flag]),
				[Guided_Learning_Hours_Max] = 		source.[Guided_Learning_Hours_Max],
				[Guided_Learning_Hours_Min] = 		source.[Guided_Learning_Hours_Min],
				[Operational_End_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Operational_End_Date]),
				[Operational_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Operational_Start_Date]),
				[QE_Delivery_Model_Type] = 		source.[QE_Delivery_Model_Type],
				[QE_Evid_Reqmnt_Provided_Flag] = 		DBO.FN_A2C_GETFLAG(source.[QE_Evid_Reqmnt_Provided_Flag]),
				[QE_Evidence_Requirement_Type] = 		source.[QE_Evidence_Requirement_Type],
				[Registration_Expiry_Months] = 		source.[Registration_Expiry_Months],
				[Resit_Rule_Text] = 		source.[Resit_Rule_Text],
				[Statement_Of_Credit_Issued_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Statement_Of_Credit_Issued_Flag]),
				[Study_Guide_Available_Type] = 		source.[Study_Guide_Available_Type],
				[Study_Guide_Details] = 		source.[Study_Guide_Details],
				[Study_Guide_Reference] = 		source.[Study_Guide_Reference],
				[Study_Guide_Reference_Type] = 		source.[Study_Guide_Reference_Type],
				[QE_Classification] = 		source.[QE_Classification],
				[Party_Id_Accreditor] = 		source.[Party_Id_Accreditor],
				[Party_Id_Sector_Lead] = 		source.[Party_Id_Sector_Lead],
				[Party_Role_Type_Assessor] = 		source.[Party_Role_Type_Assessor]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Accreditation_End_Review_Date],
				[Accreditation_Start_Date],
				[AO_Accred_Version_Number],
				[Assessment_Language_Type],
				[Award_Level_Type],
				[Award_Type],
				[Cert_of_Unit_Credit_Issued_Flag],
				[Certification_End_Date],
				[Certification_Start_Date],
				[Contributing_Units_Listed_Flag],
				[Course_Length_Type],
				[Endorsed_Title_Reqd_Flag],
				[Guided_Learning_Hours_Max],
				[Guided_Learning_Hours_Min],
				[Operational_End_Date],
				[Operational_Start_Date],
				[QE_Delivery_Model_Type],
				[QE_Evid_Reqmnt_Provided_Flag],
				[QE_Evidence_Requirement_Type],
				[Registration_Expiry_Months],
				[Resit_Rule_Text],
				[Statement_Of_Credit_Issued_Flag],
				[Study_Guide_Available_Type],
				[Study_Guide_Details],
				[Study_Guide_Reference],
				[Study_Guide_Reference_Type],
				[QE_Classification],
				[Party_Id_Accreditor],
				[Party_Id_Sector_Lead],
				[Party_Role_Type_Assessor])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETDATETIME(source.[Accreditation_End_Review_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Accreditation_Start_Date]),
				source.[AO_Accred_Version_Number],
				source.[Assessment_Language_Type],
				source.[Award_Level_Type],
				source.[Award_Type],
				DBO.FN_A2C_GETFLAG(source.[Cert_of_Unit_Credit_Issued_Flag]),
				DBO.FN_A2C_GETDATETIME(source.[Certification_End_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Certification_Start_Date]),
				DBO.FN_A2C_GETFLAG(source.[Contributing_Units_Listed_Flag]),
				source.[Course_Length_Type],
				DBO.FN_A2C_GETFLAG(source.[Endorsed_Title_Reqd_Flag]),
				source.[Guided_Learning_Hours_Max],
				source.[Guided_Learning_Hours_Min],
				DBO.FN_A2C_GETDATETIME(source.[Operational_End_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Operational_Start_Date]),
				source.[QE_Delivery_Model_Type],
				DBO.FN_A2C_GETFLAG(source.[QE_Evid_Reqmnt_Provided_Flag]),
				source.[QE_Evidence_Requirement_Type],
				source.[Registration_Expiry_Months],
				source.[Resit_Rule_Text],
				DBO.FN_A2C_GETFLAG(source.[Statement_Of_Credit_Issued_Flag]),
				source.[Study_Guide_Available_Type],
				source.[Study_Guide_Details],
				source.[Study_Guide_Reference],
				source.[Study_Guide_Reference_Type],
				source.[QE_Classification],
				source.[Party_Id_Accreditor],
				source.[Party_Id_Sector_Lead],
				source.[Party_Role_Type_Assessor]
				);

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Award block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Award'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.4: IMPORT [Learning Unit]--------------
			---------------------------------------------------
			BEGIN TRY

			MERGE [dbo].[LearningUnit] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Learning Unit' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Learning_Unit_Level_Type] = source.[Learning_Unit_Level_Type],
				[Maximum_Resits_Allowed] = source.[Maximum_Resits_Allowed]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Learning_Unit_Level_Type],
				[Maximum_Resits_Allowed])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				source.[Learning_Unit_Level_Type],
				source.[Maximum_Resits_Allowed]
				);
	
			END TRY
			BEGIN CATCH
				PRINT 'Exception in Learning Unit block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Learning Unit'
					
			END CATCH;
		
			---------------------------------------------------
			-----STEP 1.5: IMPORT [Assessable]-----------------
			---------------------------------------------------
			BEGIN TRY 
						
			MERGE [dbo].[Assessable] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Assessable' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Extra_Time_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Extra_Time_Required_Flag]),
				[Assessment_Method_Type] = LTRIM(RTRIM(source.[Assessment_Method_Type])),
				[Assmnt_Actual_DateTime_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Assmnt_Actual_DateTime_Reqd_Flag]),
				[Attendance_Data_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Attendance_Data_Required_Flag]),
				[Cambridge_Assmnt_TimeZone_Num] = source.[Cambridge_Assmnt_TimeZone_Num],
				[Carry_Forward_Permissible_Flag] = DBO.FN_A2C_GETFLAG(source.[Carry_Forward_Permissible_Flag]),
				[Maximum_Extra_Time_Minutes] = source.[Maximum_Extra_Time_Minutes],
				[On_Demand_Flag] = DBO.FN_A2C_GETFLAG(source.[On_Demand_Flag]),
				[QE_Timetabled_Flag] = DBO.FN_A2C_GETFLAG(source.[QE_Timetabled_Flag]),
				[Test_Day_Photograph_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Test_Day_Photograph_Reqd_Flag]),
				[Tier_Level_Type] = LTRIM(RTRIM(source.[Tier_Level_Type])),
				[Tier_Level_Common_Reference] = LTRIM(RTRIM(source.[Tier_Level_Common_Reference])),
				[Time_Allowed_Mins] = source.[Time_Allowed_Mins],
				[Party_Role_Type_Assessor] = LTRIM(RTRIM(source.[AssessableParty_Role_Type_Assessor])),
				[Party_Role_Type_ADT_Decider] = LTRIM(RTRIM(source.[Party_Role_Type_ADT_Decider])),
				[Assessment_Medium_Type] = LTRIM(RTRIM(source.[Assessment_Medium_Type]))
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Extra_Time_Required_Flag],
				[Assessment_Method_Type],
				[Assmnt_Actual_DateTime_Reqd_Flag],
				[Attendance_Data_Required_Flag],
				[Cambridge_Assmnt_TimeZone_Num],
				[Carry_Forward_Permissible_Flag],
				[Maximum_Extra_Time_Minutes],
				[On_Demand_Flag],
				[QE_Timetabled_Flag],
				[Test_Day_Photograph_Reqd_Flag],
				[Tier_Level_Type],
				[Tier_Level_Common_Reference],
				[Time_Allowed_Mins],
				[Party_Role_Type_Assessor],
				[Party_Role_Type_ADT_Decider],
				[Assessment_Medium_Type])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETFLAG(source.[Extra_Time_Required_Flag]),
				LTRIM(RTRIM(source.[Assessment_Method_Type])),
				DBO.FN_A2C_GETFLAG(source.[Assmnt_Actual_DateTime_Reqd_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Attendance_Data_Required_Flag]),
				source.[Cambridge_Assmnt_TimeZone_Num],
				DBO.FN_A2C_GETFLAG(source.[Carry_Forward_Permissible_Flag]),
				source.[Maximum_Extra_Time_Minutes],
				DBO.FN_A2C_GETFLAG(source.[On_Demand_Flag]),
				DBO.FN_A2C_GETFLAG(source.[QE_Timetabled_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Test_Day_Photograph_Reqd_Flag]),
				LTRIM(RTRIM(source.[Tier_Level_Type])),
				LTRIM(RTRIM(source.[Tier_Level_Common_Reference])),
				source.[Time_Allowed_Mins],
				LTRIM(RTRIM(source.[AssessableParty_Role_Type_Assessor])),
				LTRIM(RTRIM(source.[Party_Role_Type_ADT_Decider])),
				LTRIM(RTRIM(source.[Assessment_Medium_Type])));

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Assessable block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Assessable'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.6: IMPORT [Pathway]--------------------
			---------------------------------------------------
			BEGIN TRY
		
			MERGE [dbo].[Pathway] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Pathway' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Equals_Indicator_Flag] = DBO.FN_A2C_GETFLAG(source.[Equals_Indicator_Flag]),
				[Mandatory_In_Group_Flag] = DBO.FN_A2C_GETFLAG(source.[Mandatory_In_Group_Flag]),
				[Minimum_Unit_Selection] = source.[Minimum_Unit_Selection],
				[Maximum_Unit_Selection] = source.[Maximum_Unit_Selection],
				[Minimum_Pathway_Selection] = source.[Minimum_Pathway_Selection],
				[Maximum_Pathway_Selection] = source.[Maximum_Pathway_Selection],
				[Minimum_Credit_Value] = source.[Minimum_Credit_Value]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Equals_Indicator_Flag],
				[Mandatory_In_Group_Flag],
				[Minimum_Unit_Selection],
				[Maximum_Unit_Selection],
				[Minimum_Pathway_Selection],
				[Maximum_Pathway_Selection],
				[Minimum_Credit_Value])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETFLAG(source.[Equals_Indicator_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Mandatory_In_Group_Flag]),
				source.[Minimum_Unit_Selection],
				source.[Maximum_Unit_Selection],
				source.[Minimum_Pathway_Selection],
				source.[Maximum_Pathway_Selection],
				source.[Minimum_Credit_Value]);

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QE', 'U') IS NOT NULL
			  DROP TABLE #QE;

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Pathway block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Pathway'
					
			END CATCH;
		END TRY
		BEGIN CATCH
			PRINT 'Exception in QUALIFICATION ELEMENTS - Common block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QUALIFICATION ELEMENTS - Common'
					
		END CATCH;

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 2: IMPORT QE Relationships -------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QER.value('(a2c:QERelationship_ID/a2c:AO_Party_Id_Parent/text())[1]','[nvarchar](32)') AO_Party_Id_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:AO_QE_Id_Parent/text())[1]','[nvarchar](50)') AO_QE_Id_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:QE_Type_Parent/text())[1]','[nvarchar](32)') QE_Type_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:AO_Party_Id_Child/text())[1]','[nvarchar](32)') AO_Party_Id_Child,
				QER.value('(a2c:QERelationship_ID/a2c:AO_QE_Id_Child/text())[1]','[nvarchar](50)') AO_QE_Id_Child,
				QER.value('(a2c:QERelationship_ID/a2c:QE_Type_Child/text())[1]','[nvarchar](32)') QE_Type_Child,
				QER.value('(a2c:QE_Relationship_Type/text())[1]','[nvarchar](32)') QE_Relationship_Type,
				QER.value('(a2c:QE_Relationship_Rule_Type/text())[1]','[nvarchar](20)') QE_Relationship_Rule_Type,
				QER.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#QER
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QERelationship') as QERelationship(QER) 
	
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QER 
					WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')='')
			BEGIN
				PRINT 'QE Relationship - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Relationship" - Record AO_QE_Id_Parent="' +  ISNULL(AO_QE_Id_Parent,'') 
					+ '", QE_Type_Parent="' + ISNULL(QE_Type_Parent,'') 
					+ '", AO_QE_Id_Child="' + ISNULL(AO_QE_Id_Child,'') 
					+ '", QE_Type_Child="' + ISNULL(QE_Type_Child,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QER 
				WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QER 
				WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child   
					ORDER BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child ) 'RowRank' 
				FROM 
					#QER)
			SELECT 
				* 
			INTO 
				#QERDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QERDUPS)
			BEGIN

				print 'duplicate records found in QE Relationship'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child   
					ORDER BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child ) 'RowRank' 
				FROM 
					#QER)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Relationship - Record AO_QE_Id_Parent=' 
					+  AO_QE_Id_Parent + ', QE_Type_Parent=' + QE_Type_Parent + ', AO_QE_Id_Child=' 
					+ AO_QE_Id_Child + ', QE_Type_Child=' + QE_Type_Child + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId,@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QERDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QERDUPS', 'U') IS NOT NULL
				DROP TABLE #QERDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy ref columns to temp table for parent and child QEs
			ALTER TABLE #QER ADD [ParentQEId] INT null, [ChildQEId] INT null

			--Update existing IDs for parent QEs
			Update Q 
				set [ParentQEId]=QE.QualificationElementId
			from 
				#QER Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Parent=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Parent=QE.[Qualification_Element_Type]

			--Update existing IDs for child QEs
			Update Q 
				set [ChildQEId]=QE.QualificationElementId
			from 
				#QER Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Child=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Child=QE.[Qualification_Element_Type]
	
			--merge [QERelationship]
			MERGE [dbo].[QERelationship] AS [target]
			USING (SELECT * from #QER where [ParentQEId] is not null and [ChildQEId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId_Parent] = source.[ParentQEId] AND
				[target].[QualificationElementId_Child] = source.[ChildQEId])
			WHEN MATCHED THEN 
			UPDATE SET			
				[QE_Relationship_Type] = source.[QE_Relationship_Type],
				[QE_Relationship_Rule_Type] = source.[QE_Relationship_Rule_Type],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId_Parent],
				[QualificationElementId_Child],
				[QE_Relationship_Type],
				[QE_Relationship_Rule_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[ParentQEId],
				source.[ChildQEId],
				source.[QE_Relationship_Type],
				source.[QE_Relationship_Rule_Type],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QER', 'U') IS NOT NULL
				DROP TABLE #QER;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Relationships block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Relationships'
					
		END CATCH;

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 3: IMPORT QE LearnerIdentifier ---------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QECN.value('(a2c:QELearnerIdentifier_ID/a2c:Party_RR_Reference_Type/text())[1]','[nvarchar](max)') Party_RR_Reference_Type,
				QECN.value('(a2c:Learner_Id_Mandatory_Flag/text())[1]','[nvarchar](max)') Learner_Id_Mandatory_Flag,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QELI
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QELearnerIdentifier_DS/a2c:QELearnerIdentifier') as QLI(QEID) 
				CROSS APPLY QLI.QEID.nodes('a2c:QELearnerIdentifier_CN') as QEL(QECN)
		
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QELI 
					WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')='')
			BEGIN
				PRINT 'QE LearnerIdentifier - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE LearnerIdentifier - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", Party_RR_Reference_Type="' + ISNULL(Party_RR_Reference_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELI 
				WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QELI 
				WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type  
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type ) 'RowRank' 
			FROM 
				#QELI)
			SELECT 
				* 
			INTO 
				#QELIDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QELIDUPS)
			BEGIN

				print 'duplicate records found in QE Learner Identifier'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type  
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type ) 'RowRank' 
				FROM 
					#QELI)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Learner Identifier - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', Party_RR_Reference_Type=' + Party_RR_Reference_Type 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELIDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELIDUPS', 'U') IS NOT NULL
			  DROP TABLE #QELIDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy pk column to temp table
			ALTER TABLE #QELI ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QELI Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QELearnerIdentifier]
			MERGE [dbo].[QELearnerIdentifier] AS [target]
			USING (SELECT * from #QELI where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[Party_RR_Reference_Type] = LTRIM(RTRIM(source.[Party_RR_Reference_Type])))
			WHEN MATCHED THEN 
			UPDATE SET					
				[Learner_Id_Mandatory_Flag] = DBO.FN_A2C_GETFLAG(source.[Learner_Id_Mandatory_Flag]),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[Party_RR_Reference_Type],
				[Learner_Id_Mandatory_Flag],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[Party_RR_Reference_Type])),
				DBO.FN_A2C_GETFLAG(source.[Learner_Id_Mandatory_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELI', 'U') IS NOT NULL
				DROP TABLE #QELI;
		
		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Learner Identifier block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Learner Identifier'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 4: IMPORT QE Preference ----------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				PID.value('(a2c:Party_ID/a2c:Party_Id_Creator/text())[1]','[nvarchar](32)') Party_Id_Creator,
				QEP.value('(a2c:QEPreference_ID/a2c:QE_Preference/text())[1]','[nvarchar](100)') QE_Preference,
				QEP.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEPR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEPreference_DS/a2c:QEPreference') as QEPreference_DS(PID)
				CROSS APPLY
				QEPreference_DS.PID.nodes('a2c:QEPreference_CN') as QEPreference_CN(QEP)

			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEPR 
					WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')='')
			BEGIN
				PRINT 'QE Preference - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Preference - Record Party_Id_Creator="' +  ISNULL(Party_Id_Creator,'') 
					+ '", QE_Preference="' + ISNULL(QE_Preference,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEPR 
				WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEPR 
				WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], Party_Id_Creator, QE_Preference ) 'RowRank' 
				FROM 
					#QEPR)
			SELECT 
				* 
			INTO 
				#QEPRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEPRDUPS)
			BEGIN

				print 'duplicate records found in QE Preference'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], Party_Id_Creator, QE_Preference ) 'RowRank' 
				FROM 
					#QEPR)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Preference - Record Party_Id_Creator=' +  Party_Id_Creator 
					+ ', QE_Preference=' + QE_Preference + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEPRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEPRDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEPRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--merge [QEPreference]
			MERGE [dbo].[QEPreference] AS [target]
			USING (SELECT * from #QEPR) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Party_Id_Creator] = LTRIM(RTRIM(source.[Party_Id_Creator])) AND
				[target].[QE_Preference] = LTRIM(RTRIM(source.[QE_Preference])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Party_Id_Creator],
				[QE_Preference],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[Party_Id_Creator])),
				LTRIM(RTRIM(source.[QE_Preference])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEPR', 'U') IS NOT NULL
				DROP TABLE #QEPR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Preference block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Preference'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 5: IMPORT AO QE Preference -------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:AOQEPreference_ID/a2c:Party_Id_Creator/text())[1]','[nvarchar](32)') Party_Id_Creator,
				QECN.value('(a2c:AOQEPreference_ID/a2c:QE_Preference/text())[1]','[nvarchar](100)') QE_Preference,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#AOQEPR	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference') as AOQEPreference(QEID) 
				CROSS APPLY 
				AOQEPreference.QEID.nodes('a2c:AOQEPreference_CN') as AOQEPreference_CN(QECN) 
					
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #AOQEPR 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR ISNULL(Party_Id_Creator,'')=''
						OR ISNULL(QE_Preference,'')='')
			BEGIN
				PRINT 'AO QE Preference - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock AO QE Preference - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", Party_Id_Creator="' + ISNULL(Party_Id_Creator,'') 
					+ '", QE_Preference="' + ISNULL(QE_Preference,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#AOQEPR 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#AOQEPR 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference) 'RowRank' 
				FROM 
					#AOQEPR)
			SELECT 
				* 
			INTO 
				#AOQEPRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #AOQEPRDUPS)
			BEGIN

				print 'duplicate records found in AO QE Preference'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference) 'RowRank' 
				FROM 
					#AOQEPR)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock AO QE Preference - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', Party_Id_Creator=' +  Party_Id_Creator 
					+ ', QE_Preference=' + QE_Preference + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#AOQEPRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#AOQEPRDUPS', 'U') IS NOT NULL
			  DROP TABLE #AOQEPRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

		
			--add dummy fk column to temp table
			ALTER TABLE #AOQEPR ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#AOQEPR Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--add dummy fk column to temp table
			ALTER TABLE #AOQEPR ADD [QEPreferenceId] INT null

			--Update existing PKs of [dbo].[QEPreference]
			Update Q 
				set [QEPreferenceId]=QEP.[QEPreferenceId]
			from 
				#AOQEPR Q inner join [dbo].[QEPreference] QEP
			on 
				Q.AOCentreID=QEP.AwardingOrganisationCentreId 
				and Q.[Party_Id_Creator]=QEP.[Party_Id_Creator] 
				and Q.[QE_Preference]=QEP.[QE_Preference]

			--merge [AOQEPreference]
			MERGE [dbo].[AOQEPreference] AS [target]
			USING (SELECT * from #AOQEPR where [QualificationElementId] is not null and [QEPreferenceId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEPreferenceId] = source.[QEPreferenceId])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEPreferenceId],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QEPreferenceId],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#AOQEPR', 'U') IS NOT NULL
				DROP TABLE #AOQEPR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in AO QE Preference block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'AO QE Preference'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 6: IMPORT QE Availability --------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				QECN.value('(a2c:QEA_Effective_End_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_End_Date_Time,
				QECN.value('(a2c:SLA_OnDemand_Result_Clndr_Days/text())[1]','int') SLA_OnDemand_Result_Clndr_Days,
				QECN.value('(a2c:Series_Label/text())[1]','[nvarchar](50)') Series_Label,
				QECN.value('(a2c:OnDemand_Entry_Calendar_Days/text())[1]','int') OnDemand_Entry_Calendar_Days,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEA	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QEAvailability_CN(QECN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEA 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QE Availability - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEA 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEA 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEA)
			SELECT 
				* 
			INTO 
				#QEADUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEADUPS)
			BEGIN

				print 'duplicate records found in QE Availability'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEA)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Availability - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type + ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEADUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEADUPS', 'U') IS NOT NULL
			  DROP TABLE #QEADUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEA ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEA Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]
	
			--merge [QEAvailability]
			MERGE [dbo].[QEAvailability] AS [target]
			USING (SELECT * from #QEA where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]))
			WHEN MATCHED THEN 
			UPDATE SET				
				[QEA_Effective_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_End_Date_Time]),
				[SLA_OnDemand_Result_Clndr_Days] = source.[SLA_OnDemand_Result_Clndr_Days],
				[Series_Label] = LTRIM(RTRIM(source.[Series_Label])),
				[OnDemand_Entry_Calendar_Days] = source.[OnDemand_Entry_Calendar_Days],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEA_Effective_Start_Date_Time],
				[QEA_Effective_End_Date_Time],
				[SLA_OnDemand_Result_Clndr_Days],
				[Series_Label],
				[OnDemand_Entry_Calendar_Days],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_End_Date_Time]),
				source.[SLA_OnDemand_Result_Clndr_Days],
				LTRIM(RTRIM(source.[Series_Label])),
				source.[OnDemand_Entry_Calendar_Days],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEA', 'U') IS NOT NULL
				DROP TABLE #QEA;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability'
					
		END CATCH

		---------------------------------------------------
		----- STEP 6.1: IMPORT QE Availability Key Event --
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				KE.value('(a2c:QEAvailabilityKeyEvent_ID/a2c:Key_Event_Name/text())[1]','[nvarchar](100)') Key_Event_Name,
				KE.value('(a2c:Key_Event_Start_Date_Time/text())[1]','[nvarchar](100)') Key_Event_Start_Date_Time,
				KE.value('(a2c:Key_Event_End_Date_Time/text())[1]','[nvarchar](100)') Key_Event_End_Date_Time,
				KE.value('(a2c:Key_Event_Additional_Text/text())[1]','[nvarchar](400)') Key_Event_Additional_Text,
				KE.value('(a2c:Time_Period_Type/text())[1]','[nvarchar](32)') Time_Period_Type,
				KE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEAKE	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QE(QECN) 
				CROSS APPLY QE.QECN.nodes('a2c:QEAvailabilityKeyEvent') as QEA(KE)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAKE 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
						OR ISNULL(Key_Event_Name,'')='')
			BEGIN
				PRINT 'QE Availability Key Event - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", Key_Event_Name="' + ISNULL(Key_Event_Name,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAKE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name) 'RowRank' 
				FROM 
					#QEAKE)
			SELECT 
				* 
			INTO 
				#QEAKEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAKEDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Key Event'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name) 'RowRank' 
				FROM 
					#QEAKE)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) 
					+ ', Key_Event_Name=' + Key_Event_Name + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEDUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAKEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy fk column to temp table
			ALTER TABLE #QEAKE ADD [QualificationElementId] INT null, [QEAvailabilityId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAKE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QEAvailability]
			Update Q 
				set [QEAvailabilityId]=QE.[QEAvailabilityId]
			from 
				#QEAKE Q inner join [QEAvailability] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QualificationElementId]=QE.[QualificationElementId] 
				and DBO.FN_A2C_GETDATETIME(Q.[QEA_Effective_Start_Date_Time])=QE.[QEA_Effective_Start_Date_Time]	
	
			--merge [QEAvailabilityKeyEvent]
			MERGE [dbo].[QEAvailabilityKeyEvent] AS [target]
			USING (SELECT * from #QEAKE 
					where [QualificationElementId] is not null 
					and [QEAvailabilityId] is not null
					and [Key_Event_Name] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityId] = source.[QEAvailabilityId] AND
				[target].[Key_Event_Name] =  LTRIM(RTRIM(source.[Key_Event_Name])))
			WHEN MATCHED THEN 
			UPDATE SET				
				[Key_Event_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Key_Event_Start_Date_Time]),
				[Key_Event_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Key_Event_End_Date_Time]),
				[Key_Event_Additional_Text] = LTRIM(RTRIM(source.[Key_Event_Additional_Text])),
				[Time_Period_Type] = LTRIM(RTRIM(source.[Time_Period_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityId],
				[Key_Event_Name],
				[Key_Event_Start_Date_Time],
				[Key_Event_End_Date_Time],
				[Key_Event_Additional_Text],
				[Time_Period_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityId],
				LTRIM(RTRIM(source.[Key_Event_Name])),
				DBO.FN_A2C_GETDATETIME(source.[Key_Event_Start_Date_Time]),
				DBO.FN_A2C_GETDATETIME(source.[Key_Event_End_Date_Time]),
				LTRIM(RTRIM(source.[Key_Event_Additional_Text])),
				LTRIM(RTRIM(source.[Time_Period_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKE', 'U') IS NOT NULL
				DROP TABLE #QEAKE;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Key Event block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Key Event'
					
		END CATCH

		----------------------------------------------------------
		----- STEP 6.2: IMPORT QE Availability Key Event Fee -----
		----------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				KE.value('(a2c:QEAvailabilityKeyEvent_ID/a2c:Key_Event_Name/text())[1]','[nvarchar](100)') Key_Event_Name,	
				KEFEE.value('(a2c:QEAvailabilityKeyEventFee_ID/a2c:QE_Fee_Category_Type/text())[1]','[nvarchar](100)') QE_Fee_Category_Type,
				KEFEE.value('(a2c:QEAvailabilityKeyEventFee_ID/a2c:Fee_Period_Start_Date_Time/text())[1]','[nvarchar](100)') Fee_Period_Start_Date_Time,
				KEFEE.value('(a2c:Fee_Period_Title/text())[1]','[nvarchar](100)') Fee_Period_Title,
				KEFEE.value('(a2c:Fee_Period_End_Date_Time/text())[1]','[nvarchar](100)') Fee_Period_End_Date_Time,
				KEFEE.value('(a2c:Fee_Amount/text())[1]','[Decimal](9,2)') Fee_Amount,
				KEFEE.value('(a2c:Fee_Additional_Text/text())[1]','[nvarchar](400)') Fee_Additional_Text,
				KEFEE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEAKEFEE	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QE(QECN) 
				CROSS APPLY QE.QECN.nodes('a2c:QEAvailabilityKeyEvent') as QEA(KE)
				CROSS APPLY QEA.KE.nodes('a2c:QEAvailabilityKeyEventFee') as QEAKE(KEFEE)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAKEFEE 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
						OR ISNULL(Key_Event_Name,'')=''
						OR ISNULL(QE_Fee_Category_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QE Availability Key Event Fee - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event Fee - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", Key_Event_Name="' + ISNULL(Key_Event_Name,'') 
					+ '", QE_Fee_Category_Type="' + ISNULL(QE_Fee_Category_Type,'') 
					+ '", Fee_Period_Start_Date_Time="' + CASE WHEN Fee_Period_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(Fee_Period_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEFEE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
					OR ISNULL(QE_Fee_Category_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEAKEFEE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
					OR ISNULL(QE_Fee_Category_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL					
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAKEFEE)
			SELECT 
				* 
			INTO 
				#QEAKEFEEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAKEFEEDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Key Event Fee'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAKEFEE)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event Fee - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id + ', Qualification_Element_Type=' 
					+ Qualification_Element_Type + ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) + ', Key_Event_Name=' + Key_Event_Name 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEFEEDUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEFEEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAKEFEEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAKEFEE ADD [QualificationElementId] INT null, [QEAvailabilityId] INT null, [QEAvailabilityKeyEventId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAKEFEE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QEAvailability]
			Update Q 
				set [QEAvailabilityId]=QE.[QEAvailabilityId]
			from 
				#QEAKEFEE Q inner join [QEAvailability] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QualificationElementId]=QE.[QualificationElementId] 
				and DBO.FN_A2C_GETDATETIME(Q.[QEA_Effective_Start_Date_Time])=QE.[QEA_Effective_Start_Date_Time]	

			--Update existing PKs of [dbo].[QEAvailabilityKeyEvent]
			Update Q 
				set [QEAvailabilityKeyEventId]=QE.[QEAvailabilityKeyEventId]
			from 
				#QEAKEFEE Q inner join [QEAvailabilityKeyEvent] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QEAvailabilityId]=QE.[QEAvailabilityId] 
				and LTRIM(RTRIM(Q.[Key_Event_Name]))=LTRIM(RTRIM(QE.[Key_Event_Name]))
	
			--merge [QEAvailabilityKeyEventFee]
			MERGE [dbo].[QEAvailabilityKeyEventFee] AS [target]
			USING (SELECT * from #QEAKEFEE 
					where [QEAvailabilityKeyEventId] is not null 
					and [QE_Fee_Category_Type] is not null
					and DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NOT NULL) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityKeyEventId] = source.[QEAvailabilityKeyEventId] AND
				[target].[QE_Fee_Category_Type] =  LTRIM(RTRIM(source.[QE_Fee_Category_Type])) AND
				[target].[Fee_Period_Start_Date_Time] =  DBO.FN_A2C_GETDATETIME(source.[Fee_Period_Start_Date_Time]))
			WHEN MATCHED THEN 
			UPDATE SET				
				[Fee_Period_Title] = LTRIM(RTRIM(source.[Fee_Period_Title])),
				[Fee_Period_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Fee_Period_End_Date_Time]),
				[Fee_Amount] = source.[Fee_Amount],
				[Fee_Additional_Text] = LTRIM(RTRIM(source.[Fee_Additional_Text])),		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityKeyEventId],
				[QE_Fee_Category_Type],
				[Fee_Period_Start_Date_Time],
				[Fee_Period_Title],
				[Fee_Period_End_Date_Time],
				[Fee_Amount],
				[Fee_Additional_Text],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityKeyEventId],
				LTRIM(RTRIM(source.[QE_Fee_Category_Type])),
				DBO.FN_A2C_GETDATETIME(source.[Fee_Period_Start_Date_Time]),
				LTRIM(RTRIM(source.[Fee_Period_Title])),
				DBO.FN_A2C_GETDATETIME(source.[Fee_Period_End_Date_Time]),
				source.[Fee_Amount],
				LTRIM(RTRIM(source.[Fee_Additional_Text])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEFEE', 'U') IS NOT NULL
				DROP TABLE #QEAKEFEE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Key Event Fee block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Key Event Fee'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 7: IMPORT QE Fee Category --------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				FEE.value('(a2c:QEFeeCategory_ID/a2c:QE_Fee_Category_Type/text())[1]','[nvarchar](100)') QE_Fee_Category_Type,
				FEE.value('(a2c:Fee_Additional_Information/text())[1]','[nvarchar](400)') Fee_Additional_Information,
				FEE.value('(a2c:Currency_Type/text())[1]','[nvarchar](80)') Currency_Type,
				FEE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#QEFEE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEFeeCategory_DS/a2c:QEFeeCategory') as QE(FEE)

		
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFEE 
					WHERE ISNULL(QE_Fee_Category_Type,'')='')
			BEGIN
				PRINT 'QE Fee Category - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Fee Category" - Record QE_Fee_Category_Type="' +  ISNULL(QE_Fee_Category_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFEE 
				WHERE 
					ISNULL(QE_Fee_Category_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFEE 
				WHERE 
					ISNULL(QE_Fee_Category_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Fee_Category_Type 
				ORDER BY 
					[AOCentreID], QE_Fee_Category_Type) 'RowRank' 
			FROM 
				#QEFEE)
			SELECT 
				* 
			INTO 
				#QEFEEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFEEDUPS)
			BEGIN

				print 'duplicate records found in QE Fee Category'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Fee_Category_Type 
					ORDER BY 
						[AOCentreID], QE_Fee_Category_Type) 'RowRank' 
				FROM 
					#QEFEE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Fee Category - Record QE_Fee_Category_Type=' +  QE_Fee_Category_Type + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFEEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFEEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFEEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QEFeeCategory]
			MERGE [dbo].[QEFeeCategory] AS [target]
			USING (SELECT * from #QEFEE) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QE_Fee_Category_Type] = LTRIM(RTRIM(source.[QE_Fee_Category_Type])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[Fee_Additional_Information] = LTRIM(RTRIM(source.[Fee_Additional_Information])),
				[Currency_Type] = LTRIM(RTRIM(source.[Currency_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QE_Fee_Category_Type],
				[Fee_Additional_Information],
				[Currency_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[QE_Fee_Category_Type])),
				LTRIM(RTRIM(source.[Fee_Additional_Information])),
				LTRIM(RTRIM(source.[Currency_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFEE', 'U') IS NOT NULL
				DROP TABLE #QEFEE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Fee Category block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Fee Category'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 8: IMPORT Qualification Framework ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],	
				QF.value('(a2c:QualificationFrameworkParty_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](max)') Party_Id_Administrator,
				PQF.value('(a2c:QualificationFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](max)') Qualification_Framework_Type,
				QFL.value('(a2c:Qual_Frmwrk_Level_Type_ID/a2c:Qual_Frmwrk_Level_Type/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type,
				QFL.value('(a2c:Qual_Frmwrk_Level_Tier_Type/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Tier_Type,
				QFL.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into
				#QEFM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationFramework_DS/a2c:QualificationFramework') as Q(QF) 
				CROSS APPLY Q.QF.nodes('a2c:PartyQualificationFramework_CN') as QE(PQF) 
				CROSS APPLY QE.PQF.nodes('a2c:QualificationFrameworkLevel_CN') as QF(QFL) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFM 
					WHERE ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')='')
			BEGIN
				PRINT 'Qualification Framework - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Framework" - Record Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type="' +  ISNULL(Qual_Frmwrk_Level_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFM 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFM 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
				ORDER BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
			FROM 
				#QEFM)
			SELECT 
				* 
			INTO 
				#QEFMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFMDUPS)
			BEGIN

				print 'duplicate records found in Qualification Framework'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
					ORDER BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
				FROM 
					#QEFM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Framework - Record Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type=' +  Qual_Frmwrk_Level_Type 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QualificationFramework]
			MERGE [dbo].[QualificationFramework] AS [target]
			USING (SELECT * from #QEFM) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Party_Id_Administrator] = LTRIM(RTRIM(source.[Party_Id_Administrator])) AND
				[target].[Qualification_Framework_Type] = LTRIM(RTRIM(source.[Qualification_Framework_Type])) AND
				[target].[Qual_Frmwrk_Level_Type] = LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Type])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[Qual_Frmwrk_Level_Tier_Type] = LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Tier_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Party_Id_Administrator],
				[Qualification_Framework_Type],
				[Qual_Frmwrk_Level_Type],
				[Qual_Frmwrk_Level_Tier_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[Party_Id_Administrator])),
				LTRIM(RTRIM(source.[Qualification_Framework_Type])),
				LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Type])),
				LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Tier_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFM', 'U') IS NOT NULL
				DROP TABLE #QEFM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Qualification Framework block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Framework'
					
		END CATCH

		----------------------------------------------------------------
		----- STEP 8.1 : IMPORT Qualification Framework Hierarchy ------
		----------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select
				@AwardingOrganisationCentreId [AOCentreID],	
				QF.value('(a2c:QualificationFrameworkParty_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](max)') Party_Id_Administrator,
				PQF.value('(a2c:QualificationFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](max)') Qualification_Framework_Type,
				QFH.value('(a2c:QualFrameworkHierarchy_ID/a2c:Qual_Frmwrk_Level_Type_Parent/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type_Parent,
				QFH.value('(a2c:QualFrameworkHierarchy_ID/a2c:Qual_Frmwrk_Level_Type_Child/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type_Child,
				QFH.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into
				#QEFMHR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationFramework_DS/a2c:QualificationFramework') as Q(QF) 
				CROSS APPLY Q.QF.nodes('a2c:PartyQualificationFramework_CN') as QE(PQF) 
				CROSS APPLY QE.PQF.nodes('a2c:QualFrameworkHierarchy') as QF(QFH) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFMHR 
					WHERE ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')='')
			BEGIN
				PRINT 'Qualification Framework Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Framework Hierarchy" - Record Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type_Parent="' +  ISNULL(Qual_Frmwrk_Level_Type_Parent,'') 
					+ '", Qual_Frmwrk_Level_Type_Child="' +  ISNULL(Qual_Frmwrk_Level_Type_Child,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMHR 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFMHR 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child  
				ORDER BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child) 'RowRank' 
			FROM 
				#QEFMHR)
			SELECT 
				* 
			INTO 
				#QEFMHRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFMHRDUPS)
			BEGIN

				print 'duplicate records found in Qualification Framework Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child  
					ORDER BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child) 'RowRank' 
				FROM 
					#QEFMHR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Framework Hierarchy - Record Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type_Parent=' +  Qual_Frmwrk_Level_Type_Parent 
					+ ', Qual_Frmwrk_Level_Type_Child=' +  Qual_Frmwrk_Level_Type_Child 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMHRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMHRDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFMHRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEFMHR ADD [QualificationFrameworkId_Parent] INT null, [QualificationFrameworkId_Child] INT null

			--Update existing PKs of [dbo].[QualificationFramework]
			Update Q 
				set [QualificationFrameworkId_Parent]=QE.[QualificationFrameworkId]
			from 
				#QEFMHR Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=LTRIM(RTRIM(QE.[Party_Id_Administrator])) 
				and Q.[Qualification_Framework_Type]=LTRIM(RTRIM(QE.[Qualification_Framework_Type]))
				and Q.Qual_Frmwrk_Level_Type_Parent=LTRIM(RTRIM(QE.[Qual_Frmwrk_Level_Type]))

			Update Q 
				set [QualificationFrameworkId_Child]=QE.[QualificationFrameworkId]
			from 
				#QEFMHR Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=LTRIM(RTRIM(QE.[Party_Id_Administrator])) 
				and Q.[Qualification_Framework_Type]=LTRIM(RTRIM(QE.[Qualification_Framework_Type]))
				and Q.Qual_Frmwrk_Level_Type_Child=LTRIM(RTRIM(QE.[Qual_Frmwrk_Level_Type]))

			--merge [QualificationFrameworkHierarchy]
			MERGE [dbo].[QualificationFrameworkHierarchy] AS [target]
			USING (SELECT * from #QEFMHR where [QualificationFrameworkId_Parent] is not null and [QualificationFrameworkId_Child] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationFrameworkId_Parent] = source.[QualificationFrameworkId_Parent] AND
				[target].[QualificationFrameworkId_Child] = source.[QualificationFrameworkId_Child])
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationFrameworkId_Parent],
				[QualificationFrameworkId_Child],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationFrameworkId_Parent],
				source.[QualificationFrameworkId_Child],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMHR', 'U') IS NOT NULL
				DROP TABLE #QEFMHR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Qualification Framework Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Framework Hierarchy'
					
		END CATCH

		----------------------------------------------------------------
		----- STEP 8.2: IMPORT Qualification Element Framework ---------
		----------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QF.value('(a2c:QEFramework_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QF.value('(a2c:QEFramework_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QF.value('(a2c:QEFramework_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](max)') Party_Id_Administrator,
				QF.value('(a2c:QEFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](max)') Qualification_Framework_Type,
				QF.value('(a2c:QEFramework_ID/a2c:Qual_Frmwrk_Level_Type/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type,
				QF.value('(a2c:QE_Framework_Credit_Value/text())[1]','[nvarchar](max)') QE_Framework_Credit_Value,
				QF.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag	
			into
				#QELEFM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementFramework_DS/a2c:QualificationElementFramework') as Q(QF) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QELEFM 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Framework - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId,A2CTransactionResponseEnvelopeId,  
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Framework" - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' +  ISNULL(Qualification_Element_Type,'') 
					+ '", Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type="' +  ISNULL(Qual_Frmwrk_Level_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELEFM 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QELEFM 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
			FROM 
				#QELEFM)
			SELECT 
				* 
			INTO 
				#QELEFMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QELEFMDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Framework'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
				FROM 
					#QELEFM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Framework - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type 
					+ ', Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type=' +  Qual_Frmwrk_Level_Type
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELEFMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELEFMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QELEFMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QELEFM ADD [QualificationElementId] INT null, [QualificationFrameworkId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QELEFM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QualificationFramework]
			Update Q 
				set [QualificationFrameworkId]=QE.[QualificationFrameworkId]
			from 
				#QELEFM Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=QE.[Party_Id_Administrator] 
				and Q.[Qualification_Framework_Type]=QE.[Qualification_Framework_Type]
				and Q.[Qual_Frmwrk_Level_Type]=QE.[Qual_Frmwrk_Level_Type]

			--merge [QualificationElementFramework]
			MERGE [dbo].[QualificationElementFramework] AS [target]
			USING (SELECT * from #QELEFM where [QualificationElementId] is not null and [QualificationFrameworkId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QualificationFrameworkId] = source.[QualificationFrameworkId])
			WHEN MATCHED THEN 
			UPDATE SET		
				[QE_Framework_Credit_Value] = source.[QE_Framework_Credit_Value],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QualificationFrameworkId],
				[QE_Framework_Credit_Value],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QualificationFrameworkId],
				source.[QE_Framework_Credit_Value],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELEFM', 'U') IS NOT NULL
				DROP TABLE #QELEFM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Framework block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Framework'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 9: IMPORT Sector Subject Area ----------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 			
				@AwardingOrganisationCentreId [AOCentreID],	
				CN.value('(a2c:SectorSubjectArea_ID/a2c:Sector_Subject_Area/text())[1]','decimal(3,1)') Sector_Subject_Area,
				CN.value('(a2c:Sector_Subject_Area_Descr/text())[1]','[nvarchar](100)') Sector_Subject_Area_Descr,
				CN.value('(a2c:Sector_Subject_Area_Level_Type/text())[1]','[nvarchar](8)') Sector_Subject_Area_Level_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#SSA
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:SectorSubjectArea_DS/a2c:SectorSubjectArea/a2c:SectorSubjectArea_CN') as SSA(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSA 
					WHERE Sector_Subject_Area IS NULL)
			BEGIN
				PRINT 'Sector Subject Area - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Sector Subject Area" - Record Sector_Subject_Area="' 
					+  CASE WHEN Sector_Subject_Area IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSA 
				WHERE 
					Sector_Subject_Area IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSA 
				WHERE 
					Sector_Subject_Area IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Sector_Subject_Area
				ORDER BY 
					[AOCentreID], Sector_Subject_Area) 'RowRank' 
			FROM 
				#SSA)
			SELECT 
				* 
			INTO 
				#SSADUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSADUPS)
			BEGIN

				print 'duplicate records found in Sector Subject Area'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Sector_Subject_Area
					ORDER BY 
						[AOCentreID], Sector_Subject_Area) 'RowRank' 
				FROM 
					#SSA)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Sector Subject Area - Record Sector_Subject_Area=' +  cast(Sector_Subject_Area as nvarchar)
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSADUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSADUPS', 'U') IS NOT NULL
			  DROP TABLE #SSADUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [SectorSubjectArea]
			MERGE [dbo].[SectorSubjectArea] AS [target]
			USING (SELECT * from #SSA) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Sector_Subject_Area] = source.[Sector_Subject_Area])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Sector_Subject_Area_Descr] = LTRIM(RTRIM(source.[Sector_Subject_Area_Descr])),
				[Sector_Subject_Area_Level_Type] = LTRIM(RTRIM(source.[Sector_Subject_Area_Level_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Sector_Subject_Area],
				[Sector_Subject_Area_Descr],
				[Sector_Subject_Area_Level_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[Sector_Subject_Area],
				LTRIM(RTRIM(source.[Sector_Subject_Area_Descr])),
				LTRIM(RTRIM(source.[Sector_Subject_Area_Level_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSA', 'U') IS NOT NULL
				DROP TABLE #SSA;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Sector Subject Area block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Sector Subject Area'
					
		END CATCH


		-------------------------------------------------------------
		----- STEP 9.1: IMPORT Sector Subject Area Hierarchy --------
		-------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 			
				@AwardingOrganisationCentreId [AOCentreID],	
				CN.value('(a2c:SectorSubjectAreaHierarchy_ID/a2c:Sector_Subject_Area_Parent/text())[1]','decimal(3,1)') Sector_Subject_Area_Parent,
				CN.value('(a2c:SectorSubjectAreaHierarchy_ID/a2c:Sector_Subject_Area_Child/text())[1]','decimal(3,1)') Sector_Subject_Area_Child,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#SSAHR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:SectorSubjectArea_DS/a2c:SectorSubjectArea/a2c:SectorSubjectAreaHierarchy') as SSA(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSAHR 
					WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL)
			BEGIN
				PRINT 'Sector Subject Area Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Sector Subject Area Hierarchy" - Record Sector_Subject_Area_Parent="' 
					+  CASE WHEN Sector_Subject_Area_Parent IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area_Parent AS VARCHAR) END
					+ '", Sector_Subject_Area_Child="' 
					+  CASE WHEN Sector_Subject_Area_Child IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area_Child AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAHR 
				WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSAHR 
				WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child
				ORDER BY 
					[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child) 'RowRank' 
			FROM 
				#SSAHR)
			SELECT 
				* 
			INTO 
				#SSAHRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSAHRDUPS)
			BEGIN

				print 'duplicate records found in Sector Subject Area Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child
					ORDER BY 
						[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child) 'RowRank' 
				FROM 
					#SSAHR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Sector Subject Area Hierarchy - Record Sector_Subject_Area_Parent=' +  CAST(Sector_Subject_Area_Parent AS VARCHAR)
					+ ' , Sector_Subject_Area_Child=' +  CAST(Sector_Subject_Area_Child AS VARCHAR)
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAHRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAHRDUPS', 'U') IS NOT NULL
			  DROP TABLE #SSAHRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #SSAHR ADD [SectorSubjectAreaId_Parent] INT null, [SectorSubjectAreaId_Child] INT null

			--Update existing PKs of [dbo].[SectorSubjectArea]
			Update Q 
				set [SectorSubjectAreaId_Parent]=QE.[SectorSubjectAreaId]
			from 
				#SSAHR Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area_Parent=QE.[Sector_Subject_Area] 

			Update Q 
				set [SectorSubjectAreaId_Child]=QE.[SectorSubjectAreaId]
			from 
				#SSAHR Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area_Child=QE.[Sector_Subject_Area] 
		
			--merge [SectorSubjectAreaHierarchy]
			MERGE [dbo].[SectorSubjectAreaHierarchy] AS [target]
			USING (SELECT * from #SSAHR where [SectorSubjectAreaId_Parent] is not null and [SectorSubjectAreaId_Child] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[SectorSubjectAreaId_Parent] = source.[SectorSubjectAreaId_Parent] AND
				[target].[SectorSubjectAreaId_Child] = source.[SectorSubjectAreaId_Child])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[SectorSubjectAreaId_Parent],
				[SectorSubjectAreaId_Child],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[SectorSubjectAreaId_Parent],
				source.[SectorSubjectAreaId_Child],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAHR', 'U') IS NOT NULL
				DROP TABLE #SSAHR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Sector Subject Area Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Sector Subject Area Hierarchy'
					
		END CATCH
			
		-------------------------------------------------------------
		----- STEP 9.2: IMPORT QE Sector Subject Area  --------------
		-------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],	
				QE.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](100)') AO_Qualification_Element_Id,
				QE.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](100)') Qualification_Element_Type,
				CN.value('(a2c:SectorSubjectArea_ID/a2c:Sector_Subject_Area/text())[1]','decimal(3,1)') Sector_Subject_Area,
				CN.value('(a2c:QE_Sector_Subject_Area_Eff_Date/text())[1]','[nvarchar](100)') QE_Sector_Subject_Area_Eff_Date,
				CN.value('(a2c:QE_Sector_Subject_Area_End_Date/text())[1]','[nvarchar](100)') QE_Sector_Subject_Area_End_Date,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#SSAQE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QESectorSubjectArea_DS/a2c:QESectorSubjectArea/a2c:QualificationElement') as SSA(QE)
				CROSS APPLY SSA.QE.nodes('a2c:QESectorSubjectArea_CN') as SS(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSAQE 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL)
			BEGIN
				PRINT 'QE Sector Subject Area - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Sector Subject Area" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", Sector_Subject_Area="' 
					+  CASE WHEN Sector_Subject_Area IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAQE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSAQE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area) 'RowRank' 
			FROM 
				#SSAQE)
			SELECT 
				* 
			INTO 
				#SSAQEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSAQEDUPS)
			BEGIN

				print 'duplicate records found in QE Sector Subject Area'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area) 'RowRank' 
				FROM 
					#SSAQE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Sector Subject Area - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ' , Qualification_Element_Type=' +  Qualification_Element_Type
					+ ' , Sector_Subject_Area=' +  CAST(Sector_Subject_Area AS NVARCHAR)
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAQEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAQEDUPS', 'U') IS NOT NULL
			  DROP TABLE #SSAQEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #SSAQE ADD [QualificationElementId] INT null, [SectorSubjectAreaId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#SSAQE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[SectorSubjectArea]
			Update Q 
				set [SectorSubjectAreaId]=QE.[SectorSubjectAreaId]
			from 
				#SSAQE Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area=QE.[Sector_Subject_Area] 
		
			--merge [QESectorSubjectArea]
			MERGE [dbo].[QESectorSubjectArea] AS [target]
			USING (SELECT * from #SSAQE where [QualificationElementId] is not null and [SectorSubjectAreaId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[SectorSubjectAreaId] = source.[SectorSubjectAreaId])
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Sector_Subject_Area_Eff_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_Eff_Date]),
				[QE_Sector_Subject_Area_End_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_End_Date]),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[SectorSubjectAreaId],
				[QE_Sector_Subject_Area_Eff_Date],
				[QE_Sector_Subject_Area_End_Date],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[SectorSubjectAreaId],
				DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_Eff_Date]),
				DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_End_Date]),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAQE', 'U') IS NOT NULL
				DROP TABLE #SSAQE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Sector Subject Area block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Sector Subject Area'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 10: IMPORT QE Assessment Material ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				CN.value('(a2c:QEAssessmentMaterial_ID/a2c:QE_Assmnt_Material_Id/text())[1]','[nvarchar](max)') QE_Assmnt_Material_Id,
				CN.value('(a2c:QE_Assmnt_Material_Name/text())[1]','[nvarchar](100)') QE_Assmnt_Material_Name,
				CN.value('(a2c:QE_Assmnt_Material_Source/text())[1]','[nvarchar](400)') QE_Assmnt_Material_Source,
				CN.value('(a2c:QE_Assmnt_Material_Description/text())[1]','[nvarchar](250)') QE_Assmnt_Material_Description,
				CN.value('(a2c:QE_Assmnt_Material_Source_Type/text())[1]','[nvarchar](32)') QE_Assmnt_Material_Source_Type,
				CN.value('(a2c:QE_Assmnt_Material_Medium_Type/text())[1]','[nvarchar](20)') QE_Assmnt_Material_Medium_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#QEAM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityAssessmentMaterial_DS/a2c:QEAvailabilityAssessmentMaterial/a2c:QEAssessmentMaterial_CN') as Q(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAM 
					WHERE ISNULL(QE_Assmnt_Material_Id,'')='')
			BEGIN
				PRINT 'QE Assessment Material - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Assessment Material" - Record QE_Assmnt_Material_Id="' + ISNULL(QE_Assmnt_Material_Id,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Assmnt_Material_Id
				ORDER BY 
					[AOCentreID], QE_Assmnt_Material_Id) 'RowRank' 
			FROM 
				#QEAM)
			SELECT 
				* 
			INTO 
				#QEAMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAMDUPS)
			BEGIN

				print 'duplicate records found in QE Assessment Material'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Assmnt_Material_Id
					ORDER BY 
						[AOCentreID], QE_Assmnt_Material_Id) 'RowRank' 
				FROM 
					#QEAM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Assessment Material - Record QE_Assmnt_Material_Id=' +  QE_Assmnt_Material_Id
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QEAssessmentMaterial]
			MERGE [dbo].[QEAssessmentMaterial] AS [target]
			USING (SELECT * from #QEAM) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QE_Assmnt_Material_Id] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Id])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[QE_Assmnt_Material_Name] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Name])),
				[QE_Assmnt_Material_Source] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Source])),
				[QE_Assmnt_Material_Description] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Description])),
				[QE_Assmnt_Material_Source_Type] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Source_Type])),
				[QE_Assmnt_Material_Medium_Type] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Medium_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QE_Assmnt_Material_Id],
				[QE_Assmnt_Material_Name],
				[QE_Assmnt_Material_Source],
				[QE_Assmnt_Material_Description],
				[QE_Assmnt_Material_Source_Type],
				[QE_Assmnt_Material_Medium_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Id])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Name])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Source])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Description])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Source_Type])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Medium_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAM', 'U') IS NOT NULL
				DROP TABLE #QEAM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Assessment Material block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Assessment Material'
					
		END CATCH

		---------------------------------------------------
		----- STEP 10.1: IMPORT QEA Assessment Material ---
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				CN.value('(a2c:QEAssessmentMaterial_ID/a2c:QE_Assmnt_Material_Id/text())[1]','[nvarchar](25)') QE_Assmnt_Material_Id,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				QEA.value('(a2c:Number_Per_Learner/text())[1]','int') Number_Per_Learner,
				QEA.value('(a2c:Number_Per_Centre/text())[1]','int') Number_Per_Centre,
				QEA.value('(a2c:Assmnt_Material_Release_Date/text())[1]','date') Assmnt_Material_Release_Date,
				QEA.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#QEAAM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityAssessmentMaterial_DS/a2c:QEAvailabilityAssessmentMaterial/a2c:QEAssessmentMaterial_CN') as Q(CN) 
				CROSS APPLY Q.CN.nodes('a2c:QEAAssessmentMaterial') as QE(QEA)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAAM 
					WHERE ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QEA Assessment Material - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QEA Assessment Material" - Record QE_Assmnt_Material_Id="' + ISNULL(QE_Assmnt_Material_Id,'')
					+ '", AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEAAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time
				ORDER BY 
					[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time) 'RowRank' 
			FROM 
				#QEAAM)
			SELECT 
				* 
			INTO 
				#QEAAMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAAMDUPS)
			BEGIN

				print 'duplicate records found in QEA Assessment Material'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time
					ORDER BY 
						[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAAM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QEA Assessment Material - Record QE_Assmnt_Material_Id=' +  QE_Assmnt_Material_Id
					+ ', AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type
					+ ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100))
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAAMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAAMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAAMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAAM ADD [QualificationElementId] INT null, [QEAssessmentMaterialId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAAM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QEAAssessmentMaterial]]
			Update Q 
				set [QEAssessmentMaterialId]=QE.[QEAssessmentMaterialId]
			from 
				#QEAAM Q inner join [dbo].[QEAssessmentMaterial] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.QE_Assmnt_Material_Id=QE.[QE_Assmnt_Material_Id]

			--merge [QEAAssessmentMaterial]
			MERGE [dbo].[QEAAssessmentMaterial] AS [target]
			USING (SELECT * from #QEAAM where [QualificationElementId] is not null and [QEAssessmentMaterialId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEAssessmentMaterialId] = source.[QEAssessmentMaterialId])
			WHEN MATCHED THEN 
			UPDATE SET				
				[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				[Number_per_Learner] = source.[Number_per_Learner],
				[Number_per_Centre] = source.[Number_per_Centre],
				[Assmnt_Material_Release_Date] = source.[Assmnt_Material_Release_Date],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEAssessmentMaterialId],
				[QEA_Effective_Start_Date_Time],
				[Number_per_Learner],
				[Number_per_Centre],
				[Assmnt_Material_Release_Date],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QEAssessmentMaterialId],
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				source.[Number_per_Learner],
				source.[Number_per_Centre],
				source.[Assmnt_Material_Release_Date],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAAM', 'U') IS NOT NULL
				DROP TABLE #QEAAM;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QEA Assessment Material block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QEA Assessment Material'
					
		END CATCH

		----------------------------------------------------------------------
		----------------------------------------------------------------------
		----- STEP 11: IMPORT Qualification Element Grade --------------------
		----------------------------------------------------------------------
		----------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Grade/text())[1]','[nvarchar](max)') QE_Grade,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Outcome_Type/text())[1]','[nvarchar](max)') QE_Outcome_Type,
				CN.value('(a2c:QE_Grade_Effective_Date/text())[1]','date') QE_Grade_Effective_Date,
				CN.value('(a2c:QE_Grade_Eff_End_Date/text())[1]','date') QE_Grade_Eff_End_Date,
				CN.value('(a2c:QE_Grade_Description/text())[1]','[nvarchar](max)') QE_Grade_Description,
				CN.value('(a2c:QE_Grade_Sequence_Order/text())[1]','int') QE_Grade_Sequence_Order,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEG	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementGrade_DS/a2c:QualificationElementGrade') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QualificationElementGrade_CN') as QEG(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEG 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Grade - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Grade" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '", QE_Outcome_Type="' + ISNULL(QE_Outcome_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEG 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEG 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type) 'RowRank' 
			FROM 
				#QEG)
			SELECT 
				* 
			INTO 
				#QEGDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEGDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Grade'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type) 'RowRank' 
				FROM 
					#QEG)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Grade - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Grade=' +  ISNULL(QE_Grade,'')
					+ ', QE_Outcome_Type=' +  ISNULL(QE_Outcome_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEGDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEG ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEG Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QualificationElementGrade]
			MERGE [dbo].[QualificationElementGrade] AS [target]
			USING (SELECT * from #QEG where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QE_Grade] = LTRIM(RTRIM(source.[QE_Grade])) AND
				[target].[QE_Outcome_Type] = LTRIM(RTRIM(source.[QE_Outcome_Type])))
			WHEN MATCHED THEN 
			UPDATE SET				
				[QE_Grade_Effective_Date] = source.[QE_Grade_Effective_Date],
				[QE_Grade_Eff_End_Date] = source.[QE_Grade_Eff_End_Date],
				[QE_Grade_Description] = LTRIM(RTRIM(source.[QE_Grade_Description])),
				[QE_Grade_Sequence_Order] = source.[QE_Grade_Sequence_Order],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QE_Grade],
				[QE_Outcome_Type],
				[QE_Grade_Effective_Date],
				[QE_Grade_Eff_End_Date],
				[QE_Grade_Description],
				[QE_Grade_Sequence_Order],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[QE_Grade])),
				LTRIM(RTRIM(source.[QE_Outcome_Type])),
				source.[QE_Grade_Effective_Date],
				source.[QE_Grade_Eff_End_Date],
				LTRIM(RTRIM(source.[QE_Grade_Description])),
				source.[QE_Grade_Sequence_Order],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEG', 'U') IS NOT NULL
				DROP TABLE #QEG;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Grade block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Grade'
					
		END CATCH

		-------------------------------------------------------
		----- STEP 11.1: IMPORT QE Grade Performance Points ---
		-------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](100)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](100)') Qualification_Element_Type,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Grade/text())[1]','[nvarchar](100)') QE_Grade,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Outcome_Type/text())[1]','[nvarchar](100)') QE_Outcome_Type,
				PPN.value('(a2c:QEGradePerformancePoints_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](100)') Party_Id_Administrator,
				PPN.value('(a2c:Performance_Points/text())[1]','Decimal(6,2)') Performance_Points,
				PPN.value('(a2c:Level_1_Threshold/text())[1]','Decimal(5,2)') Level_1_Threshold,
				PPN.value('(a2c:Level_2_Threshold/text())[1]','Decimal(5,2)') Level_2_Threshold,
				PPN.value('(a2c:Level_3_Threshold/text())[1]','Decimal(5,2)') Level_3_Threshold,
				PPN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#QEGPPT	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementGrade_DS/a2c:QualificationElementGrade') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QualificationElementGrade_CN') as QEG(CN) 
				CROSS APPLY QEG.CN.nodes('a2c:QEGradePerformancePoints') as QEGP(PPN) 

			
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEGPPT 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')='')
			BEGIN
				PRINT 'QE Grade Performance Points - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Grade Performance Points" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '", QE_Outcome_Type="' + ISNULL(QE_Outcome_Type,'')
					+ '", Party_Id_Administrator="' + ISNULL(Party_Id_Administrator,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGPPT 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEGPPT 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator) 'RowRank' 
			FROM 
				#QEGPPT)
			SELECT 
				* 
			INTO 
				#QEGPPTDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEGPPTDUPS)
			BEGIN

				print 'duplicate records found in QE Grade Performance Points'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator) 'RowRank' 
				FROM 
					#QEGPPT)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Grade - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Grade=' +  ISNULL(QE_Grade,'')
					+ ', QE_Outcome_Type=' +  ISNULL(QE_Outcome_Type,'')
					+ ', Party_Id_Administrator=' +  ISNULL(Party_Id_Administrator,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGPPTDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGPPTDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEGPPTDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEGPPT ADD [QualificationElementId] INT null, [QualificationElementGradeId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEGPPT Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QualificationElementGrade]]
			Update Q 
				set [QualificationElementGradeId]=QE.[QualificationElementGradeId]
			from 
				#QEGPPT Q inner join [dbo].[QualificationElementGrade] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.QualificationElementId=QE.QualificationElementId
				and LTRIM(RTRIM(Q.[QE_Grade]))=LTRIM(RTRIM(QE.[QE_Grade]))
				and LTRIM(RTRIM(Q.[QE_Outcome_Type]))=LTRIM(RTRIM(QE.[QE_Outcome_Type]))

			--merge [QEGradePerformancePoints]
			MERGE [dbo].[QEGradePerformancePoints] AS [target]
			USING (SELECT * from #QEGPPT 
					where [QualificationElementId] is not null 
					and [QualificationElementGradeId] is not null
					and [Party_Id_Administrator] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QualificationElementGradeId] = source.[QualificationElementGradeId] AND
				LTRIM(RTRIM([target].[Party_Id_Administrator]))=LTRIM(RTRIM(source.[Party_Id_Administrator])))
			WHEN MATCHED THEN 
			UPDATE SET
				[Performance_Points] = source.[Performance_Points],
				[Level_1_Threshold] = source.[Level_1_Threshold],
				[Level_2_Threshold] = source.[Level_2_Threshold],
				[Level_3_Threshold] = source.[Level_3_Threshold],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QualificationElementGradeId],
				[Party_Id_Administrator],
				[Performance_Points],
				[Level_1_Threshold],
				[Level_2_Threshold],
				[Level_3_Threshold],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QualificationElementGradeId],
				LTRIM(RTRIM(source.[Party_Id_Administrator])),
				source.[Performance_Points],
				source.[Level_1_Threshold],
				source.[Level_2_Threshold],
				source.[Level_3_Threshold],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGPPT', 'U') IS NOT NULL
				DROP TABLE #QEGPPT;			

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Grade Performance Points block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Grade Performance Points'
					
		END CATCH
					
		---------------------------------------------------
		---------------------------------------------------
		----- STEP 12: IMPORT QE Objective Statement ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				CN.value('(a2c:QEObjectiveStatement_ID/a2c:QE_Objective_Statement_Name/text())[1]','[nvarchar](max)') QE_Objective_Statement_Name,
				CN.value('(a2c:QE_Objective_Statement_Text/text())[1]','[nvarchar](max)') QE_Objective_Statement_Text,
				CN.value('(a2c:QE_Objctv_Stmnt_Level_Seq_Num/text())[1]','int') QE_Objctv_Stmnt_Level_Seq_Num,
				CN.value('(a2c:QE_Objective_Statement_Level/text())[1]','[nvarchar](max)') QE_Objective_Statement_Level,
				CN.value('(a2c:QE_Objective_Statement_Descr/text())[1]','[nvarchar](max)') QE_Objective_Statement_Descr,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEOS
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEObjectiveStatement_DS/a2c:QEObjectiveStatement') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QEObjectiveStatement_CN') as QEO(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEOS 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')='')
			BEGIN
				PRINT 'QE Objective Statement - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Objective Statement" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Objective_Statement_Name="' + ISNULL(QE_Objective_Statement_Name,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOS 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEOS 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name 
			ORDER BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name) 'RowRank' 
			FROM 
				#QEOS)
			SELECT 
				* 
			INTO 
				#QEOSDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEOSDUPS)
			BEGIN

				print 'duplicate records found in QE Objective Statement'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name) 'RowRank' 
				FROM 
					#QEOS)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Objective Statement - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Objective_Statement_Name=' +  ISNULL(QE_Objective_Statement_Name,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEOSDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEOS ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEOS Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QEObjectiveStatement]
			MERGE [dbo].[QEObjectiveStatement] AS [target]
			USING (SELECT * from #QEOS where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QE_Objective_Statement_Name] = LTRIM(RTRIM(source.[QE_Objective_Statement_Name])))
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Objective_Statement_Text] = LTRIM(RTRIM(source.[QE_Objective_Statement_Text])),
				[QE_Objctv_Stmnt_Level_Seq_Num] = source.[QE_Objctv_Stmnt_Level_Seq_Num],
				[QE_Objective_Statement_Level] = LTRIM(RTRIM(source.[QE_Objective_Statement_Level])),
				[QE_Objective_Statement_Descr] = LTRIM(RTRIM(source.[QE_Objective_Statement_Descr])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QE_Objective_Statement_Name],
				[QE_Objective_Statement_Text],
				[QE_Objctv_Stmnt_Level_Seq_Num],
				[QE_Objective_Statement_Level],
				[QE_Objective_Statement_Descr],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[QE_Objective_Statement_Name])),
				LTRIM(RTRIM(source.[QE_Objective_Statement_Text])),
				source.[QE_Objctv_Stmnt_Level_Seq_Num],
				LTRIM(RTRIM(source.[QE_Objective_Statement_Level])),
				LTRIM(RTRIM(source.[QE_Objective_Statement_Descr])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOS', 'U') IS NOT NULL
				DROP TABLE #QEOS;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Objective Statement block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Objective Statement'
					
		END CATCH

		---------------------------------------------------------------
		----- STEP 12.1: IMPORT QE Objective Statement Hierarchy ------
		---------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:AO_QE_Id_First/text())[1]','[nvarchar](max)') AO_QE_Id_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Type_First/text())[1]','[nvarchar](max)') QE_Type_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Objctv_Stmnt_Name_First/text())[1]','[nvarchar](max)') QE_Objctv_Stmnt_Name_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:AO_QE_Id_Second/text())[1]','[nvarchar](max)') AO_QE_Id_Second,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Type_Second/text())[1]','[nvarchar](max)') QE_Type_Second,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Objctv_Stmnt_Name_Second/text())[1]','[nvarchar](max)') QE_Objctv_Stmnt_Name_Second,
				QEID.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEOSH
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEObjectiveStatement_DS/a2c:QEObjectiveStatementHierarchy') as QE(QEID)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEOSH 
					WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')='')
			BEGIN
				PRINT 'QE Objective Statement Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Objective Statement Hierarchy" - Record AO_QE_Id_First="' + ISNULL(AO_QE_Id_First,'')
					+ '", QE_Type_First="' + ISNULL(QE_Type_First,'')
					+ '", QE_Objctv_Stmnt_Name_First="' + ISNULL(QE_Objctv_Stmnt_Name_First,'')
					+ '", AO_QE_Id_Second="' + ISNULL(AO_QE_Id_Second,'')
					+ '", QE_Type_Second="' + ISNULL(QE_Type_Second,'')
					+ '", QE_Objctv_Stmnt_Name_Second="' + ISNULL(QE_Objctv_Stmnt_Name_Second,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSH 
				WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEOSH 
				WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second
			ORDER BY 
				[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second) 'RowRank' 
			FROM 
				#QEOSH)
			SELECT 
				* 
			INTO 
				#QEOSHDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEOSHDUPS)
			BEGIN

				print 'duplicate records found in QE Objective Statement Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second
				ORDER BY 
					[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second) 'RowRank' 
				FROM 
					#QEOSH)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Objective Statement Hierarchy - Record AO_QE_Id_First=' +  ISNULL(AO_QE_Id_First,'')
					+ ', QE_Type_First=' +  ISNULL(QE_Type_First,'')
					+ ', QE_Objctv_Stmnt_Name_First=' +  ISNULL(QE_Objctv_Stmnt_Name_First,'')
					+ ', AO_QE_Id_Second=' +  ISNULL(AO_QE_Id_Second,'')
					+ ', QE_Type_Second=' +  ISNULL(QE_Type_Second,'')
					+ ', QE_Objctv_Stmnt_Name_Second=' +  ISNULL(QE_Objctv_Stmnt_Name_Second,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSHDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSHDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEOSHDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk columns to temp table
			ALTER TABLE #QEOSH ADD 
			[QualificationElementId_First] INT null,
			[QEObjectiveStatementId_First] INT null,
			[QualificationElementId_Second] INT null,
			[QEObjectiveStatementId_Second] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId_First]=QE.QualificationElementId
			from 
				#QEOSH Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_First=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_First=QE.[Qualification_Element_Type]

			Update Q 
				set [QualificationElementId_Second]=QE.QualificationElementId
			from 
				#QEOSH Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Second=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Second=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QEObjectiveStatement]]
			Update Q 
				set [QEObjectiveStatementId_First]=QE.[QEObjectiveStatementId]
			from 
				#QEOSH Q inner join [dbo].[QEObjectiveStatement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId_First]=QE.[QualificationElementId] 
				and Q.QE_Objctv_Stmnt_Name_First=QE.QE_Objective_Statement_Name

			Update Q 
				set [QEObjectiveStatementId_Second]=QE.[QEObjectiveStatementId]
			from 
				#QEOSH Q inner join [dbo].[QEObjectiveStatement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId_Second]=QE.[QualificationElementId] 
				and Q.QE_Objctv_Stmnt_Name_Second=QE.QE_Objective_Statement_Name

			--merge [QEObjectiveStatementHierarchy]
			MERGE [dbo].[QEObjectiveStatementHierarchy] AS [target]
			USING (SELECT * from #QEOSH where 
				[QualificationElementId_First] is not null and
				[QEObjectiveStatementId_First] is not null and
				[QualificationElementId_Second] is not null and
				[QEObjectiveStatementId_Second] is not null
			) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId_First] = source.[QualificationElementId_First] AND
				[target].[QEObjectiveStatementId_First] = source.[QEObjectiveStatementId_First] AND
				[target].[QualificationElementId_Second] = source.[QualificationElementId_Second] AND
				[target].[QEObjectiveStatementId_Second] = source.[QEObjectiveStatementId_Second])
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId_First],
				[QEObjectiveStatementId_First],
				[QualificationElementId_Second],
				[QEObjectiveStatementId_Second],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId_First],
				source.[QEObjectiveStatementId_First],
				source.[QualificationElementId_Second],
				source.[QEObjectiveStatementId_Second],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSH', 'U') IS NOT NULL
				DROP TABLE #QEOSH;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Objective Statement Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Objective Statement Hierarchy'
					
		END CATCH

		-----------------------------------------------------------------------
		-----------------------------------------------------------------------
		----- STEP 13: IMPORT Qualification Element Age Range -----------------
		-----------------------------------------------------------------------
		-----------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				CN.value('(a2c:AgeRange_ID/a2c:Age_Range_Type/text())[1]','[nvarchar](max)') Age_Range_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEAR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementAgeRange_DS/a2c:QualificationElementAgeRange/a2c:QualificationElementAgeRange_CN/a2c:QEAgeRange_ID') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QEAgeRange_CN') as QEO(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAR 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Age Range - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Age Range" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", Age_Range_Type="' + ISNULL(Age_Range_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAR 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAR 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------
		
			
			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type 
			ORDER BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type) 'RowRank' 
			FROM 
				#QEAR)
			SELECT 
				* 
			INTO 
				#QEARDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEARDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Age Range'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type) 'RowRank' 
				FROM 
					#QEAR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Age Range - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', Age_Range_Type=' +  ISNULL(Age_Range_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEARDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEARDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEARDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAR ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAR Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QualificationElementAgeRange]
			MERGE [dbo].[QualificationElementAgeRange] AS [target]
			USING (SELECT * from #QEAR where [QualificationElementId] is not null and [Age_Range_Type] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[Age_Range_Type] = LTRIM(RTRIM(source.[Age_Range_Type])))
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[Age_Range_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[Age_Range_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAR', 'U') IS NOT NULL
				DROP TABLE #QEAR;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Age Range block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Age Range'
					
		END CATCH

		--------------------------------------------------------
		--------------------------------------------------------
		----- STEP 14: IMPORT QE Availability Maximum Mark -----
		--------------------------------------------------------
		--------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEA.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QEA.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				CN.value('(a2c:QEAvailabilityMaximumMark_ID/a2c:QE_Outcome_Value_Type/text())[1]','[nvarchar](max)') QE_Outcome_Value_Type,
				CN.value('(a2c:QE_Availability_Maximum_Mark/text())[1]','int') QE_Availability_Maximum_Mark,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEAMM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityGradeBoundary_DS/a2c:QEAvailabilityMaximumMark/a2c:QEAvailability') as QE(QEA)
				CROSS APPLY QE.QEA.nodes('a2c:QEAvailabilityMaximumMark_CN') as QEM(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAMM 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')='')
			BEGIN
				PRINT 'QE Availability Maximum Mark - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Availability Maximum Mark" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", QE_Outcome_Value_Type="' + ISNULL(QE_Outcome_Value_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMM 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAMM 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type 
			ORDER BY
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type) 'RowRank' 
			FROM 
				#QEAMM)
			SELECT 
				* 
			INTO 
				#QEAMMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAMMDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Maximum Mark'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type 
				ORDER BY
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type) 'RowRank' 
				FROM 
					#QEAMM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Maximum Mark - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QEA_Effective_Start_Date_Time=' + cast(QEA_Effective_Start_Date_Time as varchar)
					+ ', QE_Outcome_Value_Type=' +  ISNULL(QE_Outcome_Value_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAMMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAMM ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAMM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QEAvailabilityMaximumMark]
			MERGE [dbo].[QEAvailabilityMaximumMark] AS [target]
			USING (SELECT * from #QEAMM 
					where [QualificationElementId] is not null
					and DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) is not null
					and [QE_Outcome_Value_Type] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.QEA_Effective_Start_Date_Time) AND
				[target].[QE_Outcome_Value_Type] = LTRIM(RTRIM(source.[QE_Outcome_Value_Type])))
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Availability_Maximum_Mark] = source.[QE_Availability_Maximum_Mark],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEA_Effective_Start_Date_Time],
				[QE_Outcome_Value_Type],
				[QE_Availability_Maximum_Mark],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				DBO.FN_A2C_GETDATETIME(source.QEA_Effective_Start_Date_Time),
				LTRIM(RTRIM(source.[QE_Outcome_Value_Type])),
				source.[QE_Availability_Maximum_Mark],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMM', 'U') IS NOT NULL
				DROP TABLE #QEAMM;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Maximum Mark block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Maximum Mark'
					
		END CATCH

		-------------------------------------------------------------------------
		----- STEP 14.1: IMPORT QE Availability Maximum Mark Grade Boundary -----
		-------------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEA.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QEA.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				CN.value('(a2c:QEAvailabilityMaximumMark_ID/a2c:QE_Outcome_Value_Type/text())[1]','[nvarchar](max)') QE_Outcome_Value_Type,
				GB.value('(a2c:QEAMaxMarkGradeBoundary_ID/a2c:QE_Grade/text())[1]','[nvarchar](max)') QE_Grade,
				GB.value('(a2c:Grade_Boundary_Lower_Limit/text())[1]','int') Grade_Boundary_Lower_Limit,
				GB.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEMMGB	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityGradeBoundary_DS/a2c:QEAvailabilityMaximumMark/a2c:QEAvailability') as QE(QEA)
				CROSS APPLY QE.QEA.nodes('a2c:QEAvailabilityMaximumMark_CN') as QEM(CN)
				CROSS APPLY QEM.CN.nodes('a2c:QEAMaxMarkGradeBoundary') as QEMM(GB) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEMMGB 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')='')
			BEGIN
				PRINT 'QE Availability Maximum Mark Grade Boundary - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Availability Maximum Mark Grade Boundary" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", QE_Outcome_Value_Type="' + ISNULL(QE_Outcome_Value_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEMMGB 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEMMGB 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade 
			ORDER BY
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade) 'RowRank' 
			FROM 
				#QEMMGB)
			SELECT 
				* 
			INTO 
				#QEMMGBDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEMMGBDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Maximum Mark'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade 
				ORDER BY
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade) 'RowRank' 
				FROM 
					#QEMMGB)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Maximum Mark - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type
					+ ', QEA_Effective_Start_Date_Time=' + cast(QEA_Effective_Start_Date_Time as varchar)
					+ ', QE_Outcome_Value_Type=' +  QE_Outcome_Value_Type
					+ ', QE_Grade=' +  QE_Grade
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEMMGBDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEMMGBDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEMMGBDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEMMGB ADD [QualificationElementId] INT null, [QEAvailabilityMaximumMarkId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEMMGB Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and LTRIM(RTRIM(Q.[AO_Qualification_Element_Id]))=LTRIM(RTRIM(QE.[AO_Qualification_Element_Id])) 
				and LTRIM(RTRIM(Q.[Qualification_Element_Type]))=LTRIM(RTRIM(QE.[Qualification_Element_Type]))

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QEAvailabilityMaximumMarkId]=QE.[QEAvailabilityMaximumMarkId]
			from 
				#QEMMGB Q inner join [dbo].[QEAvailabilityMaximumMark] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId]=QE.[QualificationElementId]		
				and DBO.FN_A2C_GETDATETIME(Q.QEA_Effective_Start_Date_Time)=QE.QEA_Effective_Start_Date_Time
				and LTRIM(RTRIM(Q.[QE_Outcome_Value_Type]))=LTRIM(RTRIM(QE.[QE_Outcome_Value_Type]))

			--merge [QEAMaxMarkGradeBoundary]
			MERGE [dbo].[QEAMaxMarkGradeBoundary] AS [target]
			USING (SELECT * from #QEMMGB 
					where [QualificationElementId] is not null
					and [QEAvailabilityMaximumMarkId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityMaximumMarkId] = source.[QEAvailabilityMaximumMarkId] AND
				[target].[QE_Grade] = LTRIM(RTRIM(source.[QE_Grade])))
			WHEN MATCHED THEN 
			UPDATE SET
				[Grade_Boundary_Lower_Limit] = source.[Grade_Boundary_Lower_Limit],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityMaximumMarkId],
				[QE_Grade],
				[Grade_Boundary_Lower_Limit],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityMaximumMarkId],
				LTRIM(RTRIM(source.[QE_Grade])),
				source.[Grade_Boundary_Lower_Limit],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEMMGB', 'U') IS NOT NULL
				DROP TABLE #QEMMGB;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Maximum Mark Grade Boundary block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Maximum Mark Grade Boundary'
					
		END CATCH

		-------------------------------------------------------------------------
		----- STEP 14.1 finished ------------------------------------------------
		-------------------------------------------------------------------------

		--UPDATE IMPORT STATUS
		IF @IsError=1
		BEGIN
			PRINT 'Exiting with error'
			--update import status
			UPDATE 
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
			SET 
				DATAIMPORTSTATUS = 2
			WHERE
				AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId
		END
		ELSE
		BEGIN
			--NO ERROR ENCOUNTERED
			--UPDATE SUCESS STATUS
			UPDATE 
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
			SET 
				DATAIMPORTSTATUS = 1
			WHERE
				AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND				
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId	
			
			PRINT 'Exiting with success'	
		END

	END TRY
	BEGIN CATCH

		PRINT 'Exception in Main block/Common area'
		
		IF @ScreenMasterId=0 OR @SchoolID=0 OR @AwardingOrganisationCentreId=0--REQUIRED TO LOG ERROR IN ERROR TABLE, SO CANT LOG ERROR
		BEGIN
			PRINT ERROR_NUMBER() 		
			PRINT ERROR_LINE() 
			PRINT ERROR_MESSAGE()			
		END
		ELSE
		BEGIN
			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId,
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, 
				@MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Main block/Common area'			
		END

		--update import status
		UPDATE 
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
		SET 
			DATAIMPORTSTATUS = 2
		WHERE
			AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId

		PRINT 'Exiting with error from Main block/Common area'

	END CATCH;
END
GO
PRINT N'Altering [dbo].[usp_ResetPasswordByUserId]...';


GO
ALTER PROCEDURE [dbo].[usp_ResetPasswordByUserId] 
@UserId uniqueidentifier,
@PasswordSalt nvarchar(128),
@LastPasswordChangedDate datetime
AS

BEGIN

    Update Dbo.aspnet_Membership
		set  Password=@PasswordSalt,LastPasswordChangedDate=@LastPasswordChangedDate         
    WHERE  UserId = @UserId;

	UPDATE	U
	SET		IsFirstTimeLogin = 1
	FROM	dbo.Users U
	WHERE	U.UserId = @UserId;
END
GO
PRINT N'Altering [dbo].[usp_SelectEnvelopeByTransactionRequestId]...';


GO

---usp_SelectEnvelopeByTransactionRequestId 1000,1001,1270
ALTER Procedure [dbo].[usp_SelectEnvelopeByTransactionRequestId]
(
@SchoolId int,
@A2CTransactionRequestId int
)
as
begin
select envelope from A2CTransactionRequests where 
SchoolId=@SchoolId and A2CTransactionRequestId  = @A2CTransactionRequestId
end
GO
PRINT N'Altering [dbo].[usp_UnlockSelectedUsers]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
ALTER PROCEDURE [dbo].[usp_UnlockSelectedUsers]   
	@UserIds NVARCHAR (MAX),
	@newPasswords NVARCHAR (MAX)
AS
BEGIN

    SET NOCOUNT ON;

	DECLARE @userId uniqueidentifier;
	DECLARE @password nvarchar(256);
	DECLARE @posUser INT,@posPassword INT;
	Declare @stringToSplitUserId NVARCHAR (MAX),@stringToSplitPassword NVARCHAR (MAX);
		
	Set @stringToSplitUserId=@UserIds;
	Set @stringToSplitPassword=@newPasswords;

	Declare @inputUserData TABLE (UserId uniqueidentifier primary key, NewPassword nvarchar(128));

	-- Slipt Userid and insert in to temp table

	WHILE LEN(@stringToSplitUserId) > 0
	BEGIN

		SELECT @posUser  = CHARINDEX(',', @stringToSplitUserId)
		SELECT @posPassword  = CHARINDEX(',', @stringToSplitPassword)

		if @posUser = 0
			Begin
				SELECT @posUser = LEN(@stringToSplitUserId)
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser))
				SELECT @posPassword = LEN(@stringToSplitPassword)
				SELECT @password = SUBSTRING(@stringToSplitPassword, 1, @posPassword)
			End
		Else
			Begin
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser-1))
				SELECT @password = SUBSTRING(@stringToSplitPassword, 1, @posPassword-1)
			End

		INSERT INTO @inputUserData 
		SELECT @userId,@password 
			
		SELECT @stringToSplitUserId = SUBSTRING(@stringToSplitUserId, @posUser+1, LEN(@stringToSplitUserId)-@posUser)
		SELECT @stringToSplitPassword = SUBSTRING(@stringToSplitPassword, @posPassword+1, LEN(@stringToSplitPassword)-@posPassword)
	END

	UPDATE dbo.aspnet_Membership
			SET IsLockedOut = 0,
				FailedPasswordAttemptCount = 0,
				FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
				FailedPasswordAnswerAttemptCount = 0,
				FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
				LastLockoutDate = CONVERT( datetime, '17540101', 112 ),
				Password=iud.NewPassword,
				LastPasswordChangedDate=GETUTCDATE()
			FROM dbo.aspnet_Membership 
			INNER JOIN @inputUserData iud ON dbo.aspnet_Membership.UserId = iud.UserId
	
	UPDATE	U
	SET		IsFirstTimeLogin = 1
	FROM	dbo.Users U
	INNER JOIN @inputUserData iud ON U.UserId = iud.UserId

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_CheckIsDiskFullForLogOrData]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_CheckIsDiskFullForLogOrData]   
AS
BEGIN
   
	DECLARE @IsLogFull BIT
	SET @IsLogFull = 0
	IF (EXISTS (SELECT 1 FROM sys.sysfiles WHERE maxsize > -1 AND size >= maxsize))
	BEGIN
		SET @IsLogFull = 1
	END

	IF @IsLogFull = 0
	BEGIN

		DECLARE @UsedSpaceInKB BIGINT 
		CREATE TABLE #FreeSpace( Drive char(1), MB_Free BIGINT)
		INSERT INTO #FreeSpace EXEC xp_fixeddrives

		IF (EXISTS (SELECT 1 AS drivespace, V1.UsedSpaceInMB FROM #FreeSpace F
			INNER JOIN 	(SELECT (((SUM(size)) * 8)/1024) AS UsedSpaceInMB, SUBSTRING (Filename, 1, 1) AS Drive  
							FROM SYS.sysfiles s	
							GROUP BY SUBSTRING (Filename, 1, 1)) V1
			ON F.MB_Free <= (v1.UsedSpaceInMB + 1024) AND F.Drive = V1.Drive COLLATE DATABASE_DEFAULT  ))
		BEGIN
			SET @IsLogFull = 1
		END

		DROP TABLE #FreeSpace

	END

	SELECT @IsLogFull 

	
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2COutSequenceRequests]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2COutSequenceRequests]   
@DateToDeleteA2COutSequenceRequests DATETIME 
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @ReferencedA2COutSequenceRequestId INT 

			DECLARE @TempAwardingOrganisationCentreId INT
			CREATE TABLE #A2COutSequenceRequestsAOCentre ( AwardingOrganisationCentreId INT NULL)
			CREATE TABLE #A2COutSequenceRequestIds ( A2COutSequenceRequestId INT NULL)
			DECLARE @InformationText NVARCHAR(MAX)

			SELECT @ReferencedA2COutSequenceRequestId = ISNULL(MAX(A2COutSequenceRequestId), 0)
			FROM A2COutSequenceRequests WITH (NOLOCK) 
			WHERE LastModifiedDate <= @DateToDeleteA2COutSequenceRequests


			INSERT INTO #A2COutSequenceRequestsAOCentre 

			SELECT DISTINCT OSR.AwardingOrganisationCentreId  FROM A2COutSequenceRequests OSR WITH (NOLOCK) 
					WHERE OSR.A2COutSequenceRequestId <= @ReferencedA2COutSequenceRequestId

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2COutSequenceRequestsAOCentre)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempAwardingOrganisationCentreId  = AwardingOrganisationCentreId FROM #A2COutSequenceRequestsAOCentre

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2COutSequenceRequests OSR WITH (NOLOCK) 
								WHERE OSR.A2COutSequenceRequestId <= @ReferencedA2COutSequenceRequestId
								AND OSR.AwardingOrganisationCentreId = @TempAwardingOrganisationCentreId  ))
				BEGIN

					INSERT INTO #A2COutSequenceRequestIds 
					SELECT DISTINCT TOP 1000 OSR.A2COutSequenceRequestId  
						FROM A2COutSequenceRequests OSR WITH (NOLOCK) 
							WHERE OSR.A2COutSequenceRequestId <= @ReferencedA2COutSequenceRequestId 
								AND OSR.AwardingOrganisationCentreId = @TempAwardingOrganisationCentreId 

					WHILE (EXISTS (SELECT TOP 1 1  FROM #A2COutSequenceRequestIds OSRID WITH (NOLOCK) 
							INNER JOIN A2CSendRequests SR WITH (NOLOCK) ON OSRID.A2COutSequenceRequestId = SR.A2COutSequenceRequestId ))
					BEGIN
						DELETE TOP (1000) SR
						FROM #A2COutSequenceRequestIds OSRID WITH (NOLOCK) 
							INNER JOIN A2CSendRequests SR WITH (NOLOCK) ON OSRID.A2COutSequenceRequestId = SR.A2COutSequenceRequestId 
					END

					DELETE SR
						FROM #A2COutSequenceRequestIds OSRID WITH (NOLOCK) 
							INNER JOIN A2COutSequenceRequests SR WITH (NOLOCK) ON OSRID.A2COutSequenceRequestId = SR.A2COutSequenceRequestId 

					DELETE FROM #A2COutSequenceRequestIds

				END

				DELETE FROM #A2COutSequenceRequestsAOCentre WHERE AwardingOrganisationCentreId = @TempAwardingOrganisationCentreId 
				SET @InformationText = 'Out of sequence requests deleted successfully for AO Centre: ' + 
										(SELECT  TOP 1 AO.AONumber+ '-' + A.Name +' '+ C.CentreNumber  FROM AwardingOrganisationCentres AOC WITH (NOLOCK) 
													INNER JOIN Centres C WITH(NOLOCK) ON  AOC.CentreID = C.CentreID
													INNER JOIN AwardingOrganisationDetails AO WITH(NOLOCK) ON  AOC.AwardingOrganisationDetailId = AO.AwardingOrganisationDetailId
													INNER JOIN AwardingOrganisations A WITH(NOLOCK) ON  AO.AwardingOrganisationId = A.AwardingOrganisationId
														WHERE AwardingOrganisationCentreId = @TempAwardingOrganisationCentreId)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2COutSequenceRequestsAOCentre
			DROP TABLE #A2COutSequenceRequestIds
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2COutSequenceRequests' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CRequests]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CRequests]   
@DateToDeleteA2CRequests DATETIME 
AS
BEGIN
   
	BEGIN TRY
			DECLARE @ReferencedA2CRequestId INT  

			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @TempAwardingOrganisationCentreId INT
			CREATE TABLE #A2CRequestsAOCentre ( AwardingOrganisationCentreId INT NULL)
			CREATE TABLE #A2CRequestIds ( A2CRequestId INT NULL)
			DECLARE @InformationText NVARCHAR(MAX)

			SELECT @ReferencedA2CRequestId = ISNULL(MAX(A2CRequestId), 0)
			FROM A2CRequests WITH (NOLOCK) 
			WHERE LastModifiedDate <= @DateToDeleteA2CRequests

			INSERT INTO #A2CRequestsAOCentre 

			SELECT DISTINCT R.AwardingOrganisationCentreId  FROM A2CRequests R WITH (NOLOCK) 
					WHERE R.A2CRequestId <= @ReferencedA2CRequestId

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CRequestsAOCentre)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempAwardingOrganisationCentreId  = AwardingOrganisationCentreId FROM #A2CRequestsAOCentre

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CRequests R WITH (NOLOCK) 
								WHERE R.A2CRequestId <= @ReferencedA2CRequestId
								AND R.AwardingOrganisationCentreId = @TempAwardingOrganisationCentreId  ))
				BEGIN

					INSERT INTO #A2CRequestIds 
					SELECT DISTINCT TOP 1000 R.A2CRequestId  
						FROM A2CRequests R WITH (NOLOCK) 
								WHERE R.A2CRequestId <= @ReferencedA2CRequestId
								AND R.AwardingOrganisationCentreId = @TempAwardingOrganisationCentreId 

					WHILE (EXISTS (SELECT TOP 1 1  FROM #A2CRequestIds OSRID WITH (NOLOCK) 
							INNER JOIN A2CSendRequests SR WITH (NOLOCK) ON OSRID.A2CRequestId = SR.A2CRequestId ))
					BEGIN
						DELETE TOP (1000) SR
						FROM #A2CRequestIds OSRID WITH (NOLOCK) 
							INNER JOIN A2CSendRequests SR WITH (NOLOCK) ON OSRID.A2CRequestId = SR.A2CRequestId 
					END

					DELETE SR
						FROM #A2CRequestIds OSRID WITH (NOLOCK) 
							INNER JOIN A2CRequests SR WITH (NOLOCK) ON OSRID.A2CRequestId = SR.A2CRequestId 

					DELETE FROM #A2CRequestIds

				END

				DELETE FROM #A2CRequestsAOCentre WHERE AwardingOrganisationCentreId = @TempAwardingOrganisationCentreId 
				SET @InformationText = 'RPC requests deleted successfully for AO Centre: ' +  
										(SELECT  TOP 1 AO.AONumber+ '-' + A.Name +' '+ C.CentreNumber  FROM AwardingOrganisationCentres AOC WITH (NOLOCK) 
													INNER JOIN Centres C WITH(NOLOCK) ON  AOC.CentreID = C.CentreID
													INNER JOIN AwardingOrganisationDetails AO WITH(NOLOCK) ON  AOC.AwardingOrganisationDetailId = AO.AwardingOrganisationDetailId
													INNER JOIN AwardingOrganisations A WITH(NOLOCK) ON  AO.AwardingOrganisationId = A.AwardingOrganisationId
														WHERE AwardingOrganisationCentreId = @TempAwardingOrganisationCentreId)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CRequestsAOCentre
			DROP TABLE #A2CRequestIds
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CRequests' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CTransactionEDIs]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionEDIs]   
@ReferencedTransactionID INT 
AS
BEGIN

	BEGIN TRY

			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @InformationText NVARCHAR(MAX)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionEDISchools ( SchoolID INT NULL)
			INSERT INTO #A2CTransactionEDISchools 
				SELECT	DISTINCT SchoolId FROM A2CTransactionEDIs WITH (NOLOCK) 
				WHERE SchoolId IS NOT NULL AND A2CTransactionId <= @ReferencedTransactionID

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionEDISchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionEDISchools

				WHILE (EXISTS (SELECT TOP 1 1 FROM	A2CTransactionEDIs WITH (NOLOCK) 
							WHERE SchoolId = @TempSchoolID AND A2CTransactionId <= @ReferencedTransactionID ))
				BEGIN
					DELETE TOP (1000) FROM A2CTransactionEDIs  
					WHERE	SchoolId = @TempSchoolID AND A2CTransactionId <= @ReferencedTransactionID
				END

				DELETE FROM #A2CTransactionEDISchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Transaction EDIs deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END

	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionEDIs' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CTransactionErrors]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionErrors]  
@ReferencedTransactionID INT  
AS
BEGIN
   
	BEGIN TRY

			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @InformationText NVARCHAR(MAX)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionErrorsSchools ( SchoolID INT NULL)
			INSERT INTO #A2CTransactionErrorsSchools 
				SELECT	DISTINCT SchoolId FROM A2CTransactionErrors WITH (NOLOCK) 
				WHERE SchoolId IS NOT NULL AND A2CTransactionId <= @ReferencedTransactionID

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionErrorsSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionErrorsSchools

				WHILE (EXISTS (SELECT TOP 1 1 FROM	A2CTransactionErrors WITH (NOLOCK) 
							WHERE SchoolId = @TempSchoolID AND A2CTransactionId <= @ReferencedTransactionID ))
				BEGIN
					DELETE TOP (1000) FROM A2CTransactionErrors  
					WHERE	SchoolId = @TempSchoolID AND A2CTransactionId <= @ReferencedTransactionID
				END

				DELETE FROM #A2CTransactionErrorsSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Transaction errors deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionErrors' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CTransactionMessages]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionMessages]   
@ReferencedTransactionID INT  
AS
BEGIN
   
	BEGIN TRY

			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @InformationText NVARCHAR(MAX)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionMessagesSchools ( SchoolID INT NULL)
			INSERT INTO #A2CTransactionMessagesSchools 
				SELECT	DISTINCT SchoolId FROM A2CTransactionMessages WITH (NOLOCK) 
				WHERE SchoolId IS NOT NULL AND A2CTransactionId <= @ReferencedTransactionID

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionMessagesSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionMessagesSchools

				WHILE (EXISTS (SELECT TOP 1 1 FROM	A2CTransactionMessages WITH (NOLOCK) 
							WHERE SchoolId = @TempSchoolID AND A2CTransactionId <= @ReferencedTransactionID))
				BEGIN
					DELETE TOP (1000) FROM A2CTransactionMessages  
					WHERE	SchoolId = @TempSchoolID AND A2CTransactionId <= @ReferencedTransactionID
				END

				DELETE FROM #A2CTransactionMessagesSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Transaction messages deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END

			DROP TABLE #A2CTransactionMessagesSchools
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionMessages' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CTransactionRequests]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionRequests]   
@ReferencedTransactionID INT  
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @InformationText NVARCHAR(MAX)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionRequestsSchools ( SchoolID INT NULL)

			INSERT INTO #A2CTransactionRequestsSchools 
				
			SELECT DISTINCT REQ.SchoolId  FROM A2CTransactionRequests REQ WITH (NOLOCK) 
					WHERE REQ.A2CTransactionId  <= @ReferencedTransactionID AND REQ.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionRequestsSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionRequestsSchools

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactionRequests REQ WITH (NOLOCK) 
									LEFT OUTER JOIN A2CTransactionResponses RES WITH (NOLOCK)  ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId
									WHERE RES.A2CTransactionResponseId IS NULL AND REQ.A2CTransactionId  <= @ReferencedTransactionID AND REQ.SchoolId = @TempSchoolID ))
				BEGIN
					DELETE TOP (1000) REQ
					FROM A2CTransactionRequests REQ WITH (NOLOCK) 
									LEFT OUTER JOIN A2CTransactionResponses RES WITH (NOLOCK)  ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId
									WHERE RES.A2CTransactionResponseId IS NULL AND REQ.A2CTransactionId  <= @ReferencedTransactionID AND REQ.SchoolId = @TempSchoolID
				END

				DELETE FROM #A2CTransactionRequestsSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Transaction requests deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionRequestsSchools
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionRequests' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeEDIs]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeEDIs]   
@ReferencedTransactionID INT  
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @InformationText NVARCHAR(MAX)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionResponseEnvelopeEDIsSchools ( SchoolID INT NULL)

			INSERT INTO #A2CTransactionResponseEnvelopeEDIsSchools 
				
			SELECT DISTINCT T.SchoolId  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionResponseEnvelopeEDIsSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionResponseEnvelopeEDIsSchools

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					DELETE TOP (1000) EEDI FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID
				END

				DELETE FROM #A2CTransactionResponseEnvelopeEDIsSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Envelope EDIs deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionResponseEnvelopeEDIsSchools
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionResponseEnvelopeEDIs' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessages]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessages]   
@ReferencedTransactionID INT 
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionResponseEnvelopeMessagesSchools ( SchoolID INT NULL)
			CREATE TABLE #A2CTransactionResponseEnvelopeMessageIDs ( A2CTransactionResponseEnvelopeMessageId INT NULL)
			DECLARE @InformationText NVARCHAR(MAX)

			INSERT INTO #A2CTransactionResponseEnvelopeMessagesSchools 

			SELECT DISTINCT T.SchoolId  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE (EMSG.IsFeedbackMessage IS NULL OR EMSG.IsFeedbackMessage = 0) AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionResponseEnvelopeMessagesSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionResponseEnvelopeMessagesSchools

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE (EMSG.IsFeedbackMessage IS NULL OR EMSG.IsFeedbackMessage = 0) AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					INSERT INTO #A2CTransactionResponseEnvelopeMessageIDs 
					SELECT DISTINCT TOP 1000 EMSG.A2CTransactionResponseEnvelopeMessageId
					FROM A2CTransactions T WITH (NOLOCK) 
						INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId
						INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId
						INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId
						INNER JOIN A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId
						WHERE (EMSG.IsFeedbackMessage IS NULL OR EMSG.IsFeedbackMessage = 0) AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID

					WHILE (EXISTS (SELECT TOP 1 1 FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CFeedbackMessageDetails FMD WITH (NOLOCK) ON FM.A2CFeedbackMessageId = FMD.A2CFeedbackMessageId))
					BEGIN
						DELETE TOP (1000) FMD
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CFeedbackMessageDetails FMD WITH (NOLOCK) ON FM.A2CFeedbackMessageId = FMD.A2CFeedbackMessageId
					END

					WHILE (EXISTS (SELECT TOP 1 1 FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CSendRequests FMD WITH (NOLOCK) ON FM.A2CFeedbackMessageId = FMD.A2CFeedbackMessageId))
					BEGIN
						DELETE TOP (1000) SR
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CSendRequests SR WITH (NOLOCK) ON FM.A2CFeedbackMessageId = SR.A2CFeedbackMessageId
					END

					WHILE (EXISTS (SELECT TOP 1 1 FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId))
					BEGIN
						DELETE TOP (1000) FM
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
					END

					DELETE REM
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CTransactionResponseEnvelopeMessages REM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = REM.A2CTransactionResponseEnvelopeMessageId

					DELETE FROM #A2CTransactionResponseEnvelopeMessageIDs
				END

				DELETE FROM #A2CTransactionResponseEnvelopeMessagesSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Envelope messages deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionResponseEnvelopeMessagesSchools
			DROP TABLE #A2CTransactionResponseEnvelopeMessageIDs
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessages' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessagesFeedBack]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessagesFeedBack]   
@ReferencedTransactionID INT 
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionResponseEnvelopeMessagesSchools ( SchoolID INT NULL)
			CREATE TABLE #A2CTransactionResponseEnvelopeMessageIDs ( A2CTransactionResponseEnvelopeMessageId INT NULL)
			DECLARE @InformationText NVARCHAR(MAX)

			INSERT INTO #A2CTransactionResponseEnvelopeMessagesSchools 

			SELECT DISTINCT T.SchoolId  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE EMSG.IsFeedbackMessage = 1 AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionResponseEnvelopeMessagesSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionResponseEnvelopeMessagesSchools

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE EMSG.IsFeedbackMessage = 1 AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					INSERT INTO #A2CTransactionResponseEnvelopeMessageIDs 
					SELECT DISTINCT TOP 1000 EMSG.A2CTransactionResponseEnvelopeMessageId
					FROM A2CTransactions T WITH (NOLOCK) 
						INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId
						INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId
						INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId
						INNER JOIN A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId
						WHERE EMSG.IsFeedbackMessage = 1 AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID

					WHILE (EXISTS (SELECT TOP 1 1 FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CFeedbackMessageDetails FMD WITH (NOLOCK) ON FM.A2CFeedbackMessageId = FMD.A2CFeedbackMessageId))
					BEGIN
						DELETE TOP (1000) FMD
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CFeedbackMessageDetails FMD WITH (NOLOCK) ON FM.A2CFeedbackMessageId = FMD.A2CFeedbackMessageId
					END

					WHILE (EXISTS (SELECT TOP 1 1 FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CSendRequests FMD WITH (NOLOCK) ON FM.A2CFeedbackMessageId = FMD.A2CFeedbackMessageId))
					BEGIN
						DELETE TOP (1000) SR
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
						INNER JOIN A2CSendRequests SR WITH (NOLOCK) ON FM.A2CFeedbackMessageId = SR.A2CFeedbackMessageId
					END

					WHILE (EXISTS (SELECT TOP 1 1 FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId))
					BEGIN
						DELETE TOP (1000) FM
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CFeedbackMessages FM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = FM.A2CTransactionResponseEnvelopeMessageId
					END

					DELETE REM
						FROM #A2CTransactionResponseEnvelopeMessageIDs EMID
						INNER JOIN A2CTransactionResponseEnvelopeMessages REM WITH (NOLOCK) ON EMID.A2CTransactionResponseEnvelopeMessageId = REM.A2CTransactionResponseEnvelopeMessageId

					DELETE FROM #A2CTransactionResponseEnvelopeMessageIDs
				END

				DELETE FROM #A2CTransactionResponseEnvelopeMessagesSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Feedback envelope messages deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionResponseEnvelopeMessagesSchools
			DROP TABLE #A2CTransactionResponseEnvelopeMessageIDs
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessagesFeedBack' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopes]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopes]   
@ReferencedTransactionID INT  
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @InformationText NVARCHAR(MAX)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionResponseEnvelopesSchools ( SchoolID INT NULL)

			INSERT INTO #A2CTransactionResponseEnvelopesSchools 
				
			SELECT DISTINCT T.SchoolId  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionResponseEnvelopesSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionResponseEnvelopesSchools

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeSignals ESG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = ESG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = ESG.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE EEDI.A2CTransactionResponseEnvelopeEDIId IS NULL AND  ESG.A2CTransactionResponseEnvelopeSignalId IS NULL AND EMSG.A2CTransactionResponseEnvelopeMessageId IS NULL
						AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					DELETE TOP (1000) ENV 
					FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeEDIs EEDI WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EEDI.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EEDI.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeSignals ESG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = ESG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = ESG.SchoolId
					LEFT OUTER JOIN  A2CTransactionResponseEnvelopeMessages EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE EEDI.A2CTransactionResponseEnvelopeEDIId IS NULL AND  ESG.A2CTransactionResponseEnvelopeSignalId IS NULL AND EMSG.A2CTransactionResponseEnvelopeMessageId IS NULL
						AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID
				END

				DELETE FROM #A2CTransactionResponseEnvelopesSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Response envelopes deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionResponseEnvelopesSchools
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionResponseEnvelopes' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeSignals]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeSignals]   
@ReferencedTransactionID INT  
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionResponseEnvelopeSignalsSchools ( SchoolID INT NULL)
			CREATE TABLE #A2CTransactionResponseEnvelopeSignalIds ( A2CTransactionResponseEnvelopeSignalId INT NULL)
			DECLARE @InformationText NVARCHAR(MAX)

			INSERT INTO #A2CTransactionResponseEnvelopeSignalsSchools 

			SELECT DISTINCT T.SchoolId  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeSignals EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionResponseEnvelopeSignalsSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionResponseEnvelopeSignalsSchools

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
					INNER JOIN A2CTransactionResponseEnvelopeSignals EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN

					INSERT INTO #A2CTransactionResponseEnvelopeSignalIds 
					SELECT DISTINCT TOP 1000 EMSG.A2CTransactionResponseEnvelopeSignalId  
						FROM A2CTransactions T WITH (NOLOCK) 
						INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
						INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
						INNER JOIN A2CTransactionResponseEnvelopes ENV WITH(NOLOCK) ON RES.A2CTransactionResponseId = ENV.A2CTransactionResponseId AND  RES.SchoolId = ENV.SchoolId
						INNER JOIN A2CTransactionResponseEnvelopeSignals EMSG WITH(NOLOCK) ON ENV.A2CTransactionResponseEnvelopeId = EMSG.A2CTransactionResponseEnvelopeId AND ENV.SchoolId = EMSG.SchoolId
						WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID 

					WHILE (EXISTS (SELECT TOP 1 1  FROM #A2CTransactionResponseEnvelopeSignalIds RESI WITH (NOLOCK) 
							INNER JOIN A2CTransactionResponseEnvelopeSignalErrors REQ WITH (NOLOCK) ON RESI.A2CTransactionResponseEnvelopeSignalId = REQ.A2CTransactionResponseEnvelopeSignalId ))
					BEGIN
						DELETE TOP (1000) RESE
						FROM #A2CTransactionResponseEnvelopeSignalIds RESI WITH (NOLOCK) 
						INNER JOIN A2CTransactionResponseEnvelopeSignalErrors RESE WITH (NOLOCK) ON RESI.A2CTransactionResponseEnvelopeSignalId = RESE.A2CTransactionResponseEnvelopeSignalId
					END

					DELETE  EMSG
					FROM #A2CTransactionResponseEnvelopeSignalIds RESI WITH (NOLOCK) 
					INNER JOIN A2CTransactionResponseEnvelopeSignals EMSG WITH (NOLOCK) ON RESI.A2CTransactionResponseEnvelopeSignalId = EMSG.A2CTransactionResponseEnvelopeSignalId

					DELETE FROM #A2CTransactionResponseEnvelopeSignalIds

				END

				DELETE FROM #A2CTransactionResponseEnvelopeSignalsSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Envelope signals deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionResponseEnvelopeSignalsSchools
			DROP TABLE #A2CTransactionResponseEnvelopeSignalIds
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionResponseEnvelopeSignals' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CTransactionResponseErrors]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionResponseErrors]   
@ReferencedTransactionID INT  
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @InformationText NVARCHAR(MAX)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionResponseErrorsSchools ( SchoolID INT NULL)
			INSERT INTO #A2CTransactionResponseErrorsSchools 
			SELECT DISTINCT T.SchoolId  FROM A2CTransactions T WITH (NOLOCK) 
				INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
				INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
				INNER JOIN A2CTransactionResponseErrors RERR WITH(NOLOCK) ON RES.A2CTransactionResponseId = RERR.A2CTransactionResponseId AND  RES.SchoolId = RERR.SchoolId
				WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionResponseErrorsSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionResponseErrorsSchools

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseErrors RERR WITH(NOLOCK) ON RES.A2CTransactionResponseId = RERR.A2CTransactionResponseId AND  RES.SchoolId = RERR.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					DELETE TOP (1000) RERR
					FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					INNER JOIN A2CTransactionResponseErrors RERR WITH(NOLOCK) ON RES.A2CTransactionResponseId = RERR.A2CTransactionResponseId AND  RES.SchoolId = RERR.SchoolId
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID
				END

				DELETE FROM #A2CTransactionResponseErrorsSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Response errors deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL

			END
			DROP TABLE #A2CTransactionResponseErrorsSchools

	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionResponseErrors' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CTransactionResponses]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactionResponses]   
@ReferencedTransactionID INT  
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @InformationText NVARCHAR(MAX)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionResponsesSchools ( SchoolID INT NULL)

			INSERT INTO #A2CTransactionResponsesSchools 
				
			SELECT DISTINCT T.SchoolId  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionResponsesSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionResponsesSchools

				WHILE (EXISTS (SELECT TOP 1 1  FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					LEFT OUTER JOIN A2CTransactionResponseErrors RERR  WITH (NOLOCK) ON RES.A2CTransactionResponseId = RERR.A2CTransactionResponseId AND REQ.SchoolId = RERR.SchoolId 
					LEFT OUTER JOIN A2CTransactionResponseEnvelopes REP  WITH (NOLOCK) ON RES.A2CTransactionResponseId = REP.A2CTransactionResponseId AND REQ.SchoolId = REP.SchoolId 
					WHERE RERR.A2CTransactionResponseErrorId IS NULL AND  REP.A2CTransactionResponseEnvelopeId IS NULL  
						AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					DELETE TOP (1000) RES 
					FROM A2CTransactions T WITH (NOLOCK) 
					INNER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId 
					INNER JOIN A2CTransactionResponses RES WITH (NOLOCK) ON REQ.A2CTransactionRequestId = RES.A2CTransactionRequestId AND REQ.SchoolId = RES.SchoolId 
					LEFT OUTER JOIN A2CTransactionResponseErrors RERR  WITH (NOLOCK) ON RES.A2CTransactionResponseId = RERR.A2CTransactionResponseId AND REQ.SchoolId = RERR.SchoolId 
					LEFT OUTER JOIN A2CTransactionResponseEnvelopes REP  WITH (NOLOCK) ON RES.A2CTransactionResponseId = REP.A2CTransactionResponseId AND REQ.SchoolId = REP.SchoolId 
					WHERE RERR.A2CTransactionResponseErrorId IS NULL AND  REP.A2CTransactionResponseEnvelopeId IS NULL  
						AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID
				END

				DELETE FROM #A2CTransactionResponsesSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Transaction responses deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionResponsesSchools
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactionResponses' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedA2CTransactions]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedA2CTransactions]   
@ReferencedTransactionID INT  
AS
BEGIN
   
	BEGIN TRY
			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @InformationText NVARCHAR(MAX)
			DECLARE @TempSchoolID INT
			CREATE TABLE #A2CTransactionsSchools ( SchoolID INT NULL)

			INSERT INTO #A2CTransactionsSchools 
				
			SELECT DISTINCT T.SchoolId  FROM  A2CTransactions T WITH (NOLOCK) 
					WHERE T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId IS NOT NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #A2CTransactionsSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #A2CTransactionsSchools

				WHILE (EXISTS (SELECT TOP 1 1 FROM A2CTransactions T WITH (NOLOCK) 
									LEFT OUTER JOIN A2CTransactionEDIs EDI WITH (NOLOCK) ON T.A2CTransactionId = EDI.A2CTransactionId AND T.SchoolId = EDI.SchoolId
									LEFT OUTER JOIN A2CTransactionErrors ERR WITH (NOLOCK) ON T.A2CTransactionId = ERR.A2CTransactionId AND T.SchoolId = ERR.SchoolId
									LEFT OUTER JOIN A2CTransactionMessages MSG WITH (NOLOCK) ON T.A2CTransactionId = MSG.A2CTransactionId AND T.SchoolId = MSG.SchoolId
									LEFT OUTER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId
									WHERE EDI.A2CTransactionEDIId IS NULL AND ERR.A2CTransactionErrorId IS NULL AND MSG.A2CTransactionMessageId IS NULL AND
										REQ.A2CTransactionRequestId IS NULL AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID ))
				BEGIN
					DELETE TOP (1000) T
					FROM A2CTransactions T WITH (NOLOCK) 
									LEFT OUTER JOIN A2CTransactionEDIs EDI WITH (NOLOCK) ON T.A2CTransactionId = EDI.A2CTransactionId AND T.SchoolId = EDI.SchoolId
									LEFT OUTER JOIN A2CTransactionErrors ERR WITH (NOLOCK) ON T.A2CTransactionId = ERR.A2CTransactionId AND T.SchoolId = ERR.SchoolId
									LEFT OUTER JOIN A2CTransactionMessages MSG WITH (NOLOCK) ON T.A2CTransactionId = MSG.A2CTransactionId AND T.SchoolId = MSG.SchoolId
									LEFT OUTER JOIN A2CTransactionRequests REQ WITH (NOLOCK) ON T.A2CTransactionId = REQ.A2CTransactionId AND T.SchoolId = REQ.SchoolId
									WHERE EDI.A2CTransactionEDIId IS NULL AND ERR.A2CTransactionErrorId IS NULL AND MSG.A2CTransactionMessageId IS NULL AND
										REQ.A2CTransactionRequestId IS NULL AND T.A2CTransactionId  <= @ReferencedTransactionID AND T.SchoolId = @TempSchoolID
				END

				DELETE FROM #A2CTransactionsSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Transactions deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
			DROP TABLE #A2CTransactionsSchools
	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedA2CTransactions' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		--EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 1, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedErrorLogs]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedErrorLogs]   
AS
BEGIN
   
	DECLARE @NoOfDaysToStoreBusinessErrorLogs INT 
	DECLARE @DateToDeleteErrorLogs DATETIME 
	DECLARE @ReferencedErrorLogId INT  

	BEGIN TRY
		--Fetch configured no of days to store business error log
		SELECT @NoOfDaysToStoreBusinessErrorLogs = NoOfDaysToStoreBusinessErrorLogs FROM SystemConfigurations

		IF (@NoOfDaysToStoreBusinessErrorLogs > 0)
		BEGIN
			--Calculate reference date to delete data
			SET @DateToDeleteErrorLogs = CAST(CONVERT(VARCHAR(20), DATEADD(D, -@NoOfDaysToStoreBusinessErrorLogs, GETUTCDATE()) +1 , 101) AS datetime)
			SET @DateToDeleteErrorLogs = CAST(CONVERT(VARCHAR(20), @DateToDeleteErrorLogs, 101) AS datetime)
			SET @DateToDeleteErrorLogs = DATEADD (ms, -2, @DateToDeleteErrorLogs)

			SELECT @ReferencedErrorLogId = ISNULL(MAX(ErrorLogId), 0)
			FROM ErrorLogs WITH (NOLOCK) 
			WHERE LastModifiedDate <= @DateToDeleteErrorLogs

			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @TempSchoolID INT
			CREATE TABLE #ErroLogSchools ( SchoolID INT NULL)
			INSERT INTO #ErroLogSchools 
				SELECT	DISTINCT A2CSchoolId FROM ErrorLogs WITH (NOLOCK) 
				WHERE A2CSchoolId IS NOT NULL AND ErrorLogId <= @ReferencedErrorLogId
			--SELECT * FROM #ErroLogSchools

			--Delete data where schoolId = NULL
			WHILE (EXISTS (SELECT TOP 1 1 FROM	ErrorLogs WITH (NOLOCK) 
							WHERE A2CSchoolId IS NULL AND ErrorLogId <= @ReferencedErrorLogId))
			BEGIN
				DELETE TOP (1000) FROM ErrorLogs  
				WHERE	A2CSchoolId IS NULL AND ErrorLogId <= @ReferencedErrorLogId
			END

			DECLARE @InformationText NVARCHAR(MAX)
			SET @InformationText = 'Business error log deleted successfully for Super user level data.'

			DELETE FROM #ErroLogSchools WHERE SchoolID = @TempSchoolID 
			EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #ErroLogSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #ErroLogSchools

				WHILE (EXISTS (SELECT TOP 1 1 FROM	ErrorLogs WITH (NOLOCK) 
							WHERE A2CSchoolId = @TempSchoolID AND ErrorLogId <= @ReferencedErrorLogId ))
				BEGIN
					DELETE TOP (1000) FROM ErrorLogs  
					WHERE	A2CSchoolId = @TempSchoolID AND ErrorLogId <= @ReferencedErrorLogId
				END

				DELETE FROM #ErroLogSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Business error log deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END
		END
		ELSE
			 EXEC usp_Insert_Logs 1016, NULL, 'Logged by Delete Job. Configuration for "No. of days for which Business Error Logs will be stored" is not found in System Configurations.', 
				   NULL, 0, NULL, NULL, 0, NULL

	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedErrorLogs' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 0, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedFeedbacks]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedFeedbacks]   
AS
BEGIN
   
	DECLARE @NoOfDaysToStoreFeedbackMessages INT 
	DECLARE @DateToDeleteFeedbacks DATETIME 
	DECLARE @ReferencedTransactionID INT 

	BEGIN TRY
		--Fetch configured no of days to store business error log
		SELECT @NoOfDaysToStoreFeedbackMessages = NoOfDaysToStoreFeedbackMessages FROM SystemConfigurations WITH (NOLOCK) 

		IF (@NoOfDaysToStoreFeedbackMessages > 0)
		BEGIN
			--Calculate reference date to delete data
			SET @DateToDeleteFeedbacks = CAST(CONVERT(VARCHAR(20), DATEADD(D, -@NoOfDaysToStoreFeedbackMessages, GETUTCDATE()) +1 , 101) AS datetime)
			SET @DateToDeleteFeedbacks = CAST(CONVERT(VARCHAR(20), @DateToDeleteFeedbacks, 101) AS datetime)
			SET @DateToDeleteFeedbacks = DATEADD (ms, -2, @DateToDeleteFeedbacks)

			SELECT @ReferencedTransactionID = ISNULL(MAX(A2CTransactionId), 0)
			FROM A2CTransactions WITH (NOLOCK) 
			WHERE LastModifiedDate <= @DateToDeleteFeedbacks

			IF (@ReferencedTransactionID > 0)
			BEGIN
				EXEC usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessagesFeedBack @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactionResponseEnvelopes @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactionResponses @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactionRequests @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactions @ReferencedTransactionID
			END
		END
		ELSE
			 EXEC usp_Insert_Logs 1016, NULL, 'Logged by Delete Job. Configuration for "No. of days for which Feedback Messages will be stored" is not found in System Configurations.', 
				   NULL, 0, NULL, NULL, 0, NULL

	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedFeedbacks' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 0, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedInformationLogs]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedInformationLogs]   
AS
BEGIN
   
	DECLARE @NoOfDaysToStoreAuditLogs INT 
	DECLARE @DateToDeleteInformationLogs DATETIME
	DECLARE @ReferencedInformationLogId INT  

	BEGIN TRY
		--Fetch configured no of days to store business error log
		SELECT @NoOfDaysToStoreAuditLogs = NoOfDaysToStoreAuditLogs FROM SystemConfigurations

		IF (@NoOfDaysToStoreAuditLogs > 0)
		BEGIN
			--Calculate reference date to delete data
			SET @DateToDeleteInformationLogs = CAST(CONVERT(VARCHAR(20), DATEADD(D, -@NoOfDaysToStoreAuditLogs, GETUTCDATE()) +1 , 101) AS datetime)
			SET @DateToDeleteInformationLogs = CAST(CONVERT(VARCHAR(20), @DateToDeleteInformationLogs, 101) AS datetime)
			SET @DateToDeleteInformationLogs = DATEADD (ms, -2, @DateToDeleteInformationLogs)

			SELECT @ReferencedInformationLogId = ISNULL(MAX(InformationLogId), 0)
			FROM InformationLogs WITH (NOLOCK) 
			WHERE LastModifiedDate <= @DateToDeleteInformationLogs

			--Fetch distinct schooIds to delete data as per school (loop)
			DECLARE @TempSchoolID INT
			CREATE TABLE #InformationLogSchools ( SchoolID INT NULL)
			INSERT INTO #InformationLogSchools 
				SELECT	DISTINCT A2CSchoolId FROM InformationLogs WITH (NOLOCK) 
				WHERE A2CSchoolId IS NOT NULL AND InformationLogId <= @ReferencedInformationLogId
			--SELECT * FROM #ErroLogSchools

			--Delete data where schoolId = NULL
			WHILE (EXISTS (SELECT TOP 1 1 FROM	InformationLogs WITH (NOLOCK) 
							WHERE A2CSchoolId IS NULL AND InformationLogId <= @ReferencedInformationLogId ))
			BEGIN
				DELETE TOP (1000) FROM InformationLogs  
				WHERE	A2CSchoolId IS NULL AND InformationLogId <= @ReferencedInformationLogId
			END

			DECLARE @InformationText NVARCHAR(MAX)
			SET @InformationText = 'Audit log deleted successfully for Super user level data.'

			DELETE FROM #InformationLogSchools WHERE SchoolID = @TempSchoolID 
			EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL

			--Delete data where schoolId = NOT NULL
			WHILE (EXISTS (SELECT 1 FROM #InformationLogSchools WHERE SchoolID IS NOT NULL)) --Loop for SchoolID
			BEGIN
			
				SELECT TOP 1 @TempSchoolID  = SchoolID FROM #InformationLogSchools

				WHILE (EXISTS (SELECT TOP 1 1 FROM	InformationLogs WITH (NOLOCK) 
							WHERE A2CSchoolId = @TempSchoolID AND InformationLogId <= @ReferencedInformationLogId ))
				BEGIN
					DELETE TOP (1000) FROM InformationLogs  
					WHERE	A2CSchoolId = @TempSchoolID AND InformationLogId <= @ReferencedInformationLogId
				END

				DELETE FROM #InformationLogSchools WHERE SchoolID = @TempSchoolID 
				SET @InformationText = 'Audit log deleted successfully for School: ' + (SELECT EstablishmentName FROM A2CSchools WHERE A2CSchoolId = @TempSchoolID)

				EXEC usp_Insert_Logs 1016, NULL, @InformationText, NULL, 0, NULL, NULL, 0, NULL
			END

			DROP TABLE #InformationLogSchools
		END
		ELSE
			 EXEC usp_Insert_Logs 1016, NULL, 'Logged by Delete Job. Configuration for "No. of days for which Audit Logs will be stored" is not found in System Configurations.', 
				   NULL, 0, NULL, NULL, 0, NULL

	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedInformationLogs' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 0, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_DeleteBackDatedMessages]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].[usp_DeleteBackDatedMessages]   
AS
BEGIN
   
	DECLARE @NoOfDaysToStoreMessages INT 
	DECLARE @DateToDeleteMessages DATETIME 
	DECLARE @ReferencedTransactionID INT 

	BEGIN TRY
		--Fetch configured no of days to store business error log
		SELECT @NoOfDaysToStoreMessages = NoOfDaysToStoreMessages FROM SystemConfigurations WITH (NOLOCK) 

		IF (@NoOfDaysToStoreMessages > 0)
		BEGIN
			--Calculate reference date to delete data
			SET @DateToDeleteMessages = CAST(CONVERT(VARCHAR(20), DATEADD(D, -@NoOfDaysToStoreMessages, GETUTCDATE()) +1 , 101) AS datetime)
			SET @DateToDeleteMessages = CAST(CONVERT(VARCHAR(20), @DateToDeleteMessages, 101) AS datetime)
			SET @DateToDeleteMessages = DATEADD (ms, -2, @DateToDeleteMessages)

			SELECT @ReferencedTransactionID = ISNULL(MAX(A2CTransactionId), 0)
			FROM A2CTransactions WITH (NOLOCK) 
			WHERE LastModifiedDate <= @DateToDeleteMessages

			IF (@ReferencedTransactionID > 0)
			BEGIN
				EXEC usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessages @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactionResponseEnvelopeSignals @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactionResponseEnvelopeEDIs @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactionResponseEnvelopes @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactionResponseErrors @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactionResponses @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactionRequests @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactionMessages @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactionErrors @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactionEDIs @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2CTransactions @ReferencedTransactionID
				EXEC usp_DeleteBackDatedA2COutSequenceRequests @DateToDeleteMessages
				EXEC usp_DeleteBackDatedA2CRequests @DateToDeleteMessages
			END
		END
		ELSE
			 EXEC usp_Insert_Logs 1016, NULL, 'Logged by Delete Job. Configuration for "No. of days for which Messages will be stored" is not found in System Configurations.', 
				   NULL, 0, NULL, NULL, 0, NULL

	END TRY
	BEGIN CATCH
		DECLARE @ErrorText VARCHAR(MAX)
		SELECT @ErrorText = 'Logged by Delete Job. Error in Procedure Name: usp_DeleteBackDatedInformationLogs' + 
							' Error Number: ' + CAST ( ERROR_NUMBER() AS varchar(MAX)) + 
							' Line Number: ' + CAST( ERROR_LINE() AS VARCHAR(MAX))  + 
							' Error Message: ' + ERROR_MESSAGE() 
		EXEC usp_Insert_Logs 1016, NULL, @ErrorText, NULL, 1, NULL, NULL, 0, NULL
		RAISERROR(@ErrorText, 16, 1);
	END CATCH; 

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_Select_AwardingOrganisationCentresByIdList]...';


GO
CREATE PROCEDURE [dbo].[usp_Select_AwardingOrganisationCentresByIdList]
(
@AwardingOrganisationCentreIdList ListInt readonly,
@SchoolId int
)
AS
SELECT 

AOC.AwardingOrganisationCentreId,
    AOCCer.AOCentreCertificate,
	AOCCer.CertificatePassword,
	AOAssign.AOAssignCentreNumber,
	C.CentreNumber,
	A.Name,
	A.EndPoint	
  FROM [dbo].[AwardingOrganisationCentres] AOC
  Inner Join AwardingOrganisationDetails AOD on AOC.AwardingOrganisationDetailId=AOD.AwardingOrganisationDetailId
  Inner Join AwardingOrganisations A on A.AwardingOrganisationId=AOD.AwardingOrganisationId
  Inner Join AwardingOrganisationCertificates AOCCer on AOCCer.AwardingOrganisationId=AOD.AwardingOrganisationId
  Inner Join AwardingOrganisationCentreCertificates AOCC on
  AOCCer.AwardingOrganisationCertificateId = AOCC.AwardingOrganisationCertificateId
  AND AOCC.AwardingOrganisationCentreId=AOC.AwardingOrganisationCentreId    
  Inner Join Centres c on AOC.CentreId=C.CentreId and AOC.A2CSchoolId=C.A2CSchoolId  
  Left Join AwardingOrganisationAOAssignedCentres AOAssign on AOAssign.A2CSchoolId=AOC.A2CSchoolId
  and AOAssign.AwardingOrganisationDetailId=AOC.AwardingOrganisationDetailId AND AOAssign.CentreId=AOC.CentreId
  Inner Join @AwardingOrganisationCentreIdList lst on AOC.AwardingOrganisationCentreId=lst.ID
  where aoc.A2CSchoolId=@SchoolId
GO
PRINT N'Creating [dbo].[usp_SelectA2CTransactionToResend]...';


GO
CREATE Procedure usp_SelectA2CTransactionToResend
(
@ListA2CTransactionRequestsId ListInt readonly,
@SchoolId int
)
as
begin

		select at.AwardingOrganisationCentreId,at.SchoolId, are.CentreNumber,am.TransactionName, 
		atm.OutgoingSequence,atm.A2CMessageGuid,atedi.FileName
		,are.Envelope
		from A2CTransactions at 
		inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId		
		inner join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 						
		inner join @ListA2CTransactionRequestsId list on list.ID=are.A2CTransactionRequestId
		and are.SchoolId=@SchoolId
		left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
		left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
		order by AwardingOrganisationCentreId,OutgoingSequence

end
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.9.4';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

USE [msdb]
GO

DECLARE @Owner VARCHAR(200)   --Job Owner
DECLARE @DBName VARCHAR(200)  --Database Name
SET @Owner = '$(UserName)'
SET @DBName = '$(DatabaseName)'


/****** Object:  Job [UnlockActiveUsers]    Script Date: 02-07-2015 13:52:19 ******/
IF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = N'DeleteBackDatedMessageFeedbackTransaction')
	EXEC msdb.dbo.sp_delete_job @job_name=N'DeleteBackDatedMessageFeedbackTransaction', @delete_unused_schedule=1



/****** Object:  Job [DeleteBackDatedMessageFeedbackTransaction]    Script Date: 13-10-2015 09:18:14 ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [[Uncategorized (Local)]]]    Script Date: 13-10-2015 09:18:14 ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'DeleteBackDatedMessageFeedbackTransaction', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'No description available.', 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=@Owner, @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [DeleteAuditLog]    Script Date: 13-10-2015 09:18:14 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'DeleteAuditLog', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=3, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'EXEC usp_DeleteBackDatedInformationLogs', 
		@database_name=@DBName, 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [DeleteBusinessErrorLog]    Script Date: 13-10-2015 09:18:14 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'DeleteBusinessErrorLog', 
		@step_id=2, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=3, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'EXEC usp_DeleteBackDatedErrorLogs', 
		@database_name=@DBName, 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [DeleteFeedBack]    Script Date: 13-10-2015 09:18:14 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'DeleteFeedBack', 
		@step_id=3, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=3, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'EXEC usp_DeleteBackDatedFeedbacks', 
		@database_name=@DBName, 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [DeleteMessages]    Script Date: 13-10-2015 09:18:14 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'DeleteMessages', 
		@step_id=4, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'EXEC usp_DeleteBackDatedMessages', 
		@database_name=@DBName, 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:

GO
PRINT N'Update complete.';


GO
