/*
Deployment script for A2CDB 15.1.0.3.sql

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;



USE [master];
GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END
GO

PRINT N'Creating $(DatabaseName)...'
GO

CREATE DATABASE [$(DatabaseName)]
GO

PRINT N'Creating [INDEXES]...';
GO

ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [INDEXES];
GO


--- Getting path of database_files 
DECLARE @DefaultDataPath varchar (500) 
DECLARE @Filename varchar(500)

SELECT @DefaultDataPath = physical_name FROM sys.master_files WHERE database_id = DB_ID(N'$(DatabaseName)') AND type_desc = 'ROWS'

SET @DefaultDataPath = REVERSE(RIGHT(REVERSE(@DefaultDataPath),(LEN(@DefaultDataPath)-CHARINDEX('\', REVERSE(@DefaultDataPath),1))+1))

SET @Filename = @DefaultDataPath + '$(DefaultFilePrefix)' + '_INDEXES_196AD0AB.mdf'

DECLARE @AlterDB NVarchar(4000)           
            
SET @AlterDB = 'ALTER DATABASE [$(DatabaseName)]   
                ADD FILE (NAME = [INDEXES_196AD0AB],FILENAME ='+CHAR(39)+@Filename+CHAR(39)+')TO FILEGROUP [INDEXES]';
 
EXECUTE SP_Executesql @AlterDB 
GO

EXEC sp_configure filestream_access_level, 2
GO
RECONFIGURE
GO


GO
PRINT N'Creating [FileStream]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [FileStream] CONTAINS FILESTREAM;
GO


DECLARE @DefaultDataPath varchar (500) 
DECLARE @Filename varchar(500)

SELECT @DefaultDataPath = physical_name FROM sys.master_files WHERE database_id = DB_ID(N'$(DatabaseName)') AND type_desc = 'ROWS'

SET @DefaultDataPath = REVERSE(RIGHT(REVERSE(@DefaultDataPath),(LEN(@DefaultDataPath)-CHARINDEX('\', REVERSE(@DefaultDataPath),1))+1))

SET @Filename = @DefaultDataPath + '$(DefaultFilePrefix)' + '_FileStream_F98FDCE.mdf'
 
DECLARE @AlterDB NVarchar(4000)
            
SET @AlterDB = 'ALTER DATABASE [$(DatabaseName)]
                ADD FILE (NAME =  [FileStream_F98FDCE],FILENAME ='+CHAR(39)+@Filename+CHAR(39)+')TO FILEGROUP [FileStream]';
 
EXECUTE SP_Executesql @AlterDB 


IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                ENABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY ON,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO
PRINT N'Creating [aspnet_Membership_BasicAccess]...';


GO
CREATE ROLE [aspnet_Membership_BasicAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Membership_FullAccess]...';


GO
CREATE ROLE [aspnet_Membership_FullAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Membership_ReportingAccess]...';


GO
CREATE ROLE [aspnet_Membership_ReportingAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Personalization_BasicAccess]...';


GO
CREATE ROLE [aspnet_Personalization_BasicAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Personalization_FullAccess]...';


GO
CREATE ROLE [aspnet_Personalization_FullAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Personalization_ReportingAccess]...';


GO
CREATE ROLE [aspnet_Personalization_ReportingAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Profile_BasicAccess]...';


GO
CREATE ROLE [aspnet_Profile_BasicAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Profile_FullAccess]...';


GO
CREATE ROLE [aspnet_Profile_FullAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Profile_ReportingAccess]...';


GO
CREATE ROLE [aspnet_Profile_ReportingAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Roles_BasicAccess]...';


GO
CREATE ROLE [aspnet_Roles_BasicAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Roles_FullAccess]...';


GO
CREATE ROLE [aspnet_Roles_FullAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_Roles_ReportingAccess]...';


GO
CREATE ROLE [aspnet_Roles_ReportingAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [aspnet_WebEvent_FullAccess]...';


GO
CREATE ROLE [aspnet_WebEvent_FullAccess]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Membership_BasicAccess', @membername = N'aspnet_Membership_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Membership_ReportingAccess', @membername = N'aspnet_Membership_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Personalization_BasicAccess', @membername = N'aspnet_Personalization_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Personalization_ReportingAccess', @membername = N'aspnet_Personalization_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Profile_BasicAccess', @membername = N'aspnet_Profile_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Profile_ReportingAccess', @membername = N'aspnet_Profile_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Roles_BasicAccess', @membername = N'aspnet_Roles_FullAccess';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'aspnet_Roles_ReportingAccess', @membername = N'aspnet_Roles_FullAccess';


GO
PRINT N'Creating [aspnet_Membership_BasicAccess]...';


GO
CREATE SCHEMA [aspnet_Membership_BasicAccess]
    AUTHORIZATION [aspnet_Membership_BasicAccess];


GO
PRINT N'Creating [aspnet_Membership_FullAccess]...';


GO
CREATE SCHEMA [aspnet_Membership_FullAccess]
    AUTHORIZATION [aspnet_Membership_FullAccess];


GO
PRINT N'Creating [aspnet_Membership_ReportingAccess]...';


GO
CREATE SCHEMA [aspnet_Membership_ReportingAccess]
    AUTHORIZATION [aspnet_Membership_ReportingAccess];


GO
PRINT N'Creating [aspnet_Personalization_BasicAccess]...';


GO
CREATE SCHEMA [aspnet_Personalization_BasicAccess]
    AUTHORIZATION [aspnet_Personalization_BasicAccess];


GO
PRINT N'Creating [aspnet_Personalization_FullAccess]...';


GO
CREATE SCHEMA [aspnet_Personalization_FullAccess]
    AUTHORIZATION [aspnet_Personalization_FullAccess];


GO
PRINT N'Creating [aspnet_Personalization_ReportingAccess]...';


GO
CREATE SCHEMA [aspnet_Personalization_ReportingAccess]
    AUTHORIZATION [aspnet_Personalization_ReportingAccess];


GO
PRINT N'Creating [aspnet_Profile_BasicAccess]...';


GO
CREATE SCHEMA [aspnet_Profile_BasicAccess]
    AUTHORIZATION [aspnet_Profile_BasicAccess];


GO
PRINT N'Creating [aspnet_Profile_FullAccess]...';


GO
CREATE SCHEMA [aspnet_Profile_FullAccess]
    AUTHORIZATION [aspnet_Profile_FullAccess];


GO
PRINT N'Creating [aspnet_Profile_ReportingAccess]...';


GO
CREATE SCHEMA [aspnet_Profile_ReportingAccess]
    AUTHORIZATION [aspnet_Profile_ReportingAccess];


GO
PRINT N'Creating [aspnet_Roles_BasicAccess]...';


GO
CREATE SCHEMA [aspnet_Roles_BasicAccess]
    AUTHORIZATION [aspnet_Roles_BasicAccess];


GO
PRINT N'Creating [aspnet_Roles_FullAccess]...';


GO
CREATE SCHEMA [aspnet_Roles_FullAccess]
    AUTHORIZATION [aspnet_Roles_FullAccess];


GO
PRINT N'Creating [aspnet_Roles_ReportingAccess]...';


GO
CREATE SCHEMA [aspnet_Roles_ReportingAccess]
    AUTHORIZATION [aspnet_Roles_ReportingAccess];


GO
PRINT N'Creating [aspnet_WebEvent_FullAccess]...';


GO
CREATE SCHEMA [aspnet_WebEvent_FullAccess]
    AUTHORIZATION [aspnet_WebEvent_FullAccess];


GO
PRINT N'Creating [dbo].[ListInt]...';


GO
CREATE TYPE [dbo].[ListInt] AS TABLE (
    [ID] INT NULL);


GO
PRINT N'Creating [dbo].[ListNVarchar]...';


GO
CREATE TYPE [dbo].[ListNVarchar] AS TABLE (
    [Item] NVARCHAR (MAX) NULL);


GO
PRINT N'Creating [dbo].[A2CRequests]...';


GO
CREATE TABLE [dbo].[A2CRequests] (
    [A2CRequestId]                 INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [Feedback]                     NVARCHAR (MAX) NULL,
    [LastModifiedDate]             DATETIME       NOT NULL,
    [AOAssignCentreNumber]         NVARCHAR (50)  NULL,
    [RequestType]                  TINYINT        NULL,
    CONSTRAINT [PK_A2CRPCRequests] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CRequestId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CRequests].[IX_A2CRPCRequests]...';


GO
CREATE NONCLUSTERED INDEX [IX_A2CRPCRequests]
    ON [dbo].[A2CRequests]([AwardingOrganisationCentreId] ASC)
    ON [INDEXES];


GO
PRINT N'Creating [dbo].[A2CSchools]...';


GO
CREATE TABLE [dbo].[A2CSchools] (
    [A2CSchoolId]       INT            IDENTITY (1000, 1) NOT NULL,
    [EstablishmentId]   NVARCHAR (50)  NULL,
    [EstablishmentName] NVARCHAR (200) NULL,
    [LAId]              NVARCHAR (50)  NULL,
    [LAName]            NVARCHAR (200) NULL,
    CONSTRAINT [PK_A2CSchools] PRIMARY KEY CLUSTERED ([A2CSchoolId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CSendRequests]...';


GO
CREATE TABLE [dbo].[A2CSendRequests] (
    [A2CSendRequestId]             INT      IDENTITY (1, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT      NULL,
    [A2CRequestId]                 INT      NULL,
    [Status]                       TINYINT  NULL,
    [LastModifiedDate]             DATETIME NULL,
    CONSTRAINT [PK_A2CSendRequests] PRIMARY KEY CLUSTERED ([A2CSendRequestId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CSendRequests].[IX_A2CSendRequests_1]...';


GO
CREATE NONCLUSTERED INDEX [IX_A2CSendRequests_1]
    ON [dbo].[A2CSendRequests]([AwardingOrganisationCentreId] ASC, [A2CRequestId] ASC);


GO
PRINT N'Creating [dbo].[A2CSendRequests].[IX_A2CSendRequests]...';


GO
CREATE NONCLUSTERED INDEX [IX_A2CSendRequests]
    ON [dbo].[A2CSendRequests]([AwardingOrganisationCentreId] ASC, [A2CSendRequestId] ASC);


GO
PRINT N'Creating [dbo].[A2CSentQueues]...';


GO
CREATE TABLE [dbo].[A2CSentQueues] (
    [AwardingOrganisationCentreId] INT      NOT NULL,
    [LastModifiedDate]             DATETIME NOT NULL,
    CONSTRAINT [PK_A2CSentQueues] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CTransactionEDIs]...';


GO
CREATE TABLE [dbo].[A2CTransactionEDIs] (
    [A2CTransactionEDIId]          INT            IDENTITY (1000, 1) NOT NULL,
    [A2CTransactionId]             INT            NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [LastModifiedDate]             DATETIME       NOT NULL,
    [FileName]                     NVARCHAR (100) NULL,
    CONSTRAINT [PK_A2CTransactionEDI] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionId] ASC, [A2CTransactionEDIId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CTransactionErrors]...';


GO
CREATE TABLE [dbo].[A2CTransactionErrors] (
    [A2CTransactionErrorId]        INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [A2CTransactionId]             INT            NOT NULL,
    [ErrorDescription]             NVARCHAR (MAX) NULL,
    [LastModifiedDate]             DATETIME       NOT NULL,
    CONSTRAINT [PK_A2CTransactionExceptions] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionId] ASC, [A2CTransactionErrorId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CTransactionMasters]...';


GO
CREATE TABLE [dbo].[A2CTransactionMasters] (
    [A2CTransactionMasterId] INT             IDENTITY (1000, 1) NOT NULL,
    [TransactionName]        NVARCHAR (100)  NOT NULL,
    [TransactionDescription] NVARCHAR (1000) NULL,
    [LastModifiedDate]       DATETIME        NOT NULL,
    CONSTRAINT [PK_A2CTransactionMasters] PRIMARY KEY CLUSTERED ([A2CTransactionMasterId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CTransactionMessages]...';


GO
CREATE TABLE [dbo].[A2CTransactionMessages] (
    [A2CTransactionMessageId]      INT              IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT              NOT NULL,
    [A2CTransactionId]             INT              NOT NULL,
    [A2CMessageGuid]               UNIQUEIDENTIFIER NOT NULL,
    [OutgoingSequence]             BIGINT           NOT NULL,
    [LastModifiedDate]             DATETIME         NOT NULL,
    CONSTRAINT [PK_A2CTransactionMessages_1] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionId] ASC, [A2CTransactionMessageId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CTransactionRequests]...';


GO
CREATE TABLE [dbo].[A2CTransactionRequests] (
    [A2CTransactionRequestId]      INT                        IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT                        NOT NULL,
    [A2CTransactionId]             INT                        NOT NULL,
    [A2CTransactionGuid]           NVARCHAR (50)              NOT NULL,
    [EndPoint]                     NVARCHAR (300)             NULL,
    [LastModifiedDate]             DATETIME                   NOT NULL,
    [Id]                           UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [Envelope]                     VARBINARY (MAX) FILESTREAM NULL,
    CONSTRAINT [PK_A2CTransactionRequests] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionId] ASC, [A2CTransactionRequestId] ASC),
    CONSTRAINT [UQ__A2CTrans__3214EC06A4AD1F24] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeEDIs]...';


GO
CREATE TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] (
    [A2CTransactionResponseEnvelopeEDIId] INT                        IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]        INT                        NOT NULL,
    [A2CTransactionId]                    INT                        NOT NULL,
    [A2CTransactionRequestId]             INT                        NOT NULL,
    [A2CTransactionResponseId]            INT                        NOT NULL,
    [A2CTransactionResponseEnvelopeId]    INT                        NOT NULL,
    [FileName]                            NVARCHAR (100)             NULL,
    [LastModifiedDate]                    DATETIME                   NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [data]                                VARBINARY (MAX) FILESTREAM NULL,
    CONSTRAINT [PK_A2CTransactionResponseEnvelopeEDIs] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionId] ASC, [A2CTransactionRequestId] ASC, [A2CTransactionResponseId] ASC, [A2CTransactionResponseEnvelopeId] ASC, [A2CTransactionResponseEnvelopeEDIId] ASC),
    CONSTRAINT [UQ__A2CTrans__3214EC06C5BC8BDB] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeMessages]...';


GO
CREATE TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] (
    [A2CTransactionResponseEnvelopeMessageId] INT                        IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]            INT                        NOT NULL,
    [A2CTransactionId]                        INT                        NOT NULL,
    [A2CTransactionRequestId]                 INT                        NOT NULL,
    [A2CTransactionResponseId]                INT                        NOT NULL,
    [A2CTransactionResponseEnvelopeId]        INT                        NOT NULL,
    [MessageId]                               NVARCHAR (50)              NULL,
    [RefMessageId]                            NVARCHAR (50)              NULL,
    [TimeStamp]                               DATETIME                   NULL,
    [A2CMessageId]                            INT                        NULL,
    [A2CTransactionMasterId]                  INT                        NULL,
    [IncomingSequence]                        INT                        NULL,
    [LastModifiedDate]                        DATETIME                   NOT NULL,
    [Id]                                      UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [data]                                    VARBINARY (MAX) FILESTREAM NULL,
    [IsFeedbackMessage]                       BIT                        NULL,
    [DataImportStatus]                        SMALLINT                   NULL,
    CONSTRAINT [PK_A2CTransactionResponseEnvelopeMessages_1] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionId] ASC, [A2CTransactionRequestId] ASC, [A2CTransactionResponseId] ASC, [A2CTransactionResponseEnvelopeId] ASC, [A2CTransactionResponseEnvelopeMessageId] ASC),
    CONSTRAINT [UQ__A2CTrans__3214EC06E7A133DC] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopes]...';


GO
CREATE TABLE [dbo].[A2CTransactionResponseEnvelopes] (
    [A2CTransactionResponseEnvelopeId] INT                        IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]     INT                        NOT NULL,
    [A2CTransactionId]                 INT                        NOT NULL,
    [A2CTransactionRequestId]          INT                        NOT NULL,
    [A2CTransactionResponseId]         INT                        NOT NULL,
    [IsSignalMessage]                  BIT                        NULL,
    [LastModifiedDate]                 DATETIME                   NOT NULL,
    [Id]                               UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [ResponseEnvelope]                 VARBINARY (MAX) FILESTREAM NULL,
    [IsEDIMessage]                     BIT                        NULL,
    CONSTRAINT [PK_A2CTransactionResponseEnvelopes] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionId] ASC, [A2CTransactionRequestId] ASC, [A2CTransactionResponseId] ASC, [A2CTransactionResponseEnvelopeId] ASC),
    CONSTRAINT [UQ__A2CTrans__3214EC068F756BDD] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeSignalErrors]...';


GO
CREATE TABLE [dbo].[A2CTransactionResponseEnvelopeSignalErrors] (
    [A2CTransactionResponseEnvelopeSignalErrorId] INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]                INT            NOT NULL,
    [A2CTransactionId]                            INT            NOT NULL,
    [A2CTransactionRequestId]                     INT            NOT NULL,
    [A2CTransactionResponseId]                    INT            NOT NULL,
    [A2CTransactionResponseEnvelopeId]            INT            NOT NULL,
    [A2CTransactionResponseEnvelopeSignalId]      INT            NOT NULL,
    [ErrorCode]                                   NVARCHAR (50)  NULL,
    [ErrorDetail]                                 NVARCHAR (MAX) NULL,
    [Origin]                                      NVARCHAR (MAX) NULL,
    [RefMessageId]                                NVARCHAR (50)  NULL,
    [Severity]                                    NVARCHAR (50)  NULL,
    [ShortDescription]                            NVARCHAR (50)  NULL,
    [Category]                                    NVARCHAR (50)  NULL,
    [Description]                                 NVARCHAR (MAX) NULL,
    [LastModifiedDate]                            DATETIME       NOT NULL,
    CONSTRAINT [PK_A2CTransactionResponseEnvelopeSignalErrors] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionId] ASC, [A2CTransactionRequestId] ASC, [A2CTransactionResponseId] ASC, [A2CTransactionResponseEnvelopeId] ASC, [A2CTransactionResponseEnvelopeSignalId] ASC, [A2CTransactionResponseEnvelopeSignalErrorId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeSignals]...';


GO
CREATE TABLE [dbo].[A2CTransactionResponseEnvelopeSignals] (
    [A2CTransactionResponseEnvelopeSignalId] INT      IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]           INT      NOT NULL,
    [A2CTransactionId]                       INT      NOT NULL,
    [A2CTransactionRequestId]                INT      NOT NULL,
    [A2CTransactionResponseId]               INT      NOT NULL,
    [A2CTransactionResponseEnvelopeId]       INT      NOT NULL,
    [SignalResponseMasterId]                 INT      NULL,
    [LastModifiedDate]                       DATETIME NOT NULL,
    CONSTRAINT [PK_A2CTransactionResponseEnvelopeSignals] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionId] ASC, [A2CTransactionRequestId] ASC, [A2CTransactionResponseId] ASC, [A2CTransactionResponseEnvelopeId] ASC, [A2CTransactionResponseEnvelopeSignalId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CTransactionResponseErrors]...';


GO
CREATE TABLE [dbo].[A2CTransactionResponseErrors] (
    [A2CTransactionResponseErrorId] INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]  INT            NOT NULL,
    [A2CTransactionId]              INT            NOT NULL,
    [A2CTransactionRequestId]       INT            NOT NULL,
    [A2CTransactionResponseId]      INT            NOT NULL,
    [ErrorDescription]              NVARCHAR (MAX) NULL,
    [LastModifiedDate]              DATETIME       NOT NULL,
    CONSTRAINT [PK_A2CTransactionResponseExceptions] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionId] ASC, [A2CTransactionRequestId] ASC, [A2CTransactionResponseId] ASC, [A2CTransactionResponseErrorId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CTransactionResponses]...';


GO
CREATE TABLE [dbo].[A2CTransactionResponses] (
    [A2CTransactionResponseId]     INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [A2CTransactionId]             INT            NOT NULL,
    [A2CTransactionRequestId]      INT            NOT NULL,
    [TransactionResponseStatus]    NVARCHAR (200) NULL,
    [LastModifiedDate]             DATETIME       NOT NULL,
    [IsErrorAssociated]            BIT            NULL,
    CONSTRAINT [PK_A2CTransactionResponses_1] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionId] ASC, [A2CTransactionRequestId] ASC, [A2CTransactionResponseId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CTransactions]...';


GO
CREATE TABLE [dbo].[A2CTransactions] (
    [A2CTransactionId]             INT      IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT      NOT NULL,
    [A2CTransactionMasterId]       INT      NOT NULL,
    [LastModifiedDate]             DATETIME NOT NULL,
    CONSTRAINT [PK_A2CTransactions_1] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionId] ASC)
);


GO
PRINT N'Creating [dbo].[A2CXmlMessages]...';


GO
CREATE TABLE [dbo].[A2CXmlMessages] (
    [A2CMessageId]                 INT                        IDENTITY (1000, 1) NOT NULL,
    [A2CSchoolId]                  INT                        NOT NULL,
    [AwardingOrganisationDetailId] INT                        NOT NULL,
    [CentreId]                     INT                        NOT NULL,
    [A2CMessageGuid]               NVARCHAR (50)              NULL,
    [TransactionName]              NVARCHAR (100)             NULL,
    [LastModifiedDate]             DATETIME                   NOT NULL,
    [Status]                       TINYINT                    NULL,
    [Id]                           UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [MessageContent]               VARBINARY (MAX) FILESTREAM NULL,
    CONSTRAINT [PK_A2CMessages] PRIMARY KEY CLUSTERED ([A2CSchoolId] ASC, [CentreId] ASC, [AwardingOrganisationDetailId] ASC, [A2CMessageId] ASC),
    CONSTRAINT [UQ__A2CMessa__3214EC06E1C5BA4C] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];


GO
PRINT N'Creating [dbo].[AOQEPreference]...';


GO
CREATE TABLE [dbo].[AOQEPreference] (
    [AOQEPreferenceId]             INT IDENTITY (1000, 1) NOT NULL,
    [QualificationElementId]       INT NOT NULL,
    [AwardingOrganisationCentreId] INT NOT NULL,
    [QEPreferenceId]               INT NOT NULL,
    [Record_Delete_Flag]           BIT NULL,
    CONSTRAINT [PK_AOQEPreference] PRIMARY KEY CLUSTERED ([AOQEPreferenceId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Applications]...';


GO
CREATE TABLE [dbo].[aspnet_Applications] (
    [ApplicationName]        NVARCHAR (256)   NOT NULL,
    [LoweredApplicationName] NVARCHAR (256)   NOT NULL,
    [ApplicationId]          UNIQUEIDENTIFIER NOT NULL,
    [Description]            NVARCHAR (256)   NULL,
    PRIMARY KEY NONCLUSTERED ([ApplicationId] ASC),
    UNIQUE NONCLUSTERED ([ApplicationName] ASC),
    UNIQUE NONCLUSTERED ([LoweredApplicationName] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Applications].[aspnet_Applications_Index]...';


GO
CREATE CLUSTERED INDEX [aspnet_Applications_Index]
    ON [dbo].[aspnet_Applications]([LoweredApplicationName] ASC);


GO
PRINT N'Creating [dbo].[aspnet_Membership]...';


GO
CREATE TABLE [dbo].[aspnet_Membership] (
    [ApplicationId]                          UNIQUEIDENTIFIER NOT NULL,
    [UserId]                                 UNIQUEIDENTIFIER NOT NULL,
    [Password]                               NVARCHAR (128)   NOT NULL,
    [PasswordFormat]                         INT              NOT NULL,
    [PasswordSalt]                           NVARCHAR (128)   NOT NULL,
    [MobilePIN]                              NVARCHAR (16)    NULL,
    [Email]                                  NVARCHAR (256)   NULL,
    [LoweredEmail]                           NVARCHAR (256)   NULL,
    [PasswordQuestion]                       NVARCHAR (256)   NULL,
    [PasswordAnswer]                         NVARCHAR (128)   NULL,
    [IsApproved]                             BIT              NOT NULL,
    [IsLockedOut]                            BIT              NOT NULL,
    [CreateDate]                             DATETIME         NOT NULL,
    [LastLoginDate]                          DATETIME         NOT NULL,
    [LastPasswordChangedDate]                DATETIME         NOT NULL,
    [LastLockoutDate]                        DATETIME         NOT NULL,
    [FailedPasswordAttemptCount]             INT              NOT NULL,
    [FailedPasswordAttemptWindowStart]       DATETIME         NOT NULL,
    [FailedPasswordAnswerAttemptCount]       INT              NOT NULL,
    [FailedPasswordAnswerAttemptWindowStart] DATETIME         NOT NULL,
    [Comment]                                NTEXT            NULL,
    PRIMARY KEY NONCLUSTERED ([UserId] ASC)
);


GO
EXECUTE sp_tableoption @TableNamePattern = N'[dbo].[aspnet_Membership]', @OptionName = N'text in row', @OptionValue = N'3000';


GO
PRINT N'Creating [dbo].[aspnet_Membership].[aspnet_Membership_index]...';


GO
CREATE CLUSTERED INDEX [aspnet_Membership_index]
    ON [dbo].[aspnet_Membership]([ApplicationId] ASC, [LoweredEmail] ASC);


GO
PRINT N'Creating [dbo].[aspnet_Paths]...';


GO
CREATE TABLE [dbo].[aspnet_Paths] (
    [ApplicationId] UNIQUEIDENTIFIER NOT NULL,
    [PathId]        UNIQUEIDENTIFIER NOT NULL,
    [Path]          NVARCHAR (256)   NOT NULL,
    [LoweredPath]   NVARCHAR (256)   NOT NULL,
    PRIMARY KEY NONCLUSTERED ([PathId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Paths].[aspnet_Paths_index]...';


GO
CREATE UNIQUE CLUSTERED INDEX [aspnet_Paths_index]
    ON [dbo].[aspnet_Paths]([ApplicationId] ASC, [LoweredPath] ASC);


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAllUsers]...';


GO
CREATE TABLE [dbo].[aspnet_PersonalizationAllUsers] (
    [PathId]          UNIQUEIDENTIFIER NOT NULL,
    [PageSettings]    IMAGE            NOT NULL,
    [LastUpdatedDate] DATETIME         NOT NULL,
    PRIMARY KEY CLUSTERED ([PathId] ASC)
);


GO
EXECUTE sp_tableoption @TableNamePattern = N'[dbo].[aspnet_PersonalizationAllUsers]', @OptionName = N'text in row', @OptionValue = N'6000';


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser]...';


GO
CREATE TABLE [dbo].[aspnet_PersonalizationPerUser] (
    [Id]              UNIQUEIDENTIFIER NOT NULL,
    [PathId]          UNIQUEIDENTIFIER NULL,
    [UserId]          UNIQUEIDENTIFIER NULL,
    [PageSettings]    IMAGE            NOT NULL,
    [LastUpdatedDate] DATETIME         NOT NULL,
    PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
EXECUTE sp_tableoption @TableNamePattern = N'[dbo].[aspnet_PersonalizationPerUser]', @OptionName = N'text in row', @OptionValue = N'6000';


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser].[aspnet_PersonalizationPerUser_index1]...';


GO
CREATE UNIQUE CLUSTERED INDEX [aspnet_PersonalizationPerUser_index1]
    ON [dbo].[aspnet_PersonalizationPerUser]([PathId] ASC, [UserId] ASC);


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser].[aspnet_PersonalizationPerUser_ncindex2]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [aspnet_PersonalizationPerUser_ncindex2]
    ON [dbo].[aspnet_PersonalizationPerUser]([UserId] ASC, [PathId] ASC);


GO
PRINT N'Creating [dbo].[aspnet_Profile]...';


GO
CREATE TABLE [dbo].[aspnet_Profile] (
    [UserId]               UNIQUEIDENTIFIER NOT NULL,
    [PropertyNames]        NTEXT            NOT NULL,
    [PropertyValuesString] NTEXT            NOT NULL,
    [PropertyValuesBinary] IMAGE            NOT NULL,
    [LastUpdatedDate]      DATETIME         NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
EXECUTE sp_tableoption @TableNamePattern = N'[dbo].[aspnet_Profile]', @OptionName = N'text in row', @OptionValue = N'6000';


GO
PRINT N'Creating [dbo].[aspnet_Roles]...';


GO
CREATE TABLE [dbo].[aspnet_Roles] (
    [ApplicationId]   UNIQUEIDENTIFIER NOT NULL,
    [RoleId]          UNIQUEIDENTIFIER NOT NULL,
    [RoleName]        NVARCHAR (256)   NOT NULL,
    [LoweredRoleName] NVARCHAR (256)   NOT NULL,
    [Description]     NVARCHAR (256)   NULL,
    PRIMARY KEY NONCLUSTERED ([RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Roles].[aspnet_Roles_index1]...';


GO
CREATE UNIQUE CLUSTERED INDEX [aspnet_Roles_index1]
    ON [dbo].[aspnet_Roles]([ApplicationId] ASC, [LoweredRoleName] ASC);


GO
PRINT N'Creating [dbo].[aspnet_SchemaVersions]...';


GO
CREATE TABLE [dbo].[aspnet_SchemaVersions] (
    [Feature]                 NVARCHAR (128) NOT NULL,
    [CompatibleSchemaVersion] NVARCHAR (128) NOT NULL,
    [IsCurrentVersion]        BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Feature] ASC, [CompatibleSchemaVersion] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Users]...';


GO
CREATE TABLE [dbo].[aspnet_Users] (
    [ApplicationId]    UNIQUEIDENTIFIER NOT NULL,
    [UserId]           UNIQUEIDENTIFIER NOT NULL,
    [UserName]         NVARCHAR (256)   NOT NULL,
    [LoweredUserName]  NVARCHAR (256)   NOT NULL,
    [MobileAlias]      NVARCHAR (16)    NULL,
    [IsAnonymous]      BIT              NOT NULL,
    [LastActivityDate] DATETIME         NOT NULL,
    PRIMARY KEY NONCLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_Users].[aspnet_Users_Index]...';


GO
CREATE UNIQUE CLUSTERED INDEX [aspnet_Users_Index]
    ON [dbo].[aspnet_Users]([ApplicationId] ASC, [LoweredUserName] ASC);


GO
PRINT N'Creating [dbo].[aspnet_Users].[aspnet_Users_Index2]...';


GO
CREATE NONCLUSTERED INDEX [aspnet_Users_Index2]
    ON [dbo].[aspnet_Users]([ApplicationId] ASC, [LastActivityDate] ASC);


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles]...';


GO
CREATE TABLE [dbo].[aspnet_UsersInRoles] (
    [UserId] UNIQUEIDENTIFIER NOT NULL,
    [RoleId] UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles].[aspnet_UsersInRoles_index]...';


GO
CREATE NONCLUSTERED INDEX [aspnet_UsersInRoles_index]
    ON [dbo].[aspnet_UsersInRoles]([RoleId] ASC);


GO
PRINT N'Creating [dbo].[aspnet_WebEvent_Events]...';


GO
CREATE TABLE [dbo].[aspnet_WebEvent_Events] (
    [EventId]                CHAR (32)       NOT NULL,
    [EventTimeUtc]           DATETIME        NOT NULL,
    [EventTime]              DATETIME        NOT NULL,
    [EventType]              NVARCHAR (256)  NOT NULL,
    [EventSequence]          DECIMAL (19)    NOT NULL,
    [EventOccurrence]        DECIMAL (19)    NOT NULL,
    [EventCode]              INT             NOT NULL,
    [EventDetailCode]        INT             NOT NULL,
    [Message]                NVARCHAR (1024) NULL,
    [ApplicationPath]        NVARCHAR (256)  NULL,
    [ApplicationVirtualPath] NVARCHAR (256)  NULL,
    [MachineName]            NVARCHAR (256)  NOT NULL,
    [RequestUrl]             NVARCHAR (1024) NULL,
    [ExceptionType]          NVARCHAR (256)  NULL,
    [Details]                NTEXT           NULL,
    PRIMARY KEY CLUSTERED ([EventId] ASC)
);


GO
PRINT N'Creating [dbo].[Assessable]...';


GO
CREATE TABLE [dbo].[Assessable] (
    [QualificationElementId]           INT           NOT NULL,
    [AwardingOrganisationCentreId]     INT           NOT NULL,
    [Extra_Time_Required_Flag]         BIT           NULL,
    [Assessment_Method_Type]           NVARCHAR (40) NULL,
    [Assmnt_Actual_DateTime_Reqd_Flag] BIT           NULL,
    [Attendance_Data_Required_Flag]    BIT           NULL,
    [Cambridge_Assmnt_TimeZone_Num]    INT           NULL,
    [Carry_Forward_Permissible_Flag]   BIT           NULL,
    [Maximum_Extra_Time_Minutes]       INT           NULL,
    [On_Demand_Flag]                   BIT           NULL,
    [QE_Timetabled_Flag]               BIT           NULL,
    [Test_Day_Photograph_Reqd_Flag]    BIT           NULL,
    [Tier_Level_Type]                  NVARCHAR (20) NULL,
    [Tier_Level_Common_Reference]      NVARCHAR (12) NULL,
    [Time_Allowed_Mins]                INT           NULL,
    [Party_Role_Type_Assessor]         NVARCHAR (50) NULL,
    [Party_Role_Type_ADT_Decider]      NVARCHAR (50) NULL,
    [Assessment_Medium_Type]           NVARCHAR (20) NULL,
    CONSTRAINT [PK_Assessable] PRIMARY KEY CLUSTERED ([QualificationElementId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[Award]...';


GO
CREATE TABLE [dbo].[Award] (
    [QualificationElementId]          INT            NOT NULL,
    [AwardingOrganisationCentreId]    INT            NOT NULL,
    [Accreditation_End_Review_Date]   DATETIME       NULL,
    [Accreditation_Start_Date]        DATETIME       NULL,
    [AO_Accred_Version_Number]        NVARCHAR (4)   NULL,
    [Assessment_Language_Type]        NVARCHAR (50)  NULL,
    [Award_Level_Type]                NVARCHAR (32)  NULL,
    [Award_Type]                      NVARCHAR (60)  NULL,
    [Cert_of_Unit_Credit_Issued_Flag] BIT            NULL,
    [Certification_End_Date]          DATETIME       NULL,
    [Certification_Start_Date]        DATETIME       NULL,
    [Contributing_Units_Listed_Flag]  BIT            NULL,
    [Course_Length_Type]              NVARCHAR (32)  NULL,
    [Endorsed_Title_Reqd_Flag]        BIT            NULL,
    [Guided_Learning_Hours_Max]       INT            NULL,
    [Guided_Learning_Hours_Min]       INT            NULL,
    [Operational_End_Date]            DATETIME       NULL,
    [Operational_Start_Date]          DATETIME       NULL,
    [QE_Delivery_Model_Type]          NVARCHAR (32)  NULL,
    [QE_Evid_Reqmnt_Provided_Flag]    BIT            NULL,
    [QE_Evidence_Requirement_Type]    NVARCHAR (32)  NULL,
    [Registration_Expiry_Months]      INT            NULL,
    [Resit_Rule_Text]                 NVARCHAR (400) NULL,
    [Statement_Of_Credit_Issued_Flag] BIT            NULL,
    [Study_Guide_Available_Type]      NVARCHAR (20)  NULL,
    [Study_Guide_Details]             NVARCHAR (400) NULL,
    [Study_Guide_Reference]           NVARCHAR (100) NULL,
    [Study_Guide_Reference_Type]      NVARCHAR (32)  NULL,
    [QE_Classification]               NVARCHAR (32)  NULL,
    [Party_Id_Accreditor]             NVARCHAR (32)  NULL,
    [Party_Id_Sector_Lead]            NVARCHAR (32)  NULL,
    [Party_Role_Type_Assessor]        NVARCHAR (50)  NULL,
    CONSTRAINT [PK_Award] PRIMARY KEY CLUSTERED ([QualificationElementId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[AwardingOrganisationAOAssignedCentres]...';


GO
CREATE TABLE [dbo].[AwardingOrganisationAOAssignedCentres] (
    [AwardingOrganisationAOAssignedCentreId] INT           IDENTITY (1000, 1) NOT NULL,
    [A2CSchoolId]                            INT           NOT NULL,
    [CentreId]                               INT           NOT NULL,
    [AwardingOrganisationDetailId]           INT           NOT NULL,
    [AOAssignCentreNumber]                   NVARCHAR (50) NULL,
    [IsDeleted]                              BIT           NULL,
    [LastModifiedDate]                       DATETIME      NOT NULL,
    CONSTRAINT [PK_AwardingOrganisationAOAssignedCentres] PRIMARY KEY CLUSTERED ([AwardingOrganisationAOAssignedCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[AwardingOrganisationCentreCertificates]...';


GO
CREATE TABLE [dbo].[AwardingOrganisationCentreCertificates] (
    [AwardingOrganisationCentreId]      INT      NOT NULL,
    [AwardingOrganisationCertificateId] INT      NOT NULL,
    [IsDeleted]                         BIT      NULL,
    [LastModifiedDate]                  DATETIME NOT NULL,
    CONSTRAINT [PK_AwardingOrganisationCentreCertificates] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [AwardingOrganisationCertificateId] ASC)
);


GO
PRINT N'Creating [dbo].[AwardingOrganisationCentres]...';


GO
CREATE TABLE [dbo].[AwardingOrganisationCentres] (
    [AwardingOrganisationCentreId] INT      IDENTITY (1000, 1) NOT NULL,
    [A2CSchoolId]                  INT      NOT NULL,
    [CentreId]                     INT      NOT NULL,
    [AwardingOrganisationDetailId] INT      NOT NULL,
    [OutgoingSequence]             BIGINT   NOT NULL,
    [IncomingSequence]             BIGINT   NULL,
    [LastModifiedDate]             DATETIME NOT NULL,
    CONSTRAINT [PK_AwardingOrganizationCentres_1] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[AwardingOrganisationCentres].[IX_AwardingOrganisationCentres]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_AwardingOrganisationCentres]
    ON [dbo].[AwardingOrganisationCentres]([A2CSchoolId] ASC, [CentreId] ASC, [AwardingOrganisationDetailId] ASC);


GO
PRINT N'Creating [dbo].[AwardingOrganisationCentres].[IX_AwardingOrganisationCentres_1]...';


GO
CREATE NONCLUSTERED INDEX [IX_AwardingOrganisationCentres_1]
    ON [dbo].[AwardingOrganisationCentres]([A2CSchoolId] ASC, [AwardingOrganisationCentreId] ASC, [AwardingOrganisationDetailId] ASC);


GO
PRINT N'Creating [dbo].[AwardingOrganisationCertificates]...';


GO
CREATE TABLE [dbo].[AwardingOrganisationCertificates] (
    [AwardingOrganisationCertificateId] INT             IDENTITY (1000, 1) NOT NULL,
    [A2CSchoolId]                       INT             NOT NULL,
    [AwardingOrganisationDetailId]      INT             NOT NULL,
    [LastModifiedDate]                  DATETIME        NOT NULL,
    [AOCentreCertificate]               VARBINARY (MAX) NULL,
    [CertificatePassword]               NVARCHAR (50)   NULL,
    [CertificateExpiredDate]            DATE            NULL,
    [CertificateFileName]               NVARCHAR (100)  NULL,
    CONSTRAINT [PK_AwardingOrganizationCertificates] PRIMARY KEY CLUSTERED ([AwardingOrganisationCertificateId] ASC)
);


GO
PRINT N'Creating [dbo].[AwardingOrganisationDetails]...';


GO
CREATE TABLE [dbo].[AwardingOrganisationDetails] (
    [AwardingOrganisationDetailId] INT             IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationId]       INT             NULL,
    [AONumber]                     NVARCHAR (20)   NOT NULL,
    [MISCertificate]               VARBINARY (MAX) NULL,
    [LastModifiedDate]             DATETIME        NOT NULL,
    CONSTRAINT [PK_AwardingOrganizations] PRIMARY KEY CLUSTERED ([AwardingOrganisationDetailId] ASC)
);


GO
PRINT N'Creating [dbo].[AwardingOrganisationDetails].[IX_AwardingOrganizations]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_AwardingOrganizations]
    ON [dbo].[AwardingOrganisationDetails]([AwardingOrganisationDetailId] ASC)
    ON [INDEXES];


GO
PRINT N'Creating [dbo].[AwardingOrganisations]...';


GO
CREATE TABLE [dbo].[AwardingOrganisations] (
    [AwardingOrganisationId] INT            IDENTITY (1000, 1) NOT NULL,
    [Name]                   NVARCHAR (50)  NOT NULL,
    [EndPoint]               NVARCHAR (300) NOT NULL,
    [ContactEmail]           NVARCHAR (100) NULL,
    [Description]            NVARCHAR (100) NULL,
    [PhoneNumber]            NVARCHAR (50)  NULL,
    [LastModifiedDate]       DATETIME       NOT NULL,
    CONSTRAINT [PK_AwardingOrganizations_1] PRIMARY KEY CLUSTERED ([AwardingOrganisationId] ASC)
);


GO
PRINT N'Creating [dbo].[Centres]...';


GO
CREATE TABLE [dbo].[Centres] (
    [CentreId]         INT           IDENTITY (1000, 1) NOT NULL,
    [A2CSchoolId]      INT           NOT NULL,
    [CentreNumber]     NVARCHAR (50) NOT NULL,
    [LastModifiedDate] DATETIME      NOT NULL,
    CONSTRAINT [PK_Centres] PRIMARY KEY CLUSTERED ([A2CSchoolId] ASC, [CentreId] ASC)
);


GO
PRINT N'Creating [dbo].[Centres].[IX_Centres]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Centres]
    ON [dbo].[Centres]([CentreNumber] ASC);


GO
PRINT N'Creating [dbo].[EDIFileInformations]...';


GO
CREATE TABLE [dbo].[EDIFileInformations] (
    [EDIFileInformationId] INT            IDENTITY (1000, 1) NOT NULL,
    [FilePath]             NVARCHAR (300) NOT NULL,
    [LastModifiedDate]     DATETIME       NOT NULL,
    CONSTRAINT [PK_EDIFileInformation] PRIMARY KEY CLUSTERED ([EDIFileInformationId] ASC)
);


GO
PRINT N'Creating [dbo].[EDIFileInformations].[IX_EDIFileInformations]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EDIFileInformations]
    ON [dbo].[EDIFileInformations]([FilePath] ASC);


GO
PRINT N'Creating [dbo].[EDIFileNotConnectedInformations]...';


GO
CREATE TABLE [dbo].[EDIFileNotConnectedInformations] (
    [FilePath]         NVARCHAR (300) NOT NULL,
    [LastModifiedDate] DATETIME       NOT NULL
);


GO
PRINT N'Creating [dbo].[EDIMessages]...';


GO
CREATE TABLE [dbo].[EDIMessages] (
    [EDIMessageId] INT                        IDENTITY (1000, 1) NOT NULL,
    [A2CSchoolId]  INT                        NOT NULL,
    [AOId]         INT                        NOT NULL,
    [CentreId]     INT                        NOT NULL,
    [FileName]     UNIQUEIDENTIFIER           NULL,
    [Id]           UNIQUEIDENTIFIER           ROWGUIDCOL NOT NULL,
    [data]         VARBINARY (MAX) FILESTREAM NULL,
    CONSTRAINT [PK_EDIMessages] PRIMARY KEY CLUSTERED ([CentreId] ASC, [A2CSchoolId] ASC, [AOId] ASC, [EDIMessageId] ASC),
    CONSTRAINT [UQ__EDIMessa__3214EC06EA406857] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];


GO
PRINT N'Creating [dbo].[ErrorLogs]...';


GO
CREATE TABLE [dbo].[ErrorLogs] (
    [ErrorLogId]                              INT            IDENTITY (1000, 1) NOT NULL,
    [ScreenMasterId]                          INT            NULL,
    [A2CSchoolId]                             INT            NULL,
    [AwardingOrganisationCentreId]            INT            NULL,
    [ErrorMessage]                            NVARCHAR (MAX) NULL,
    [Logger]                                  NVARCHAR (255) NULL,
    [LogType]                                 INT            NOT NULL,
    [IPAddress]                               NVARCHAR (50)  NULL,
    [LastModifiedDate]                        DATETIME       NOT NULL,
    [A2CTransactionId]                        INT            NULL,
    [A2CTransactionRequestId]                 INT            NULL,
    [A2CTransactionResponseId]                INT            NULL,
    [A2CTransactionResponseEnvelopeId]        INT            NULL,
    [A2CTransactionResponseEnvelopeMessageId] INT            NULL,
    [MessageID]                               NVARCHAR (100) NULL,
    CONSTRAINT [PK_ErrorLogs] PRIMARY KEY CLUSTERED ([ErrorLogId] ASC)
);


GO
PRINT N'Creating [dbo].[InformationLogs]...';


GO
CREATE TABLE [dbo].[InformationLogs] (
    [InformationLogId] INT              IDENTITY (1000, 1) NOT NULL,
    [A2CSchoolId]      INT              NULL,
    [ScreenMasterId]   INT              NULL,
    [Description]      NVARCHAR (MAX)   NULL,
    [LastModifiedDate] DATETIME         NOT NULL,
    [IPAddress]        NVARCHAR (50)    NULL,
    [RoleType]         TINYINT          NULL,
    [UserId]           UNIQUEIDENTIFIER NULL,
    [IsVisibleToAll]   BIT              NULL,
    CONSTRAINT [PK_InformationLogs] PRIMARY KEY CLUSTERED ([InformationLogId] ASC)
);


GO
PRINT N'Creating [dbo].[LearningUnit]...';


GO
CREATE TABLE [dbo].[LearningUnit] (
    [QualificationElementId]       INT           NOT NULL,
    [AwardingOrganisationCentreId] INT           NOT NULL,
    [Learning_Unit_Level_Type]     NVARCHAR (32) NULL,
    [Maximum_Resits_Allowed]       INT           NULL,
    CONSTRAINT [PK_LearningUnit] PRIMARY KEY CLUSTERED ([QualificationElementId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[Pathway]...';


GO
CREATE TABLE [dbo].[Pathway] (
    [QualificationElementId]       INT NOT NULL,
    [AwardingOrganisationCentreId] INT NOT NULL,
    [Equals_Indicator_Flag]        BIT NULL,
    [Mandatory_In_Group_Flag]      BIT NULL,
    [Minimum_Unit_Selection]       INT NULL,
    [Maximum_Unit_Selection]       INT NULL,
    [Minimum_Pathway_Selection]    INT NULL,
    [Maximum_Pathway_Selection]    INT NULL,
    [Minimum_Credit_Value]         INT NULL,
    CONSTRAINT [PK_Pathway] PRIMARY KEY CLUSTERED ([QualificationElementId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[PollingFrequency]...';


GO
CREATE TABLE [dbo].[PollingFrequency] (
    [AwardingOrganisationId] INT NOT NULL,
    [Frequency]              INT NOT NULL,
    CONSTRAINT [PK_PollingFrequency] PRIMARY KEY CLUSTERED ([AwardingOrganisationId] ASC)
);


GO
PRINT N'Creating [dbo].[PullMessageSync]...';


GO
CREATE TABLE [dbo].[PullMessageSync] (
    [AwardingOrganisationDetailId] INT           NOT NULL,
    [CentreId]                     INT           NOT NULL,
    [Status]                       BIT           NOT NULL,
    [Timestamp]                    SMALLDATETIME NOT NULL,
    CONSTRAINT [PK_PollMessageSync] PRIMARY KEY CLUSTERED ([AwardingOrganisationDetailId] ASC, [CentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QEAAssessmentMaterial]...';


GO
CREATE TABLE [dbo].[QEAAssessmentMaterial] (
    [QEAAssessmentMaterialId]       INT      IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]  INT      NOT NULL,
    [QualificationElementId]        INT      NOT NULL,
    [QEAssessmentMaterialId]        INT      NOT NULL,
    [QEA_Effective_Start_Date_Time] DATETIME NULL,
    [Number_per_Learner]            INT      NULL,
    [Number_per_Centre]             INT      NULL,
    [Assmnt_Material_Release_Date]  DATE     NULL,
    [Record_Delete_Flag]            BIT      NULL,
    CONSTRAINT [PK_QEAAssessmentMaterial] PRIMARY KEY CLUSTERED ([QEAAssessmentMaterialId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QEAMaxMarkGradeBoundary]...';


GO
CREATE TABLE [dbo].[QEAMaxMarkGradeBoundary] (
    [QEAMaxMarkGradeBoundaryId]    INT           IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT           NOT NULL,
    [QEAvailabilityMaximumMarkId]  INT           NOT NULL,
    [QE_Grade]                     NVARCHAR (50) NOT NULL,
    [Grade_Boundary_Lower_Limit]   INT           NULL,
    [Record_Delete_Flag]           BIT           NULL,
    CONSTRAINT [PK_QEAMaxMarkGradeBoundary] PRIMARY KEY CLUSTERED ([QEAMaxMarkGradeBoundaryId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QEAssessmentMaterial]...';


GO
CREATE TABLE [dbo].[QEAssessmentMaterial] (
    [QEAssessmentMaterialId]         INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]   INT            NOT NULL,
    [QE_Assmnt_Material_Id]          NVARCHAR (25)  NOT NULL,
    [QE_Assmnt_Material_Name]        NVARCHAR (100) NULL,
    [QE_Assmnt_Material_Source]      NVARCHAR (400) NULL,
    [QE_Assmnt_Material_Description] NVARCHAR (250) NULL,
    [QE_Assmnt_Material_Source_Type] NVARCHAR (32)  NULL,
    [QE_Assmnt_Material_Medium_Type] NVARCHAR (20)  NULL,
    [Record_Delete_Flag]             BIT            NULL,
    CONSTRAINT [PK_QEAssessmentMaterial] PRIMARY KEY CLUSTERED ([QEAssessmentMaterialId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QEAvailability]...';


GO
CREATE TABLE [dbo].[QEAvailability] (
    [QEAvailabilityId]               INT           IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]   INT           NOT NULL,
    [QualificationElementId]         INT           NOT NULL,
    [QEA_Effective_Start_Date_Time]  DATETIME      NOT NULL,
    [QEA_Effective_End_Date_Time]    DATETIME      NULL,
    [SLA_OnDemand_Result_Clndr_Days] INT           NULL,
    [Series_Label]                   NVARCHAR (50) NULL,
    [OnDemand_Entry_Calendar_Days]   INT           NULL,
    [Record_Delete_Flag]             BIT           NULL,
    CONSTRAINT [PK_QEAvailability] PRIMARY KEY CLUSTERED ([QEAvailabilityId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QEAvailabilityKeyEvent]...';


GO
CREATE TABLE [dbo].[QEAvailabilityKeyEvent] (
    [QEAvailabilityKeyEventId]     INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [QEAvailabilityId]             INT            NOT NULL,
    [Key_Event_Name]               NVARCHAR (100) NOT NULL,
    [Key_Event_Start_Date_Time]    DATETIME       NULL,
    [Key_Event_End_Date_Time]      DATETIME       NULL,
    [Key_Event_Additional_Text]    NVARCHAR (400) NULL,
    [Time_Period_Type]             NVARCHAR (32)  NULL,
    [Record_Delete_Flag]           BIT            NULL,
    CONSTRAINT [PK_QEAvailabilityKeyEvent] PRIMARY KEY CLUSTERED ([QEAvailabilityKeyEventId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QEAvailabilityKeyEventFee]...';


GO
CREATE TABLE [dbo].[QEAvailabilityKeyEventFee] (
    [QEAvailabilityKeyEventFeeId]  INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [QEAvailabilityKeyEventId]     INT            NOT NULL,
    [QE_Fee_Category_Type]         NVARCHAR (100) NOT NULL,
    [Fee_Period_Start_Date_Time]   DATETIME       NOT NULL,
    [Fee_Period_Title]             NVARCHAR (100) NULL,
    [Fee_Period_End_Date_Time]     DATETIME       NULL,
    [Fee_Amount]                   DECIMAL (9, 2) NULL,
    [Fee_Additional_Text]          NVARCHAR (400) NULL,
    [Record_Delete_Flag]           BIT            NULL,
    CONSTRAINT [PK_QEAvailabilityKeyEventFee] PRIMARY KEY CLUSTERED ([QEAvailabilityKeyEventFeeId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QEAvailabilityMaximumMark]...';


GO
CREATE TABLE [dbo].[QEAvailabilityMaximumMark] (
    [QEAvailabilityMaximumMarkId]   INT           IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]  INT           NOT NULL,
    [QualificationElementId]        INT           NOT NULL,
    [QEA_Effective_Start_Date_Time] DATETIME      NOT NULL,
    [QE_Outcome_Value_Type]         NVARCHAR (32) NOT NULL,
    [QE_Availability_Maximum_Mark]  INT           NULL,
    [Record_Delete_Flag]            BIT           NULL,
    CONSTRAINT [PK_QEAvailabilityMaximumMark] PRIMARY KEY CLUSTERED ([QEAvailabilityMaximumMarkId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QEFeeCategory]...';


GO
CREATE TABLE [dbo].[QEFeeCategory] (
    [QEFeeCategoryId]              INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [QE_Fee_Category_Type]         NVARCHAR (100) NOT NULL,
    [Fee_Additional_Information]   NVARCHAR (400) NULL,
    [Currency_Type]                NVARCHAR (80)  NULL,
    [Record_Delete_Flag]           BIT            NULL,
    CONSTRAINT [PK_QEFeeCategory] PRIMARY KEY CLUSTERED ([QEFeeCategoryId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QEGradePerformancePoints]...';


GO
CREATE TABLE [dbo].[QEGradePerformancePoints] (
    [QEGradePerformancePointsId]   INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [QualificationElementId]       INT            NOT NULL,
    [QualificationElementGradeId]  INT            NOT NULL,
    [Party_Id_Administrator]       NVARCHAR (32)  NOT NULL,
    [Performance_Points]           DECIMAL (6, 2) NULL,
    [Level_1_Threshold]            DECIMAL (5, 2) NULL,
    [Level_2_Threshold]            DECIMAL (5, 2) NULL,
    [Level_3_Threshold]            DECIMAL (5, 2) NULL,
    [Record_Delete_Flag]           BIT            NULL,
    CONSTRAINT [PK_QEGradePerformancePoints] PRIMARY KEY CLUSTERED ([QEGradePerformancePointsId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QELearnerIdentifier]...';


GO
CREATE TABLE [dbo].[QELearnerIdentifier] (
    [QELearnerIdentifierId]        INT           IDENTITY (1000, 1) NOT NULL,
    [QualificationElementId]       INT           NOT NULL,
    [AwardingOrganisationCentreId] INT           NOT NULL,
    [Party_RR_Reference_Type]      NVARCHAR (32) NULL,
    [Learner_Id_Mandatory_Flag]    BIT           NULL,
    [Record_Delete_Flag]           BIT           NULL,
    CONSTRAINT [PK_QELearnerIdentifier] PRIMARY KEY CLUSTERED ([QELearnerIdentifierId] ASC, [QualificationElementId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QEObjectiveStatement]...';


GO
CREATE TABLE [dbo].[QEObjectiveStatement] (
    [QEObjectiveStatementId]        INT             IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]  INT             NOT NULL,
    [QualificationElementId]        INT             NOT NULL,
    [QE_Objective_Statement_Name]   NVARCHAR (32)   NOT NULL,
    [QE_Objective_Statement_Text]   NVARCHAR (500)  NULL,
    [QE_Objctv_Stmnt_Level_Seq_Num] INT             NULL,
    [QE_Objective_Statement_Level]  NVARCHAR (8)    NULL,
    [QE_Objective_Statement_Descr]  NVARCHAR (1000) NULL,
    [Record_Delete_Flag]            BIT             NULL,
    CONSTRAINT [PK_QEObjectiveStatement] PRIMARY KEY CLUSTERED ([QEObjectiveStatementId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QEObjectiveStatementHierarchy]...';


GO
CREATE TABLE [dbo].[QEObjectiveStatementHierarchy] (
    [QEObjectiveStatementHierarchyId] INT IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]    INT NOT NULL,
    [QualificationElementId_First]    INT NOT NULL,
    [QEObjectiveStatementId_First]    INT NOT NULL,
    [QualificationElementId_Second]   INT NOT NULL,
    [QEObjectiveStatementId_Second]   INT NOT NULL,
    [Record_Delete_Flag]              BIT NULL,
    CONSTRAINT [PK_QEObjectiveStatementHierarchy] PRIMARY KEY CLUSTERED ([QEObjectiveStatementHierarchyId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QEPreference]...';


GO
CREATE TABLE [dbo].[QEPreference] (
    [QEPreferenceId]               INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [Party_Id_Creator]             NVARCHAR (32)  NULL,
    [QE_Preference]                NVARCHAR (100) NULL,
    [Record_Delete_Flag]           BIT            NULL,
    CONSTRAINT [PK_QEPreference] PRIMARY KEY CLUSTERED ([QEPreferenceId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QERelationship]...';


GO
CREATE TABLE [dbo].[QERelationship] (
    [AwardingOrganisationCentreId]  INT           NOT NULL,
    [QualificationElementId_Parent] INT           NOT NULL,
    [QualificationElementId_Child]  INT           NOT NULL,
    [QE_Relationship_Type]          NVARCHAR (32) NULL,
    [QE_Relationship_Rule_Type]     NVARCHAR (20) NULL,
    [Record_Delete_Flag]            BIT           NOT NULL,
    CONSTRAINT [PK_QERelationship] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [QualificationElementId_Parent] ASC, [QualificationElementId_Child] ASC)
);


GO
PRINT N'Creating [dbo].[QESectorSubjectArea]...';


GO
CREATE TABLE [dbo].[QESectorSubjectArea] (
    [QESectorSubjectAreaId]           INT  IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]    INT  NOT NULL,
    [QualificationElementId]          INT  NOT NULL,
    [SectorSubjectAreaId]             INT  NOT NULL,
    [QE_Sector_Subject_Area_Eff_Date] DATE NULL,
    [QE_Sector_Subject_Area_End_Date] DATE NULL,
    [Record_Delete_Flag]              BIT  NULL,
    CONSTRAINT [PK_QESectorSubjectArea] PRIMARY KEY CLUSTERED ([QESectorSubjectAreaId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QualificationElement]...';


GO
CREATE TABLE [dbo].[QualificationElement] (
    [QualificationElementId]         INT             IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]   INT             NOT NULL,
    [AO_Qualification_Element_Id]    NVARCHAR (50)   NOT NULL,
    [Qualification_Element_Type]     NVARCHAR (32)   NOT NULL,
    [QE_Description]                 NVARCHAR (3500) NULL,
    [Qualification_Element_Title]    NVARCHAR (200)  NULL,
    [QE_Short_Title]                 NVARCHAR (50)   NULL,
    [QE_Effective_Version_Date]      DATETIME        NULL,
    [QE_Effective_Version_End_Date]  DATETIME        NULL,
    [Private_Learner_Type]           NVARCHAR (32)   NULL,
    [QE_Moderation_Type]             NVARCHAR (32)   NULL,
    [First_Language_Required_Flag]   BIT             NULL,
    [Qualification_Reference_Number] NVARCHAR (10)   NULL,
    [Learning_Aim_Code]              NVARCHAR (10)   NULL,
    [QE_Admin_Code]                  NVARCHAR (50)   NULL,
    [Record_Delete_Flag]             BIT             NOT NULL,
    CONSTRAINT [PK_QualificationElement] PRIMARY KEY CLUSTERED ([QualificationElementId] ASC, [AwardingOrganisationCentreId] ASC),
    CONSTRAINT [UQ_QualificationElement_AOCentreIdQEIdQEType] UNIQUE NONCLUSTERED ([AwardingOrganisationCentreId] ASC, [AO_Qualification_Element_Id] ASC, [Qualification_Element_Type] ASC)
);


GO
PRINT N'Creating [dbo].[QualificationElementAgeRange]...';


GO
CREATE TABLE [dbo].[QualificationElementAgeRange] (
    [QualificationElementAgeRangeId] INT           IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]   INT           NOT NULL,
    [QualificationElementId]         INT           NOT NULL,
    [Age_Range_Type]                 NVARCHAR (32) NOT NULL,
    [Record_Delete_Flag]             BIT           NULL,
    CONSTRAINT [PK_QualificationElementAgeRange] PRIMARY KEY CLUSTERED ([QualificationElementAgeRangeId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QualificationElementFramework]...';


GO
CREATE TABLE [dbo].[QualificationElementFramework] (
    [QualificationElementFrameworkId] INT IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]    INT NOT NULL,
    [QualificationElementId]          INT NOT NULL,
    [QualificationFrameworkId]        INT NOT NULL,
    [QE_Framework_Credit_Value]       INT NULL,
    [Record_Delete_Flag]              BIT NULL,
    CONSTRAINT [PK_QualificationElementFramework] PRIMARY KEY CLUSTERED ([QualificationElementFrameworkId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QualificationElementGrade]...';


GO
CREATE TABLE [dbo].[QualificationElementGrade] (
    [QualificationElementGradeId]  INT             IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT             NOT NULL,
    [QualificationElementId]       INT             NOT NULL,
    [QE_Grade]                     NVARCHAR (50)   NOT NULL,
    [QE_Outcome_Type]              NVARCHAR (32)   NOT NULL,
    [QE_Grade_Effective_Date]      DATETIME        NULL,
    [QE_Grade_Eff_End_Date]        DATETIME        NULL,
    [QE_Grade_Description]         NVARCHAR (1500) NULL,
    [QE_Grade_Sequence_Order]      INT             NULL,
    [Record_Delete_Flag]           BIT             NULL,
    CONSTRAINT [PK_QualificationElementGrade] PRIMARY KEY CLUSTERED ([QualificationElementGradeId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QualificationFramework]...';


GO
CREATE TABLE [dbo].[QualificationFramework] (
    [QualificationFrameworkId]     INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [Party_Id_Administrator]       NVARCHAR (32)  NOT NULL,
    [Qualification_Framework_Type] NVARCHAR (100) NOT NULL,
    [Qual_Frmwrk_Level_Type]       NVARCHAR (20)  NOT NULL,
    [Qual_Frmwrk_Level_Tier_Type]  NVARCHAR (10)  NULL,
    [Record_Delete_Flag]           BIT            NULL,
    CONSTRAINT [PK_QualificationFramework] PRIMARY KEY CLUSTERED ([QualificationFrameworkId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[QualificationFrameworkHierarchy]...';


GO
CREATE TABLE [dbo].[QualificationFrameworkHierarchy] (
    [QualificationFrameworkHierarchyId] INT IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]      INT NOT NULL,
    [QualificationFrameworkId_Parent]   INT NOT NULL,
    [QualificationFrameworkId_Child]    INT NOT NULL,
    [Record_Delete_Flag]                BIT NULL,
    CONSTRAINT [PK_QualificationFrameworkHierarchy] PRIMARY KEY CLUSTERED ([QualificationFrameworkHierarchyId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[Roles]...';


GO
CREATE TABLE [dbo].[Roles] (
    [RoleId]          INT          NOT NULL,
    [RoleName]        VARCHAR (50) NOT NULL,
    [RoleDisplayName] VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_Roles] PRIMARY KEY CLUSTERED ([RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[Scheme]...';


GO
CREATE TABLE [dbo].[Scheme] (
    [QualificationElementId]        INT             NOT NULL,
    [AwardingOrganisationCentreId]  INT             NOT NULL,
    [Assessment_Max_Learner_Age]    INT             NULL,
    [Assessment_Min_Learner_Age]    INT             NULL,
    [First_Teaching_Date]           DATETIME        NULL,
    [Last_Teaching_Date]            DATETIME        NULL,
    [QE_Centre_Auth_Agreement_Text] NVARCHAR (400)  NULL,
    [Qualification_Type]            NVARCHAR (50)   NULL,
    [Series_Based_Flag]             BIT             NULL,
    [QE_Website_URL_Locator_Id]     NVARCHAR (1000) NULL,
    [Date_Of_Birth_Reqd_Flag]       BIT             NULL,
    [Legal_Sex_Required_Flag]       BIT             NULL,
    [QE_Availability_Text]          NVARCHAR (3000) NULL,
    CONSTRAINT [PK_Scheme] PRIMARY KEY CLUSTERED ([QualificationElementId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[ScreenMasters]...';


GO
CREATE TABLE [dbo].[ScreenMasters] (
    [ScreenMasterId]    INT            NOT NULL,
    [ScreenName]        NVARCHAR (100) NOT NULL,
    [ScreenDescription] NVARCHAR (200) NULL,
    CONSTRAINT [PK_Screens] PRIMARY KEY CLUSTERED ([ScreenMasterId] ASC)
);


GO
PRINT N'Creating [dbo].[SectorSubjectArea]...';


GO
CREATE TABLE [dbo].[SectorSubjectArea] (
    [SectorSubjectAreaId]            INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]   INT            NOT NULL,
    [Sector_Subject_Area]            DECIMAL (3, 1) NOT NULL,
    [Sector_Subject_Area_Descr]      NVARCHAR (100) NULL,
    [Sector_Subject_Area_Level_Type] NVARCHAR (8)   NULL,
    [Record_Delete_Flag]             BIT            NULL,
    CONSTRAINT [PK_SectorSubjectArea] PRIMARY KEY CLUSTERED ([SectorSubjectAreaId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[SectorSubjectAreaHierarchy]...';


GO
CREATE TABLE [dbo].[SectorSubjectAreaHierarchy] (
    [SectorSubjectAreaHierarchyId] INT IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT NOT NULL,
    [SectorSubjectAreaId_Parent]   INT NOT NULL,
    [SectorSubjectAreaId_Child]    INT NOT NULL,
    [Record_Delete_Flag]           BIT NULL,
    CONSTRAINT [PK_SectorSubjectAreaHierarchy] PRIMARY KEY CLUSTERED ([SectorSubjectAreaHierarchyId] ASC, [AwardingOrganisationCentreId] ASC)
);


GO
PRINT N'Creating [dbo].[SignalResponseMasters]...';


GO
CREATE TABLE [dbo].[SignalResponseMasters] (
    [SignalResponseMasterId] INT           NOT NULL,
    [SignalResponseText]     NVARCHAR (30) NOT NULL,
    [Description]            NVARCHAR (50) NULL,
    CONSTRAINT [PK_SignalResponseMasters] PRIMARY KEY CLUSTERED ([SignalResponseMasterId] ASC)
);


GO
PRINT N'Creating [dbo].[SMTPEmailProviders]...';


GO
CREATE TABLE [dbo].[SMTPEmailProviders] (
    [SMTPEmailProviderId] INT            IDENTITY (1, 1) NOT NULL,
    [HostName]            NVARCHAR (255) NOT NULL,
    [Port]                INT            NOT NULL,
    [UserName]            NVARCHAR (255) NOT NULL,
    [Password]            NVARCHAR (255) NOT NULL,
    [FromEmail]           NVARCHAR (255) NOT NULL,
    [SchoolId]            INT            NULL,
    CONSTRAINT [PK_SMTPEmailProviders] PRIMARY KEY CLUSTERED ([SMTPEmailProviderId] ASC)
);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [UserId]   UNIQUEIDENTIFIER NOT NULL,
    [ForeName] VARCHAR (255)    NOT NULL,
    [SurName]  VARCHAR (255)    NOT NULL,
    [SchoolId] INT              NULL,
    CONSTRAINT [PK_Users_1] PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating [dbo].[UsersInRoles]...';


GO
CREATE TABLE [dbo].[UsersInRoles] (
    [UserId] UNIQUEIDENTIFIER NOT NULL,
    [RoleId] INT              NOT NULL,
    CONSTRAINT [PK_UsersInRoles] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[DF_A2CRPCRequests_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CRequests]
    ADD CONSTRAINT [DF_A2CRPCRequests_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_A2CRequests_RequestType]...';


GO
ALTER TABLE [dbo].[A2CRequests]
    ADD CONSTRAINT [DF_A2CRequests_RequestType] DEFAULT ((1)) FOR [RequestType];


GO
PRINT N'Creating [dbo].[DF_A2CSendRequests_Status]...';


GO
ALTER TABLE [dbo].[A2CSendRequests]
    ADD CONSTRAINT [DF_A2CSendRequests_Status] DEFAULT ((0)) FOR [Status];


GO
PRINT N'Creating [dbo].[DF_A2CSendRequests_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CSendRequests]
    ADD CONSTRAINT [DF_A2CSendRequests_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_A2CSentQueues_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CSentQueues]
    ADD CONSTRAINT [DF_A2CSentQueues_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionEDIs_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionEDIs]
    ADD CONSTRAINT [DF_A2CTransactionEDIs_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionErrors_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionErrors]
    ADD CONSTRAINT [DF_A2CTransactionErrors_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionMasters_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionMasters]
    ADD CONSTRAINT [DF_A2CTransactionMasters_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionMessages_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionMessages]
    ADD CONSTRAINT [DF_A2CTransactionMessages_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionRequests_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests]
    ADD CONSTRAINT [DF_A2CTransactionRequests_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF__A2CTransacti__Id__0D99FE17]...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests]
    ADD CONSTRAINT [DF__A2CTransacti__Id__0D99FE17] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionResponseEDIs_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs]
    ADD CONSTRAINT [DF_A2CTransactionResponseEDIs_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF__A2CTransacti__Id__24285DB4]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs]
    ADD CONSTRAINT [DF__A2CTransacti__Id__24285DB4] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionResponseMessages_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages]
    ADD CONSTRAINT [DF_A2CTransactionResponseMessages_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF__A2CTransacti__Id__27F8EE98]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages]
    ADD CONSTRAINT [DF__A2CTransacti__Id__27F8EE98] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionResponseEnvelopeMessages_DataImportStatus]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages]
    ADD CONSTRAINT [DF_A2CTransactionResponseEnvelopeMessages_DataImportStatus] DEFAULT ((0)) FOR [DataImportStatus];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionResponseEnvelopes_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes]
    ADD CONSTRAINT [DF_A2CTransactionResponseEnvelopes_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF__A2CTransacti__Id__34B3CB38]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes]
    ADD CONSTRAINT [DF__A2CTransacti__Id__34B3CB38] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionResponseEnvelopeSignalErrors_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignalErrors]
    ADD CONSTRAINT [DF_A2CTransactionResponseEnvelopeSignalErrors_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionResponseSignals_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals]
    ADD CONSTRAINT [DF_A2CTransactionResponseSignals_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionResponseExceptions_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseErrors]
    ADD CONSTRAINT [DF_A2CTransactionResponseExceptions_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_A2CTransactionResponses_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponses]
    ADD CONSTRAINT [DF_A2CTransactionResponses_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_A2CTransactions_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactions]
    ADD CONSTRAINT [DF_A2CTransactions_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_A2CMessages_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CXmlMessages]
    ADD CONSTRAINT [DF_A2CMessages_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF__A2CMessages__Id__37C5420D]...';


GO
ALTER TABLE [dbo].[A2CXmlMessages]
    ADD CONSTRAINT [DF__A2CMessages__Id__37C5420D] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating unnamed constraint on [dbo].[AOQEPreference]...';


GO
ALTER TABLE [dbo].[AOQEPreference]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Applications]...';


GO
ALTER TABLE [dbo].[aspnet_Applications]
    ADD DEFAULT (newid()) FOR [ApplicationId];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Membership]...';


GO
ALTER TABLE [dbo].[aspnet_Membership]
    ADD DEFAULT ((0)) FOR [PasswordFormat];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Paths]...';


GO
ALTER TABLE [dbo].[aspnet_Paths]
    ADD DEFAULT (newid()) FOR [PathId];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_PersonalizationPerUser]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser]
    ADD DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Roles]...';


GO
ALTER TABLE [dbo].[aspnet_Roles]
    ADD DEFAULT (newid()) FOR [RoleId];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Users]
    ADD DEFAULT (newid()) FOR [UserId];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Users]
    ADD DEFAULT (NULL) FOR [MobileAlias];


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Users]
    ADD DEFAULT ((0)) FOR [IsAnonymous];


GO
PRINT N'Creating unnamed constraint on [dbo].[Assessable]...';


GO
ALTER TABLE [dbo].[Assessable]
    ADD DEFAULT ((0)) FOR [Extra_Time_Required_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Assessable]...';


GO
ALTER TABLE [dbo].[Assessable]
    ADD DEFAULT ((0)) FOR [Assmnt_Actual_DateTime_Reqd_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Assessable]...';


GO
ALTER TABLE [dbo].[Assessable]
    ADD DEFAULT ((0)) FOR [Attendance_Data_Required_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Assessable]...';


GO
ALTER TABLE [dbo].[Assessable]
    ADD DEFAULT ((0)) FOR [Carry_Forward_Permissible_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Assessable]...';


GO
ALTER TABLE [dbo].[Assessable]
    ADD DEFAULT ((0)) FOR [On_Demand_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Assessable]...';


GO
ALTER TABLE [dbo].[Assessable]
    ADD DEFAULT ((0)) FOR [QE_Timetabled_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Assessable]...';


GO
ALTER TABLE [dbo].[Assessable]
    ADD DEFAULT ((0)) FOR [Test_Day_Photograph_Reqd_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Award]...';


GO
ALTER TABLE [dbo].[Award]
    ADD DEFAULT ((0)) FOR [Cert_of_Unit_Credit_Issued_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Award]...';


GO
ALTER TABLE [dbo].[Award]
    ADD DEFAULT ((0)) FOR [Contributing_Units_Listed_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Award]...';


GO
ALTER TABLE [dbo].[Award]
    ADD DEFAULT ((0)) FOR [Endorsed_Title_Reqd_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Award]...';


GO
ALTER TABLE [dbo].[Award]
    ADD DEFAULT ((0)) FOR [QE_Evid_Reqmnt_Provided_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Award]...';


GO
ALTER TABLE [dbo].[Award]
    ADD DEFAULT ((0)) FOR [Statement_Of_Credit_Issued_Flag];


GO
PRINT N'Creating [dbo].[DF_AwardingOrganisationAOAssignedCentres_IsDeleted]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationAOAssignedCentres]
    ADD CONSTRAINT [DF_AwardingOrganisationAOAssignedCentres_IsDeleted] DEFAULT ((0)) FOR [IsDeleted];


GO
PRINT N'Creating [dbo].[DF_AwardingOrganizationAOAssignedCentres_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationAOAssignedCentres]
    ADD CONSTRAINT [DF_AwardingOrganizationAOAssignedCentres_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_AwardingOrganisationCentreCertificates_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCentreCertificates]
    ADD CONSTRAINT [DF_AwardingOrganisationCentreCertificates_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_AwardingOrganisationCentres_OutgoingSequence]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCentres]
    ADD CONSTRAINT [DF_AwardingOrganisationCentres_OutgoingSequence] DEFAULT ((1)) FOR [OutgoingSequence];


GO
PRINT N'Creating [dbo].[DF_AwardingOrganizationCentres_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCentres]
    ADD CONSTRAINT [DF_AwardingOrganizationCentres_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_AwardingOrganisationCertificates_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCertificates]
    ADD CONSTRAINT [DF_AwardingOrganisationCertificates_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_AwardingOrganizations_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationDetails]
    ADD CONSTRAINT [DF_AwardingOrganizations_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_AwardingOrganizations_LastModifiedDate_1]...';


GO
ALTER TABLE [dbo].[AwardingOrganisations]
    ADD CONSTRAINT [DF_AwardingOrganizations_LastModifiedDate_1] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_Centers_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[Centres]
    ADD CONSTRAINT [DF_Centers_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_EDIFileInformation_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[EDIFileInformations]
    ADD CONSTRAINT [DF_EDIFileInformation_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_EDIFileNotConnectedInformation_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[EDIFileNotConnectedInformations]
    ADD CONSTRAINT [DF_EDIFileNotConnectedInformation_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF__EDIMessages__Id__22401542]...';


GO
ALTER TABLE [dbo].[EDIMessages]
    ADD CONSTRAINT [DF__EDIMessages__Id__22401542] DEFAULT (newid()) FOR [Id];


GO
PRINT N'Creating [dbo].[DF_ErrorLogs_LogType]...';


GO
ALTER TABLE [dbo].[ErrorLogs]
    ADD CONSTRAINT [DF_ErrorLogs_LogType] DEFAULT ((1)) FOR [LogType];


GO
PRINT N'Creating [dbo].[DF_ErrorLogs_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[ErrorLogs]
    ADD CONSTRAINT [DF_ErrorLogs_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_InformationLogs_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[InformationLogs]
    ADD CONSTRAINT [DF_InformationLogs_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[DF_InformationLogs_IsVisibleToAll]...';


GO
ALTER TABLE [dbo].[InformationLogs]
    ADD CONSTRAINT [DF_InformationLogs_IsVisibleToAll] DEFAULT ((0)) FOR [IsVisibleToAll];


GO
PRINT N'Creating unnamed constraint on [dbo].[Pathway]...';


GO
ALTER TABLE [dbo].[Pathway]
    ADD DEFAULT ((0)) FOR [Equals_Indicator_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Pathway]...';


GO
ALTER TABLE [dbo].[Pathway]
    ADD DEFAULT ((0)) FOR [Mandatory_In_Group_Flag];


GO
PRINT N'Creating [dbo].[DF_PollingFrequency_Frequency]...';


GO
ALTER TABLE [dbo].[PollingFrequency]
    ADD CONSTRAINT [DF_PollingFrequency_Frequency] DEFAULT ((30)) FOR [Frequency];


GO
PRINT N'Creating unnamed constraint on [dbo].[QEAAssessmentMaterial]...';


GO
ALTER TABLE [dbo].[QEAAssessmentMaterial]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QEAMaxMarkGradeBoundary]...';


GO
ALTER TABLE [dbo].[QEAMaxMarkGradeBoundary]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QEAssessmentMaterial]...';


GO
ALTER TABLE [dbo].[QEAssessmentMaterial]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QEAvailability]...';


GO
ALTER TABLE [dbo].[QEAvailability]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QEAvailabilityKeyEvent]...';


GO
ALTER TABLE [dbo].[QEAvailabilityKeyEvent]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QEAvailabilityKeyEventFee]...';


GO
ALTER TABLE [dbo].[QEAvailabilityKeyEventFee]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QEAvailabilityMaximumMark]...';


GO
ALTER TABLE [dbo].[QEAvailabilityMaximumMark]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QEFeeCategory]...';


GO
ALTER TABLE [dbo].[QEFeeCategory]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QEGradePerformancePoints]...';


GO
ALTER TABLE [dbo].[QEGradePerformancePoints]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QELearnerIdentifier]...';


GO
ALTER TABLE [dbo].[QELearnerIdentifier]
    ADD DEFAULT ((0)) FOR [Learner_Id_Mandatory_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QELearnerIdentifier]...';


GO
ALTER TABLE [dbo].[QELearnerIdentifier]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QEObjectiveStatement]...';


GO
ALTER TABLE [dbo].[QEObjectiveStatement]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QEObjectiveStatementHierarchy]...';


GO
ALTER TABLE [dbo].[QEObjectiveStatementHierarchy]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QEPreference]...';


GO
ALTER TABLE [dbo].[QEPreference]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QERelationship]...';


GO
ALTER TABLE [dbo].[QERelationship]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QESectorSubjectArea]...';


GO
ALTER TABLE [dbo].[QESectorSubjectArea]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QualificationElement]...';


GO
ALTER TABLE [dbo].[QualificationElement]
    ADD DEFAULT ((0)) FOR [First_Language_Required_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QualificationElement]...';


GO
ALTER TABLE [dbo].[QualificationElement]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QualificationElementAgeRange]...';


GO
ALTER TABLE [dbo].[QualificationElementAgeRange]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QualificationElementFramework]...';


GO
ALTER TABLE [dbo].[QualificationElementFramework]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QualificationElementGrade]...';


GO
ALTER TABLE [dbo].[QualificationElementGrade]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QualificationFramework]...';


GO
ALTER TABLE [dbo].[QualificationFramework]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[QualificationFrameworkHierarchy]...';


GO
ALTER TABLE [dbo].[QualificationFrameworkHierarchy]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Scheme]...';


GO
ALTER TABLE [dbo].[Scheme]
    ADD DEFAULT ((0)) FOR [Series_Based_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Scheme]...';


GO
ALTER TABLE [dbo].[Scheme]
    ADD DEFAULT ((0)) FOR [Date_Of_Birth_Reqd_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[Scheme]...';


GO
ALTER TABLE [dbo].[Scheme]
    ADD DEFAULT ((0)) FOR [Legal_Sex_Required_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[SectorSubjectArea]...';


GO
ALTER TABLE [dbo].[SectorSubjectArea]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating unnamed constraint on [dbo].[SectorSubjectAreaHierarchy]...';


GO
ALTER TABLE [dbo].[SectorSubjectAreaHierarchy]
    ADD DEFAULT ((0)) FOR [Record_Delete_Flag];


GO
PRINT N'Creating [dbo].[FK_A2CRPCRequests_AwardingOrganisationCentres]...';


GO
ALTER TABLE [dbo].[A2CRequests]
    ADD CONSTRAINT [FK_A2CRPCRequests_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_A2CSendRequests_AwardingOrganisationCentres]...';


GO
ALTER TABLE [dbo].[A2CSendRequests]
    ADD CONSTRAINT [FK_A2CSendRequests_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_A2CSentQueues_AwardingOrganisationCentres]...';


GO
ALTER TABLE [dbo].[A2CSentQueues]
    ADD CONSTRAINT [FK_A2CSentQueues_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionMessages_A2CTransactions]...';


GO
ALTER TABLE [dbo].[A2CTransactionMessages]
    ADD CONSTRAINT [FK_A2CTransactionMessages_A2CTransactions] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId]) REFERENCES [dbo].[A2CTransactions] ([AwardingOrganisationCentreId], [A2CTransactionId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionRequests_A2CTransactions]...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests]
    ADD CONSTRAINT [FK_A2CTransactionRequests_A2CTransactions] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId]) REFERENCES [dbo].[A2CTransactions] ([AwardingOrganisationCentreId], [A2CTransactionId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionResponseEnvelopes]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs]
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionResponseEnvelopes] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId], [A2CTransactionResponseId], [A2CTransactionResponseEnvelopeId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopes] ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId], [A2CTransactionResponseId], [A2CTransactionResponseEnvelopeId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionMasters]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages]
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionMasters] FOREIGN KEY ([A2CTransactionMasterId]) REFERENCES [dbo].[A2CTransactionMasters] ([A2CTransactionMasterId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionResponseEnvelopes]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages]
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionResponseEnvelopes] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId], [A2CTransactionResponseId], [A2CTransactionResponseEnvelopeId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopes] ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId], [A2CTransactionResponseId], [A2CTransactionResponseEnvelopeId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopes_A2CTransactionResponses]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes]
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopes_A2CTransactionResponses] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId], [A2CTransactionResponseId]) REFERENCES [dbo].[A2CTransactionResponses] ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId], [A2CTransactionResponseId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeSignalErrors_A2CTransactionResponseEnvelopeSignals]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignalErrors]
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignalErrors_A2CTransactionResponseEnvelopeSignals] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId], [A2CTransactionResponseId], [A2CTransactionResponseEnvelopeId], [A2CTransactionResponseEnvelopeSignalId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopeSignals] ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId], [A2CTransactionResponseId], [A2CTransactionResponseEnvelopeId], [A2CTransactionResponseEnvelopeSignalId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeSignals_A2CTransactionResponseEnvelopes]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals]
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignals_A2CTransactionResponseEnvelopes] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId], [A2CTransactionResponseId], [A2CTransactionResponseEnvelopeId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopes] ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId], [A2CTransactionResponseId], [A2CTransactionResponseEnvelopeId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeSignals_SignalResponseMasters]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals]
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignals_SignalResponseMasters] FOREIGN KEY ([SignalResponseMasterId]) REFERENCES [dbo].[SignalResponseMasters] ([SignalResponseMasterId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseExceptions_A2CTransactionResponses]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseErrors]
    ADD CONSTRAINT [FK_A2CTransactionResponseExceptions_A2CTransactionResponses] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId], [A2CTransactionResponseId]) REFERENCES [dbo].[A2CTransactionResponses] ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId], [A2CTransactionResponseId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponses_A2CTransactionRequests]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponses]
    ADD CONSTRAINT [FK_A2CTransactionResponses_A2CTransactionRequests] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId]) REFERENCES [dbo].[A2CTransactionRequests] ([AwardingOrganisationCentreId], [A2CTransactionId], [A2CTransactionRequestId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactions_AwardingOrganizationCentres]...';


GO
ALTER TABLE [dbo].[A2CTransactions]
    ADD CONSTRAINT [FK_A2CTransactions_AwardingOrganizationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_A2CMessages_AwardingOrganizations]...';


GO
ALTER TABLE [dbo].[A2CXmlMessages]
    ADD CONSTRAINT [FK_A2CMessages_AwardingOrganizations] FOREIGN KEY ([AwardingOrganisationDetailId]) REFERENCES [dbo].[AwardingOrganisationDetails] ([AwardingOrganisationDetailId]);


GO
PRINT N'Creating [dbo].[FK_A2CMessages_Centres]...';


GO
ALTER TABLE [dbo].[A2CXmlMessages]
    ADD CONSTRAINT [FK_A2CMessages_Centres] FOREIGN KEY ([A2CSchoolId], [CentreId]) REFERENCES [dbo].[Centres] ([A2CSchoolId], [CentreId]);


GO
PRINT N'Creating [dbo].[FK_AOQEPreference_QEPreferenceId]...';


GO
ALTER TABLE [dbo].[AOQEPreference]
    ADD CONSTRAINT [FK_AOQEPreference_QEPreferenceId] FOREIGN KEY ([QEPreferenceId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QEPreference] ([QEPreferenceId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_AOQEPreference_QualificationElementId]...';


GO
ALTER TABLE [dbo].[AOQEPreference]
    ADD CONSTRAINT [FK_AOQEPreference_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Membership]...';


GO
ALTER TABLE [dbo].[aspnet_Membership]
    ADD FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Membership]...';


GO
ALTER TABLE [dbo].[aspnet_Membership]
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Paths]...';


GO
ALTER TABLE [dbo].[aspnet_Paths]
    ADD FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_PersonalizationAllUsers]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationAllUsers]
    ADD FOREIGN KEY ([PathId]) REFERENCES [dbo].[aspnet_Paths] ([PathId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_PersonalizationPerUser]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser]
    ADD FOREIGN KEY ([PathId]) REFERENCES [dbo].[aspnet_Paths] ([PathId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_PersonalizationPerUser]...';


GO
ALTER TABLE [dbo].[aspnet_PersonalizationPerUser]
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Profile]...';


GO
ALTER TABLE [dbo].[aspnet_Profile]
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Roles]...';


GO
ALTER TABLE [dbo].[aspnet_Roles]
    ADD FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_Users]...';


GO
ALTER TABLE [dbo].[aspnet_Users]
    ADD FOREIGN KEY ([ApplicationId]) REFERENCES [dbo].[aspnet_Applications] ([ApplicationId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_UsersInRoles]...';


GO
ALTER TABLE [dbo].[aspnet_UsersInRoles]
    ADD FOREIGN KEY ([RoleId]) REFERENCES [dbo].[aspnet_Roles] ([RoleId]);


GO
PRINT N'Creating unnamed constraint on [dbo].[aspnet_UsersInRoles]...';


GO
ALTER TABLE [dbo].[aspnet_UsersInRoles]
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_Assessable_QualificationElementId]...';


GO
ALTER TABLE [dbo].[Assessable]
    ADD CONSTRAINT [FK_Assessable_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_Award_QualificationElementId]...';


GO
ALTER TABLE [dbo].[Award]
    ADD CONSTRAINT [FK_Award_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_AwardingOrganizationAOAssignedCentres_AwardingOrganizations]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationAOAssignedCentres]
    ADD CONSTRAINT [FK_AwardingOrganizationAOAssignedCentres_AwardingOrganizations] FOREIGN KEY ([AwardingOrganisationDetailId]) REFERENCES [dbo].[AwardingOrganisationDetails] ([AwardingOrganisationDetailId]);


GO
PRINT N'Creating [dbo].[FK_AwardingOrganizationAOAssignedCentres_Centres]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationAOAssignedCentres]
    ADD CONSTRAINT [FK_AwardingOrganizationAOAssignedCentres_Centres] FOREIGN KEY ([A2CSchoolId], [CentreId]) REFERENCES [dbo].[Centres] ([A2CSchoolId], [CentreId]);


GO
PRINT N'Creating [dbo].[FK_AwardingOrganizationCentreCertificates_AwardingOrganizationCentres]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCentreCertificates]
    ADD CONSTRAINT [FK_AwardingOrganizationCentreCertificates_AwardingOrganizationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_AwardingOrganizationCentreCertificates_AwardingOrganizationCertificates]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCentreCertificates]
    ADD CONSTRAINT [FK_AwardingOrganizationCentreCertificates_AwardingOrganizationCertificates] FOREIGN KEY ([AwardingOrganisationCertificateId]) REFERENCES [dbo].[AwardingOrganisationCertificates] ([AwardingOrganisationCertificateId]);


GO
PRINT N'Creating [dbo].[FK_AOCenters_AwardingOrganizations]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCentres]
    ADD CONSTRAINT [FK_AOCenters_AwardingOrganizations] FOREIGN KEY ([AwardingOrganisationDetailId]) REFERENCES [dbo].[AwardingOrganisationDetails] ([AwardingOrganisationDetailId]);


GO
PRINT N'Creating [dbo].[FK_AwardingOrganizationCentres_Centres]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCentres]
    ADD CONSTRAINT [FK_AwardingOrganizationCentres_Centres] FOREIGN KEY ([A2CSchoolId], [CentreId]) REFERENCES [dbo].[Centres] ([A2CSchoolId], [CentreId]);


GO
PRINT N'Creating [dbo].[FK_AwardingOrganizationCertificates_A2CSchools]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCertificates]
    ADD CONSTRAINT [FK_AwardingOrganizationCertificates_A2CSchools] FOREIGN KEY ([A2CSchoolId]) REFERENCES [dbo].[A2CSchools] ([A2CSchoolId]);


GO
PRINT N'Creating [dbo].[FK_AwardingOrganizationCertificates_AwardingOrganizations]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCertificates]
    ADD CONSTRAINT [FK_AwardingOrganizationCertificates_AwardingOrganizations] FOREIGN KEY ([AwardingOrganisationDetailId]) REFERENCES [dbo].[AwardingOrganisationDetails] ([AwardingOrganisationDetailId]);


GO
PRINT N'Creating [dbo].[FK_AwardingOrganizationDetails_AwardingOrganizations]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationDetails]
    ADD CONSTRAINT [FK_AwardingOrganizationDetails_AwardingOrganizations] FOREIGN KEY ([AwardingOrganisationId]) REFERENCES [dbo].[AwardingOrganisations] ([AwardingOrganisationId]);


GO
PRINT N'Creating [dbo].[FK_Centres_A2CSchools]...';


GO
ALTER TABLE [dbo].[Centres]
    ADD CONSTRAINT [FK_Centres_A2CSchools] FOREIGN KEY ([A2CSchoolId]) REFERENCES [dbo].[A2CSchools] ([A2CSchoolId]);


GO
PRINT N'Creating [dbo].[FK_EDIMessages_AwardingOrganizations]...';


GO
ALTER TABLE [dbo].[EDIMessages]
    ADD CONSTRAINT [FK_EDIMessages_AwardingOrganizations] FOREIGN KEY ([AOId]) REFERENCES [dbo].[AwardingOrganisationDetails] ([AwardingOrganisationDetailId]);


GO
PRINT N'Creating [dbo].[FK_EDIMessages_AwardingOrganizations1]...';


GO
ALTER TABLE [dbo].[EDIMessages]
    ADD CONSTRAINT [FK_EDIMessages_AwardingOrganizations1] FOREIGN KEY ([AOId]) REFERENCES [dbo].[AwardingOrganisationDetails] ([AwardingOrganisationDetailId]);


GO
PRINT N'Creating [dbo].[FK_EDIMessages_Centres]...';


GO
ALTER TABLE [dbo].[EDIMessages]
    ADD CONSTRAINT [FK_EDIMessages_Centres] FOREIGN KEY ([A2CSchoolId], [CentreId]) REFERENCES [dbo].[Centres] ([A2CSchoolId], [CentreId]);


GO
PRINT N'Creating [dbo].[FK_ErrorLogs_A2CSchools]...';


GO
ALTER TABLE [dbo].[ErrorLogs]
    ADD CONSTRAINT [FK_ErrorLogs_A2CSchools] FOREIGN KEY ([A2CSchoolId]) REFERENCES [dbo].[A2CSchools] ([A2CSchoolId]);


GO
PRINT N'Creating [dbo].[FK_ErrorLogs_AwardingOrganisationCentres]...';


GO
ALTER TABLE [dbo].[ErrorLogs]
    ADD CONSTRAINT [FK_ErrorLogs_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_LearningUnit_QualificationElementId]...';


GO
ALTER TABLE [dbo].[LearningUnit]
    ADD CONSTRAINT [FK_LearningUnit_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_Pathway_QualificationElementId]...';


GO
ALTER TABLE [dbo].[Pathway]
    ADD CONSTRAINT [FK_Pathway_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_PollingFrequency_AwardingOrganisations]...';


GO
ALTER TABLE [dbo].[PollingFrequency]
    ADD CONSTRAINT [FK_PollingFrequency_AwardingOrganisations] FOREIGN KEY ([AwardingOrganisationId]) REFERENCES [dbo].[AwardingOrganisations] ([AwardingOrganisationId]);


GO
PRINT N'Creating [dbo].[FK_QEAAssessmentMaterial_QEAssessmentMaterialId]...';


GO
ALTER TABLE [dbo].[QEAAssessmentMaterial]
    ADD CONSTRAINT [FK_QEAAssessmentMaterial_QEAssessmentMaterialId] FOREIGN KEY ([QEAssessmentMaterialId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QEAssessmentMaterial] ([QEAssessmentMaterialId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEAAssessmentMaterial_QualificationElementId]...';


GO
ALTER TABLE [dbo].[QEAAssessmentMaterial]
    ADD CONSTRAINT [FK_QEAAssessmentMaterial_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEAMaxMarkGradeBoundary_QEAvailabilityMaximumMarkId]...';


GO
ALTER TABLE [dbo].[QEAMaxMarkGradeBoundary]
    ADD CONSTRAINT [FK_QEAMaxMarkGradeBoundary_QEAvailabilityMaximumMarkId] FOREIGN KEY ([QEAvailabilityMaximumMarkId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QEAvailabilityMaximumMark] ([QEAvailabilityMaximumMarkId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEAssessmentMaterial_AwardingOrganisationCentre]...';


GO
ALTER TABLE [dbo].[QEAssessmentMaterial]
    ADD CONSTRAINT [FK_QEAssessmentMaterial_AwardingOrganisationCentre] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEAvailability_QualificationElementId]...';


GO
ALTER TABLE [dbo].[QEAvailability]
    ADD CONSTRAINT [FK_QEAvailability_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEAvailabilityKeyEvent_QEAvailabilityId]...';


GO
ALTER TABLE [dbo].[QEAvailabilityKeyEvent]
    ADD CONSTRAINT [FK_QEAvailabilityKeyEvent_QEAvailabilityId] FOREIGN KEY ([QEAvailabilityId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QEAvailability] ([QEAvailabilityId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEAvailabilityKeyEventFee_QEAvailabilityKeyEventId]...';


GO
ALTER TABLE [dbo].[QEAvailabilityKeyEventFee]
    ADD CONSTRAINT [FK_QEAvailabilityKeyEventFee_QEAvailabilityKeyEventId] FOREIGN KEY ([QEAvailabilityKeyEventId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QEAvailabilityKeyEvent] ([QEAvailabilityKeyEventId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEAvailabilityMaximumMark_QualificationElementId]...';


GO
ALTER TABLE [dbo].[QEAvailabilityMaximumMark]
    ADD CONSTRAINT [FK_QEAvailabilityMaximumMark_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEFeeCategory_AwardingOrganisationCentre]...';


GO
ALTER TABLE [dbo].[QEFeeCategory]
    ADD CONSTRAINT [FK_QEFeeCategory_AwardingOrganisationCentre] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEGradePerformancePoints_QualificationElementGradeId]...';


GO
ALTER TABLE [dbo].[QEGradePerformancePoints]
    ADD CONSTRAINT [FK_QEGradePerformancePoints_QualificationElementGradeId] FOREIGN KEY ([QualificationElementGradeId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElementGrade] ([QualificationElementGradeId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEGradePerformancePoints_QualificationElementId]...';


GO
ALTER TABLE [dbo].[QEGradePerformancePoints]
    ADD CONSTRAINT [FK_QEGradePerformancePoints_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QELearnerIdentifier_QualificationElementId]...';


GO
ALTER TABLE [dbo].[QELearnerIdentifier]
    ADD CONSTRAINT [FK_QELearnerIdentifier_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEObjectiveStatement_QualificationElementId]...';


GO
ALTER TABLE [dbo].[QEObjectiveStatement]
    ADD CONSTRAINT [FK_QEObjectiveStatement_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEObjectiveStatementHierarchy_QEObjectiveStatementId_First]...';


GO
ALTER TABLE [dbo].[QEObjectiveStatementHierarchy]
    ADD CONSTRAINT [FK_QEObjectiveStatementHierarchy_QEObjectiveStatementId_First] FOREIGN KEY ([QEObjectiveStatementId_First], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QEObjectiveStatement] ([QEObjectiveStatementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEObjectiveStatementHierarchy_QEObjectiveStatementId_Second]...';


GO
ALTER TABLE [dbo].[QEObjectiveStatementHierarchy]
    ADD CONSTRAINT [FK_QEObjectiveStatementHierarchy_QEObjectiveStatementId_Second] FOREIGN KEY ([QEObjectiveStatementId_Second], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QEObjectiveStatement] ([QEObjectiveStatementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEObjectiveStatementHierarchy_QualificationElementId_First]...';


GO
ALTER TABLE [dbo].[QEObjectiveStatementHierarchy]
    ADD CONSTRAINT [FK_QEObjectiveStatementHierarchy_QualificationElementId_First] FOREIGN KEY ([QualificationElementId_First], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEObjectiveStatementHierarchy_QualificationElementId_Second]...';


GO
ALTER TABLE [dbo].[QEObjectiveStatementHierarchy]
    ADD CONSTRAINT [FK_QEObjectiveStatementHierarchy_QualificationElementId_Second] FOREIGN KEY ([QualificationElementId_Second], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QEPreference_AwardingOrganisationCentre]...';


GO
ALTER TABLE [dbo].[QEPreference]
    ADD CONSTRAINT [FK_QEPreference_AwardingOrganisationCentre] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QERelationship_QualificationElementId]...';


GO
ALTER TABLE [dbo].[QERelationship]
    ADD CONSTRAINT [FK_QERelationship_QualificationElementId] FOREIGN KEY ([QualificationElementId_Parent], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QERelationship_QualificationElementId_Child]...';


GO
ALTER TABLE [dbo].[QERelationship]
    ADD CONSTRAINT [FK_QERelationship_QualificationElementId_Child] FOREIGN KEY ([QualificationElementId_Child], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QESectorSubjectArea_QualificationElementId]...';


GO
ALTER TABLE [dbo].[QESectorSubjectArea]
    ADD CONSTRAINT [FK_QESectorSubjectArea_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QESectorSubjectArea_SectorSubjectAreaId]...';


GO
ALTER TABLE [dbo].[QESectorSubjectArea]
    ADD CONSTRAINT [FK_QESectorSubjectArea_SectorSubjectAreaId] FOREIGN KEY ([SectorSubjectAreaId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[SectorSubjectArea] ([SectorSubjectAreaId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QualificationElement_AwardingOrganisationCentres]...';


GO
ALTER TABLE [dbo].[QualificationElement]
    ADD CONSTRAINT [FK_QualificationElement_AwardingOrganisationCentres] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QualificationElementAgeRange_QualificationElementId]...';


GO
ALTER TABLE [dbo].[QualificationElementAgeRange]
    ADD CONSTRAINT [FK_QualificationElementAgeRange_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QualificationElementFramework_QualificationElementId]...';


GO
ALTER TABLE [dbo].[QualificationElementFramework]
    ADD CONSTRAINT [FK_QualificationElementFramework_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QualificationElementFramework_QualificationFrameworkId]...';


GO
ALTER TABLE [dbo].[QualificationElementFramework]
    ADD CONSTRAINT [FK_QualificationElementFramework_QualificationFrameworkId] FOREIGN KEY ([QualificationFrameworkId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationFramework] ([QualificationFrameworkId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QualificationElementGrade_QualificationElementId]...';


GO
ALTER TABLE [dbo].[QualificationElementGrade]
    ADD CONSTRAINT [FK_QualificationElementGrade_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QualificationFramework_AwardingOrganisationCentre]...';


GO
ALTER TABLE [dbo].[QualificationFramework]
    ADD CONSTRAINT [FK_QualificationFramework_AwardingOrganisationCentre] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QualificationFrameworkHierarchy_QualificationFrameworkId_Child]...';


GO
ALTER TABLE [dbo].[QualificationFrameworkHierarchy]
    ADD CONSTRAINT [FK_QualificationFrameworkHierarchy_QualificationFrameworkId_Child] FOREIGN KEY ([QualificationFrameworkId_Child], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationFramework] ([QualificationFrameworkId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_QualificationFrameworkHierarchy_QualificationFrameworkId_Parent]...';


GO
ALTER TABLE [dbo].[QualificationFrameworkHierarchy]
    ADD CONSTRAINT [FK_QualificationFrameworkHierarchy_QualificationFrameworkId_Parent] FOREIGN KEY ([QualificationFrameworkId_Parent], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationFramework] ([QualificationFrameworkId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_Scheme_QualificationElementId]...';


GO
ALTER TABLE [dbo].[Scheme]
    ADD CONSTRAINT [FK_Scheme_QualificationElementId] FOREIGN KEY ([QualificationElementId], [AwardingOrganisationCentreId]) REFERENCES [dbo].[QualificationElement] ([QualificationElementId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_SectorSubjectArea_AwardingOrganisationCentre]...';


GO
ALTER TABLE [dbo].[SectorSubjectArea]
    ADD CONSTRAINT [FK_SectorSubjectArea_AwardingOrganisationCentre] FOREIGN KEY ([AwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_SectorSubjectAreaHierarchy_SectorSubjectAreaId_Child]...';


GO
ALTER TABLE [dbo].[SectorSubjectAreaHierarchy]
    ADD CONSTRAINT [FK_SectorSubjectAreaHierarchy_SectorSubjectAreaId_Child] FOREIGN KEY ([SectorSubjectAreaId_Child], [AwardingOrganisationCentreId]) REFERENCES [dbo].[SectorSubjectArea] ([SectorSubjectAreaId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_SectorSubjectAreaHierarchy_SectorSubjectAreaId_Parent]...';


GO
ALTER TABLE [dbo].[SectorSubjectAreaHierarchy]
    ADD CONSTRAINT [FK_SectorSubjectAreaHierarchy_SectorSubjectAreaId_Parent] FOREIGN KEY ([SectorSubjectAreaId_Parent], [AwardingOrganisationCentreId]) REFERENCES [dbo].[SectorSubjectArea] ([SectorSubjectAreaId], [AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_Users_aspnet_Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD CONSTRAINT [FK_Users_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_UsersInRoles_aspnet_Users]...';


GO
ALTER TABLE [dbo].[UsersInRoles]
    ADD CONSTRAINT [FK_UsersInRoles_aspnet_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[aspnet_Users] ([UserId]);


GO
PRINT N'Creating [dbo].[FK_UsersInRoles_Roles]...';


GO
ALTER TABLE [dbo].[UsersInRoles]
    ADD CONSTRAINT [FK_UsersInRoles_Roles] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Roles] ([RoleId]);


GO
PRINT N'Creating [dbo].[FN_A2C_GETDATETIME]...';


GO

CREATE FUNCTION FN_A2C_GETDATETIME
(
	@STRINGDATE NVARCHAR(100)
)
RETURNS DATETIME

AS BEGIN

	IF @STRINGDATE IS NULL
		RETURN NULL

	DECLARE @RETURNDATE DATETIME

	SET @STRINGDATE = LTRIM(RTRIM(@STRINGDATE))
		
	IF @STRINGDATE=''
		OR @STRINGDATE='0001-01-01' 
		OR @STRINGDATE='0001-01-01 00:00:00'
		OR @STRINGDATE='0001-01-01T00:00:00+00:00'
		OR @STRINGDATE='0001-01-01T00:00:00Z'
		OR @STRINGDATE='0001-01-01T00:00:01Z'
		RETURN NULL

	SET @RETURNDATE = CONVERT(datetimeoffset, @STRINGDATE, 127)

	--IF ISDATE(@STRINGDATE) = 1
	--	SET @RETURNDATE = CONVERT(DATETIME, @STRINGDATE, 127)		
	--ELSE		
	--	SET @RETURNDATE = NULL

	RETURN @RETURNDATE

END
GO
PRINT N'Creating [dbo].[FN_A2C_GETFLAG]...';


GO

CREATE FUNCTION FN_A2C_GETFLAG
(
	@STRINGVALUE NVARCHAR(100)
)
RETURNS INT

AS BEGIN

	DECLARE @RETURNVALUE INT

	SET @STRINGVALUE = LTRIM(RTRIM(@STRINGVALUE))

	SET @RETURNVALUE = CASE WHEN @STRINGVALUE = 'Y' THEN 1 ELSE 0 END

	RETURN @RETURNVALUE

END
GO
PRINT N'Creating [dbo].[vw_aspnet_Applications]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_Applications]
  AS SELECT [dbo].[aspnet_Applications].[ApplicationName], [dbo].[aspnet_Applications].[LoweredApplicationName], [dbo].[aspnet_Applications].[ApplicationId], [dbo].[aspnet_Applications].[Description]
  FROM [dbo].[aspnet_Applications]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_MembershipUsers]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_MembershipUsers]
  AS SELECT [dbo].[aspnet_Membership].[UserId],
            [dbo].[aspnet_Membership].[PasswordFormat],
            [dbo].[aspnet_Membership].[MobilePIN],
            [dbo].[aspnet_Membership].[Email],
            [dbo].[aspnet_Membership].[LoweredEmail],
            [dbo].[aspnet_Membership].[PasswordQuestion],
            [dbo].[aspnet_Membership].[PasswordAnswer],
            [dbo].[aspnet_Membership].[IsApproved],
            [dbo].[aspnet_Membership].[IsLockedOut],
            [dbo].[aspnet_Membership].[CreateDate],
            [dbo].[aspnet_Membership].[LastLoginDate],
            [dbo].[aspnet_Membership].[LastPasswordChangedDate],
            [dbo].[aspnet_Membership].[LastLockoutDate],
            [dbo].[aspnet_Membership].[FailedPasswordAttemptCount],
            [dbo].[aspnet_Membership].[FailedPasswordAttemptWindowStart],
            [dbo].[aspnet_Membership].[FailedPasswordAnswerAttemptCount],
            [dbo].[aspnet_Membership].[FailedPasswordAnswerAttemptWindowStart],
            [dbo].[aspnet_Membership].[Comment],
            [dbo].[aspnet_Users].[ApplicationId],
            [dbo].[aspnet_Users].[UserName],
            [dbo].[aspnet_Users].[MobileAlias],
            [dbo].[aspnet_Users].[IsAnonymous],
            [dbo].[aspnet_Users].[LastActivityDate]
  FROM [dbo].[aspnet_Membership] INNER JOIN [dbo].[aspnet_Users]
      ON [dbo].[aspnet_Membership].[UserId] = [dbo].[aspnet_Users].[UserId]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_Profiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_Profiles]
  AS SELECT [dbo].[aspnet_Profile].[UserId], [dbo].[aspnet_Profile].[LastUpdatedDate],
      [DataSize]=  DATALENGTH([dbo].[aspnet_Profile].[PropertyNames])
                 + DATALENGTH([dbo].[aspnet_Profile].[PropertyValuesString])
                 + DATALENGTH([dbo].[aspnet_Profile].[PropertyValuesBinary])
  FROM [dbo].[aspnet_Profile]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_Roles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_Roles]
  AS SELECT [dbo].[aspnet_Roles].[ApplicationId], [dbo].[aspnet_Roles].[RoleId], [dbo].[aspnet_Roles].[RoleName], [dbo].[aspnet_Roles].[LoweredRoleName], [dbo].[aspnet_Roles].[Description]
  FROM [dbo].[aspnet_Roles]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_Users]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_Users]
  AS SELECT [dbo].[aspnet_Users].[ApplicationId], [dbo].[aspnet_Users].[UserId], [dbo].[aspnet_Users].[UserName], [dbo].[aspnet_Users].[LoweredUserName], [dbo].[aspnet_Users].[MobileAlias], [dbo].[aspnet_Users].[IsAnonymous], [dbo].[aspnet_Users].[LastActivityDate]
  FROM [dbo].[aspnet_Users]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_UsersInRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_UsersInRoles]
  AS SELECT [dbo].[aspnet_UsersInRoles].[UserId], [dbo].[aspnet_UsersInRoles].[RoleId]
  FROM [dbo].[aspnet_UsersInRoles]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_WebPartState_Paths]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_WebPartState_Paths]
  AS SELECT [dbo].[aspnet_Paths].[ApplicationId], [dbo].[aspnet_Paths].[PathId], [dbo].[aspnet_Paths].[Path], [dbo].[aspnet_Paths].[LoweredPath]
  FROM [dbo].[aspnet_Paths]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_WebPartState_Shared]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_WebPartState_Shared]
  AS SELECT [dbo].[aspnet_PersonalizationAllUsers].[PathId], [DataSize]=DATALENGTH([dbo].[aspnet_PersonalizationAllUsers].[PageSettings]), [dbo].[aspnet_PersonalizationAllUsers].[LastUpdatedDate]
  FROM [dbo].[aspnet_PersonalizationAllUsers]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[vw_aspnet_WebPartState_User]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

  CREATE VIEW [dbo].[vw_aspnet_WebPartState_User]
  AS SELECT [dbo].[aspnet_PersonalizationPerUser].[PathId], [dbo].[aspnet_PersonalizationPerUser].[UserId], [DataSize]=DATALENGTH([dbo].[aspnet_PersonalizationPerUser].[PageSettings]), [dbo].[aspnet_PersonalizationPerUser].[LastUpdatedDate]
  FROM [dbo].[aspnet_PersonalizationPerUser]
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_AnyDataInTables]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].aspnet_AnyDataInTables
    @TablesToCheck int
AS
BEGIN
    -- Check Membership table if (@TablesToCheck & 1) is set
    IF ((@TablesToCheck & 1) <> 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Membership))
        BEGIN
            SELECT N'aspnet_Membership'
            RETURN
        END
    END

    -- Check aspnet_Roles table if (@TablesToCheck & 2) is set
    IF ((@TablesToCheck & 2) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Roles') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 RoleId FROM dbo.aspnet_Roles))
        BEGIN
            SELECT N'aspnet_Roles'
            RETURN
        END
    END

    -- Check aspnet_Profile table if (@TablesToCheck & 4) is set
    IF ((@TablesToCheck & 4) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Profile))
        BEGIN
            SELECT N'aspnet_Profile'
            RETURN
        END
    END

    -- Check aspnet_PersonalizationPerUser table if (@TablesToCheck & 8) is set
    IF ((@TablesToCheck & 8) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_PersonalizationPerUser))
        BEGIN
            SELECT N'aspnet_PersonalizationPerUser'
            RETURN
        END
    END

    -- Check aspnet_PersonalizationPerUser table if (@TablesToCheck & 16) is set
    IF ((@TablesToCheck & 16) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'aspnet_WebEvent_LogEvent') AND (type = 'P'))) )
    BEGIN
        IF (EXISTS(SELECT TOP 1 * FROM dbo.aspnet_WebEvent_Events))
        BEGIN
            SELECT N'aspnet_WebEvent_Events'
            RETURN
        END
    END

    -- Check aspnet_Users table if (@TablesToCheck & 1,2,4 & 8) are all set
    IF ((@TablesToCheck & 1) <> 0 AND
        (@TablesToCheck & 2) <> 0 AND
        (@TablesToCheck & 4) <> 0 AND
        (@TablesToCheck & 8) <> 0 AND
        (@TablesToCheck & 32) <> 0 AND
        (@TablesToCheck & 128) <> 0 AND
        (@TablesToCheck & 256) <> 0 AND
        (@TablesToCheck & 512) <> 0 AND
        (@TablesToCheck & 1024) <> 0)
    BEGIN
        IF (EXISTS(SELECT TOP 1 UserId FROM dbo.aspnet_Users))
        BEGIN
            SELECT N'aspnet_Users'
            RETURN
        END
        IF (EXISTS(SELECT TOP 1 ApplicationId FROM dbo.aspnet_Applications))
        BEGIN
            SELECT N'aspnet_Applications'
            RETURN
        END
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Applications_CreateApplication]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_Applications_CreateApplication
    @ApplicationName      nvarchar(256),
    @ApplicationId        uniqueidentifier OUTPUT
AS
BEGIN
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName

    IF(@ApplicationId IS NULL)
    BEGIN
        DECLARE @TranStarted   bit
        SET @TranStarted = 0

        IF( @@TRANCOUNT = 0 )
        BEGIN
	        BEGIN TRANSACTION
	        SET @TranStarted = 1
        END
        ELSE
    	    SET @TranStarted = 0

        SELECT  @ApplicationId = ApplicationId
        FROM dbo.aspnet_Applications WITH (UPDLOCK, HOLDLOCK)
        WHERE LOWER(@ApplicationName) = LoweredApplicationName

        IF(@ApplicationId IS NULL)
        BEGIN
            SELECT  @ApplicationId = NEWID()
            INSERT  dbo.aspnet_Applications (ApplicationId, ApplicationName, LoweredApplicationName)
            VALUES  (@ApplicationId, @ApplicationName, LOWER(@ApplicationName))
        END


        IF( @TranStarted = 1 )
        BEGIN
            IF(@@ERROR = 0)
            BEGIN
	        SET @TranStarted = 0
	        COMMIT TRANSACTION
            END
            ELSE
            BEGIN
                SET @TranStarted = 0
                ROLLBACK TRANSACTION
            END
        END
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_CheckSchemaVersion]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_CheckSchemaVersion
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128)
AS
BEGIN
    IF (EXISTS( SELECT  *
                FROM    dbo.aspnet_SchemaVersions
                WHERE   Feature = LOWER( @Feature ) AND
                        CompatibleSchemaVersion = @CompatibleSchemaVersion ))
        RETURN 0

    RETURN 1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_ChangePasswordQuestionAndAnswer
    @ApplicationName       nvarchar(256),
    @UserName              nvarchar(256),
    @NewPasswordQuestion   nvarchar(256),
    @NewPasswordAnswer     nvarchar(128)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Membership m, dbo.aspnet_Users u, dbo.aspnet_Applications a
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId
    IF (@UserId IS NULL)
    BEGIN
        RETURN(1)
    END

    UPDATE dbo.aspnet_Membership
    SET    PasswordQuestion = @NewPasswordQuestion, PasswordAnswer = @NewPasswordAnswer
    WHERE  UserId=@UserId
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_FindUsersByEmail]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_FindUsersByEmail
    @ApplicationName       nvarchar(256),
    @EmailToMatch          nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    IF( @EmailToMatch IS NULL )
        INSERT INTO #PageIndexForUsers (UserId)
            SELECT u.UserId
            FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
            WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND m.Email IS NULL
            ORDER BY m.LoweredEmail
    ELSE
        INSERT INTO #PageIndexForUsers (UserId)
            SELECT u.UserId
            FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
            WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND m.LoweredEmail LIKE LOWER(@EmailToMatch)
            ORDER BY m.LoweredEmail

    SELECT  u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY m.LoweredEmail

    SELECT  @TotalRecords = COUNT(*)
    FROM    #PageIndexForUsers
    RETURN @TotalRecords
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_FindUsersByName]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_FindUsersByName
    @ApplicationName       nvarchar(256),
    @UserNameToMatch       nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
        SELECT u.UserId
        FROM   dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE  u.ApplicationId = @ApplicationId AND m.UserId = u.UserId AND u.LoweredUserName LIKE LOWER(@UserNameToMatch)
        ORDER BY u.UserName


    SELECT  u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY u.UserName

    SELECT  @TotalRecords = COUNT(*)
    FROM    #PageIndexForUsers
    RETURN @TotalRecords
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetAllUsers]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetAllUsers
    @ApplicationName       nvarchar(256),
    @PageIndex             int,
    @PageSize              int
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN 0


    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
    SELECT u.UserId
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u
    WHERE  u.ApplicationId = @ApplicationId AND u.UserId = m.UserId
    ORDER BY u.UserName

    SELECT @TotalRecords = @@ROWCOUNT

    SELECT u.UserName, m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate,
            m.LastLoginDate,
            u.LastActivityDate,
            m.LastPasswordChangedDate,
            u.UserId, m.IsLockedOut,
            m.LastLockoutDate
    FROM   dbo.aspnet_Membership m, dbo.aspnet_Users u, #PageIndexForUsers p
    WHERE  u.UserId = p.UserId AND u.UserId = m.UserId AND
           p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
    ORDER BY u.UserName
    RETURN @TotalRecords
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetNumberOfUsersOnline]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetNumberOfUsersOnline
    @ApplicationName            nvarchar(256),
    @MinutesSinceLastInActive   int,
    @CurrentTimeUtc             datetime
AS
BEGIN
    DECLARE @DateActive datetime
    SELECT  @DateActive = DATEADD(minute,  -(@MinutesSinceLastInActive), @CurrentTimeUtc)

    DECLARE @NumOnline int
    SELECT  @NumOnline = COUNT(*)
    FROM    dbo.aspnet_Users u(NOLOCK),
            dbo.aspnet_Applications a(NOLOCK),
            dbo.aspnet_Membership m(NOLOCK)
    WHERE   u.ApplicationId = a.ApplicationId                  AND
            LastActivityDate > @DateActive                     AND
            a.LoweredApplicationName = LOWER(@ApplicationName) AND
            u.UserId = m.UserId
    RETURN(@NumOnline)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetPassword]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetPassword
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc                 datetime,
    @PasswordAnswer                 nvarchar(128) = NULL
AS
BEGIN
    DECLARE @UserId                                 uniqueidentifier
    DECLARE @PasswordFormat                         int
    DECLARE @Password                               nvarchar(128)
    DECLARE @passAns                                nvarchar(128)
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @Password = m.Password,
            @passAns = m.PasswordAnswer,
            @PasswordFormat = m.PasswordFormat,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            @FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m WITH ( UPDLOCK )
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    IF ( NOT( @PasswordAnswer IS NULL ) )
    BEGIN
        IF( ( @passAns IS NULL ) OR ( LOWER( @passAns ) <> LOWER( @PasswordAnswer ) ) )
        BEGIN
            IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
            END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount >= @MaxInvalidPasswordAttempts )
                BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

            SET @ErrorCode = 3
        END
        ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount > 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

        UPDATE dbo.aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    IF( @ErrorCode = 0 )
        SELECT @Password, @PasswordFormat

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetPasswordWithFormat]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetPasswordWithFormat
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @UpdateLastLoginActivityDate    bit,
    @CurrentTimeUtc                 datetime
AS
BEGIN
    DECLARE @IsLockedOut                        bit
    DECLARE @UserId                             uniqueidentifier
    DECLARE @Password                           nvarchar(128)
    DECLARE @PasswordSalt                       nvarchar(128)
    DECLARE @PasswordFormat                     int
    DECLARE @FailedPasswordAttemptCount         int
    DECLARE @FailedPasswordAnswerAttemptCount   int
    DECLARE @IsApproved                         bit
    DECLARE @LastActivityDate                   datetime
    DECLARE @LastLoginDate                      datetime

    SELECT  @UserId          = NULL

    SELECT  @UserId = u.UserId, @IsLockedOut = m.IsLockedOut, @Password=Password, @PasswordFormat=PasswordFormat,
            @PasswordSalt=PasswordSalt, @FailedPasswordAttemptCount=FailedPasswordAttemptCount,
		    @FailedPasswordAnswerAttemptCount=FailedPasswordAnswerAttemptCount, @IsApproved=IsApproved,
            @LastActivityDate = LastActivityDate, @LastLoginDate = LastLoginDate
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF (@UserId IS NULL)
        RETURN 1

    IF (@IsLockedOut = 1)
        RETURN 99

    SELECT   @Password, @PasswordFormat, @PasswordSalt, @FailedPasswordAttemptCount,
             @FailedPasswordAnswerAttemptCount, @IsApproved, @LastLoginDate, @LastActivityDate

    IF (@UpdateLastLoginActivityDate = 1 AND @IsApproved = 1)
    BEGIN
        UPDATE  dbo.aspnet_Membership
        SET     LastLoginDate = @CurrentTimeUtc
        WHERE   UserId = @UserId

        UPDATE  dbo.aspnet_Users
        SET     LastActivityDate = @CurrentTimeUtc
        WHERE   @UserId = UserId
    END


    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetUserByEmail]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetUserByEmail
    @ApplicationName  nvarchar(256),
    @Email            nvarchar(256)
AS
BEGIN
    IF( @Email IS NULL )
        SELECT  u.UserName
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                u.UserId = m.UserId AND
                m.ApplicationId = a.ApplicationId AND
                m.LoweredEmail IS NULL
    ELSE
        SELECT  u.UserName
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                u.UserId = m.UserId AND
                m.ApplicationId = a.ApplicationId AND
                LOWER(@Email) = m.LoweredEmail

    IF (@@rowcount = 0)
        RETURN(1)
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetUserByName]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetUserByName
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @CurrentTimeUtc       datetime,
    @UpdateLastActivity   bit = 0
AS
BEGIN
    DECLARE @UserId uniqueidentifier

    IF (@UpdateLastActivity = 1)
    BEGIN
        -- select user ID from aspnet_users table
        SELECT TOP 1 @UserId = u.UserId
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE    LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                LOWER(@UserName) = u.LoweredUserName AND u.UserId = m.UserId

        IF (@@ROWCOUNT = 0) -- Username not found
            RETURN -1

        UPDATE   dbo.aspnet_Users
        SET      LastActivityDate = @CurrentTimeUtc
        WHERE    @UserId = UserId

        SELECT m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
                m.CreateDate, m.LastLoginDate, u.LastActivityDate, m.LastPasswordChangedDate,
                u.UserId, m.IsLockedOut, m.LastLockoutDate
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE  @UserId = u.UserId AND u.UserId = m.UserId 
    END
    ELSE
    BEGIN
        SELECT TOP 1 m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
                m.CreateDate, m.LastLoginDate, u.LastActivityDate, m.LastPasswordChangedDate,
                u.UserId, m.IsLockedOut,m.LastLockoutDate
        FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m
        WHERE    LOWER(@ApplicationName) = a.LoweredApplicationName AND
                u.ApplicationId = a.ApplicationId    AND
                LOWER(@UserName) = u.LoweredUserName AND u.UserId = m.UserId

        IF (@@ROWCOUNT = 0) -- Username not found
            RETURN -1
    END

    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_GetUserByUserId]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_GetUserByUserId
    @UserId               uniqueidentifier,
    @CurrentTimeUtc       datetime,
    @UpdateLastActivity   bit = 0
AS
BEGIN
    IF ( @UpdateLastActivity = 1 )
    BEGIN
        UPDATE   dbo.aspnet_Users
        SET      LastActivityDate = @CurrentTimeUtc
        FROM     dbo.aspnet_Users
        WHERE    @UserId = UserId

        IF ( @@ROWCOUNT = 0 ) -- User ID not found
            RETURN -1
    END

    SELECT  m.Email, m.PasswordQuestion, m.Comment, m.IsApproved,
            m.CreateDate, m.LastLoginDate, u.LastActivityDate,
            m.LastPasswordChangedDate, u.UserName, m.IsLockedOut,
            m.LastLockoutDate
    FROM    dbo.aspnet_Users u, dbo.aspnet_Membership m
    WHERE   @UserId = u.UserId AND u.UserId = m.UserId

    IF ( @@ROWCOUNT = 0 ) -- User ID not found
       RETURN -1

    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_ResetPassword]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_ResetPassword
    @ApplicationName             nvarchar(256),
    @UserName                    nvarchar(256),
    @NewPassword                 nvarchar(128),
    @MaxInvalidPasswordAttempts  int,
    @PasswordAttemptWindow       int,
    @PasswordSalt                nvarchar(128),
    @CurrentTimeUtc              datetime,
    @PasswordFormat              int = 0,
    @PasswordAnswer              nvarchar(128) = NULL
AS
BEGIN
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @UserId                                 uniqueidentifier
    SET     @UserId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    SELECT @IsLockedOut = IsLockedOut,
           @LastLockoutDate = LastLockoutDate,
           @FailedPasswordAttemptCount = FailedPasswordAttemptCount,
           @FailedPasswordAttemptWindowStart = FailedPasswordAttemptWindowStart,
           @FailedPasswordAnswerAttemptCount = FailedPasswordAnswerAttemptCount,
           @FailedPasswordAnswerAttemptWindowStart = FailedPasswordAnswerAttemptWindowStart
    FROM dbo.aspnet_Membership WITH ( UPDLOCK )
    WHERE @UserId = UserId

    IF( @IsLockedOut = 1 )
    BEGIN
        SET @ErrorCode = 99
        GOTO Cleanup
    END

    UPDATE dbo.aspnet_Membership
    SET    Password = @NewPassword,
           LastPasswordChangedDate = @CurrentTimeUtc,
           PasswordFormat = @PasswordFormat,
           PasswordSalt = @PasswordSalt
    WHERE  @UserId = UserId AND
           ( ( @PasswordAnswer IS NULL ) OR ( LOWER( PasswordAnswer ) = LOWER( @PasswordAnswer ) ) )

    IF ( @@ROWCOUNT = 0 )
        BEGIN
            IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAnswerAttemptWindowStart ) )
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = 1
            END
            ELSE
            BEGIN
                SET @FailedPasswordAnswerAttemptWindowStart = @CurrentTimeUtc
                SET @FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount + 1
            END

            BEGIN
                IF( @FailedPasswordAnswerAttemptCount >= @MaxInvalidPasswordAttempts )
                BEGIN
                    SET @IsLockedOut = 1
                    SET @LastLockoutDate = @CurrentTimeUtc
                END
            END

            SET @ErrorCode = 3
        END
    ELSE
        BEGIN
            IF( @FailedPasswordAnswerAttemptCount > 0 )
            BEGIN
                SET @FailedPasswordAnswerAttemptCount = 0
                SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            END
        END

    IF( NOT ( @PasswordAnswer IS NULL ) )
    BEGIN
        UPDATE dbo.aspnet_Membership
        SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
            FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
            FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
            FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
            FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
        WHERE @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_SetPassword]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_SetPassword
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @NewPassword      nvarchar(128),
    @PasswordSalt     nvarchar(128),
    @CurrentTimeUtc   datetime,
    @PasswordFormat   int = 0
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF (@UserId IS NULL)
        RETURN(1)

    UPDATE dbo.aspnet_Membership
    SET Password = @NewPassword, PasswordFormat = @PasswordFormat, PasswordSalt = @PasswordSalt,
        LastPasswordChangedDate = @CurrentTimeUtc
    WHERE @UserId = UserId
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_UnlockUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_UnlockUser
    @ApplicationName                         nvarchar(256),
    @UserName                                nvarchar(256)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
        RETURN 1

    UPDATE dbo.aspnet_Membership
    SET IsLockedOut = 0,
        FailedPasswordAttemptCount = 0,
        FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        FailedPasswordAnswerAttemptCount = 0,
        FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        LastLockoutDate = CONVERT( datetime, '17540101', 112 )
    WHERE @UserId = UserId

    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_UpdateUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_UpdateUser
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @Email                nvarchar(256),
    @Comment              ntext,
    @IsApproved           bit,
    @LastLoginDate        datetime,
    @LastActivityDate     datetime,
    @UniqueEmail          int,
    @CurrentTimeUtc       datetime
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId, @ApplicationId = a.ApplicationId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a, dbo.aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF (@UserId IS NULL)
        RETURN(1)

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  dbo.aspnet_Membership WITH (UPDLOCK, HOLDLOCK)
                    WHERE ApplicationId = @ApplicationId  AND @UserId <> UserId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            RETURN(7)
        END
    END

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
	SET @TranStarted = 0

    UPDATE dbo.aspnet_Users WITH (ROWLOCK)
    SET
         LastActivityDate = @LastActivityDate
    WHERE
       @UserId = UserId

    IF( @@ERROR <> 0 )
        GOTO Cleanup

    UPDATE dbo.aspnet_Membership WITH (ROWLOCK)
    SET
         Email            = @Email,
         LoweredEmail     = LOWER(@Email),
         Comment          = @Comment,
         IsApproved       = @IsApproved,
         LastLoginDate    = @LastLoginDate
    WHERE
       @UserId = UserId

    IF( @@ERROR <> 0 )
        GOTO Cleanup

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN -1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Membership_UpdateUserInfo]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_UpdateUserInfo
    @ApplicationName                nvarchar(256),
    @UserName                       nvarchar(256),
    @IsPasswordCorrect              bit,
    @UpdateLastLoginActivityDate    bit,
    @MaxInvalidPasswordAttempts     int,
    @PasswordAttemptWindow          int,
    @CurrentTimeUtc                 datetime,
    @LastLoginDate                  datetime,
    @LastActivityDate               datetime
AS
BEGIN
    DECLARE @UserId                                 uniqueidentifier
    DECLARE @IsApproved                             bit
    DECLARE @IsLockedOut                            bit
    DECLARE @LastLockoutDate                        datetime
    DECLARE @FailedPasswordAttemptCount             int
    DECLARE @FailedPasswordAttemptWindowStart       datetime
    DECLARE @FailedPasswordAnswerAttemptCount       int
    DECLARE @FailedPasswordAnswerAttemptWindowStart datetime

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    SELECT  @UserId = u.UserId,
            @IsApproved = m.IsApproved,
            @IsLockedOut = m.IsLockedOut,
            @LastLockoutDate = m.LastLockoutDate,
            @FailedPasswordAttemptCount = m.FailedPasswordAttemptCount,
            @FailedPasswordAttemptWindowStart = m.FailedPasswordAttemptWindowStart,
            @FailedPasswordAnswerAttemptCount = m.FailedPasswordAnswerAttemptCount,
            @FailedPasswordAnswerAttemptWindowStart = m.FailedPasswordAnswerAttemptWindowStart
    FROM    dbo.aspnet_Applications a, dbo.aspnet_Users u, dbo.aspnet_Membership m WITH ( UPDLOCK )
    WHERE   LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.ApplicationId = a.ApplicationId    AND
            u.UserId = m.UserId AND
            LOWER(@UserName) = u.LoweredUserName

    IF ( @@rowcount = 0 )
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    IF( @IsLockedOut = 1 )
    BEGIN
        GOTO Cleanup
    END

    IF( @IsPasswordCorrect = 0 )
    BEGIN
        IF( @CurrentTimeUtc > DATEADD( minute, @PasswordAttemptWindow, @FailedPasswordAttemptWindowStart ) )
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = 1
        END
        ELSE
        BEGIN
            SET @FailedPasswordAttemptWindowStart = @CurrentTimeUtc
            SET @FailedPasswordAttemptCount = @FailedPasswordAttemptCount + 1
        END

        BEGIN
            IF( @FailedPasswordAttemptCount >= @MaxInvalidPasswordAttempts )
            BEGIN
                SET @IsLockedOut = 1
                SET @LastLockoutDate = @CurrentTimeUtc
            END
        END
    END
    ELSE
    BEGIN
        IF( @FailedPasswordAttemptCount > 0 OR @FailedPasswordAnswerAttemptCount > 0 )
        BEGIN
            SET @FailedPasswordAttemptCount = 0
            SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @FailedPasswordAnswerAttemptCount = 0
            SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )
            SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )
        END
    END

    IF( @UpdateLastLoginActivityDate = 1 )
    BEGIN
        UPDATE  dbo.aspnet_Users
        SET     LastActivityDate = @LastActivityDate
        WHERE   @UserId = UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END

        UPDATE  dbo.aspnet_Membership
        SET     LastLoginDate = @LastLoginDate
        WHERE   UserId = @UserId

        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END


    UPDATE dbo.aspnet_Membership
    SET IsLockedOut = @IsLockedOut, LastLockoutDate = @LastLockoutDate,
        FailedPasswordAttemptCount = @FailedPasswordAttemptCount,
        FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart,
        FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount,
        FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart
    WHERE @UserId = UserId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	SET @TranStarted = 0
	COMMIT TRANSACTION
    END

    RETURN @ErrorCode

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Paths_CreatePath]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Paths_CreatePath
    @ApplicationId UNIQUEIDENTIFIER,
    @Path           NVARCHAR(256),
    @PathId         UNIQUEIDENTIFIER OUTPUT
AS
BEGIN
    BEGIN TRANSACTION
    IF (NOT EXISTS(SELECT * FROM dbo.aspnet_Paths WHERE LoweredPath = LOWER(@Path) AND ApplicationId = @ApplicationId))
    BEGIN
        INSERT dbo.aspnet_Paths (ApplicationId, Path, LoweredPath) VALUES (@ApplicationId, @Path, LOWER(@Path))
    END
    COMMIT TRANSACTION
    SELECT @PathId = PathId FROM dbo.aspnet_Paths WHERE LOWER(@Path) = LoweredPath AND ApplicationId = @ApplicationId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Personalization_GetApplicationId]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Personalization_GetApplicationId (
    @ApplicationName NVARCHAR(256),
    @ApplicationId UNIQUEIDENTIFIER OUT)
AS
BEGIN
    SELECT @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_DeleteAllState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_DeleteAllState (
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @Count int OUT)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        IF (@AllUsersScope = 1)
            DELETE FROM aspnet_PersonalizationAllUsers
            WHERE PathId IN
               (SELECT Paths.PathId
                FROM dbo.aspnet_Paths Paths
                WHERE Paths.ApplicationId = @ApplicationId)
        ELSE
            DELETE FROM aspnet_PersonalizationPerUser
            WHERE PathId IN
               (SELECT Paths.PathId
                FROM dbo.aspnet_Paths Paths
                WHERE Paths.ApplicationId = @ApplicationId)

        SELECT @Count = @@ROWCOUNT
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_FindState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_FindState (
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @PageIndex              INT,
    @PageSize               INT,
    @Path NVARCHAR(256) = NULL,
    @UserName NVARCHAR(256) = NULL,
    @InactiveSinceDate DATETIME = NULL)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        RETURN

    -- Set the page bounds
    DECLARE @PageLowerBound INT
    DECLARE @PageUpperBound INT
    DECLARE @TotalRecords   INT
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table to store the selected results
    CREATE TABLE #PageIndex (
        IndexId int IDENTITY (0, 1) NOT NULL,
        ItemId UNIQUEIDENTIFIER
    )

    IF (@AllUsersScope = 1)
    BEGIN
        -- Insert into our temp table
        INSERT INTO #PageIndex (ItemId)
        SELECT Paths.PathId
        FROM dbo.aspnet_Paths Paths,
             ((SELECT Paths.PathId
               FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
               WHERE Paths.ApplicationId = @ApplicationId
                      AND AllUsers.PathId = Paths.PathId
                      AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              ) AS SharedDataPerPath
              FULL OUTER JOIN
              (SELECT DISTINCT Paths.PathId
               FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Paths Paths
               WHERE Paths.ApplicationId = @ApplicationId
                      AND PerUser.PathId = Paths.PathId
                      AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              ) AS UserDataPerPath
              ON SharedDataPerPath.PathId = UserDataPerPath.PathId
             )
        WHERE Paths.PathId = SharedDataPerPath.PathId OR Paths.PathId = UserDataPerPath.PathId
        ORDER BY Paths.Path ASC

        SELECT @TotalRecords = @@ROWCOUNT

        SELECT Paths.Path,
               SharedDataPerPath.LastUpdatedDate,
               SharedDataPerPath.SharedDataLength,
               UserDataPerPath.UserDataLength,
               UserDataPerPath.UserCount
        FROM dbo.aspnet_Paths Paths,
             ((SELECT PageIndex.ItemId AS PathId,
                      AllUsers.LastUpdatedDate AS LastUpdatedDate,
                      DATALENGTH(AllUsers.PageSettings) AS SharedDataLength
               FROM dbo.aspnet_PersonalizationAllUsers AllUsers, #PageIndex PageIndex
               WHERE AllUsers.PathId = PageIndex.ItemId
                     AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
              ) AS SharedDataPerPath
              FULL OUTER JOIN
              (SELECT PageIndex.ItemId AS PathId,
                      SUM(DATALENGTH(PerUser.PageSettings)) AS UserDataLength,
                      COUNT(*) AS UserCount
               FROM aspnet_PersonalizationPerUser PerUser, #PageIndex PageIndex
               WHERE PerUser.PathId = PageIndex.ItemId
                     AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
               GROUP BY PageIndex.ItemId
              ) AS UserDataPerPath
              ON SharedDataPerPath.PathId = UserDataPerPath.PathId
             )
        WHERE Paths.PathId = SharedDataPerPath.PathId OR Paths.PathId = UserDataPerPath.PathId
        ORDER BY Paths.Path ASC
    END
    ELSE
    BEGIN
        -- Insert into our temp table
        INSERT INTO #PageIndex (ItemId)
        SELECT PerUser.Id
        FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
        WHERE Paths.ApplicationId = @ApplicationId
              AND PerUser.UserId = Users.UserId
              AND PerUser.PathId = Paths.PathId
              AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
              AND (@UserName IS NULL OR Users.LoweredUserName LIKE LOWER(@UserName))
              AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
        ORDER BY Paths.Path ASC, Users.UserName ASC

        SELECT @TotalRecords = @@ROWCOUNT

        SELECT Paths.Path, PerUser.LastUpdatedDate, DATALENGTH(PerUser.PageSettings), Users.UserName, Users.LastActivityDate
        FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths, #PageIndex PageIndex
        WHERE PerUser.Id = PageIndex.ItemId
              AND PerUser.UserId = Users.UserId
              AND PerUser.PathId = Paths.PathId
              AND PageIndex.IndexId >= @PageLowerBound AND PageIndex.IndexId <= @PageUpperBound
        ORDER BY Paths.Path ASC, Users.UserName ASC
    END

    RETURN @TotalRecords
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_GetCountOfState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_GetCountOfState (
    @Count int OUT,
    @AllUsersScope bit,
    @ApplicationName NVARCHAR(256),
    @Path NVARCHAR(256) = NULL,
    @UserName NVARCHAR(256) = NULL,
    @InactiveSinceDate DATETIME = NULL)
AS
BEGIN

    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
        IF (@AllUsersScope = 1)
            SELECT @Count = COUNT(*)
            FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
            WHERE Paths.ApplicationId = @ApplicationId
                  AND AllUsers.PathId = Paths.PathId
                  AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
        ELSE
            SELECT @Count = COUNT(*)
            FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
            WHERE Paths.ApplicationId = @ApplicationId
                  AND PerUser.UserId = Users.UserId
                  AND PerUser.PathId = Paths.PathId
                  AND (@Path IS NULL OR Paths.LoweredPath LIKE LOWER(@Path))
                  AND (@UserName IS NULL OR Users.LoweredUserName LIKE LOWER(@UserName))
                  AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_ResetSharedState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_ResetSharedState (
    @Count int OUT,
    @ApplicationName NVARCHAR(256),
    @Path NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationAllUsers
        WHERE PathId IN
            (SELECT AllUsers.PathId
             FROM dbo.aspnet_PersonalizationAllUsers AllUsers, dbo.aspnet_Paths Paths
             WHERE Paths.ApplicationId = @ApplicationId
                   AND AllUsers.PathId = Paths.PathId
                   AND Paths.LoweredPath = LOWER(@Path))

        SELECT @Count = @@ROWCOUNT
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAdministration_ResetUserState]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAdministration_ResetUserState (
    @Count                  int                 OUT,
    @ApplicationName        NVARCHAR(256),
    @InactiveSinceDate      DATETIME            = NULL,
    @UserName               NVARCHAR(256)       = NULL,
    @Path                   NVARCHAR(256)       = NULL)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
        SELECT @Count = 0
    ELSE
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationPerUser
        WHERE Id IN (SELECT PerUser.Id
                     FROM dbo.aspnet_PersonalizationPerUser PerUser, dbo.aspnet_Users Users, dbo.aspnet_Paths Paths
                     WHERE Paths.ApplicationId = @ApplicationId
                           AND PerUser.UserId = Users.UserId
                           AND PerUser.PathId = Paths.PathId
                           AND (@InactiveSinceDate IS NULL OR Users.LastActivityDate <= @InactiveSinceDate)
                           AND (@UserName IS NULL OR Users.LoweredUserName = LOWER(@UserName))
                           AND (@Path IS NULL OR Paths.LoweredPath = LOWER(@Path)))

        SELECT @Count = @@ROWCOUNT
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAllUsers_GetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAllUsers_GetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @Path              NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT p.PageSettings FROM dbo.aspnet_PersonalizationAllUsers p WHERE p.PathId = @PathId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAllUsers_ResetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @Path              NVARCHAR(256))
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    DELETE FROM dbo.aspnet_PersonalizationAllUsers WHERE PathId = @PathId
    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationAllUsers_SetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationAllUsers_SetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @Path             NVARCHAR(256),
    @PageSettings     IMAGE,
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Paths_CreatePath @ApplicationId, @Path, @PathId OUTPUT
    END

    IF (EXISTS(SELECT PathId FROM dbo.aspnet_PersonalizationAllUsers WHERE PathId = @PathId))
        UPDATE dbo.aspnet_PersonalizationAllUsers SET PageSettings = @PageSettings, LastUpdatedDate = @CurrentTimeUtc WHERE PathId = @PathId
    ELSE
        INSERT INTO dbo.aspnet_PersonalizationAllUsers(PathId, PageSettings, LastUpdatedDate) VALUES (@PathId, @PageSettings, @CurrentTimeUtc)
    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser_GetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationPerUser_GetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        RETURN
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    SELECT p.PageSettings FROM dbo.aspnet_PersonalizationPerUser p WHERE p.PathId = @PathId AND p.UserId = @UserId
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser_ResetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationPerUser_ResetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Personalization_GetApplicationId @ApplicationName, @ApplicationId OUTPUT
    IF (@ApplicationId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        RETURN
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        RETURN
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    DELETE FROM dbo.aspnet_PersonalizationPerUser WHERE PathId = @PathId AND UserId = @UserId
    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_DeleteInactiveProfiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_DeleteInactiveProfiles
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @InactiveSinceDate      datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
    BEGIN
        SELECT  0
        RETURN
    END

    DELETE
    FROM    dbo.aspnet_Profile
    WHERE   UserId IN
            (   SELECT  UserId
                FROM    dbo.aspnet_Users u
                WHERE   ApplicationId = @ApplicationId
                        AND (LastActivityDate <= @InactiveSinceDate)
                        AND (
                                (@ProfileAuthOptions = 2)
                             OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                             OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
                            )
            )

    SELECT  @@ROWCOUNT
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_GetNumberOfInactiveProfiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_GetNumberOfInactiveProfiles
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @InactiveSinceDate      datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
    BEGIN
        SELECT 0
        RETURN
    END

    SELECT  COUNT(*)
    FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p
    WHERE   ApplicationId = @ApplicationId
        AND u.UserId = p.UserId
        AND (LastActivityDate <= @InactiveSinceDate)
        AND (
                (@ProfileAuthOptions = 2)
                OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
            )
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_GetProfiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_GetProfiles
    @ApplicationName        nvarchar(256),
    @ProfileAuthOptions     int,
    @PageIndex              int,
    @PageSize               int,
    @UserNameToMatch        nvarchar(256) = NULL,
    @InactiveSinceDate      datetime      = NULL
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN

    -- Set the page bounds
    DECLARE @PageLowerBound int
    DECLARE @PageUpperBound int
    DECLARE @TotalRecords   int
    SET @PageLowerBound = @PageSize * @PageIndex
    SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

    -- Create a temp table TO store the select results
    CREATE TABLE #PageIndexForUsers
    (
        IndexId int IDENTITY (0, 1) NOT NULL,
        UserId uniqueidentifier
    )

    -- Insert into our temp table
    INSERT INTO #PageIndexForUsers (UserId)
        SELECT  u.UserId
        FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p
        WHERE   ApplicationId = @ApplicationId
            AND u.UserId = p.UserId
            AND (@InactiveSinceDate IS NULL OR LastActivityDate <= @InactiveSinceDate)
            AND (     (@ProfileAuthOptions = 2)
                   OR (@ProfileAuthOptions = 0 AND IsAnonymous = 1)
                   OR (@ProfileAuthOptions = 1 AND IsAnonymous = 0)
                 )
            AND (@UserNameToMatch IS NULL OR LoweredUserName LIKE LOWER(@UserNameToMatch))
        ORDER BY UserName

    SELECT  u.UserName, u.IsAnonymous, u.LastActivityDate, p.LastUpdatedDate,
            DATALENGTH(p.PropertyNames) + DATALENGTH(p.PropertyValuesString) + DATALENGTH(p.PropertyValuesBinary)
    FROM    dbo.aspnet_Users u, dbo.aspnet_Profile p, #PageIndexForUsers i
    WHERE   u.UserId = p.UserId AND p.UserId = i.UserId AND i.IndexId >= @PageLowerBound AND i.IndexId <= @PageUpperBound

    SELECT COUNT(*)
    FROM   #PageIndexForUsers

    DROP TABLE #PageIndexForUsers
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_GetProperties]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_GetProperties
    @ApplicationName      nvarchar(256),
    @UserName             nvarchar(256),
    @CurrentTimeUtc       datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM dbo.aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN

    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL

    SELECT @UserId = UserId
    FROM   dbo.aspnet_Users
    WHERE  ApplicationId = @ApplicationId AND LoweredUserName = LOWER(@UserName)

    IF (@UserId IS NULL)
        RETURN
    SELECT TOP 1 PropertyNames, PropertyValuesString, PropertyValuesBinary
    FROM         dbo.aspnet_Profile
    WHERE        UserId = @UserId

    IF (@@ROWCOUNT > 0)
    BEGIN
        UPDATE dbo.aspnet_Users
        SET    LastActivityDate=@CurrentTimeUtc
        WHERE  UserId = @UserId
    END
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_RegisterSchemaVersion]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_RegisterSchemaVersion
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128),
    @IsCurrentVersion          bit,
    @RemoveIncompatibleSchema  bit
AS
BEGIN
    IF( @RemoveIncompatibleSchema = 1 )
    BEGIN
        DELETE FROM dbo.aspnet_SchemaVersions WHERE Feature = LOWER( @Feature )
    END
    ELSE
    BEGIN
        IF( @IsCurrentVersion = 1 )
        BEGIN
            UPDATE dbo.aspnet_SchemaVersions
            SET IsCurrentVersion = 0
            WHERE Feature = LOWER( @Feature )
        END
    END

    INSERT  dbo.aspnet_SchemaVersions( Feature, CompatibleSchemaVersion, IsCurrentVersion )
    VALUES( LOWER( @Feature ), @CompatibleSchemaVersion, @IsCurrentVersion )
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Roles_CreateRole]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Roles_CreateRole
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS(SELECT RoleId FROM dbo.aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId))
    BEGIN
        SET @ErrorCode = 1
        GOTO Cleanup
    END

    INSERT INTO dbo.aspnet_Roles
                (ApplicationId, RoleName, LoweredRoleName)
         VALUES (@ApplicationId, @RoleName, LOWER(@RoleName))

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Roles_DeleteRole]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Roles_DeleteRole
    @ApplicationName            nvarchar(256),
    @RoleName                   nvarchar(256),
    @DeleteOnlyIfRoleIsEmpty    bit
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
        SET @TranStarted = 0

    DECLARE @RoleId   uniqueidentifier
    SELECT  @RoleId = NULL
    SELECT  @RoleId = RoleId FROM dbo.aspnet_Roles WHERE LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId

    IF (@RoleId IS NULL)
    BEGIN
        SELECT @ErrorCode = 1
        GOTO Cleanup
    END
    IF (@DeleteOnlyIfRoleIsEmpty <> 0)
    BEGIN
        IF (EXISTS (SELECT RoleId FROM dbo.aspnet_UsersInRoles  WHERE @RoleId = RoleId))
        BEGIN
            SELECT @ErrorCode = 2
            GOTO Cleanup
        END
    END


    DELETE FROM dbo.aspnet_UsersInRoles  WHERE @RoleId = RoleId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    DELETE FROM dbo.aspnet_Roles WHERE @RoleId = RoleId  AND ApplicationId = @ApplicationId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        COMMIT TRANSACTION
    END

    RETURN(0)

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
        ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Roles_GetAllRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Roles_GetAllRoles (
    @ApplicationName           nvarchar(256))
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN
    SELECT RoleName
    FROM   dbo.aspnet_Roles WHERE ApplicationId = @ApplicationId
    ORDER BY RoleName
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Roles_RoleExists]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Roles_RoleExists
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(0)
    IF (EXISTS (SELECT RoleName FROM dbo.aspnet_Roles WHERE LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId ))
        RETURN(1)
    ELSE
        RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Setup_RemoveAllRoleMembers]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_Setup_RemoveAllRoleMembers
    @name   sysname
AS
BEGIN
    CREATE TABLE #aspnet_RoleMembers
    (
        Group_name      sysname,
        Group_id        smallint,
        Users_in_group  sysname,
        User_id         smallint
    )

    INSERT INTO #aspnet_RoleMembers
    EXEC sp_helpuser @name

    DECLARE @user_id smallint
    DECLARE @cmd nvarchar(500)
    DECLARE c1 cursor FORWARD_ONLY FOR
        SELECT User_id FROM #aspnet_RoleMembers

    OPEN c1

    FETCH c1 INTO @user_id
    WHILE (@@fetch_status = 0)
    BEGIN
        SET @cmd = 'EXEC sp_droprolemember ' + '''' + @name + ''', ''' + USER_NAME(@user_id) + ''''
        EXEC (@cmd)
        FETCH c1 INTO @user_id
    END

    CLOSE c1
    DEALLOCATE c1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Setup_RestorePermissions]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_Setup_RestorePermissions
    @name   sysname
AS
BEGIN
    DECLARE @object sysname
    DECLARE @protectType char(10)
    DECLARE @action varchar(60)
    DECLARE @grantee sysname
    DECLARE @cmd nvarchar(500)
    DECLARE c1 cursor FORWARD_ONLY FOR
        SELECT Object, ProtectType, [Action], Grantee FROM #aspnet_Permissions where Object = @name

    OPEN c1

    FETCH c1 INTO @object, @protectType, @action, @grantee
    WHILE (@@fetch_status = 0)
    BEGIN
        SET @cmd = @protectType + ' ' + @action + ' on ' + @object + ' TO [' + @grantee + ']'
        EXEC (@cmd)
        FETCH c1 INTO @object, @protectType, @action, @grantee
    END

    CLOSE c1
    DEALLOCATE c1
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UnRegisterSchemaVersion]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_UnRegisterSchemaVersion
    @Feature                   nvarchar(128),
    @CompatibleSchemaVersion   nvarchar(128)
AS
BEGIN
    DELETE FROM dbo.aspnet_SchemaVersions
        WHERE   Feature = LOWER(@Feature) AND @CompatibleSchemaVersion = CompatibleSchemaVersion
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Users_CreateUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE [dbo].aspnet_Users_CreateUser
    @ApplicationId    uniqueidentifier,
    @UserName         nvarchar(256),
    @IsUserAnonymous  bit,
    @LastActivityDate DATETIME,
    @UserId           uniqueidentifier OUTPUT
AS
BEGIN
    IF( @UserId IS NULL )
        SELECT @UserId = NEWID()
    ELSE
    BEGIN
        IF( EXISTS( SELECT UserId FROM dbo.aspnet_Users
                    WHERE @UserId = UserId ) )
            RETURN -1
    END

    INSERT dbo.aspnet_Users (ApplicationId, UserId, UserName, LoweredUserName, IsAnonymous, LastActivityDate)
    VALUES (@ApplicationId, @UserId, @UserName, LOWER(@UserName), @IsUserAnonymous, @LastActivityDate)

    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Users_DeleteUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].aspnet_Users_DeleteUser
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @TablesToDeleteFrom int,
    @NumTablesDeletedFrom int OUTPUT
AS
BEGIN
    DECLARE @UserId               uniqueidentifier
    SELECT  @UserId               = NULL
    SELECT  @NumTablesDeletedFrom = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
	SET @TranStarted = 0

    DECLARE @ErrorCode   int
    DECLARE @RowCount    int

    SET @ErrorCode = 0
    SET @RowCount  = 0

    SELECT  @UserId = u.UserId
    FROM    dbo.aspnet_Users u, dbo.aspnet_Applications a
    WHERE   u.LoweredUserName       = LOWER(@UserName)
        AND u.ApplicationId         = a.ApplicationId
        AND LOWER(@ApplicationName) = a.LoweredApplicationName

    IF (@UserId IS NULL)
    BEGIN
        GOTO Cleanup
    END

    -- Delete from Membership table if (@TablesToDeleteFrom & 1) is set
    IF ((@TablesToDeleteFrom & 1) <> 0 AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_MembershipUsers') AND (type = 'V'))))
    BEGIN
        DELETE FROM dbo.aspnet_Membership WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
               @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_UsersInRoles table if (@TablesToDeleteFrom & 2) is set
    IF ((@TablesToDeleteFrom & 2) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_UsersInRoles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_UsersInRoles WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Profile table if (@TablesToDeleteFrom & 4) is set
    IF ((@TablesToDeleteFrom & 4) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_Profiles') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_Profile WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_PersonalizationPerUser table if (@TablesToDeleteFrom & 8) is set
    IF ((@TablesToDeleteFrom & 8) <> 0  AND
        (EXISTS (SELECT name FROM sysobjects WHERE (name = N'vw_aspnet_WebPartState_User') AND (type = 'V'))) )
    BEGIN
        DELETE FROM dbo.aspnet_PersonalizationPerUser WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    -- Delete from aspnet_Users table if (@TablesToDeleteFrom & 1,2,4 & 8) are all set
    IF ((@TablesToDeleteFrom & 1) <> 0 AND
        (@TablesToDeleteFrom & 2) <> 0 AND
        (@TablesToDeleteFrom & 4) <> 0 AND
        (@TablesToDeleteFrom & 8) <> 0 AND
        (EXISTS (SELECT UserId FROM dbo.aspnet_Users WHERE @UserId = UserId)))
    BEGIN
        DELETE FROM dbo.aspnet_Users WHERE @UserId = UserId

        SELECT @ErrorCode = @@ERROR,
                @RowCount = @@ROWCOUNT

        IF( @ErrorCode <> 0 )
            GOTO Cleanup

        IF (@RowCount <> 0)
            SELECT  @NumTablesDeletedFrom = @NumTablesDeletedFrom + 1
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:
    SET @NumTablesDeletedFrom = 0

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
	    ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_AddUsersToRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_AddUsersToRoles
	@ApplicationName  nvarchar(256),
	@UserNames		  nvarchar(4000),
	@RoleNames		  nvarchar(4000),
	@CurrentTimeUtc   datetime
AS
BEGIN
	DECLARE @AppId uniqueidentifier
	SELECT  @AppId = NULL
	SELECT  @AppId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
	IF (@AppId IS NULL)
		RETURN(2)
	DECLARE @TranStarted   bit
	SET @TranStarted = 0

	IF( @@TRANCOUNT = 0 )
	BEGIN
		BEGIN TRANSACTION
		SET @TranStarted = 1
	END

	DECLARE @tbNames	table(Name nvarchar(256) NOT NULL PRIMARY KEY)
	DECLARE @tbRoles	table(RoleId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @tbUsers	table(UserId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @Num		int
	DECLARE @Pos		int
	DECLARE @NextPos	int
	DECLARE @Name		nvarchar(256)

	SET @Num = 0
	SET @Pos = 1
	WHILE(@Pos <= LEN(@RoleNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @RoleNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@RoleNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@RoleNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbRoles
	  SELECT RoleId
	  FROM   dbo.aspnet_Roles ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredRoleName AND ar.ApplicationId = @AppId

	IF (@@ROWCOUNT <> @Num)
	BEGIN
		SELECT TOP 1 Name
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT ar.LoweredRoleName FROM dbo.aspnet_Roles ar,  @tbRoles r WHERE r.RoleId = ar.RoleId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(2)
	END

	DELETE FROM @tbNames WHERE 1=1
	SET @Num = 0
	SET @Pos = 1

	WHILE(@Pos <= LEN(@UserNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @UserNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@UserNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@UserNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbUsers
	  SELECT UserId
	  FROM   dbo.aspnet_Users ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredUserName AND ar.ApplicationId = @AppId

	IF (@@ROWCOUNT <> @Num)
	BEGIN
		DELETE FROM @tbNames
		WHERE LOWER(Name) IN (SELECT LoweredUserName FROM dbo.aspnet_Users au,  @tbUsers u WHERE au.UserId = u.UserId)

		INSERT dbo.aspnet_Users (ApplicationId, UserId, UserName, LoweredUserName, IsAnonymous, LastActivityDate)
		  SELECT @AppId, NEWID(), Name, LOWER(Name), 0, @CurrentTimeUtc
		  FROM   @tbNames

		INSERT INTO @tbUsers
		  SELECT  UserId
		  FROM	dbo.aspnet_Users au, @tbNames t
		  WHERE   LOWER(t.Name) = au.LoweredUserName AND au.ApplicationId = @AppId
	END

	IF (EXISTS (SELECT * FROM dbo.aspnet_UsersInRoles ur, @tbUsers tu, @tbRoles tr WHERE tu.UserId = ur.UserId AND tr.RoleId = ur.RoleId))
	BEGIN
		SELECT TOP 1 UserName, RoleName
		FROM		 dbo.aspnet_UsersInRoles ur, @tbUsers tu, @tbRoles tr, aspnet_Users u, aspnet_Roles r
		WHERE		u.UserId = tu.UserId AND r.RoleId = tr.RoleId AND tu.UserId = ur.UserId AND tr.RoleId = ur.RoleId

		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(3)
	END

	INSERT INTO dbo.aspnet_UsersInRoles (UserId, RoleId)
	SELECT UserId, RoleId
	FROM @tbUsers, @tbRoles

	IF( @TranStarted = 1 )
		COMMIT TRANSACTION
	RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_FindUsersInRole]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_FindUsersInRole
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256),
    @UserNameToMatch  nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
     DECLARE @RoleId uniqueidentifier
     SELECT  @RoleId = NULL

     SELECT  @RoleId = RoleId
     FROM    dbo.aspnet_Roles
     WHERE   LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId

     IF (@RoleId IS NULL)
         RETURN(1)

    SELECT u.UserName
    FROM   dbo.aspnet_Users u, dbo.aspnet_UsersInRoles ur
    WHERE  u.UserId = ur.UserId AND @RoleId = ur.RoleId AND u.ApplicationId = @ApplicationId AND LoweredUserName LIKE LOWER(@UserNameToMatch)
    ORDER BY u.UserName
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_GetRolesForUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_GetRolesForUser
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL

    SELECT  @UserId = UserId
    FROM    dbo.aspnet_Users
    WHERE   LoweredUserName = LOWER(@UserName) AND ApplicationId = @ApplicationId

    IF (@UserId IS NULL)
        RETURN(1)

    SELECT r.RoleName
    FROM   dbo.aspnet_Roles r, dbo.aspnet_UsersInRoles ur
    WHERE  r.RoleId = ur.RoleId AND r.ApplicationId = @ApplicationId AND ur.UserId = @UserId
    ORDER BY r.RoleName
    RETURN (0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_GetUsersInRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_GetUsersInRoles
    @ApplicationName  nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(1)
     DECLARE @RoleId uniqueidentifier
     SELECT  @RoleId = NULL

     SELECT  @RoleId = RoleId
     FROM    dbo.aspnet_Roles
     WHERE   LOWER(@RoleName) = LoweredRoleName AND ApplicationId = @ApplicationId

     IF (@RoleId IS NULL)
         RETURN(1)

    SELECT u.UserName
    FROM   dbo.aspnet_Users u, dbo.aspnet_UsersInRoles ur
    WHERE  u.UserId = ur.UserId AND @RoleId = ur.RoleId AND u.ApplicationId = @ApplicationId
    ORDER BY u.UserName
    RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_IsUserInRole]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_IsUserInRole
    @ApplicationName  nvarchar(256),
    @UserName         nvarchar(256),
    @RoleName         nvarchar(256)
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL
    SELECT  @ApplicationId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
    IF (@ApplicationId IS NULL)
        RETURN(2)
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    DECLARE @RoleId uniqueidentifier
    SELECT  @RoleId = NULL

    SELECT  @UserId = UserId
    FROM    dbo.aspnet_Users
    WHERE   LoweredUserName = LOWER(@UserName) AND ApplicationId = @ApplicationId

    IF (@UserId IS NULL)
        RETURN(2)

    SELECT  @RoleId = RoleId
    FROM    dbo.aspnet_Roles
    WHERE   LoweredRoleName = LOWER(@RoleName) AND ApplicationId = @ApplicationId

    IF (@RoleId IS NULL)
        RETURN(3)

    IF (EXISTS( SELECT * FROM dbo.aspnet_UsersInRoles WHERE  UserId = @UserId AND RoleId = @RoleId))
        RETURN(1)
    ELSE
        RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_UsersInRoles_RemoveUsersFromRoles
	@ApplicationName  nvarchar(256),
	@UserNames		  nvarchar(4000),
	@RoleNames		  nvarchar(4000)
AS
BEGIN
	DECLARE @AppId uniqueidentifier
	SELECT  @AppId = NULL
	SELECT  @AppId = ApplicationId FROM aspnet_Applications WHERE LOWER(@ApplicationName) = LoweredApplicationName
	IF (@AppId IS NULL)
		RETURN(2)


	DECLARE @TranStarted   bit
	SET @TranStarted = 0

	IF( @@TRANCOUNT = 0 )
	BEGIN
		BEGIN TRANSACTION
		SET @TranStarted = 1
	END

	DECLARE @tbNames  table(Name nvarchar(256) NOT NULL PRIMARY KEY)
	DECLARE @tbRoles  table(RoleId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @tbUsers  table(UserId uniqueidentifier NOT NULL PRIMARY KEY)
	DECLARE @Num	  int
	DECLARE @Pos	  int
	DECLARE @NextPos  int
	DECLARE @Name	  nvarchar(256)
	DECLARE @CountAll int
	DECLARE @CountU	  int
	DECLARE @CountR	  int


	SET @Num = 0
	SET @Pos = 1
	WHILE(@Pos <= LEN(@RoleNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @RoleNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@RoleNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@RoleNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbRoles
	  SELECT RoleId
	  FROM   dbo.aspnet_Roles ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredRoleName AND ar.ApplicationId = @AppId
	SELECT @CountR = @@ROWCOUNT

	IF (@CountR <> @Num)
	BEGIN
		SELECT TOP 1 N'', Name
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT ar.LoweredRoleName FROM dbo.aspnet_Roles ar,  @tbRoles r WHERE r.RoleId = ar.RoleId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(2)
	END


	DELETE FROM @tbNames WHERE 1=1
	SET @Num = 0
	SET @Pos = 1


	WHILE(@Pos <= LEN(@UserNames))
	BEGIN
		SELECT @NextPos = CHARINDEX(N',', @UserNames,  @Pos)
		IF (@NextPos = 0 OR @NextPos IS NULL)
			SELECT @NextPos = LEN(@UserNames) + 1
		SELECT @Name = RTRIM(LTRIM(SUBSTRING(@UserNames, @Pos, @NextPos - @Pos)))
		SELECT @Pos = @NextPos+1

		INSERT INTO @tbNames VALUES (@Name)
		SET @Num = @Num + 1
	END

	INSERT INTO @tbUsers
	  SELECT UserId
	  FROM   dbo.aspnet_Users ar, @tbNames t
	  WHERE  LOWER(t.Name) = ar.LoweredUserName AND ar.ApplicationId = @AppId

	SELECT @CountU = @@ROWCOUNT
	IF (@CountU <> @Num)
	BEGIN
		SELECT TOP 1 Name, N''
		FROM   @tbNames
		WHERE  LOWER(Name) NOT IN (SELECT au.LoweredUserName FROM dbo.aspnet_Users au,  @tbUsers u WHERE u.UserId = au.UserId)

		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(1)
	END

	SELECT  @CountAll = COUNT(*)
	FROM	dbo.aspnet_UsersInRoles ur, @tbUsers u, @tbRoles r
	WHERE   ur.UserId = u.UserId AND ur.RoleId = r.RoleId

	IF (@CountAll <> @CountU * @CountR)
	BEGIN
		SELECT TOP 1 UserName, RoleName
		FROM		 @tbUsers tu, @tbRoles tr, dbo.aspnet_Users u, dbo.aspnet_Roles r
		WHERE		 u.UserId = tu.UserId AND r.RoleId = tr.RoleId AND
					 tu.UserId NOT IN (SELECT ur.UserId FROM dbo.aspnet_UsersInRoles ur WHERE ur.RoleId = tr.RoleId) AND
					 tr.RoleId NOT IN (SELECT ur.RoleId FROM dbo.aspnet_UsersInRoles ur WHERE ur.UserId = tu.UserId)
		IF( @TranStarted = 1 )
			ROLLBACK TRANSACTION
		RETURN(3)
	END

	DELETE FROM dbo.aspnet_UsersInRoles
	WHERE UserId IN (SELECT UserId FROM @tbUsers)
	  AND RoleId IN (SELECT RoleId FROM @tbRoles)
	IF( @TranStarted = 1 )
		COMMIT TRANSACTION
	RETURN(0)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_WebEvent_LogEvent]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_WebEvent_LogEvent
        @EventId         char(32),
        @EventTimeUtc    datetime,
        @EventTime       datetime,
        @EventType       nvarchar(256),
        @EventSequence   decimal(19,0),
        @EventOccurrence decimal(19,0),
        @EventCode       int,
        @EventDetailCode int,
        @Message         nvarchar(1024),
        @ApplicationPath nvarchar(256),
        @ApplicationVirtualPath nvarchar(256),
        @MachineName    nvarchar(256),
        @RequestUrl      nvarchar(1024),
        @ExceptionType   nvarchar(256),
        @Details         ntext
AS
BEGIN
    INSERT
        dbo.aspnet_WebEvent_Events
        (
            EventId,
            EventTimeUtc,
            EventTime,
            EventType,
            EventSequence,
            EventOccurrence,
            EventCode,
            EventDetailCode,
            Message,
            ApplicationPath,
            ApplicationVirtualPath,
            MachineName,
            RequestUrl,
            ExceptionType,
            Details
        )
    VALUES
    (
        @EventId,
        @EventTimeUtc,
        @EventTime,
        @EventType,
        @EventSequence,
        @EventOccurrence,
        @EventCode,
        @EventDetailCode,
        @Message,
        @ApplicationPath,
        @ApplicationVirtualPath,
        @MachineName,
        @RequestUrl,
        @ExceptionType,
        @Details
    )
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_CheckPullMessageSync]...';


GO
CREATE PROCEDURE usp_CheckPullMessageSync
	@AwardingOrganisationDetailId INT, 
	@CentreId INT,
	@Status BIT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	SET @Status = 0
	Declare @Timestamp smalldatetime = null,
			@TempStatus bit = null

	Select	@Timestamp = pms.[Timestamp], @TempStatus = pms.[Status]
	From	[PullMessageSync] pms 
	Where	pms.[AwardingOrganisationDetailId] = @AwardingOrganisationDetailId 
			AND pms.[CentreId] = @CentreId

	IF (@Timestamp IS NULL)
	BEGIN
		Set @Status = 1

		Insert into PullMessageSync([AwardingOrganisationDetailId], [CentreId], [Status], [Timestamp])
		Select @AwardingOrganisationDetailId, @CentreId, @Status, GETUTCDATE()
	END
	ELSE IF (@TempStatus = 0) OR (DATEDIFF(hh, @Timestamp, GETUTCDATE()) >= 1)
	BEGIN
		SET @Status = 1

		Update	PullMessageSync
		SET		[Status] = @Status,
				[Timestamp] = GETUTCDATE()
		Where	[AwardingOrganisationDetailId] = @AwardingOrganisationDetailId 
				AND [CentreId] = @CentreId 
	END
END
GO
PRINT N'Creating [dbo].[usp_CheckQualificationElementExistOrNotByAOCentreId]...';


GO
CREATE PROCEDURE [dbo].[usp_CheckQualificationElementExistOrNotByAOCentreId]
@A2CSchoolId INT,
@AwardingOrganisationCentreId INT
As
Begin
	
	SET NOCOUNT ON;
	
	
	IF Exists(SELECT AOC.AwardingOrganisationCentreId FROM QualificationElement QE 
		INNER JOIN AwardingOrganisationCentres AOC ON QE.AwardingOrganisationCentreId = AOC.AwardingOrganisationCentreId
	WHERE QE.Record_Delete_Flag = 0 
		AND AOC.A2CSchoolId = @A2CSchoolId
		AND AOC.AwardingOrganisationCentreId = @AwardingOrganisationCentreId) 
				Begin
					Select 1
				end
				else
				begin
					select 0
				end
					
		
	
End
GO
PRINT N'Creating [dbo].[usp_Delete_EDIFileInformation]...';


GO
CREATE PROCEDURE usp_Delete_EDIFileInformation
@ediFileInformationId int
as
begin
	delete from EDIFileInformations where EDIFileInformationId=@ediFileInformationId
end
GO
PRINT N'Creating [dbo].[usp_Delete_EDIFileInformationLongTime]...';


GO
CREATE Procedure usp_Delete_EDIFileInformationLongTime

as

begin

	delete from EDIFileInformations where 

	LastModifiedDate<=DateADD(mi, -30, getutcdate())

end
GO
PRINT N'Creating [dbo].[usp_DeleteA2CSentQueues]...';


GO







CREATE Procedure [dbo].[usp_DeleteA2CSentQueues]
@AwardingOrganisationCentreId int,
@A2CSendRequestId int,
@Feedback nvarchar(max),
@IsSuccessful bit,
@A2CRequestId int,
@OutgoingSequence bigint
as
begin
	if @IsSuccessful=1 
	begin
		Declare @OutgoingSequenceCurrent bigint		
		select @OutgoingSequenceCurrent=OutgoingSequence
		from AwardingOrganisationCentres where AwardingOrganisationCentreId=@AwardingOrganisationCentreId
		if @OutgoingSequenceCurrent=@OutgoingSequence
		begin
			update AwardingOrganisationCentres
			set OutgoingSequence= OutgoingSequence + 1
			where AwardingOrganisationCentreId=@AwardingOrganisationCentreId
		end
	end
	delete from A2CSentQueues where 
	AwardingOrganisationCentreId = @AwardingOrganisationCentreId
	update A2CSendRequests set Status=2
	where AwardingOrganisationCentreId = @AwardingOrganisationCentreId and A2CSendRequestId = @A2CSendRequestId 
	update A2CRequests set Feedback=@Feedback,LastModifiedDate=getutcdate()
	where AwardingOrganisationCentreId = @AwardingOrganisationCentreId and A2CRequestId = @A2CRequestId 
end
GO
PRINT N'Creating [dbo].[usp_DeleteA2CSentQueuesLongTime]...';


GO


CREATE Procedure [dbo].[usp_DeleteA2CSentQueuesLongTime]
as
begin
	update A2CSendRequests set Status=0 where 
	Status=1 and
	AwardingOrganisationCentreId in
	(select AwardingOrganisationCentreId from A2CSentQueues where 
	LastModifiedDate<=DateADD(mi, -30, getutcdate()))
	delete from A2CSentQueues where 
	LastModifiedDate<=DateADD(mi, -30, getutcdate())
	
end
GO
PRINT N'Creating [dbo].[usp_DeleteUsers]...';


GO

CREATE PROCEDURE [dbo].[usp_DeleteUsers] 
@UserIds NVARCHAR (MAX)
AS

BEGIN

    SET NOCOUNT ON;

BEGIN TRANSACTION main

BEGIN TRY
		
		Declare @inputUserIds TABLE (UserId uniqueidentifier primary key);
		Declare @DeleteUserIds TABLE (UserId uniqueidentifier primary key, UserName nvarchar(256));

		DECLARE @userId uniqueidentifier;
		DECLARE @pos INT;
		Declare @stringToSplit NVARCHAR (MAX);
		Set @stringToSplit=@UserIds;

		-- Slipt Userid and insert in to temp table
		WHILE LEN(@stringToSplit) > 0
		BEGIN
			SELECT @pos  = CHARINDEX(',', @stringToSplit)
			
			if @pos = 0
				Begin
					SELECT @pos = LEN(@stringToSplit)
					SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplit, 1, @pos))
				End
			Else
				Begin
					SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplit, 1, @pos-1))
				End

			INSERT INTO @inputUserIds 
			SELECT @userId 
			
			SELECT @stringToSplit = SUBSTRING(@stringToSplit, @pos+1, LEN(@stringToSplit)-@pos)
		END

		-- Find Userid as per audit log table and insert in to temp table
		Insert into @DeleteUserIds
		Select iu.UserId,au.UserName from @inputUserIds iu
		inner join dbo.aspnet_Users as au on iu.UserId=au.UserId
		where NOT EXISTS ( Select UserId from dbo.InformationLogs il where iu.UserId=il.UserId);

		-- delete user(s)
		delete from dbo.UsersInRoles
			where  exists (select UserId from @DeleteUserIds as du where UsersInRoles.UserId=du.UserId);
		delete from dbo.Users 
			where  exists (select UserId from @DeleteUserIds as du where Users.UserId=du.UserId);
		delete from dbo.aspnet_Membership 
			where  exists (select UserId from @DeleteUserIds as du where aspnet_Membership.UserId=du.UserId);
		delete from dbo.aspnet_Users 
			where  exists (select UserId from @DeleteUserIds as du where aspnet_Users.UserId=du.UserId);

		-- select undeleted user(s)
		SELECT iu.UserName, cast(1 as bit) as Deleted
		FROM  @DeleteUserIds as iu 	
		Union all
		SELECT au.UserName, cast(0 as bit) as Deleted
		FROM   dbo.aspnet_Users as au 
			Inner join @inputUserIds as iu on au.UserId=iu.UserId
		where au.UserId not in(	select UserId from @DeleteUserIds)
	
	IF @@TRANCOUNT > 0
		COMMIT TRANSACTION main

END TRY
BEGIN CATCH   
     IF @@TRANCOUNT > 0
	   ROLLBACK TRANSACTION main
END CATCH
	
END
GO
PRINT N'Creating [dbo].[usp_GetActiveAwardingOrganisation]...';


GO
CREATE PROCEDURE usp_GetActiveAwardingOrganisation
AS
BEGIN
	SET NOCOUNT ON;

	Select	aod.AwardingOrganisationDetailId AwardingOrganisationDetailId, 
			ao.Name AoName, 
			aod.AONumber AoNumber, 
			pf.Frequency Frequency
	From	AwardingOrganisations ao 
			Join AwardingOrganisationDetails aod
				On aod.AwardingOrganisationId = ao.AwardingOrganisationId
			Join PollingFrequency pf
				on pf.AwardingOrganisationId = ao.AwardingOrganisationId
			Join (	Select	distinct aoc.AwardingOrganisationDetailId
					From	AwardingOrganisationCentreCertificates aocc
							Join AwardingOrganisationCentres aoc 
								on aocc.AwardingOrganisationCentreId = aoc.AwardingOrganisationCentreId
							join AwardingOrganisationCertificates aoce
								on aoce.AwardingOrganisationDetailId = aoc.AwardingOrganisationDetailId
								and aocc.AwardingOrganisationCertificateId = aoce.AwardingOrganisationCertificateId) p1
				on p1.AwardingOrganisationDetailId = aod.AwardingOrganisationDetailId
END
GO
PRINT N'Creating [dbo].[usp_GetAwardingOrganisationsHeavingProductCatalogueByCenterId]...';


GO

CREATE  PROCEDURE [dbo].[usp_GetAwardingOrganisationsHeavingProductCatalogueByCenterId]
@A2CSchoolId INT,
@CentreId INT
As
Begin
	
	SET NOCOUNT ON;
	SELECT	AOD.AwardingOrganisationDetailId,
			AOD.AONumber, 			
			AO.Name, 
			AO.EndPoint, 
			AOD.MISCertificate,
			AO.ContactEmail, 
			AO.Description, 
			AO.PhoneNumber
	FROM AwardingOrganisations AO
		INNER JOIN AwardingOrganisationDetails AOD ON AO.AwardingOrganisationId = AOD.AwardingOrganisationDetailId
		INNER JOIN AwardingOrganisationCentres AOC ON AOD.AwardingOrganisationDetailId = AOC.AwardingOrganisationDetailId
	WHERE AOC.AwardingOrganisationCentreId IN 
		(
			SELECT DISTINCT QE.AwardingOrganisationCentreId   FROM QualificationElement QE 
				INNER JOIN AwardingOrganisationCentres AOC ON QE.AwardingOrganisationCentreId = AOC.AwardingOrganisationCentreId
				WHERE QE.Record_Delete_Flag = 0 
				AND AOC.A2CSchoolId = @A2CSchoolId
				AND AOC.CentreId = @CentreId
		)
	ORDER BY AO.Name, AOD.AONumber
End
GO
PRINT N'Creating [dbo].[usp_GetCentresByAwardingOrganization]...';


GO
CREATE PROCEDURE [dbo].[usp_GetCentresByAwardingOrganization]
	@AwardingOrganisationDetailId INT
AS
BEGIN
	SET NOCOUNT ON;

	Select	ac.A2CSchoolId, c.CentreId, c.CentreNumber, ISNULL(aac.AOAssignCentreNumber, '') as AOAssignCentreNumber
	From	AwardingOrganisationCentres ac
			Join Centres c
				on ac.CentreId = c.CentreId
			left join AwardingOrganisationAOAssignedCentres aac
				on aac.AwardingOrganisationDetailId = ac.AwardingOrganisationDetailId and aac.CentreId = c.CentreId
	Where	ac.AwardingOrganisationDetailId = @AwardingOrganisationDetailId
END
GO
PRINT N'Creating [dbo].[usp_GetCentresBySchoolID]...';


GO


CREATE  PROCEDURE [dbo].[usp_GetCentresBySchoolID]
@SchoolID INT
As
Begin
	
	SET NOCOUNT ON;
	SELECT * FROM Centres C WHERE A2CSchoolId = @SchoolID 
	ORDER BY C.CentreNumber
End
GO
PRINT N'Creating [dbo].[usp_GetProductCatalogueAssessables]...';


GO



CREATE  PROCEDURE [dbo].[usp_GetProductCatalogueAssessables]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Extra_Time_Required_Flag AS ExtraTimeRequired,						A.Assessment_Method_Type AS AssessmentMethodType,
									A.Assmnt_Actual_DateTime_Reqd_Flag AS AssessmentActualDateTimeRequired,	A.Attendance_Data_Required_Flag AS AttendanceDataRequired,
									A.Cambridge_Assmnt_TimeZone_Num AS CambridgeAssessmentTimeZoneNumber,	A.Carry_Forward_Permissible_Flag AS CarryForwardPermissible,
									A.Maximum_Extra_Time_Minutes AS MaximumExtraTimeMinutes,				A.On_Demand_Flag AS OnDemandFlag,
									A.QE_Timetabled_Flag AS QETimetabled,									A.Test_Day_Photograph_Reqd_Flag AS TestDayPhotographRequired,
									A.Tier_Level_Type AS TierLevelType,									 	A.Tier_Level_Common_Reference AS TierLevelCommonReference,
 									A.Time_Allowed_Mins AS TimeAllowedMins,								 	A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
 									A.Party_Role_Type_ADT_Decider AS PartyRoleTypeADTDecider,			 	A.Assessment_Medium_Type AS AssessmentMediumType,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM Assessable A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Extra_Time_Required_Flag AS ExtraTimeRequired,						A.Assessment_Method_Type AS AssessmentMethodType,
									A.Assmnt_Actual_DateTime_Reqd_Flag AS AssessmentActualDateTimeRequired,	A.Attendance_Data_Required_Flag AS AttendanceDataRequired,
									A.Cambridge_Assmnt_TimeZone_Num AS CambridgeAssessmentTimeZoneNumber,	A.Carry_Forward_Permissible_Flag AS CarryForwardPermissible,
									A.Maximum_Extra_Time_Minutes AS MaximumExtraTimeMinutes,				A.On_Demand_Flag AS OnDemandFlag,
									A.QE_Timetabled_Flag AS QETimetabled,									A.Test_Day_Photograph_Reqd_Flag AS TestDayPhotographRequired,
									A.Tier_Level_Type AS TierLevelType,									 	A.Tier_Level_Common_Reference AS TierLevelCommonReference,
 									A.Time_Allowed_Mins AS TimeAllowedMins,								 	A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
 									A.Party_Role_Type_ADT_Decider AS PartyRoleTypeADTDecider,			 	A.Assessment_Medium_Type AS AssessmentMediumType,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM Assessable A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') Assessables
							WHERE Assessables.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Creating [dbo].[usp_GetProductCatalogueAward]...';


GO


CREATE  PROCEDURE [dbo].[usp_GetProductCatalogueAward]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Accreditation_End_Review_Date AS	AccreditationEndReviewDate,			A.Accreditation_Start_Date AS AccreditationStartDate,
									A.AO_Accred_Version_Number AS AOAccredVersionNumber,					A.Assessment_Language_Type AS AssessmentLanguageType,
									A.Award_Level_Type AS AwardLevelType,									A.Award_Type AS AwardType,
									A.Cert_of_Unit_Credit_Issued_Flag AS IsCertificateofUnitCreditIssued,	A.Certification_End_Date AS CertificationEndDate,
									A.Certification_Start_Date AS CertificationStartDate,					A.Contributing_Units_Listed_Flag AS IsContributingUnitsListed,
									A.Course_Length_Type AS CourseLengthType,								A.Endorsed_Title_Reqd_Flag AS IsEndorsedTitleRequired,
									A.Guided_Learning_Hours_Max AS GuidedLearningHoursMax,					A.Guided_Learning_Hours_Min AS GuidedLearningHoursMin,
									A.Operational_End_Date AS OperationalEndDate,							A.Operational_Start_Date AS OperationalStartDate,
									A.QE_Delivery_Model_Type AS QEDeliveryModelType,						A.QE_Evid_Reqmnt_Provided_Flag AS IsQEEvidenceRequirementProvided,
									A.QE_Evidence_Requirement_Type AS QEEvidenceRequirementType,			A.Registration_Expiry_Months AS RegistrationExpiryMonth,
									A.Resit_Rule_Text AS ResitRuleText,										A.Statement_Of_Credit_Issued_Flag AS IsStatementOfCreditIssued,
									A.Study_Guide_Available_Type AS StudyGuideAvailableType,				A.Study_Guide_Details AS StudyGuideDetails,
									A.Study_Guide_Reference AS StudyGuideReference,							A.Study_Guide_Reference_Type AS StudyGuideReferenceType,
									A.QE_Classification AS QEClassification,								A.Party_Id_Accreditor AS PartyIdAccreditor,
									A.Party_Id_Sector_Lead AS PartyIdSectorLead,							A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM Award A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Accreditation_End_Review_Date AS	AccreditationEndReviewDate,			A.Accreditation_Start_Date AS AccreditationStartDate,
									A.AO_Accred_Version_Number AS AOAccredVersionNumber,					A.Assessment_Language_Type AS AssessmentLanguageType,
									A.Award_Level_Type AS AwardLevelType,									A.Award_Type AS AwardType,
									A.Cert_of_Unit_Credit_Issued_Flag AS IsCertificateofUnitCreditIssued,	A.Certification_End_Date AS CertificationEndDate,
									A.Certification_Start_Date AS CertificationStartDate,					A.Contributing_Units_Listed_Flag AS IsContributingUnitsListed,
									A.Course_Length_Type AS CourseLengthType,								A.Endorsed_Title_Reqd_Flag AS IsEndorsedTitleRequired,
									A.Guided_Learning_Hours_Max AS GuidedLearningHoursMax,					A.Guided_Learning_Hours_Min AS GuidedLearningHoursMin,
									A.Operational_End_Date AS OperationalEndDate,							A.Operational_Start_Date AS OperationalStartDate,
									A.QE_Delivery_Model_Type AS QEDeliveryModelType,						A.QE_Evid_Reqmnt_Provided_Flag AS IsQEEvidenceRequirementProvided,
									A.QE_Evidence_Requirement_Type AS QEEvidenceRequirementType,			A.Registration_Expiry_Months AS RegistrationExpiryMonth,
									A.Resit_Rule_Text AS ResitRuleText,										A.Statement_Of_Credit_Issued_Flag AS IsStatementOfCreditIssued,
									A.Study_Guide_Available_Type AS StudyGuideAvailableType,				A.Study_Guide_Details AS StudyGuideDetails,
									A.Study_Guide_Reference AS StudyGuideReference,							A.Study_Guide_Reference_Type AS StudyGuideReferenceType,
									A.QE_Classification AS QEClassification,								A.Party_Id_Accreditor AS PartyIdAccreditor,
									A.Party_Id_Sector_Lead AS PartyIdSectorLead,							A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM Award A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') Awards
							WHERE Awards.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Creating [dbo].[usp_GetProductCatalogueLearningUnits]...';


GO




CREATE  PROCEDURE [dbo].[usp_GetProductCatalogueLearningUnits]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									L.Learning_Unit_Level_Type AS LearningUnitLevelType,					L.Maximum_Resits_Allowed AS MaximumResitsAllowed,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM LearningUnit L
								INNER JOIN QualificationElement QE ON L.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									L.Learning_Unit_Level_Type AS LearningUnitLevelType,					L.Maximum_Resits_Allowed AS MaximumResitsAllowed,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM LearningUnit L
								INNER JOIN QualificationElement QE ON L.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') LU
							WHERE LU.RowNumber BETWEEN @Skip AND @Take'
	
	PRINT @CountQuery
	PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Creating [dbo].[usp_GetProductCataloguePathwayChildNodes]...';


GO

CREATE  PROCEDURE [dbo].[usp_GetProductCataloguePathwayChildNodes]
@AwardingOrganisationCentreId int,
@QualificationElementId int

As
Begin

	SET NOCOUNT ON;

	SELECT 
		QEC.QualificationElementId,  
		QEC.AO_Qualification_Element_Id AS AOQEID,
		QEC.QE_Short_Title AS QEShortTitle, 
		QEC.Qualification_Element_Type AS QualificationElementType,
		(SELECT COUNT(1) FROM QERelationship WHERE QualificationElementId_Parent = QEC.QualificationElementId) AS ChildrenCount,
		ISNULL(P.Maximum_Unit_Selection, 0) AS MaximumUnitSelection,
		ISNULL(P.Minimum_Unit_Selection, 0) AS MinimumUnitSelection,
		ISNULL(P.Maximum_Pathway_Selection, 0) AS MaximumPathwaySelection,
		ISNULL(p.Minimum_Pathway_Selection, 0) AS MinimumPathwaySelection
	FROM QERelationship QER
		INNER JOIN QualificationElement QEC ON QER.QualificationElementId_Child = QEC.QualificationElementId 
		LEFT OUTER JOIN Pathway P ON QEC.QualificationElementId = P.QualificationElementId
	WHERE QER.AwardingOrganisationCentreId = @AwardingOrganisationCentreId AND QER.QualificationElementId_Parent = @QualificationElementId
End
GO
PRINT N'Creating [dbo].[usp_GetProductCataloguePathwayRootNode]...';


GO


CREATE  PROCEDURE [dbo].[usp_GetProductCataloguePathwayRootNode]
@AwardingOrganisationCentreId int,
@QualificationElementId int

As
Begin

	SET NOCOUNT ON;

	SELECT 
		QEC.QualificationElementId,  
		QEC.AO_Qualification_Element_Id AS AOQEID,
		QEC.QE_Short_Title AS QEShortTitle, 
		QEC.Qualification_Element_Type AS QualificationElementType,
		(SELECT COUNT(1) FROM QERelationship WHERE QualificationElementId_Parent = QEC.QualificationElementId) AS ChildrenCount
	FROM  QualificationElement QEC 
	WHERE QEC.AwardingOrganisationCentreId = @AwardingOrganisationCentreId AND QEC.QualificationElementId = @QualificationElementId
End
GO
PRINT N'Creating [dbo].[usp_GetProductCatalogueSchemes]...';


GO
CREATE  PROCEDURE [dbo].[usp_GetProductCatalogueSchemes]
@AwardingOrganisationCentreId int,
@QualificationType  nvarchar(50) = null,
@SeriesLabel  nvarchar(50) = null,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'AoqeId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) = case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') q1 WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) q1
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
								' RecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								case when @QualificationType is null or len(ltrim(rtrim(@QualificationType))) <= 0 then '' 
								else ' and QualificationType = ''' + @QualificationType + '''' end  +
								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1)
							From (Select
										QE.QualificationElementId AS QEId,									QE.AO_Qualification_Element_Id AS AoqeId,							
										QE.QE_Short_Title AS QEShortTitle,									QE.QE_Description AS QEDescription,  
										QE.Qualification_Element_Title AS QETitle,							QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,				
										QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,		QE.Private_Learner_Type AS PrivateLearnerType,						
										QE.QE_Moderation_Type AS QEModerationType,							QE.First_Language_Required_Flag AS FirstLanguageRequired,		
										QE.Record_Delete_Flag AS RecordDeleted,								QE.QE_Admin_Code AS QEAdminCode,	
										QE.Qualification_Reference_Number AS QualificationReferenceNumber,	QE.Learning_Aim_Code AS LearningAimCode, 
										QE.AwardingOrganisationCentreId,
										S.Qualification_Type AS QualificationType,							S.Series_Based_Flag AS SeriesBased,
										S.QE_Availability_Text AS QEAvailabilityText,						S.Assessment_Max_Learner_Age AS AssessmentMaxLearnerAge,
										S.Assessment_Min_Learner_Age AS AssessmentMinLearnerAge,			S.First_Teaching_Date AS FirstTeachingDate,
										S.Last_Teaching_Date AS LastTeachingDate,							S.QE_Centre_Auth_Agreement_Text AS QECentreAuthenticationAgreementText,
										S.Date_Of_Birth_Reqd_Flag AS DateOfBirthRequired,					S.Legal_Sex_Required_Flag AS LegalSexRequired' 
										+ @SeriesLableSelectPart + '
									 FROM Scheme S
											INNER JOIN QualificationElement QE ON S.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	*, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber
								From (Select
										QE.QualificationElementId AS QEId,									QE.AO_Qualification_Element_Id AS AoqeId,							
										QE.QE_Short_Title AS QEShortTitle,									QE.QE_Description AS QEDescription,  
										QE.Qualification_Element_Title AS QETitle,							QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,				
										QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,		QE.Private_Learner_Type AS PrivateLearnerType,						
										QE.QE_Moderation_Type AS QEModerationType,							QE.First_Language_Required_Flag AS FirstLanguageRequired,		
										QE.Record_Delete_Flag AS RecordDeleted,								QE.QE_Admin_Code AS QEAdminCode,	
										QE.Qualification_Reference_Number AS QualificationReferenceNumber,	QE.Learning_Aim_Code AS LearningAimCode, 
										QE.AwardingOrganisationCentreId,
										S.Qualification_Type AS QualificationType,							S.Series_Based_Flag AS SeriesBased,
										S.QE_Availability_Text AS QEAvailabilityText,						S.Assessment_Max_Learner_Age AS AssessmentMaxLearnerAge,
										S.Assessment_Min_Learner_Age AS AssessmentMinLearnerAge,			S.First_Teaching_Date AS FirstTeachingDate,
										S.Last_Teaching_Date AS LastTeachingDate,							S.QE_Centre_Auth_Agreement_Text AS QECentreAuthenticationAgreementText,
										S.Date_Of_Birth_Reqd_Flag AS DateOfBirthRequired,					S.Legal_Sex_Required_Flag AS LegalSexRequired'
										+ @SeriesLableSelectPart + '
									 FROM Scheme S
											INNER JOIN QualificationElement QE ON S.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') q2
							WHERE q2.RowNumber BETWEEN @Skip AND @Take'

		
	--PRINT @CountQuery
	--PRINT @ListQuery

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT

	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take


End
GO
PRINT N'Creating [dbo].[usp_GetQualificationElementAssessmentMaterial]...';


GO
--drop PROCEDURE [dbo].usp_GetQualificationElementAssessmentMaterial

CREATE PROCEDURE [dbo].[usp_GetQualificationElementAssessmentMaterial]
	@TotalCount int = 0 OUTPUT,
	@OrderBy nvarchar(255) = 'MaterialId',
	@GridWhereClause nvarchar(max) = null,
	@PageNumber int = 1,
	@PageSize int = 10,
	@AwardingOrganisationCentreId int,
	@QEParentId int
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;

	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' q1.AwardingOrganisationCentreId=  ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								 ' and q1.QualificationElementId=' + cast(@QEParentId as nvarchar(10)) +
								 case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							( Select 
								QE.AwardingOrganisationCentreId as AwardingOrganisationCentreId,QE.QualificationElementId as QualificationElementId,
								AM.QE_Assmnt_Material_Id as MaterialId, AM.QE_Assmnt_Material_Name as MaterialName,
								AM.QE_Assmnt_Material_Source as Source, AM.QE_Assmnt_Material_Description as MaterialDescription,
								AM.QE_Assmnt_Material_Source_Type as SourceType,AM.QE_Assmnt_Material_Medium_Type as MediumType,
								QEAM.Number_Per_Learner as NumberPerLearner, QEAM.Number_Per_Centre as NumberPerCentre,
								QEAM.Assmnt_Material_Release_Date as ReleaseDate	 
							from 
								dbo.QEAssessmentMaterial AM
								Inner join QEAAssessmentMaterial QEAM 
									on (QEAM.AwardingOrganisationCentreId=AM.AwardingOrganisationCentreId and QEAM.QEAssessmentMaterialId=AM.QEAssessmentMaterialId)
								Inner join QualificationElement QE 
									on (QE.AwardingOrganisationCentreId=QEAM.AwardingOrganisationCentreId and QE.QualificationElementId=QEAM.QualificationElementId)
							where 
								AM.Record_Delete_Flag=0	
								and QEAM.Record_Delete_Flag=0	
								and QE.Record_Delete_Flag=0
							) q1
						where ' + @WhereClause,							

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(Select 
												QE.AwardingOrganisationCentreId as AwardingOrganisationCentreId,QE.QualificationElementId as QualificationElementId,
												AM.QE_Assmnt_Material_Id as MaterialId, AM.QE_Assmnt_Material_Name as MaterialName,
												AM.QE_Assmnt_Material_Source as Source, AM.QE_Assmnt_Material_Description as MaterialDescription,
												AM.QE_Assmnt_Material_Source_Type as SourceType,AM.QE_Assmnt_Material_Medium_Type as MediumType,
												QEAM.Number_Per_Learner as NumberPerLearner, QEAM.Number_Per_Centre as NumberPerCentre,
												QEAM.Assmnt_Material_Release_Date as ReleaseDate	 
											from 
												dbo.QEAssessmentMaterial AM
												Inner join QEAAssessmentMaterial QEAM 
													on (QEAM.AwardingOrganisationCentreId=AM.AwardingOrganisationCentreId and QEAM.QEAssessmentMaterialId=AM.QEAssessmentMaterialId)
												Inner join QualificationElement QE 
													on (QE.AwardingOrganisationCentreId=QEAM.AwardingOrganisationCentreId and QE.QualificationElementId=QEAM.QualificationElementId)
											where 
												AM.Record_Delete_Flag=0	
												and QEAM.Record_Delete_Flag=0	
												and QE.Record_Delete_Flag=0	
											) q1
										where ' + @WhereClause + ') q2 
									WHERE q2.RowNumber BETWEEN @Skip AND @Take'
										
	EXECUTE sp_executesql @CountQuery, N'@TotalCountOut int OUTPUT', @TotalCountOut = @TotalCount OUTPUT

	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	
End
GO
PRINT N'Creating [dbo].[usp_GetQualificationElementLearnerIdentifiers]...';


GO

Create  PROCEDURE [dbo].[usp_GetQualificationElementLearnerIdentifiers]
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'QEPartyRRReferenceType',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@AwardingOrganisationCentreId int,
@QEParentId int
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' q1.AwardingOrganisationCentreId=  ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								 ' and q1.QualificationElementId=' + cast(@QEParentId as nvarchar(10)) +
								 case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							(  Select QE.AwardingOrganisationCentreId,QE.QualificationElementId ,QELI.Party_RR_Reference_Type as QEPartyRRReferenceType,QELI.Learner_Id_Mandatory_Flag  as QELearnerIdMandatoryFlag
								from dbo.QELearnerIdentifier QELI
									Inner join QualificationElement QE on QELI.QualificationElementId=QE.QualificationElementId and QELI.AwardingOrganisationCentreId=QE.AwardingOrganisationCentreId
								where QELI.Record_Delete_Flag=0
							) q1
							where '+@WhereClause,

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(   select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(
												Select QE.AwardingOrganisationCentreId,QE.QualificationElementId ,QELI.Party_RR_Reference_Type as QEPartyRRReferenceType,QELI.Learner_Id_Mandatory_Flag  as QELearnerIdMandatoryFlag
												from dbo.QELearnerIdentifier QELI
													Inner join QualificationElement QE on QELI.QualificationElementId=QE.QualificationElementId and QELI.AwardingOrganisationCentreId=QE.AwardingOrganisationCentreId
												where QELI.Record_Delete_Flag=0			
											) q1
											where ' + @WhereClause + ') q2 
										WHERE q2.RowNumber BETWEEN @Skip AND @Take'

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

End
GO
PRINT N'Creating [dbo].[usp_GetQualificationElementPreferences]...';


GO

CREATE  PROCEDURE [dbo].[usp_GetQualificationElementPreferences]
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'QEPartyIdCreator',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@AwardingOrganisationCentreId int,
@QEParentId int
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' q1.AwardingOrganisationCentreId=  ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								 ' and q1.QualificationElementId=' + cast(@QEParentId as nvarchar(10)) +
								 case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							(  Select QE.AwardingOrganisationCentreId,QE.QualificationElementId ,QEP.Party_Id_Creator as QEPartyIdCreator,QEP.QE_Preference  as QEPreference
								from dbo.AOQEPreference AOQEP
									Inner join QualificationElement QE on AOQEP.QualificationElementId=QE.QualificationElementId and AOQEP.AwardingOrganisationCentreId=QE.AwardingOrganisationCentreId
									Inner join QEPreference QEP on AOQEP.QEPreferenceId=QEP.QEPreferenceId
								where AOQEP.Record_Delete_Flag=0 and QEP.Record_Delete_Flag=0
							) q1
							where '+@WhereClause,

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(   select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(
												Select QE.AwardingOrganisationCentreId,QE.QualificationElementId ,QEP.Party_Id_Creator as QEPartyIdCreator,QEP.QE_Preference  as QEPreference
												from dbo.AOQEPreference AOQEP
													Inner join QualificationElement QE on AOQEP.QualificationElementId=QE.QualificationElementId and AOQEP.AwardingOrganisationCentreId=QE.AwardingOrganisationCentreId
													Inner join QEPreference QEP on AOQEP.QEPreferenceId=QEP.QEPreferenceId
												where AOQEP.Record_Delete_Flag=0 and QEP.Record_Delete_Flag=0			
											) q1
											where ' + @WhereClause + ') q2 
										WHERE q2.RowNumber BETWEEN @Skip AND @Take'

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

End
GO
PRINT N'Creating [dbo].[usp_GetQualificationElementRelationships]...';


GO

CREATE  PROCEDURE [dbo].[usp_GetQualificationElementRelationships]
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'AoqeId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@AwardingOrganisationCentreId int,
@QEParentId int
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' q1.AwardingOrganisationCentreId=  ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								 ' and q1.QEParentId=' + cast(@QEParentId as nvarchar(10)) +
								 case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							(  Select qr.AwardingOrganisationCentreId,qeChild.QualificationElementId as QualificationElementId,qeChild.AO_Qualification_Element_Id AS AoqeId,qeChild.QE_Short_Title AS QEChildShortTitle
								, qeChild.Qualification_Element_Type as  QualificationElementType,qr.QualificationElementId_Parent as QEParentId,qr.QE_Relationship_Type as RelationshipType
									, qr.QE_Relationship_Rule_Type as RelationshipRuleType
								from dbo.QERelationship qr
									Inner join QualificationElement qeParent on qr.QualificationElementId_Parent=qeParent.QualificationElementId
									Inner join QualificationElement qeChild on qr.QualificationElementId_Child=qeChild.QualificationElementId
								where qr.Record_Delete_Flag=0
							) q1
							where '+@WhereClause,

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(   select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(
												Select qr.AwardingOrganisationCentreId,qeChild.QualificationElementId as QualificationElementId,qeChild.AO_Qualification_Element_Id AS AoqeId,qeChild.QE_Short_Title AS QEChildShortTitle
													, qeChild.Qualification_Element_Type as  QualificationElementType,qr.QualificationElementId_Parent as QEParentId,qr.QE_Relationship_Type as RelationshipType
														, qr.QE_Relationship_Rule_Type as RelationshipRuleType
													from dbo.QERelationship qr
														Inner join QualificationElement qeParent on qr.QualificationElementId_Parent=qeParent.QualificationElementId
														Inner join QualificationElement qeChild on qr.QualificationElementId_Child=qeChild.QualificationElementId
												where qr.Record_Delete_Flag=0			
											) q1
											where ' + @WhereClause + ') q2 
										WHERE q2.RowNumber BETWEEN @Skip AND @Take'

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

End
GO
PRINT N'Creating [dbo].[usp_GetQualificationTypesByAwardingOrganisationCentreID]...';


GO


CREATE  PROCEDURE [dbo].[usp_GetQualificationTypesByAwardingOrganisationCentreID]
@AwardingOrganisationCentreID INT
As
Begin
	
	SET NOCOUNT ON;

	SELECT distinct S.Qualification_Type FROM dbo.Scheme S
		inner join dbo.QualificationElement QE on s.QualificationElementId=QE.QualificationElementId 
	WHERE QE.Record_Delete_Flag=0 and S.AwardingOrganisationCentreID = @AwardingOrganisationCentreID 
	ORDER BY S.Qualification_Type
End
GO
PRINT N'Creating [dbo].[usp_GetSchoolUser]...';


GO
CREATE PROCEDURE usp_GetSchoolUser 
	@SchoolId	int = 0,
	@RoleId		int = 2,
	@UserId		uniqueidentifier = null
AS
BEGIN
	SET NOCOUNT ON;

	Select	au.[UserName], ap.[Email], u.[ForeName], u.[SurName], ap.[IsApproved],
			stuff((	Select ',' + cast(r.[RoleId] as nchar(1))
					From	[dbo].[UsersInRoles] ur
							join [dbo].[Roles] r on ur.[RoleId] = r.[RoleId]
					where ur.[UserId] = u.[UserId]
					order by r.[RoleId] asc
					for xml path('')),1,1,'') [Role]
	From	[dbo].[aspnet_Membership] ap
			join [dbo].[aspnet_Users] au on ap.[UserId] = au.[UserId]
			join [dbo].[Users] u on ap.[UserId] = u.[UserId]
	where	ap.[UserId] = @UserId and u.[SchoolId] = @SchoolId
			and (Select	count(1) cnt 
				From	[dbo].[UsersInRoles] ur 
				where	ur.UserId = ap.[UserId] and ur.RoleId >= @RoleId 
						and (Select count(1) From UsersInRoles tur Where tur.UserId = ap.[UserId] and tur.RoleId < @RoleId) = 0) > 0
			
END
GO
PRINT N'Creating [dbo].[usp_GetSchoolUserList]...';


GO
CREATE proc [dbo].[usp_GetSchoolUserList]
@SchoolId int = 0,
@RoleId int = 1,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[UserName]',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10
As
Begin
	
	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
	@Take int = (@PageNumber * @PageSize),
	@WhereClause nvarchar(max) = '[SchoolId] = ' + cast(@SchoolId as nvarchar(10)) +
								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1)
											From (	Select	u.[SchoolId], am.[UserId], au.[UserName], u.[ForeName], u.[SurName], 
													case when am.[IsApproved] = 0 then ''Deactivated'' 
															 when am.[IsLockedOut] = 1 then ''Locked''
															 else ''Activated'' end [Status], ur.[Role]
													From	[dbo].[aspnet_Membership] am 
															Join [dbo].[aspnet_Users] au on am.[UserId] = au.[UserId]
															join [dbo].[Users] u on am.[UserId] = u.[UserId]
															join (Select u.SchoolId, u.UserId, stuff((Select '','' + r.[RoleDisplayName]
																									From	[dbo].[UsersInRoles] ur
																											join [dbo].[Roles] r on ur.[RoleId] = r.[RoleId]
																									where ur.[UserId] = u.[UserId]
																									order by r.[RoleId] asc
																									for xml path('''')),1,1,'''') [Role]
																	From [dbo].[Users] u) ur
															on ur.[UserId] = u.[UserId]
															where (Select count(1) cnt From [dbo].[UsersInRoles] ur 
														where ur.UserId = am.UserId and ur.RoleId >= ' + cast(@RoleId as nvarchar(2)) + ' and 
														(Select count(1) From UsersInRoles tur Where tur.UserId = am.UserId and tur.RoleId < ' + cast(@RoleId as nvarchar(2)) + ') = 0)>0) p1
											where ' + @WhereClause,

	@ListQuery as nvarchar(max) =	N'Select p2.[SchoolId], p2.[UserId], p2.[UserName], p2.[Forename], p2.[Surname], p2.[Status], p2.[Role]
										From	(Select p1.[SchoolId], p1.[UserId], p1.[UserName], p1.[ForeName], p1.[SurName], p1.[Status], p1.[Role],
														ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
												From (	Select	u.[SchoolId], am.[UserId], au.[UserName], u.[ForeName], u.[SurName], 
														case when am.[IsApproved] = 0 then ''Deactivated'' 
															 when am.[IsLockedOut] = 1 then ''Locked''
															 else ''Activated'' end [Status], ur.[Role]
														From	[dbo].[aspnet_Membership] am 
																Join [dbo].[aspnet_Users] au on am.[UserId] = au.[UserId]
																join [dbo].[Users] u on am.[UserId] = u.[UserId]
																join (Select u.SchoolId, u.UserId, stuff((Select '','' + r.[RoleDisplayName] 
																											From [dbo].[UsersInRoles] ur
																											join [dbo].[Roles] r on ur.[RoleId] = r.[RoleId]
																											where ur.[UserId] = u.[UserId]
																											order by r.[RoleId] asc
																											for xml path('''')),1,1,'''') [Role]
																		From [dbo].[Users] u) ur
																on ur.[UserId] = u.[UserId]
																where (Select count(1) cnt From [dbo].[UsersInRoles] ur 
															where ur.UserId = am.UserId and ur.RoleId >= ' + cast(@RoleId as nvarchar(2)) + ' and 
																(Select count(1) From UsersInRoles tur Where tur.UserId = am.UserId and tur.RoleId < ' + cast(@RoleId as nvarchar(2)) + ') = 0) > 0
													  ) p1
												Where ' + @WhereClause + ') p2
										 Where p2.[RN] BETWEEN @Skip AND @Take'

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

End
GO
PRINT N'Creating [dbo].[usp_GetSeriesByAwardingOrganisationCentreID]...';


GO


CREATE  PROCEDURE [dbo].[usp_GetSeriesByAwardingOrganisationCentreID]
@AwardingOrganisationCentreID INT,
@QualificationElementType nvarchar(32)
As
Begin
	
	SET NOCOUNT ON;

	SELECT distinct QA.Series_Label FROM dbo.QEAvailability QA
		inner join dbo.QualificationElement QE on QA.QualificationElementId=QE.QualificationElementId
	WHERE QA.Record_Delete_Flag=0 
		and QA.AwardingOrganisationCentreID = @AwardingOrganisationCentreID 
		and QE.Qualification_Element_Type=@QualificationElementType
	ORDER BY QA.Series_Label
End
GO
PRINT N'Creating [dbo].[usp_GetSMTPProviderDetails]...';


GO
CREATE PROCEDURE [dbo].[usp_GetSMTPProviderDetails] 
@SchoolId int= NULL
AS

BEGIN

    SET NOCOUNT ON;
	
    SELECT SP.HostName as Host, SP.Port,SP.UserName,SP.Password,SP.FromEmail,SP.SchoolId
    FROM   dbo.SMTPEmailProviders SP         
    WHERE  SP.SchoolId = @SchoolId or SP.SchoolId is null
	order by SP.SchoolId desc;

END
GO
PRINT N'Creating [dbo].[usp_GetUserDetailsByUserIds]...';


GO
CREATE PROCEDURE [dbo].[usp_GetUserDetailsByUserIds] 
@UserIds NVARCHAR (MAX)
AS

BEGIN

    SET NOCOUNT ON;
	

	Declare @inputUserIds TABLE (UserId uniqueidentifier primary key);
	
		DECLARE @userId uniqueidentifier;
		DECLARE @pos INT;
		Declare @stringToSplit NVARCHAR (MAX);
		Set @stringToSplit=@UserIds;

		-- Slipt Userid and insert in to temp table
		WHILE LEN(@stringToSplit) > 0
		BEGIN
			SELECT @pos  = CHARINDEX(',', @stringToSplit)
			
			if @pos = 0
				Begin
					SELECT @pos = LEN(@stringToSplit)
					SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplit, 1, @pos))
				End
			Else
				Begin
					SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplit, 1, @pos-1))
				End

			INSERT INTO @inputUserIds 
			SELECT @userId 
			
			SELECT @stringToSplit = SUBSTRING(@stringToSplit, @pos+1, LEN(@stringToSplit)-@pos)
		END

    SELECT AU.UserName,AU.UserId AS UserGUID,U.SchoolId,AU.LastActivityDate,AM.IsApproved,AM.IsLockedOut
           ,Am.LastPasswordChangedDate,AM.FailedPasswordAttemptCount,AM.FailedPasswordAnswerAttemptCount,AM.LastLoginDate
		   ,AM.LastLockoutDate,U.ForeName,U.SurName,AM.Email AS UserEmail,AM.PasswordSalt, am.[Password]
    FROM   dbo.aspnet_Users AS AU
           INNER JOIN dbo.aspnet_Membership AS AM ON AU.UserId = AM.UserId          
           INNER JOIN dbo.Users AS U ON AU.UserId = U.UserId          
    WHERE  exists(select UserId from @inputUserIds as du where AU.UserId=du.UserId);

END
GO
PRINT N'Creating [dbo].[usp_GetUserDetailsByUserName]...';


GO

CREATE PROCEDURE [dbo].[usp_GetUserDetailsByUserName] 
@UserName NVARCHAR (256)
AS

BEGIN

    SET NOCOUNT ON;
	
    SELECT AU.UserName,AU.UserId AS UserGUID,U.SchoolId,AU.LastActivityDate,AM.IsApproved,AM.IsLockedOut
           ,Am.LastPasswordChangedDate,AM.FailedPasswordAttemptCount,AM.FailedPasswordAnswerAttemptCount,AM.LastLoginDate
		   ,AM.LastLockoutDate,U.ForeName,U.SurName,AM.Email AS UserEmail,AM.PasswordSalt

    FROM   dbo.aspnet_Users AS AU
           INNER JOIN dbo.aspnet_Membership AS AM ON AU.UserId = AM.UserId          
           INNER JOIN dbo.Users AS U ON AU.UserId = U.UserId          
    WHERE  LoweredUserName = @UserName;

END
GO
PRINT N'Creating [dbo].[usp_GetUserRolesByUserId]...';


GO
CREATE PROCEDURE [dbo].[usp_GetUserRolesByUserId]
	@UserId uniqueidentifier
AS

BEGIN

    SET NOCOUNT ON;
	
    SELECT RoleId
    FROM   dbo.UsersInRoles          
    WHERE  UserId = @UserId
	order by RoleId ;

END
GO
PRINT N'Creating [dbo].[USP_IMPORTXMLEXCEPTION]...';


GO

CREATE PROCEDURE USP_IMPORTXMLEXCEPTION(
	@AwardingOrganisationCentreId				int, 
	@A2CTransactionId							int, 
	@A2CTransactionRequestId					int, 
	@A2CTransactionResponseId					int, 
	@A2CTransactionResponseEnvelopeId			int, 
	@A2CTransactionResponseEnvelopeMessageId	int,
	@TransactionName							nvarchar(100),
	@MessageID									nvarchar(100),
	@SchoolID									int,
	@ScreenMasterId								int,
	@CentreNumber								nvarchar(100),
	@AONumber									nvarchar(100),
	@ErrorDataBlock								nvarchar(500)
) AS BEGIN

	PRINT 'EXCEPTION IN XML IMPORT'
	PRINT ERROR_NUMBER() 		
	PRINT ERROR_LINE() 
	PRINT ERROR_MESSAGE()

	---------------------------------------------------
	----- Variable Declarations -----------------------
	---------------------------------------------------
	DECLARE 
	@ErrorMessageWithIDs	nvarchar(MAX)

	SET @ErrorMessageWithIDs = 
		'Exception in processing Product catalogue - "' 
		+ @ErrorDataBlock + '" area/Data Block'
		+ CHAR(13)
		+ 'ERROR_NUMBER=' + cast(ERROR_NUMBER() as nvarchar) 
		+ ', ERROR_LINE=' + cast(ERROR_LINE() as nvarchar) 
		+ ', ERROR_MESSAGE=' + ERROR_MESSAGE()
		+ CHAR(13)
		+ 'Message ID=' + @MessageID
		+ ', Transaction Name=' + @TransactionName
		+ ', AO ID=' + @AONumber
		+ ', Centre ID=' + @CentreNumber 
		+ CHAR(13)
		+ 'AwardingOrganisationCentreId=' + cast(@AwardingOrganisationCentreId as nvarchar) 
		+ ', A2CTransactionId=' + cast(@A2CTransactionId as nvarchar) 
		+ ', A2CTransactionRequestId=' + cast(@A2CTransactionRequestId as nvarchar) 
		+ ', A2CTransactionResponseId=' + cast(@A2CTransactionResponseId as nvarchar) 
		+ ', A2CTransactionResponseEnvelopeId=' + cast(@A2CTransactionResponseEnvelopeId as nvarchar) 
		+ ', A2CTransactionResponseEnvelopeMessageId=' + cast(@A2CTransactionResponseEnvelopeMessageId as nvarchar) 

	PRINT 'Error Message'
	PRINT @ErrorMessageWithIDs
							
	INSERT into ErrorLogs(
		ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
		A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
		A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
	VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessageWithIDs,
		@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
		@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID)		
			
	SET @ErrorMessageWithIDs = ''

	--update import status
	UPDATE 
		A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
	SET 
		DATAIMPORTSTATUS = 2
	WHERE
		AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreId AND
		A2CTRANSACTIONID = @A2CTransactionId AND
		A2CTRANSACTIONREQUESTID = @A2CTransactionRequestId AND 
		A2CTRANSACTIONRESPONSEID = @A2CTransactionResponseId AND 
		A2CTRANSACTIONRESPONSEENVELOPEID = @A2CTransactionResponseEnvelopeId AND
		A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId
END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CMessages]...';


GO

 CREATE PROCEDURE [dbo].[usp_Insert_A2CMessages]
@A2CSchoolId int,
@AwardingOrganisationDetailId int,
@CentreId int,
@A2CMessageGuid nvarchar(50),
@TransactionName nvarchar(100),
@Status tinyint,
@MessageContent varbinary(max)  
AS
BEGIN
	Insert into A2CXmlMessages (A2CSchoolId,AwardingOrganisationDetailId,CentreId,A2CMessageGuid,TransactionName,[Status],MessageContent)
	values(@A2CSchoolId,@AwardingOrganisationDetailId,@CentreId,@A2CMessageGuid,@TransactionName,@Status,@MessageContent)
END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CTransactionEdis]...';


GO



CREATE PROCEDURE [dbo].[usp_Insert_A2CTransactionEdis]
@A2CTransactionId int,
@FileName nvarchar(100)=null,
@AwardingOrganisationCentreId int

AS
BEGIN

Insert into A2CTransactionEDIs (A2CTransactionId,FileName,AwardingOrganisationCentreId)
	values(@A2CTransactionId,@FileName,@AwardingOrganisationCentreId)

	select cast(SCOPE_IdENTITY() as int)

END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CTransactionErrors]...';


GO


 CREATE PROCEDURE [dbo].[usp_Insert_A2CTransactionErrors]
@AwardingOrganisationCentreId int,
@A2CTransactionId int,
@ErrorDescription nvarchar(max)
AS
BEGIN
	Insert into A2CTransactionErrors (AwardingOrganisationCentreId,A2CTransactionId,ErrorDescription)
	values(@AwardingOrganisationCentreId,@A2CTransactionId,@ErrorDescription)

	Select cast(SCOPE_IDENTITY() as int)
END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CTransactionMessages]...';


GO
CREATE PROCEDURE [dbo].[usp_Insert_A2CTransactionMessages]
@A2CTransactionId int,
@AwardingOrganisationCentreId int,
@A2CMessageGuid uniqueidentifier,
@OutgoingSequence bigint
AS
BEGIN

Insert into A2CTransactionMessages (A2CTransactionId,AwardingOrganisationCentreId,A2CMessageGuid,OutgoingSequence)
	values(@A2CTransactionId,@AwardingOrganisationCentreId,@A2CMessageGuid,@OutgoingSequence)
select cast(SCOPE_IdENTITY() as int)

END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CTransactionRequests]...';


GO

CREATE PROCEDURE [dbo].[usp_Insert_A2CTransactionRequests]
 @A2CTransactionId int,

@A2CTransactionGuid nvarchar(50),

@EndPoint nvarchar(300),
@Envelope varbinary (max),
@AwardingOrganisationCentreId int 



AS



BEGIN

	Insert into A2CTransactionRequests (A2CTransactionId ,A2CTransactionGuid,EndPoint,Envelope,AwardingOrganisationCentreId)
values(@A2CTransactionId,@A2CTransactionGuid,@EndPoint,@Envelope,@AwardingOrganisationCentreId)

	select cast(SCOPE_IdENTITY() as int)

END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CTransactionResponseEnvelopeEDIs]...';


GO


CREATE PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeEDIs]
@AwardingOrganisationCentreId int,
@A2CTransactionId int,
@A2CTransactionRequestId int,
@A2CTransactionResponseId int,
@A2CTransactionResponseEnvelopeId int,
@data varbinary(max) ,
@FileName nvarchar(100)
AS
BEGIN
	Insert into A2CTransactionResponseEnvelopeEDIs (AwardingOrganisationCentreId,A2CTransactionId,A2CTransactionRequestId,A2CTransactionResponseId,A2CTransactionResponseEnvelopeId,[data],FileName)
	values(@AwardingOrganisationCentreId,@A2CTransactionId,@A2CTransactionRequestId,@A2CTransactionResponseId,@A2CTransactionResponseEnvelopeId,@data,@FileName)
	select cast(SCOPE_IDENTITY() as int)
END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CTransactionResponseEnvelopes]...';


GO

CREATE PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopes]
 @A2CTransactionId int,
@A2CTransactionResponseId int,
@A2CTransactionRequestId int,
@IsSignalMessage bit,
@ResponseEnvelope varbinary(max) ,
@IsEDIMessage bit,
@AwardingOrganisationCentreId int
AS
BEGIN
	Insert into A2CTransactionResponseEnvelopes (A2CTransactionId ,A2CTransactionResponseId,A2CTransactionRequestId,IsSignalMessage,ResponseEnvelope,IsEDIMessage,AwardingOrganisationCentreId)
	values(@A2CTransactionId ,@A2CTransactionResponseId,@A2CTransactionRequestId,@IsSignalMessage
	,@ResponseEnvelope,@IsEDIMessage,@AwardingOrganisationCentreId)

SELECT CAST(SCOPE_IdENTITY() AS INT)

END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CTransactionResponseEnvelopeSignalErrors]...';


GO

 CREATE PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeSignalErrors]
 @A2CTransactionId int,
@A2CTransactionResponseEnvelopeSignalId int,
@A2CTransactionResponseId int,
@A2CTransactionRequestId int,
@A2CTransactionResponseEnvelopeId int,
@ErrorCode nvarchar(50)=null,
@ErrorDetail nvarchar(max)=null,
@Origin nvarchar(max)=null,
@RefMessageId nvarchar(50)=null,
@Severity nvarchar(50)=null,
@ShortDescription nvarchar(50)=null,
@Category nvarchar(50)=null,
@Description nvarchar(max)=null,
@AwardingOrganisationCentreId int 
AS
BEGIN
	Insert into A2CTransactionResponseEnvelopeSignalErrors (A2CTransactionId,A2CTransactionResponseEnvelopeSignalId,A2CTransactionResponseId,A2CTransactionRequestId,A2CTransactionResponseEnvelopeId,ErrorCode,ErrorDetail,Origin,RefMessageId,Severity,ShortDescription,Category,Description,AwardingOrganisationCentreId)
	values(@A2CTransactionId,@A2CTransactionResponseEnvelopeSignalId,@A2CTransactionResponseId,@A2CTransactionRequestId,@A2CTransactionResponseEnvelopeId,@ErrorCode,@ErrorDetail,@Origin,@RefMessageId,@Severity,@ShortDescription,@Category,@Description,@AwardingOrganisationCentreId)
	SELECT CAST(SCOPE_IdENTITY() AS int)
END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CTransactionResponseEnvelopeSignals]...';


GO

 CREATE PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeSignals]
 @A2CTransactionId int,
@A2CTransactionResponseId int,
@A2CTransactionRequestId int,
@A2CTransactionResponseEnvelopeId int,
@SignalResponseMasterId int,
@AwardingOrganisationCentreId int
AS
BEGIN
	Insert into A2CTransactionResponseEnvelopeSignals (A2CTransactionId,A2CTransactionResponseId,A2CTransactionRequestId,A2CTransactionResponseEnvelopeId,SignalResponseMasterId,AwardingOrganisationCentreId)
	values(@A2CTransactionId,@A2CTransactionResponseId,@A2CTransactionRequestId,@A2CTransactionResponseEnvelopeId,@SignalResponseMasterId,@AwardingOrganisationCentreId)

	select cast(SCOPE_IdENTITY() as int)
END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CTransactionResponseErrors]...';


GO

CREATE PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseErrors]
  @A2CTransactionId int,
@A2CTransactionResponseId int,
@A2CTransactionRequestId int,
@AwardingOrganisationCentreId int,
@ErrorDescription nvarchar(max)
AS
BEGIN
	Insert into A2CTransactionResponseErrors (A2CTransactionId,A2CTransactionResponseId,A2CTransactionRequestId,AwardingOrganisationCentreId,ErrorDescription)
	values(@A2CTransactionId,@A2CTransactionResponseId,@A2CTransactionRequestId,@AwardingOrganisationCentreId,@ErrorDescription)

select cast(scope_identity() as int)

END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CTransactionResponses]...';


GO

CREATE PROCEDURE [dbo].[usp_Insert_A2CTransactionResponses]

 @A2CTransactionId int,

@A2CTransactionRequestId int,

@TransactionResponseStatus nvarchar(200),



@AwardingOrganisationCentreId int,

@IsErrorAssociated bit

AS







BEGIN

	Insert into A2CTransactionResponses (A2CTransactionId,A2CTransactionRequestId,TransactionResponseStatus,AwardingOrganisationCentreId,IsErrorAssociated)


	values(@A2CTransactionId,@A2CTransactionRequestId,@TransactionResponseStatus,@AwardingOrganisationCentreId,@IsErrorAssociated)


	Select cast(SCOPE_IdENTITY() as int)

END
GO
PRINT N'Creating [dbo].[usp_Insert_AwardingOrganisationCentres]...';


GO

CREATE PROCEDURE [dbo].[usp_Insert_AwardingOrganisationCentres]

@A2CSchoolId int,

@AwardingOrganisationDetailId int,

@CentreId int,

@AOCentreCertificate varbinary(max),

@CertificatePassword nvarchar(50) ,

@CertificateExpiredDate datetime=null,
@CertificateFileName nvarchar(100)
AS

BEGIN

Declare @AwardingOrganisationCentreId int
Declare @AwardingOrganisationCertificateId int
	Insert into AwardingOrganisationCentres (A2CSchoolId,AwardingOrganisationDetailId,CentreId)
	values(@A2CSchoolId,@AwardingOrganisationDetailId,@CentreId)

	set @AwardingOrganisationCentreId= SCOPE_IdENTITY()

	INSERT INTO [dbo].[AwardingOrganisationCertificates]
           ([A2CSchoolId]
           ,[AwardingOrganisationDetailId]
           ,[AOCentreCertificate]
           ,[CertificatePassword]
           ,[CertificateExpiredDate],CertificateFileName)
     VALUES
		(@A2CSchoolId,@AwardingOrganisationDetailId,@AOCentreCertificate,@CertificatePassword,@CertificateExpiredDate,@CertificateFileName)

	set @AwardingOrganisationCertificateId= SCOPE_IdENTITY()

	INSERT INTO [dbo].[AwardingOrganisationCentreCertificates]
           ([AwardingOrganisationCentreId]           
           ,[AwardingOrganisationCertificateId])
     VALUES
           (
			@AwardingOrganisationCentreId,@AwardingOrganisationCertificateId
		   )
	

	select 1

END
GO
PRINT N'Creating [dbo].[usp_Insert_AwardingOrganisationDetails]...';


GO

create PROCEDURE [dbo].[usp_Insert_AwardingOrganisationDetails]
@AONumber nvarchar(20),
@Name nvarchar(50),
@EndPoint nvarchar(300),
@MISCertificate varbinary(max)=null,
@ContactEmail nvarchar(100),
@Description nvarchar(100),
@PhoneNumber nvarchar(50)
  
AS
BEGIN
	
	Insert into AwardingOrganisations ([Name],EndPoint,ContactEmail,Description,PhoneNumber)
	values(@Name,@EndPoint,@ContactEmail,@Description,@PhoneNumber)

	Declare @AwardingOrganisationId int=cast(SCOPE_IdENTITY() as int)
	

	Insert into AwardingOrganisationDetails (AwardingOrganisationId ,AONumber,MISCertificate)
	values(@AwardingOrganisationId ,@AONumber,@MISCertificate)

	select cast(SCOPE_IdENTITY() as int)
END
GO
PRINT N'Creating [dbo].[usp_Insert_Centres]...';


GO

CREATE PROCEDURE [dbo].[usp_Insert_Centres]
@A2CSchoolId int,
@CentreNumber nvarchar(50) 
AS
BEGIN
	Insert into Centres (A2CSchoolId,CentreNumber)
	values(@A2CSchoolId,@CentreNumber)

	select cast(SCOPE_IdENTITY() as int)
END
GO
PRINT N'Creating [dbo].[usp_Insert_EDIFileInformation]...';


GO

CREATE PROCEDURE [dbo].[usp_Insert_EDIFileInformation]
@FilePath nvarchar(300)
AS
BEGIN
If not exists(select 1 from EDIFileInformations where FilePath=@FilePath)
begin
Insert into EDIFileInformations(FilePath) values(@FilePath)
select cast(scope_identity() as int)
end
else
begin
select 0
end
END
GO
PRINT N'Creating [dbo].[usp_Insert_Logs]...';


GO



CREATE PROCEDURE [dbo].[usp_Insert_Logs]
@ScreenMasterId int,
@A2CSchoolId int,
@ErrorMessage nvarchar(max),
@LogType nvarchar(50),
@IsError bit,
@UserId UniqueIdentifier=null,
@RoleType tinyint=null,
@IsVisibleToAll bit=null,
@AwardingOrganisationCentreId int=null
AS
BEGIN

if(@IsError=1)
begin
	declare @LogTypeId int
	set @LogTypeId=1
	Insert into ErrorLogs (ScreenMasterId,A2CSchoolId,ErrorMessage,LogType,AwardingOrganisationCentreId)
	values(@ScreenMasterId,@A2CSchoolId,@ErrorMessage,@LogTypeId,@AwardingOrganisationCentreId)
end
else
begin
Insert into InformationLogs (ScreenMasterId,A2CSchoolId,[Description],UserId,RoleType,IsVisibleToAll)
	values(@ScreenMasterId,@A2CSchoolId,@ErrorMessage,@UserId,@RoleType,@IsVisibleToAll)
end

END
GO
PRINT N'Creating [dbo].[usp_InsertA2CRequest]...';


GO



CREATE PROCEDURE [dbo].[usp_InsertA2CRequest]
@AwardingOrganisationCentreId int,
@Feedback nvarchar(max),
@A2CSchoolId int
AS
BEGIN
	Insert into A2CRequests(AwardingOrganisationCentreId,Feedback,AOAssignCentreNumber)
	Select AwardingOrganisationCentreId,@Feedback,aoassign.AOAssignCentreNumber 
	from AwardingOrganisationCentres aoc
	left join AwardingOrganisationAOAssignedCentres aoassign on 
	aoassign.A2CSchoolId=aoc.A2CSchoolId and aoassign.CentreId=aoc.CentreId
	and aoassign.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
	where aoc.A2CSchoolId=@A2CSchoolId and aoc.AwardingOrganisationCentreId=@AwardingOrganisationCentreId
	
	Declare @A2CRequestId int = (Select cast(scope_identity() as int))	
	Insert into A2CSendRequests(AwardingOrganisationCentreId,A2CRequestId) values(@AwardingOrganisationCentreId,
	@A2CRequestId)

	Select @A2CRequestId

END
GO
PRINT N'Creating [dbo].[usp_InsertCheck_EDIFileNotConnectedInformations]...';


GO

CREATE PROCEDURE [dbo].[usp_InsertCheck_EDIFileNotConnectedInformations]
(@NoofAttempt int,
@FilePath nvarchar(300)
)
as
begin
declare  @count int 
select @count=count(1) from EDIFileNotConnectedInformations
where FilePath=@FilePath
if @count>= (@NoofAttempt-1)
begin
delete from EDIFileNotConnectedInformations where FilePath=@FilePath
	select cast(1 as bit)
end
else
begin
	insert into EDIFileNotConnectedInformations(FilePath) 
	values(@FilePath)
	select cast(0 as bit)
end
end
GO
PRINT N'Creating [dbo].[usp_InsertCheckA2CSentQueues]...';


GO
--delete from A2CSentQueues
--update A2CSendRequests set Status=0 where Status=1
--select * from A2CSentQueues
--usp_InsertCheckA2CSentQueues 1021
CREATE Procedure [dbo].[usp_InsertCheckA2CSentQueues]
(
@AwardingOrganisationCentreId int
)
as
begin
if not exists(select 1 from A2CSentQueues where AwardingOrganisationCentreId=@AwardingOrganisationCentreId)
and exists(select 1 from
A2CRequests a2cR inner join A2CSendRequests a2cSendR
on a2cr.AwardingOrganisationCentreId=a2csendr.AwardingOrganisationCentreId and  a2cr.A2CRequestId=a2csendr.A2CRequestId 
where a2cSendR.AwardingOrganisationCentreId = 
@AwardingOrganisationCentreId and status=0)
begin

insert into A2CSentQueues(AwardingOrganisationCentreId)
values(@AwardingOrganisationCentreId)

declare @A2CSendRequestId int
select top 1 @A2CSendRequestId=A2CSendRequestId from
A2CRequests a2cR inner join A2CSendRequests a2cSendR
on a2cr.AwardingOrganisationCentreId=a2csendr.AwardingOrganisationCentreId and  a2cr.A2CRequestId=a2csendr.A2CRequestId 
where a2cSendR.AwardingOrganisationCentreId = 
@AwardingOrganisationCentreId and status=0
order by a2cSendR.A2CSendRequestId asc

update A2CSendRequests set Status=1 
where A2CSendRequestId =@A2CSendRequestId
and AwardingOrganisationCentreId = @AwardingOrganisationCentreId

Select a2cSendR.A2CSendRequestId, a2cR.A2CRequestId, a2cSendR.AwardingOrganisationCentreId,RequestType,AOAssignCentreNumber
,aoc.CentreId,aoc.AwardingOrganisationDetailId,c.CentreNumber, aoc.A2CSchoolId,OutgoingSequence
from A2CRequests a2cR inner join A2CSendRequests a2cSendR
on a2cr.AwardingOrganisationCentreId=a2csendr.AwardingOrganisationCentreId and  a2cr.A2CRequestId=a2csendr.A2CRequestId
inner join AwardingOrganisationCentres aoc on aoc.AwardingOrganisationCentreId=a2cr.AwardingOrganisationCentreId
inner join Centres c on aoc.A2CSchoolId=c.A2CSchoolId and c.CentreId=aoc.CentreId
where a2csendr.A2CSendRequestId=@A2CSendRequestId


end
end
GO
PRINT N'Creating [dbo].[usp_InsertSchoolUser]...';


GO
CREATE Proc usp_InsertSchoolUser
@SchoolId			int = 0,
@UserId				uniqueidentifier,
@RoleId ListInt		readonly,
@Forename			nvarchar(255),
@SurName			nvarchar(255)
As
Begin
	
	Insert into Users(UserId, ForeName, SurName, SchoolId)
	Select @UserId, @Forename, @SurName, @SchoolId

	Insert into UsersInRoles(RoleId, UserId)
	Select	r.ID, @UserId
	From	@RoleId r

End
GO
PRINT N'Creating [dbo].[usp_InsertUpdate_AwardingOrganisationCentres]...';


GO



CREATE PROCEDURE [dbo].[usp_InsertUpdate_AwardingOrganisationCentres]
@A2CSchoolId int,
@AwardingBodyIdList ListNVarchar readonly,
@CentreNumberList ListNVarchar readonly,
@AOCentreCertificate varbinary(max),
@CertificatePassword nvarchar(50) ,
@CertificateExpiredDate date=null,
@CertificateFileName nvarchar(100)
AS

BEGIN

declare @CenterTable table (CentreId int, Name nvarchar(50), IsCentre bit, AOAssignNumber nvarchar(50))

insert into @CenterTable(CentreId,Name,IsCentre)
select CentreId,c.CentreNumber,1 from Centres c inner join @CentreNumberList list
on c.CentreNumber=list.Item
where c.A2CSchoolId = @A2CSchoolId



declare @AwardingOrganisationTable table (AwardingOrganisationDetailId int, Name nvarchar(50), IsCentre bit)
insert into @AwardingOrganisationTable(AwardingOrganisationDetailId,Name,IsCentre)
select AwardingOrganisationDetailId,c.AONumber,0 from AwardingOrganisationDetails c
inner join @AwardingBodyIdList list
on c.AONumber=list.Item

insert into @CenterTable(CentreId,Name,IsCentre,AOAssignNumber)
select c.CentreId,c.CentreNumber,1, list.Item from Centres c 
join AwardingOrganisationAOAssignedCentres aoassign
on c.CentreId= aoassign.CentreId
and c.A2CSchoolId=aoassign.A2CSchoolId
inner join @CentreNumberList list on list.Item=aoassign.AOAssignCentreNumber
where c.A2CSchoolId=@A2CSchoolId



declare @AwardingOrganisationCenterTable table (CentreId int, AwardingOrganisationDetailId int)
insert into @AwardingOrganisationCenterTable(CentreId,AwardingOrganisationDetailId)
select CentreId, AwardingOrganisationDetailId from
@CenterTable cross join @AwardingOrganisationTable


if exists(select 1 from @AwardingOrganisationCenterTable)
begin
Insert into AwardingOrganisationCentres (A2CSchoolId,AwardingOrganisationDetailId,CentreId)
select @A2CSchoolId,aoctable.AwardingOrganisationDetailId, aoctable.CentreId from @AwardingOrganisationCenterTable aoctable
left join AwardingOrganisationCentres aoc on aoc.A2CSchoolId=@A2CSchoolId and aoc.CentreId=aoctable.CentreId
and aoc.AwardingOrganisationDetailId=aoctable.AwardingOrganisationDetailId
where aoc.AwardingOrganisationCentreId is null



DECLARE @InsertedRows TABLE (AwardingOrganisationCertificateId INT, AwardingOrganisationDetailId int ) 


INSERT INTO [dbo].[AwardingOrganisationCertificates]
           ([A2CSchoolId]
           ,[AwardingOrganisationDetailId]
           ,[AOCentreCertificate]
           ,[CertificatePassword]
           ,[CertificateExpiredDate],CertificateFileName)
		   OUTPUT inserted.AwardingOrganisationCertificateId, 
		   inserted.AwardingOrganisationDetailId INTO @InsertedRows 
     Select
		@A2CSchoolId,AwardingOrganisationDetailId,
		@AOCentreCertificate,@CertificatePassword,
		@CertificateExpiredDate,@CertificateFileName
		from @AwardingOrganisationTable

declare @AwardingOrganisationCertificateIdListDeleted as listint
insert into @AwardingOrganisationCertificateIdListDeleted(ID)
select 
aocert.AwardingOrganisationCertificateId
from AwardingOrganisationCentreCertificates aocc
join AwardingOrganisationCertificates aocert
on aocc.AwardingOrganisationCertificateId=aocert.AwardingOrganisationCertificateId
join AwardingOrganisationCentres aocenter on aocenter.A2CSchoolId=@A2CSchoolId
and aocenter.AwardingOrganisationCentreId= aocc.AwardingOrganisationCentreId
and aocenter.AwardingOrganisationDetailId=aocert.AwardingOrganisationDetailId
join @AwardingOrganisationCenterTable aoctable on aoctable.CentreId=aocenter.CentreId
and aoctable.AwardingOrganisationDetailId=aocenter.AwardingOrganisationDetailId



Delete aocc from AwardingOrganisationCentreCertificates aocc
join AwardingOrganisationCertificates aocert
on aocc.AwardingOrganisationCertificateId=aocert.AwardingOrganisationCertificateId
join AwardingOrganisationCentres aocenter on aocenter.A2CSchoolId=@A2CSchoolId
and aocenter.AwardingOrganisationCentreId= aocc.AwardingOrganisationCentreId
and aocenter.AwardingOrganisationDetailId=aocert.AwardingOrganisationDetailId
join @AwardingOrganisationCenterTable aoctable on aoctable.CentreId=aocenter.CentreId
and aoctable.AwardingOrganisationDetailId=aocenter.AwardingOrganisationDetailId


	

Delete aocert 
from AwardingOrganisationCertificates aocert
where
aocert.AwardingOrganisationCertificateId in
(
	select deleteIds.ID  from
	@AwardingOrganisationCertificateIdListDeleted deleteIds
	left join AwardingOrganisationCentreCertificates aocentrecert 
	on deleteIds.ID 
	=aocentrecert.AwardingOrganisationCertificateId
	where aocentrecert.AwardingOrganisationCertificateId is null
)


INSERT INTO [dbo].[AwardingOrganisationCentreCertificates]
(
AwardingOrganisationCentreId,
AwardingOrganisationCertificateId
)
Select 
aoc.AwardingOrganisationCentreId,ir.AwardingOrganisationCertificateId
from 
@InsertedRows ir
join 
 @AwardingOrganisationCenterTable aoctable on ir.AwardingOrganisationDetailId=aoctable.AwardingOrganisationDetailId
inner join AwardingOrganisationCentres aoc on aoc.A2CSchoolId=@A2CSchoolId 
and aoc.CentreId=aoctable.CentreId and aoc.AwardingOrganisationDetailId=aoctable.AwardingOrganisationDetailId
end

Select Name as Name,IsCentre as IsCentre,AOAssignNumber as AOAssignNumber from @CenterTable
union
Select Name as Name,IsCentre as IsCentre,'' as AOAssignNumber from @AwardingOrganisationTable

END
GO
PRINT N'Creating [dbo].[usp_ReleasePullMessageSyncLock]...';


GO
CREATE PROCEDURE usp_ReleasePullMessageSyncLock
	@AwardingOrganisationDetailId INT, 
	@CentreId INT
AS
BEGIN
	SET NOCOUNT ON;
	Update	PullMessageSync
	SET		[Status] = 0,
			[Timestamp] = GETUTCDATE()
	Where	[AwardingOrganisationDetailId] = @AwardingOrganisationDetailId 
			AND [CentreId] = @CentreId
END
GO
PRINT N'Creating [dbo].[usp_ResetPasswordByUserId]...';


GO
Create Procedure [dbo].[usp_ResetPasswordByUserId] 
@UserId uniqueidentifier,
@PasswordSalt nvarchar(128),
@LastPasswordChangedDate datetime
AS

BEGIN

    Update Dbo.aspnet_Membership
		set  Password=@PasswordSalt,LastPasswordChangedDate=@LastPasswordChangedDate         
    WHERE  UserId = @UserId;

END
GO
PRINT N'Creating [dbo].[usp_Select_A2CTransactionMasters_IdByName]...';


GO
CREATE PROCEDURE [dbo].[usp_Select_A2CTransactionMasters_IdByName]
(
 @TransactionName nvarchar(100)
)
AS

IF NOT EXISTS(SELECT 1 from A2CTransactionMasters where TransactionName=@TransactionName)
BEGIN
	INSERT INTO A2CTransactionMasters(TransactionName,TransactionDescription)
	VALUES(@TransactionName,@TransactionName)
END
DECLARE @A2CTransactionMasterId INT
 SELECT @A2CTransactionMasterId=A2CTransactionMasterId
  FROM [dbo].[A2CTransactionMasters]
WHERE TransactionName=@TransactionName
RETURN @A2CTransactionMasterId
GO
PRINT N'Creating [dbo].[usp_Select_A2CXmlMessages]...';


GO
CREATE PROCEDURE [dbo].[usp_Select_A2CXmlMessages]
(
 @A2CMessageId INT
)
AS
SELECT [A2CMessageId]
      ,[A2CSchoolId]
      ,[AwardingOrganisationDetailId]
      ,[CentreId]
      ,[A2CMessageGuid]
      ,[TransactionName]
      ,[LastModifiedDate]
      ,[Status]
      ,[Id]
      ,[MessageContent]
  FROM [dbo].[A2CXmlMessages]
WHERE A2CMessageId=@A2CMessageId
GO
PRINT N'Creating [dbo].[usp_Select_AwardingOrganisationByUniqueKey]...';


GO

CREATE PROCEDURE [dbo].[usp_Select_AwardingOrganisationByUniqueKey]

(
@AwardingOrganisationDetailId int=null
)

AS

SELECT 
AO.AwardingOrganisationDetailId,
AO.AONumber  ,AwO.Name
	  ,AwO.EndPoint
	  ,AwO.PhoneNumber
	  ,AO.MISCertificate
	  ,AwO.Description
	  ,AO.LastModifiedDate
  FROM AwardingOrganisationDetails AO 
  Inner Join AwardingOrganisations AwO ON AO.AwardingOrganisationId=AwO.AwardingOrganisationId
  Where AO.AwardingOrganisationDetailId=@AwardingOrganisationDetailId or @AwardingOrganisationDetailId is null
GO
PRINT N'Creating [dbo].[usp_Select_AwardingOrganisationCentres]...';


GO

CREATE Procedure usp_Select_AwardingOrganisationCentres

(

@A2CSchoolId int,

@ActiveStatus nvarchar(30),

@ExpireStatus nvarchar(30),

@ExpireMessage nvarchar(200),

@ToExpireMessage nvarchar(200)

)

as

begin


Declare @DatetoCompare date



set @DatetoCompare=CONVERT (date, GETUTCDATE())

select  aod.AONumber,ao.Name, c.CentreNumber,

aocert.CertificateExpiredDate,

case when 

aocert.CertificateExpiredDate>=@DatetoCompare then @ActiveStatus

else @ExpireStatus end as Status

,aocc.LastModifiedDate

,

case when aocert.CertificateExpiredDate<@DatetoCompare then @ExpireMessage 

when dateadd(mm,-3, CONVERT (date, aocert.CertificateExpiredDate)) 

<=@DatetoCompare then @ToExpireMessage 

else '' end

as message

from AwardingOrganisations ao

inner join AwardingOrganisationDetails aod on ao.AwardingOrganisationId=aod.AwardingOrganisationDetailId

inner join AwardingOrganisationCentres aoc on aoc.AwardingOrganisationDetailId=aod.AwardingOrganisationDetailId

inner join AwardingOrganisationCentreCertificates aocc on aocc.AwardingOrganisationCentreId= aoc.AwardingOrganisationCentreId

inner join AwardingOrganisationCertificates aocert on aocert.AwardingOrganisationCertificateId

=aocc.AwardingOrganisationCertificateId

inner join Centres c on c.CentreId=aoc.CentreId

where c.A2CSchoolId=@A2CSchoolId

order by aocc.LastModifiedDate desc



end
GO
PRINT N'Creating [dbo].[usp_Select_AwardingOrganisationCentresByUniqueKeyWithAOCentre]...';


GO


CREATE PROCEDURE [dbo].[usp_Select_AwardingOrganisationCentresByUniqueKeyWithAOCentre]

(

@A2CSchoolId int,

@AwardingOrganisationDetailId int,

@CentreId int

)

AS

SELECT 
AOC.AwardingOrganisationCentreId,
    AOCCer.AOCentreCertificate,
	AOCCer.CertificatePassword,
	AOAssign.AOAssignCentreNumber,
	C.CentreNumber
  FROM [dbo].[AwardingOrganisationCentres] AOC
  Inner Join AwardingOrganisationCertificates AOCCer on AOCCer.AwardingOrganisationDetailId=AOC.AwardingOrganisationDetailId
  Inner Join AwardingOrganisationCentreCertificates AOCC on
  AOCCer.AwardingOrganisationCertificateId = AOCC.AwardingOrganisationCertificateId
  AND AOCC.AwardingOrganisationCentreId=AOC.AwardingOrganisationCentreId    
  Inner Join Centres c on AOC.CentreId=C.CentreId and AOC.A2CSchoolId=C.A2CSchoolId
  Left Join AwardingOrganisationAOAssignedCentres AOAssign on AOAssign.A2CSchoolId=AOC.A2CSchoolId
  and AOAssign.AwardingOrganisationDetailId=AOC.AwardingOrganisationDetailId AND AOAssign.CentreId=AOC.CentreId
  Where AOC.A2CSchoolId=@A2CSchoolId AND AOC.CentreId =@CentreId AND AOC.AwardingOrganisationDetailId=@AwardingOrganisationDetailId
GO
PRINT N'Creating [dbo].[usp_Select_AwardingOrganisationsByCentreId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO


CREATE PROCEDURE [dbo].[usp_Select_AwardingOrganisationsByCentreId]
(
@A2CSchoolId int,
@CentreId int,
@AwardingOrganisationsByCentreId int
)
AS
SELECT 
      Distinct AWO.Name, AO.AwardingOrganisationDetailId,AO.AONumber,AOC.AwardingOrganisationCentreId
  FROM [dbo].[AwardingOrganisationCentres] AOC
  Inner Join AwardingOrganisationDetails AO ON AO.AwardingOrganisationDetailId=AOC.AwardingOrganisationDetailId
  Inner Join AwardingOrganisations AwO ON AO.AwardingOrganisationId=AwO.AwardingOrganisationId
  Inner Join Centres C ON C.A2CSchoolId=AOC.A2CSchoolId AND C.CentreId=AOC.CentreId
  Inner Join AwardingOrganisationCertificates AOCCer on AOCCer.AwardingOrganisationDetailId=AO.AwardingOrganisationDetailId  
  Inner Join AwardingOrganisationCentreCertificates AOCC on
  AOCCer.AwardingOrganisationCertificateId = AOCC.AwardingOrganisationCertificateId
  AND AOCC.AwardingOrganisationCentreId=AOC.AwardingOrganisationCentreId  
  Left Join AwardingOrganisationAOAssignedCentres ACI
  on ACI.AwardingOrganisationDetailId = AOC.AwardingOrganisationDetailId
  and ACI.A2CSchoolId = AOC.A2CSchoolId
  and AOC.CentreId = ACI.CentreId
  Where AOC.A2CSchoolId=@A2CSchoolId
  AND ((@AwardingOrganisationsByCentreId<=0 and C.CentreId=@CentreId and ACI.AwardingOrganisationAOAssignedCentreId is null)
  or (@AwardingOrganisationsByCentreId>0 AND AOC.AwardingOrganisationCentreId = @AwardingOrganisationsByCentreId))
  order by AWO.Name,AO.AONumber
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_Select_CentreByName]...';


GO
CREATE PROCEDURE [dbo].[usp_Select_CentreByName]
( 
 @CentreNumber nvarchar(20) 
 )
  AS
    
  SELECT [CentreId],A2CSchoolId
  FROM Centres C WHERE 
  C.CentreNumber=@CentreNumber
GO
PRINT N'Creating [dbo].[usp_Select_CentresBySchoolIdLinkedAwardingOrganisation]...';


GO

CREATE PROCEDURE [dbo].[usp_Select_CentresBySchoolIdLinkedAwardingOrganisation]
(
	@A2CSchoolId int
)
AS
BEGIN
	SET NOCOUNT ON;


	DECLARE @Centre table(
		CentreId int,
		 AwardingOrganisationCentreId int,
		 CentreNumber nvarchar(100)
	)
	Insert into @Centre(CentreId,AwardingOrganisationCentreId,CentreNumber)
	SELECT	AOC.[CentreId], aoc.AwardingOrganisationCentreId as AwardingOrganisationCentreId, C.CentreNumber + ' (' + AwO.Name +')' CentreNumber
	FROM	[dbo].[AwardingOrganisationCentres] AOC
			Inner Join AwardingOrganisationAOAssignedCentres ACI
				on ACI.AwardingOrganisationDetailId = AOC.AwardingOrganisationDetailId
				and ACI.A2CSchoolId = AOC.A2CSchoolId
				and AOC.CentreId = ACI.CentreId
			Inner Join AwardingOrganisationDetails AO 
				ON AO.AwardingOrganisationDetailId=AOC.AwardingOrganisationDetailId
			Inner Join AwardingOrganisations AwO 
				ON AO.AwardingOrganisationId=AwO.AwardingOrganisationId
			Inner Join Centres C 
				ON C.A2CSchoolId=AOC.A2CSchoolId AND C.CentreId=AOC.CentreId
			Inner Join AwardingOrganisationCertificates AOCCer 
				on AOCCer.AwardingOrganisationDetailId=AO.AwardingOrganisationDetailId  
			Inner Join AwardingOrganisationCentreCertificates AOCC 
				on AOCCer.AwardingOrganisationCertificateId = AOCC.AwardingOrganisationCertificateId
				AND AOCC.AwardingOrganisationCentreId=AOC.AwardingOrganisationCentreId
	Where	AOC.A2CSchoolId=@A2CSchoolId
	ORDER BY CentreNumber
	Insert into @Centre(CentreId,AwardingOrganisationCentreId,CentreNumber)
	SELECT	Distinct AOC.[CentreId], 0 AwardingOrganisationCentreId, C.CentreNumber + ' (NCN)' CentreNumber
	FROM	[dbo].[AwardingOrganisationCentres] AOC
			Inner Join AwardingOrganisationDetails AO 
				ON AO.AwardingOrganisationDetailId=AOC.AwardingOrganisationDetailId
			Inner Join AwardingOrganisations AwO 
				ON AO.AwardingOrganisationId=AwO.AwardingOrganisationId
			Inner Join Centres C 
				ON C.A2CSchoolId=AOC.A2CSchoolId AND C.CentreId=AOC.CentreId
			Inner Join AwardingOrganisationCertificates AOCCer 
				on AOCCer.AwardingOrganisationDetailId=AO.AwardingOrganisationDetailId  
			Inner Join AwardingOrganisationCentreCertificates AOCC 
				on AOCCer.AwardingOrganisationCertificateId = AOCC.AwardingOrganisationCertificateId
				AND AOCC.AwardingOrganisationCentreId=AOC.AwardingOrganisationCentreId  
			left join @Centre ce on AOC.AwardingOrganisationCentreId=ce.AwardingOrganisationCentreId
	Where	AOC.A2CSchoolId=@A2CSchoolId and ce.AwardingOrganisationCentreId is null
	
	Select * from @Centre order by CentreNumber
END
GO
PRINT N'Creating [dbo].[usp_SelectA2CRequestList]...';


GO

---usp_SelectA2CRequestList 1001
CREATE PROCEDURE [dbo].[usp_SelectA2CRequestList]
@A2CSchoolId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[LastModifiedDate] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
	@Take int = (@PageNumber * @PageSize),
	@WhereClause nvarchar(max) = '[A2CSchoolId] = ' + cast(@A2CSchoolId as nvarchar(10)) +
								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end

 print @WhereClause
SET @TotalCount = 0;
	
	

	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(Select c.CentreNumber,a.Name,aod.AONumber
	,case when rpc.AOAssignCentreNumber is null then ''NCN (HCN)'' else ''AO Assigned Centre ID''
	end as IdentifierType
	,''RPC'' as TransactionType
	,case when rpc.AOAssignCentreNumber IS null then c.CentreNumber else rpc.AOAssignCentreNumber
	end as IdentifierValue,
	rpc.Feedback,
	rpc.LastModifiedDate,aoc.A2CSchoolId
	from A2CRequests rpc
	inner join AwardingOrganisationCentres aoc
	on rpc.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
	inner join AwardingOrganisationDetails aod on aoc.AwardingOrganisationDetailId=aod.AwardingOrganisationDetailId
	inner join AwardingOrganisations a on a.AwardingOrganisationId=aod.AwardingOrganisationId
	inner join Centres c on c.CentreId=aoc.CentreId and aoc.A2CSchoolId=c.A2CSchoolId
	) p
	 Where ' + @WhereClause
	 

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'Select p2.CentreNumber,p2.Name,p2.AONumber,p2.IdentifierType,p2.TransactionType,p2.IdentifierValue,
	p2.Feedback,p2.LastModifiedDate,p2.RN
	from (Select p1.CentreNumber,p1.Name,p1.AONumber,p1.IdentifierType,p1.TransactionType,p1.IdentifierValue,
	p1.Feedback,p1.LastModifiedDate,p1.A2CSchoolId,ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	from (Select p.CentreNumber,p.Name,p.AONumber,p.IdentifierType,p.TransactionType,p.IdentifierValue,
	p.Feedback,p.LastModifiedDate,p.A2CSchoolId from
	(Select 	c.CentreNumber,a.Name,aod.AONumber
	,case when rpc.AOAssignCentreNumber is null then ''NCN (HCN)'' else ''AO Assigned Centre ID''
	end as IdentifierType
	,''RPC'' as TransactionType
	,case when rpc.AOAssignCentreNumber IS null then c.CentreNumber else rpc.AOAssignCentreNumber
	end as IdentifierValue,
	rpc.Feedback,
	rpc.LastModifiedDate,aoc.A2CSchoolId
	from A2CRequests rpc
	inner join AwardingOrganisationCentres aoc
	on rpc.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
	inner join AwardingOrganisationDetails aod on aoc.AwardingOrganisationDetailId=aod.AwardingOrganisationDetailId
	inner join AwardingOrganisations a on a.AwardingOrganisationId=aod.AwardingOrganisationId
	inner join Centres c on c.CentreId=aoc.CentreId and aoc.A2CSchoolId=c.A2CSchoolId
	) p
	 Where ' + @WhereClause
	 + ') p1) p2 where p2.[RN] BETWEEN @Skip AND @Take'
	print @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take


END
GO
PRINT N'Creating [dbo].[usp_SelectA2CRequestListToSend]...';


GO

---EXEC usp_SelectA2CRequestListToSend
CREATE PROCEDURE [dbo].[usp_SelectA2CRequestListToSend]
AS
BEGIN
Select 
distinct a2cSendR.AwardingOrganisationCentreId,
aoc.A2CSchoolId
from
A2CRequests a2cR inner join A2CSendRequests a2cSendR
on a2cr.AwardingOrganisationCentreId=a2csendr.AwardingOrganisationCentreId and  a2cr.A2CRequestId=a2csendr.A2CRequestId
inner join AwardingOrganisationCentres aoc on aoc.AwardingOrganisationCentreId=a2cSendR.AwardingOrganisationCentreId
where a2csendr.Status=0
END
GO
PRINT N'Creating [dbo].[usp_SelectQEAdditionalDataList]...';


GO

--usp_SelectQEAdditionalDataList 1968,1001,1, '((( [QeaEffectiveEndDateTime]  between '09/03/2015 18:30:00' and '09/04/2015 18:29:59'))) desc','',1,20
CREATE PROCEDURE [dbo].[usp_SelectQEAdditionalDataList]
@QualificationElementId int,
@AwardingOrganisationCentreId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[QeaEffectiveStartDateTime] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


SET @TotalCount = 0;
Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
@Take int = (@PageNumber * @PageSize),
@WhereClause nvarchar(max) = '[AwardingOrganisationCentreId] = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								' and [QualificationElementId] = ' + cast(@QualificationElementId as nvarchar(10))  +
								' and Record_Delete_Flag=0'+
							case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
							else ' and ' + @GridWhereClause end


SET @TotalCount = 0;
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(Select AwardingOrganisationCentreId,QualificationElementId,Record_Delete_Flag,
		QEA_Effective_Start_Date_Time as QeaEffectiveStartDateTime,QEA_Effective_End_Date_Time as QeaEffectiveEndDateTime,
		SLA_OnDemand_Result_Clndr_Days as SlaOnDemandResultClndrDays,Series_Label as SeriesLabel,
		OnDemand_Entry_Calendar_Days as OnDemandEntryCalendarDays
		from QEAvailability qea) p
		 Where ' + @WhereClause
	 
	 print @CountQuery

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'Select AwardingOrganisationCentreId,
				QualificationElementId,
				QeaEffectiveStartDateTime,QeaEffectiveEndDateTime,SlaOnDemandResultClndrDays,
				SeriesLabel,OnDemandEntryCalendarDays,RN
	from (Select AwardingOrganisationCentreId,
				QualificationElementId,
				Record_Delete_Flag,
				QeaEffectiveStartDateTime,QeaEffectiveEndDateTime,SlaOnDemandResultClndrDays,
				SeriesLabel,OnDemandEntryCalendarDays,ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	from (Select AwardingOrganisationCentreId,
				QualificationElementId,
				Record_Delete_Flag,
				QeaEffectiveStartDateTime,QeaEffectiveEndDateTime,SlaOnDemandResultClndrDays,
				SeriesLabel,OnDemandEntryCalendarDays from
		(Select 
				AwardingOrganisationCentreId,
				QualificationElementId,
				Record_Delete_Flag,
				QEA_Effective_Start_Date_Time as QeaEffectiveStartDateTime,QEA_Effective_End_Date_Time as QeaEffectiveEndDateTime,
				SLA_OnDemand_Result_Clndr_Days as SlaOnDemandResultClndrDays,Series_Label as SeriesLabel,
				OnDemand_Entry_Calendar_Days as OnDemandEntryCalendarDays
				from QEAvailability qea
		) p
		Where ' + @WhereClause
	 + ') p1) p2 where p2.[RN] BETWEEN @Skip AND @Take'
	 ---print @CountQuery
	print @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	print @TotalCount

END
GO
PRINT N'Creating [dbo].[usp_UnlockSelectedUsers]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[usp_UnlockSelectedUsers]   

@UserIds NVARCHAR (MAX),

@newPasswords NVARCHAR (MAX)

AS

BEGIN

    SET NOCOUNT ON;

	DECLARE @userId uniqueidentifier;
	DECLARE @password nvarchar(256);
	DECLARE @posUser INT,@posPassword INT;
	Declare @stringToSplitUserId NVARCHAR (MAX),@stringToSplitPassword NVARCHAR (MAX);
		
	Set @stringToSplitUserId=@UserIds;
	Set @stringToSplitPassword=@newPasswords;

	Declare @inputUserData TABLE (UserId uniqueidentifier primary key, NewPassword nvarchar(128));

	-- Slipt Userid and insert in to temp table

	WHILE LEN(@stringToSplitUserId) > 0
	BEGIN

		SELECT @posUser  = CHARINDEX(',', @stringToSplitUserId)
		SELECT @posPassword  = CHARINDEX(',', @stringToSplitPassword)

		if @posUser = 0
			Begin
				SELECT @posUser = LEN(@stringToSplitUserId)
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser))
				SELECT @posPassword = LEN(@stringToSplitPassword)
				SELECT @password = SUBSTRING(@stringToSplitPassword, 1, @posPassword)
			End
		Else
			Begin
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser-1))
				SELECT @password = SUBSTRING(@stringToSplitPassword, 1, @posPassword-1)
			End

		INSERT INTO @inputUserData 
		SELECT @userId,@password 
			
		SELECT @stringToSplitUserId = SUBSTRING(@stringToSplitUserId, @posUser+1, LEN(@stringToSplitUserId)-@posUser)
		SELECT @stringToSplitPassword = SUBSTRING(@stringToSplitPassword, @posPassword+1, LEN(@stringToSplitPassword)-@posPassword)
	END

	UPDATE dbo.aspnet_Membership
			SET IsLockedOut = 0,
				FailedPasswordAttemptCount = 0,
				FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
				FailedPasswordAnswerAttemptCount = 0,
				FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
				LastLockoutDate = CONVERT( datetime, '17540101', 112 ),
				Password=iud.NewPassword,
				LastPasswordChangedDate=GETUTCDATE()
			FROM dbo.aspnet_Membership 
			INNER JOIN @inputUserData iud ON dbo.aspnet_Membership.UserId = iud.UserId

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_UnlockUsers]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE [dbo].[usp_UnlockUsers]   
AS
BEGIN
   
	UPDATE dbo.aspnet_Membership
		SET IsLockedOut = 0,
			FailedPasswordAttemptCount = 0,
			FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
			FailedPasswordAnswerAttemptCount = 0,
			FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
			LastLockoutDate = CONVERT( datetime, '17540101', 112 )
		WHERE IsLockedOut=1 and IsApproved=1 and DATEADD(minute,20,LastLockoutDate) <=getutcdate()

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[usp_UpdateSchoolUser]...';


GO
CREATE Proc [dbo].[usp_UpdateSchoolUser]
@SchoolId			int = 0,
@UserId				uniqueidentifier,
@UserName			nvarchar(512),
@Email				nvarchar(512),
@RoleId ListInt		readonly,
@Forename			nvarchar(255),
@SurName			nvarchar(255),
@PasswordHash		nvarchar(256) = null
As
Begin
	
	Update	[dbo].[Users]
	Set		[ForeName] = @Forename,
			[SurName] = @SurName
	Where	[UserId] = @UserId AND [SchoolId] = @SchoolId

	Delete from [dbo].[UsersInRoles] where UserId = @UserId

	Insert into UsersInRoles(RoleId, UserId)
	Select	r.ID, @UserId
	From	@RoleId r

	if @PasswordHash is null
	Begin
		UPDATE [dbo].[aspnet_Membership]
		SET		[Email]            = @Email,
				[LoweredEmail]     = LOWER(@Email)
		WHERE  @UserId = [UserId]
	end
	Else
	Begin
		UPDATE [dbo].[aspnet_Membership]
		SET		[Email]            = @Email,
				[LoweredEmail]     = LOWER(@Email),
				IsLockedOut = 0,
				FailedPasswordAttemptCount = 0,
				FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
				FailedPasswordAnswerAttemptCount = 0,
				FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
				LastLockoutDate = CONVERT( datetime, '17540101', 112 ),
				[Password] = @PasswordHash,
				LastPasswordChangedDate=GETUTCDATE()
		WHERE  @UserId = [UserId]
	End

	

	

	UPDATE  [dbo].[aspnet_Users]
    SET     UserName = @UserName,
			LoweredUserName = LOWER(@UserName)
    WHERE   @UserId = UserId


	
End
GO
PRINT N'Creating [dbo].[aspnet_Membership_CreateUser]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_Membership_CreateUser
    @ApplicationName                        nvarchar(256),
    @UserName                               nvarchar(256),
    @Password                               nvarchar(128),
    @PasswordSalt                           nvarchar(128),
    @Email                                  nvarchar(256),
    @PasswordQuestion                       nvarchar(256),
    @PasswordAnswer                         nvarchar(128),
    @IsApproved                             bit,
    @CurrentTimeUtc                         datetime,
    @CreateDate                             datetime = NULL,
    @UniqueEmail                            int      = 0,
    @PasswordFormat                         int      = 0,
    @UserId                                 uniqueidentifier OUTPUT
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @NewUserId uniqueidentifier
    SELECT @NewUserId = NULL

    DECLARE @IsLockedOut bit
    SET @IsLockedOut = 0

    DECLARE @LastLockoutDate  datetime
    SET @LastLockoutDate = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAttemptCount int
    SET @FailedPasswordAttemptCount = 0

    DECLARE @FailedPasswordAttemptWindowStart  datetime
    SET @FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @FailedPasswordAnswerAttemptCount int
    SET @FailedPasswordAnswerAttemptCount = 0

    DECLARE @FailedPasswordAnswerAttemptWindowStart  datetime
    SET @FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )

    DECLARE @NewUserCreated bit
    DECLARE @ReturnValue   int
    SET @ReturnValue = 0

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
	    BEGIN TRANSACTION
	    SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    SET @CreateDate = @CurrentTimeUtc

    SELECT  @NewUserId = UserId FROM dbo.aspnet_Users WHERE LOWER(@UserName) = LoweredUserName AND @ApplicationId = ApplicationId
    IF ( @NewUserId IS NULL )
    BEGIN
        SET @NewUserId = @UserId
        EXEC @ReturnValue = dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CreateDate, @NewUserId OUTPUT
        SET @NewUserCreated = 1
    END
    ELSE
    BEGIN
        SET @NewUserCreated = 0
        IF( @NewUserId <> @UserId AND @UserId IS NOT NULL )
        BEGIN
            SET @ErrorCode = 6
            GOTO Cleanup
        END
    END

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @ReturnValue = -1 )
    BEGIN
        SET @ErrorCode = 10
        GOTO Cleanup
    END

    IF ( EXISTS ( SELECT UserId
                  FROM   dbo.aspnet_Membership
                  WHERE  @NewUserId = UserId ) )
    BEGIN
        SET @ErrorCode = 6
        GOTO Cleanup
    END

    SET @UserId = @NewUserId

    IF (@UniqueEmail = 1)
    BEGIN
        IF (EXISTS (SELECT *
                    FROM  dbo.aspnet_Membership m WITH ( UPDLOCK, HOLDLOCK )
                    WHERE ApplicationId = @ApplicationId AND LoweredEmail = LOWER(@Email)))
        BEGIN
            SET @ErrorCode = 7
            GOTO Cleanup
        END
    END

    IF (@NewUserCreated = 0)
    BEGIN
        UPDATE dbo.aspnet_Users
        SET    LastActivityDate = @CreateDate
        WHERE  @UserId = UserId
        IF( @@ERROR <> 0 )
        BEGIN
            SET @ErrorCode = -1
            GOTO Cleanup
        END
    END

    INSERT INTO dbo.aspnet_Membership
                ( ApplicationId,
                  UserId,
                  Password,
                  PasswordSalt,
                  Email,
                  LoweredEmail,
                  PasswordQuestion,
                  PasswordAnswer,
                  PasswordFormat,
                  IsApproved,
                  IsLockedOut,
                  CreateDate,
                  LastLoginDate,
                  LastPasswordChangedDate,
                  LastLockoutDate,
                  FailedPasswordAttemptCount,
                  FailedPasswordAttemptWindowStart,
                  FailedPasswordAnswerAttemptCount,
                  FailedPasswordAnswerAttemptWindowStart )
         VALUES ( @ApplicationId,
                  @UserId,
                  @Password,
                  @PasswordSalt,
                  @Email,
                  LOWER(@Email),
                  @PasswordQuestion,
                  @PasswordAnswer,
                  @PasswordFormat,
                  @IsApproved,
                  @IsLockedOut,
                  @CreateDate,
                  @CreateDate,
                  @CreateDate,
                  @LastLockoutDate,
                  @FailedPasswordAttemptCount,
                  @FailedPasswordAttemptWindowStart,
                  @FailedPasswordAnswerAttemptCount,
                  @FailedPasswordAnswerAttemptWindowStart )

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
	    SET @TranStarted = 0
	    COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_PersonalizationPerUser_SetPageSettings]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE PROCEDURE dbo.aspnet_PersonalizationPerUser_SetPageSettings (
    @ApplicationName  NVARCHAR(256),
    @UserName         NVARCHAR(256),
    @Path             NVARCHAR(256),
    @PageSettings     IMAGE,
    @CurrentTimeUtc   DATETIME)
AS
BEGIN
    DECLARE @ApplicationId UNIQUEIDENTIFIER
    DECLARE @PathId UNIQUEIDENTIFIER
    DECLARE @UserId UNIQUEIDENTIFIER

    SELECT @ApplicationId = NULL
    SELECT @PathId = NULL
    SELECT @UserId = NULL

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    SELECT @PathId = u.PathId FROM dbo.aspnet_Paths u WHERE u.ApplicationId = @ApplicationId AND u.LoweredPath = LOWER(@Path)
    IF (@PathId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Paths_CreatePath @ApplicationId, @Path, @PathId OUTPUT
    END

    SELECT @UserId = u.UserId FROM dbo.aspnet_Users u WHERE u.ApplicationId = @ApplicationId AND u.LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
    BEGIN
        EXEC dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, 0, @CurrentTimeUtc, @UserId OUTPUT
    END

    UPDATE   dbo.aspnet_Users WITH (ROWLOCK)
    SET      LastActivityDate = @CurrentTimeUtc
    WHERE    UserId = @UserId
    IF (@@ROWCOUNT = 0) -- Username not found
        RETURN

    IF (EXISTS(SELECT PathId FROM dbo.aspnet_PersonalizationPerUser WHERE UserId = @UserId AND PathId = @PathId))
        UPDATE dbo.aspnet_PersonalizationPerUser SET PageSettings = @PageSettings, LastUpdatedDate = @CurrentTimeUtc WHERE UserId = @UserId AND PathId = @PathId
    ELSE
        INSERT INTO dbo.aspnet_PersonalizationPerUser(UserId, PathId, PageSettings, LastUpdatedDate) VALUES (@UserId, @PathId, @PageSettings, @CurrentTimeUtc)
    RETURN 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_DeleteProfiles]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_DeleteProfiles
    @ApplicationName        nvarchar(256),
    @UserNames              nvarchar(4000)
AS
BEGIN
    DECLARE @UserName     nvarchar(256)
    DECLARE @CurrentPos   int
    DECLARE @NextPos      int
    DECLARE @NumDeleted   int
    DECLARE @DeletedUser  int
    DECLARE @TranStarted  bit
    DECLARE @ErrorCode    int

    SET @ErrorCode = 0
    SET @CurrentPos = 1
    SET @NumDeleted = 0
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
        BEGIN TRANSACTION
        SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    WHILE (@CurrentPos <= LEN(@UserNames))
    BEGIN
        SELECT @NextPos = CHARINDEX(N',', @UserNames,  @CurrentPos)
        IF (@NextPos = 0 OR @NextPos IS NULL)
            SELECT @NextPos = LEN(@UserNames) + 1

        SELECT @UserName = SUBSTRING(@UserNames, @CurrentPos, @NextPos - @CurrentPos)
        SELECT @CurrentPos = @NextPos+1

        IF (LEN(@UserName) > 0)
        BEGIN
            SELECT @DeletedUser = 0
            EXEC dbo.aspnet_Users_DeleteUser @ApplicationName, @UserName, 4, @DeletedUser OUTPUT
            IF( @@ERROR <> 0 )
            BEGIN
                SET @ErrorCode = -1
                GOTO Cleanup
            END
            IF (@DeletedUser <> 0)
                SELECT @NumDeleted = @NumDeleted + 1
        END
    END
    SELECT @NumDeleted
    IF (@TranStarted = 1)
    BEGIN
    	SET @TranStarted = 0
    	COMMIT TRANSACTION
    END
    SET @TranStarted = 0

    RETURN 0

Cleanup:
    IF (@TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END
    RETURN @ErrorCode
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[aspnet_Profile_SetProperties]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE PROCEDURE dbo.aspnet_Profile_SetProperties
    @ApplicationName        nvarchar(256),
    @PropertyNames          ntext,
    @PropertyValuesString   ntext,
    @PropertyValuesBinary   image,
    @UserName               nvarchar(256),
    @IsUserAnonymous        bit,
    @CurrentTimeUtc         datetime
AS
BEGIN
    DECLARE @ApplicationId uniqueidentifier
    SELECT  @ApplicationId = NULL

    DECLARE @ErrorCode     int
    SET @ErrorCode = 0

    DECLARE @TranStarted   bit
    SET @TranStarted = 0

    IF( @@TRANCOUNT = 0 )
    BEGIN
       BEGIN TRANSACTION
       SET @TranStarted = 1
    END
    ELSE
    	SET @TranStarted = 0

    EXEC dbo.aspnet_Applications_CreateApplication @ApplicationName, @ApplicationId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    DECLARE @UserId uniqueidentifier
    DECLARE @LastActivityDate datetime
    SELECT  @UserId = NULL
    SELECT  @LastActivityDate = @CurrentTimeUtc

    SELECT @UserId = UserId
    FROM   dbo.aspnet_Users
    WHERE  ApplicationId = @ApplicationId AND LoweredUserName = LOWER(@UserName)
    IF (@UserId IS NULL)
        EXEC dbo.aspnet_Users_CreateUser @ApplicationId, @UserName, @IsUserAnonymous, @LastActivityDate, @UserId OUTPUT

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    UPDATE dbo.aspnet_Users
    SET    LastActivityDate=@CurrentTimeUtc
    WHERE  UserId = @UserId

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF (EXISTS( SELECT *
               FROM   dbo.aspnet_Profile
               WHERE  UserId = @UserId))
        UPDATE dbo.aspnet_Profile
        SET    PropertyNames=@PropertyNames, PropertyValuesString = @PropertyValuesString,
               PropertyValuesBinary = @PropertyValuesBinary, LastUpdatedDate=@CurrentTimeUtc
        WHERE  UserId = @UserId
    ELSE
        INSERT INTO dbo.aspnet_Profile(UserId, PropertyNames, PropertyValuesString, PropertyValuesBinary, LastUpdatedDate)
             VALUES (@UserId, @PropertyNames, @PropertyValuesString, @PropertyValuesBinary, @CurrentTimeUtc)

    IF( @@ERROR <> 0 )
    BEGIN
        SET @ErrorCode = -1
        GOTO Cleanup
    END

    IF( @TranStarted = 1 )
    BEGIN
    	SET @TranStarted = 0
    	COMMIT TRANSACTION
    END

    RETURN 0

Cleanup:

    IF( @TranStarted = 1 )
    BEGIN
        SET @TranStarted = 0
    	ROLLBACK TRANSACTION
    END

    RETURN @ErrorCode

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[USP_IMPORTPRODUCTCATALOGE]...';


GO

CREATE PROCEDURE USP_IMPORTPRODUCTCATALOGE(
	@AwardingOrganisationCentreId				int, 
	@A2CTransactionId							int, 
	@A2CTransactionRequestId					int, 
	@A2CTransactionResponseId					int, 
	@A2CTransactionResponseEnvelopeId			int, 
	@A2CTransactionResponseEnvelopeMessageId	int
) AS BEGIN
	
	BEGIN TRY

		---------------------------------------------------
		----- Variable Declarations -----------------------
		---------------------------------------------------
		DECLARE 
			@XMLDATA						XML,					
			@AOQEPreferenceExists			bit,
			@QEAvailabilityExists			bit,
			@QEFeeCategoryExists			bit,
			@QELearnerIdentifierExists		bit,
			@QEPreferenceExists				bit,
			@QualificationElementExists		bit,
			@TransactionName				nvarchar(100),
			@MessageID						nvarchar(100),
			@SchoolID						int,
			@ScreenMasterId					int,
			@CentreNumber					nvarchar(100),
			@AONumber						nvarchar(100),
			@ErrorMessage					nvarchar(MAX),
			@IsError						bit = 0
			
		-----------------------------------------------------------------
		----- Required data validation & Set Values for variables -------
		-----------------------------------------------------------------
		IF 
			@AwardingOrganisationCentreId				= 0 OR 
			@A2CTransactionId							= 0 OR 
			@A2CTransactionRequestId					= 0 OR 
			@A2CTransactionResponseId					= 0 OR 
			@A2CTransactionResponseEnvelopeId			= 0 OR 
			@A2CTransactionResponseEnvelopeMessageId	= 0
		BEGIN
			print 'one of input parameters is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Invalid input parameter.', 16, 1);			
		END

		--Get the xml data to import
		SELECT 	
			@XMLDATA=CAST(AT.DATA AS XML)
		FROM 
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGES AT
		WHERE
			AT.AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreId AND
			AT.A2CTRANSACTIONID = @A2CTransactionId AND
			AT.A2CTRANSACTIONREQUESTID = @A2CTransactionRequestId AND 
			AT.A2CTRANSACTIONRESPONSEID = @A2CTransactionResponseId AND 
			AT.A2CTRANSACTIONRESPONSEENVELOPEID = @A2CTransactionResponseEnvelopeId AND
			AT.A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId
				
		IF @XMLDATA is null OR DATALENGTH(@XMLDATA)=0
		BEGIN
			print 'XML data not found, so stop further processing'
			set @IsError=1
			RAISERROR ('XML data not found.', 16, 1);
		END

		--Get SchoolID, Message ID and other details
		Select 
			@SchoolID=AOC.A2CSchoolId 
		from 
			AwardingOrganisationCentres AOC 
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		IF @SchoolID=0
		BEGIN
			print 'School id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('School id is zero.', 16, 1);
		END

		select 
			@CentreNumber = C.CentreNumber 
		from 
			AwardingOrganisationCentres AOC
			inner join Centres C on AOC.CentreId=C.CentreId
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		select 
			@AONumber = AOD.AONumber 
		from 
			AwardingOrganisationCentres AOC
			inner join AwardingOrganisationDetails AOD on AOC.AwardingOrganisationDetailId=AOD.AwardingOrganisationDetailId
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		Select 
			@ScreenMasterId = SM.ScreenMasterId 
		from 
			ScreenMasters SM 
		where 
			SM.ScreenName='ImportProductCatalogue'

		IF @ScreenMasterId=0
		BEGIN
			print 'Screen Master Id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Screen Master Id is zero.', 16, 1);			
		END			

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@TransactionName = CN.value('(a2c:TransactionName/text())[1]','[nvarchar](100)')
		From	
			@XMLDATA.nodes('/a2c:A2CMessage/a2c:MsgHeader/a2c:TransactionInfo') as Q(CN) 

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@MessageID = CN.value('(a2c:MessageID/text())[1]','[nvarchar](100)')
		From	
			@XMLDATA.nodes('/a2c:A2CMessage/a2c:MsgHeader/a2c:MsgInfo') as Q(CN) 

		IF @MessageID IS NULL
			SET @MessageID=''


		---------------------------------------------------
		---------------------------------------------------
		----- Mandatory/Primary Datablocks Validation -----
		---------------------------------------------------
		---------------------------------------------------	
		--In case a mandatory or primary datablock is missing from the catalogue, 
		--the error should be logged into Business error logs and 
		--the XML should not be imported. It should be ignored.	

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@AOQEPreferenceExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference/a2c:AOQEPreference_CN/a2c:AOQEPreference_ID'),
			@QEAvailabilityExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN/a2c:QEAvailability_ID'),
			@QEFeeCategoryExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QEFeeCategory_DS/a2c:QEFeeCategory/a2c:QEFeeCategory_ID'),
			@QELearnerIdentifierExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QELearnerIdentifier_DS/a2c:QELearnerIdentifier/a2c:QELearnerIdentifier_CN/a2c:QELearnerIdentifier_ID'),
			@QEPreferenceExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference/a2c:AOQEPreference_CN/a2c:AOQEPreference_ID'),
			@QualificationElementExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QualificationElement/a2c:QualificationElement_CN/a2c:QualificationElement_ID')
		
		IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUE'
		BEGIN
			IF 
				(@AOQEPreferenceExists = 1		AND
				@QEAvailabilityExists = 1		AND
				@QEFeeCategoryExists = 1		AND
				@QELearnerIdentifierExists = 1	AND
				@QEPreferenceExists = 1			AND
				@QualificationElementExists = 1) 
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUE Transaction, Mandatory/Primary Datablocks exist.'
			END
			ELSE
			BEGIN
			
				print 'inside PROCESSPRODUCTCATALOGUE Transaction, some Mandatory/Primary Datablock(s) missing'

				IF @AOQEPreferenceExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock AO QE Preference is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
						A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
						@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID)		
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEAvailabilityExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Availability is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
						A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
						@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEFeeCategoryExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Fee Category is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
						A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
						@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''		
					set @IsError=1
				END

				IF @QELearnerIdentifierExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Learner Identifier is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
						A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
						@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID)		
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEPreferenceExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Preference is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
						A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
						@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QualificationElementExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock Qualification Element is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
						A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
						@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				print 'inside PROCESSPRODUCTCATALOGUE Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'

				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUESTATIC'
		BEGIN
			IF @QualificationElementExists = 1
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUESTATIC Transaction, Mandatory/Primary Datablock exists.'
			END
			ELSE
			BEGIN
				SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock Qualification Element is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
		
				INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
						A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
						@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID)

				SET @ErrorMessage = ''
				set @IsError=1

				print 'inside PROCESSPRODUCTCATALOGUESTATIC Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'

				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUEINSTANCE'
		BEGIN
			IF @QEAvailabilityExists = 1
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUEINSTANCE Transaction, Mandatory/Primary Datablock exists.'
			END
			ELSE
			BEGIN
				SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Availability is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
		
				INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
						A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
						@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID)

				SET @ErrorMessage = ''
				set @IsError=1

				print 'inside PROCESSPRODUCTCATALOGUEINSTANCE Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'
				
				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE
		BEGIN
			print 'Unknown Transaction Name, so stop further processing'
			set @IsError=1			
			RAISERROR ('Unknown Transaction Name.', 16, 1);
		END	
		---------------------------------------------------
		----- Datablocks Validation Finish ----------------
		---------------------------------------------------

		---------------------------------------------------
		---------------------------------------------------
		-----STEP 1: IMPORT QUALIFICATION ELEMENTS---------
		---------------------------------------------------
		---------------------------------------------------

		BEGIN TRY

			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID], 
				QE.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]', '[nvarchar](50)') AO_Qualification_Element_Id,
				QE.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]', '[nvarchar](32)') Qualification_Element_Type,
				QE.value('(a2c:QE_Description/text())[1]','[nvarchar](3500)') QE_Description,
				QE.value('(a2c:Qualification_Element_Title/text())[1]','[nvarchar](200)') Qualification_Element_Title,
				QE.value('(a2c:QE_Short_Title/text())[1]','[nvarchar](50)') QE_Short_Title,
				QE.value('(a2c:QE_Effective_Version_Date/text())[1]','[nvarchar](100)') QE_Effective_Version_Date,
				QE.value('(a2c:QE_Effective_Version_End_Date/text())[1]','[nvarchar](100)') QE_Effective_Version_End_Date,
				QE.value('(a2c:Private_Learner_Type/text())[1]','[nvarchar](32)') Private_Learner_Type,
				QE.value('(a2c:QE_Moderation_Type/text())[1]','[nvarchar](32)') QE_Moderation_Type,
				QE.value('(a2c:First_Language_Required_Flag/text())[1]','[nvarchar](100)') First_Language_Required_Flag,
				QE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag,
				QE.value('(a2c:Qualification_Reference_Number/text())[1]','[nvarchar](10)') Qualification_Reference_Number,
				QE.value('(a2c:Learning_Aim_Code/text())[1]','[nvarchar](10)') Learning_Aim_Code,
				QE.value('(a2c:QE_Admin_Code/text())[1]','[nvarchar](50)') QE_Admin_Code,
				QE.value('(a2c:Scheme/a2c:Assessment_Max_Learner_Age/text())[1]','int') Assessment_Max_Learner_Age,
				QE.value('(a2c:Scheme/a2c:Assessment_Min_Learner_Age/text())[1]','int') Assessment_Min_Learner_Age,
				QE.value('(a2c:Scheme/a2c:First_Teaching_Date/text())[1]','[nvarchar](100)') First_Teaching_Date,
				QE.value('(a2c:Scheme/a2c:Last_Teaching_Date/text())[1]','[nvarchar](100)') Last_Teaching_Date,
				QE.value('(a2c:Scheme/a2c:QE_Centre_Auth_Agreement_Text/text())[1]','[nvarchar](400)') QE_Centre_Auth_Agreement_Text,
				QE.value('(a2c:Scheme/a2c:Qualification_Type/text())[1]','[nvarchar](50)') Qualification_Type,
				QE.value('(a2c:Scheme/a2c:Series_Based_Flag/text())[1]','[nvarchar](100)') Series_Based_Flag,
				QE.value('(a2c:Scheme/a2c:QE_Website_URL_Locator_Id/text())[1]','[nvarchar](1000)') QE_Website_URL_Locator_Id,
				QE.value('(a2c:Scheme/a2c:Date_Of_Birth_Reqd_Flag/text())[1]','[nvarchar](100)') Date_Of_Birth_Reqd_Flag,
				QE.value('(a2c:Scheme/a2c:Legal_Sex_Required_Flag/text())[1]','[nvarchar](100)') Legal_Sex_Required_Flag,
				QE.value('(a2c:Scheme/a2c:QE_Availability_Text/text())[1]','[nvarchar](3000)') QE_Availability_Text,
				QE.value('(a2c:Award/a2c:Accreditation_End_Review_Date/text())[1]','[nvarchar](100)') Accreditation_End_Review_Date,
				QE.value('(a2c:Award/a2c:Accreditation_Start_Date/text())[1]','[nvarchar](100)') Accreditation_Start_Date,
				QE.value('(a2c:Award/a2c:AO_Accred_Version_Number/text())[1]','[nvarchar](4)') AO_Accred_Version_Number,
				QE.value('(a2c:Award/a2c:Assessment_Language_Type/text())[1]','[nvarchar](50)') Assessment_Language_Type,
				QE.value('(a2c:Award/a2c:Award_Level_Type/text())[1]','[nvarchar](32)') Award_Level_Type,
				QE.value('(a2c:Award/a2c:Award_Type/text())[1]','[nvarchar](60)') Award_Type,
				QE.value('(a2c:Award/a2c:Cert_of_Unit_Credit_Issued_Flag/text())[1]','[nvarchar](100)') Cert_of_Unit_Credit_Issued_Flag,
				QE.value('(a2c:Award/a2c:Certification_End_Date/text())[1]','[nvarchar](100)') Certification_End_Date,
				QE.value('(a2c:Award/a2c:Certification_Start_Date/text())[1]','[nvarchar](100)') Certification_Start_Date,
				QE.value('(a2c:Award/a2c:Contributing_Units_Listed_Flag/text())[1]','[nvarchar](100)') Contributing_Units_Listed_Flag,
				QE.value('(a2c:Award/a2c:Course_Length_Type/text())[1]','[nvarchar](32)') Course_Length_Type,
				QE.value('(a2c:Award/a2c:Endorsed_Title_Reqd_Flag/text())[1]','[nvarchar](100)') Endorsed_Title_Reqd_Flag,
				QE.value('(a2c:Award/a2c:Guided_Learning_Hours_Max/text())[1]','int') Guided_Learning_Hours_Max,
				QE.value('(a2c:Award/a2c:Guided_Learning_Hours_Min/text())[1]','int') Guided_Learning_Hours_Min,
				QE.value('(a2c:Award/a2c:Operational_End_Date/text())[1]','[nvarchar](100)') Operational_End_Date,
				QE.value('(a2c:Award/a2c:Operational_Start_Date/text())[1]','[nvarchar](100)') Operational_Start_Date,
				QE.value('(a2c:Award/a2c:QE_Delivery_Model_Type/text())[1]','[nvarchar](32)') QE_Delivery_Model_Type,
				QE.value('(a2c:Award/a2c:QE_Evid_Reqmnt_Provided_Flag/text())[1]','[nvarchar](100)') QE_Evid_Reqmnt_Provided_Flag,
				QE.value('(a2c:Award/a2c:QE_Evidence_Requirement_Type/text())[1]','[nvarchar](32)') QE_Evidence_Requirement_Type,
				QE.value('(a2c:Award/a2c:Registration_Expiry_Months/text())[1]','int') Registration_Expiry_Months,
				QE.value('(a2c:Award/a2c:Resit_Rule_Text/text())[1]','[nvarchar](400)') Resit_Rule_Text,
				QE.value('(a2c:Award/a2c:Statement_Of_Credit_Issued_Flag/text())[1]','[nvarchar](100)') Statement_Of_Credit_Issued_Flag,
				QE.value('(a2c:Award/a2c:Study_Guide_Available_Type/text())[1]','[nvarchar](20)') Study_Guide_Available_Type,
				QE.value('(a2c:Award/a2c:Study_Guide_Details/text())[1]','[nvarchar](400)') Study_Guide_Details,
				QE.value('(a2c:Award/a2c:Study_Guide_Reference/text())[1]','[nvarchar](100)') Study_Guide_Reference,
				QE.value('(a2c:Award/a2c:Study_Guide_Reference_Type/text())[1]','[nvarchar](32)') Study_Guide_Reference_Type,
				QE.value('(a2c:Award/a2c:QE_Classification/text())[1]','[nvarchar](32)') QE_Classification,
				QE.value('(a2c:Award/a2c:Party_Id_Accreditor/text())[1]','[nvarchar](32)') Party_Id_Accreditor,
				QE.value('(a2c:Award/a2c:Party_Id_Sector_Lead/text())[1]','[nvarchar](32)') Party_Id_Sector_Lead,
				QE.value('(a2c:Award/a2c:Party_Role_Type_Assessor/text())[1]','[nvarchar](50)') Party_Role_Type_Assessor,
				QE.value('(a2c:LearningUnit/a2c:Learning_Unit_Level_Type/text())[1]','[nvarchar](32)') Learning_Unit_Level_Type,
				QE.value('(a2c:LearningUnit/a2c:Maximum_Resits_Allowed/text())[1]','int') Maximum_Resits_Allowed,
				QE.value('(a2c:Assessable/a2c:Extra_Time_Required_Flag/text())[1]','[nvarchar](100)') Extra_Time_Required_Flag,
				QE.value('(a2c:Assessable/a2c:Assessment_Method_Type/text())[1]','[nvarchar](40)') Assessment_Method_Type,
				QE.value('(a2c:Assessable/a2c:Assmnt_Actual_DateTime_Reqd_Flag/text())[1]','[nvarchar](100)') Assmnt_Actual_DateTime_Reqd_Flag,
				QE.value('(a2c:Assessable/a2c:Attendance_Data_Required_Flag/text())[1]','[nvarchar](100)') Attendance_Data_Required_Flag,
				QE.value('(a2c:Assessable/a2c:Cambridge_Assmnt_TimeZone_Num/text())[1]','int') Cambridge_Assmnt_TimeZone_Num,
				QE.value('(a2c:Assessable/a2c:Carry_Forward_Permissible_Flag/text())[1]','[nvarchar](100)') Carry_Forward_Permissible_Flag,
				QE.value('(a2c:Assessable/a2c:Maximum_Extra_Time_Minutes/text())[1]','int') Maximum_Extra_Time_Minutes,
				QE.value('(a2c:Assessable/a2c:On_Demand_Flag/text())[1]','[nvarchar](100)') On_Demand_Flag,
				QE.value('(a2c:Assessable/a2c:QE_Timetabled_Flag/text())[1]','[nvarchar](100)') QE_Timetabled_Flag,
				QE.value('(a2c:Assessable/a2c:Test_Day_Photograph_Reqd_Flag/text())[1]','[nvarchar](100)') Test_Day_Photograph_Reqd_Flag,
				QE.value('(a2c:Assessable/a2c:Tier_Level_Type/text())[1]','[nvarchar](20)') Tier_Level_Type,
				QE.value('(a2c:Assessable/a2c:Tier_Level_Common_Reference/text())[1]','[nvarchar](12)') Tier_Level_Common_Reference,
				QE.value('(a2c:Assessable/a2c:Time_Allowed_Mins/text())[1]','int') Time_Allowed_Mins,
				QE.value('(a2c:Assessable/a2c:Party_Role_Type_Assessor/text())[1]','[nvarchar](50)') AssessableParty_Role_Type_Assessor,
				QE.value('(a2c:Assessable/a2c:Party_Role_Type_ADT_Decider/text())[1]','[nvarchar](50)') Party_Role_Type_ADT_Decider,
				QE.value('(a2c:Assessable/a2c:Assessment_Medium_Type/text())[1]','[nvarchar](20)') Assessment_Medium_Type,
				QE.value('(a2c:Pathway/a2c:Equals_Indicator_Flag/text())[1]','[nvarchar](100)') Equals_Indicator_Flag,
				QE.value('(a2c:Pathway/a2c:Mandatory_In_Group_Flag/text())[1]','[nvarchar](100)') Mandatory_In_Group_Flag,
				QE.value('(a2c:Pathway/a2c:Minimum_Unit_Selection/text())[1]','int') Minimum_Unit_Selection,
				QE.value('(a2c:Pathway/a2c:Maximum_Unit_Selection/text())[1]','int') Maximum_Unit_Selection,
				QE.value('(a2c:Pathway/a2c:Minimum_Pathway_Selection/text())[1]','int') Minimum_Pathway_Selection,
				QE.value('(a2c:Pathway/a2c:Maximum_Pathway_Selection/text())[1]','int') Maximum_Pathway_Selection,
				QE.value('(a2c:Pathway/a2c:Minimum_Credit_Value/text())[1]','int') Minimum_Credit_Value
			into 
				#QE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QualificationElement/a2c:QualificationElement_CN') as QualificationElement_CN(QE) 

			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QE 
					WHERE ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')='')
			BEGIN
				PRINT 'Qualification Element - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type) 'RowRank' 
			FROM 
				#QE)
			SELECT 
				* 
			INTO 
				#QEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type 
					ORDER BY 
						[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type) 'RowRank' 
				FROM #QE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock Qualification Element - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id + ', Qualification_Element_Type=' + Qualification_Element_Type + ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy pk column to temp table
			ALTER TABLE #QE ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]
				
			---------------------------------------------------
			-----STEP 1.1: IMPORT [QualificationElement]-------
			---------------------------------------------------
			BEGIN TRY

				MERGE 
					[dbo].[QualificationElement] AS [target]
				USING 
					(SELECT * from #QE) AS source
				ON 
					([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
					[target].[QualificationElementId] = source.[QualificationElementId])
				WHEN MATCHED THEN 
				UPDATE SET 
					[QE_Description] = LTRIM(RTRIM(source.[QE_Description])),
					[Qualification_Element_Title] = LTRIM(RTRIM(source.[Qualification_Element_Title])),
					[QE_Short_Title] = LTRIM(RTRIM(source.[QE_Short_Title])),
					[QE_Effective_Version_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_Date]),
					[QE_Effective_Version_End_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_End_Date]),
					[Private_Learner_Type] = LTRIM(RTRIM(source.[Private_Learner_Type])),
					[QE_Moderation_Type] = LTRIM(RTRIM(source.[QE_Moderation_Type])),
					[First_Language_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[First_Language_Required_Flag]),
					[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]),
					[Qualification_Reference_Number] = LTRIM(RTRIM(source.[Qualification_Reference_Number])),
					[Learning_Aim_Code] = LTRIM(RTRIM(source.[Learning_Aim_Code])),
					[QE_Admin_Code] = LTRIM(RTRIM(source.[QE_Admin_Code]))
				WHEN NOT MATCHED THEN	
				INSERT (
					[AwardingOrganisationCentreId],
					[AO_Qualification_Element_Id],
					[Qualification_Element_Type],
					[QE_Description],
					[Qualification_Element_Title],
					[QE_Short_Title],
					[QE_Effective_Version_Date],
					[QE_Effective_Version_End_Date],
					[Private_Learner_Type],
					[QE_Moderation_Type],
					[First_Language_Required_Flag],
					[Record_Delete_Flag],
					[Qualification_Reference_Number],
					[Learning_Aim_Code],
					[QE_Admin_Code])
				VALUES (
					source.[AOCentreID],
					source.[AO_Qualification_Element_Id],
					LTRIM(RTRIM(source.[Qualification_Element_Type])),
					LTRIM(RTRIM(source.[QE_Description])),
					LTRIM(RTRIM(source.[Qualification_Element_Title])),
					LTRIM(RTRIM(source.[QE_Short_Title])),
					DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_Date]),
					DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_End_Date]),
					LTRIM(RTRIM(source.[Private_Learner_Type])),
					LTRIM(RTRIM(source.[QE_Moderation_Type])),
					DBO.FN_A2C_GETFLAG(source.[First_Language_Required_Flag]), 
					DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]),
					LTRIM(RTRIM(source.[Qualification_Reference_Number])),
					LTRIM(RTRIM(source.[Learning_Aim_Code])),
					LTRIM(RTRIM(source.[QE_Admin_Code]))
					);

				--Update newly created PKs of [dbo].[QualificationElement]
				Update 
					Q 
				set 
					[QualificationElementId]=QE.QualificationElementId
				from 
					#QE Q inner join [dbo].[QualificationElement] QE
				on 
					Q.AOCentreID=QE.AwardingOrganisationCentreId 
					and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
					and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Qualification Element block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Element'
					
			END CATCH;

			
			---------------------------------------------------
			-----STEP 1.2: IMPORT [Scheme]---------------------
			---------------------------------------------------
			BEGIN TRY
				
				MERGE [dbo].[Scheme] AS [target]
				USING (SELECT * from #QE where #QE.Qualification_Element_Type='Scheme' and #QE.[QualificationElementId] is not null) AS source
				ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
					[target].[QualificationElementId] = source.[QualificationElementId])
				WHEN MATCHED THEN 
				UPDATE SET 
					[Assessment_Max_Learner_Age] = source.[Assessment_Max_Learner_Age],
					[Assessment_Min_Learner_Age] = source.[Assessment_Min_Learner_Age],
					[First_Teaching_Date] = DBO.FN_A2C_GETDATETIME(source.[First_Teaching_Date]),
					[Last_Teaching_Date] = DBO.FN_A2C_GETDATETIME(source.[Last_Teaching_Date]),
					[QE_Centre_Auth_Agreement_Text] = source.[QE_Centre_Auth_Agreement_Text],
					[Qualification_Type] = source.[Qualification_Type],
					[Series_Based_Flag] = DBO.FN_A2C_GETFLAG(source.[Series_Based_Flag]),
					[QE_Website_URL_Locator_Id] = source.[QE_Website_URL_Locator_Id],
					[Date_Of_Birth_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Date_Of_Birth_Reqd_Flag]),
					[Legal_Sex_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Legal_Sex_Required_Flag]),
					[QE_Availability_Text] = source.[QE_Availability_Text]
				WHEN NOT MATCHED THEN	
				INSERT (
					[QualificationElementId],
					[AwardingOrganisationCentreId],
					[Assessment_Max_Learner_Age],
					[Assessment_Min_Learner_Age],
					[First_Teaching_Date],
					[Last_Teaching_Date],
					[QE_Centre_Auth_Agreement_Text],
					[Qualification_Type],
					[Series_Based_Flag],
					[QE_Website_URL_Locator_Id],
					[Date_Of_Birth_Reqd_Flag],
					[Legal_Sex_Required_Flag],
					[QE_Availability_Text])
				VALUES (
					source.[QualificationElementId],
					source.[AOCentreID],
					source.[Assessment_Max_Learner_Age],
					source.[Assessment_Min_Learner_Age],
					DBO.FN_A2C_GETDATETIME(source.[First_Teaching_Date]),
					DBO.FN_A2C_GETDATETIME(source.[Last_Teaching_Date]),
					source.[QE_Centre_Auth_Agreement_Text],
					source.[Qualification_Type],
					DBO.FN_A2C_GETFLAG(source.[Series_Based_Flag]),
					source.[QE_Website_URL_Locator_Id],
					DBO.FN_A2C_GETFLAG(source.[Date_Of_Birth_Reqd_Flag]),
					DBO.FN_A2C_GETFLAG(source.[Legal_Sex_Required_Flag]),
					source.[QE_Availability_Text]
					);

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Scheme block'

				set @IsError=1
		
				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Scheme'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.3: IMPORT [Award]----------------------
			---------------------------------------------------
			BEGIN TRY

			MERGE [dbo].[Award] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Award' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Accreditation_End_Review_Date] = DBO.FN_A2C_GETDATETIME(source.[Accreditation_End_Review_Date]),
				[Accreditation_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Accreditation_Start_Date]),
				[AO_Accred_Version_Number] = 		source.[AO_Accred_Version_Number],
				[Assessment_Language_Type] = 		source.[Assessment_Language_Type],
				[Award_Level_Type] = 		source.[Award_Level_Type],
				[Award_Type] = 		source.[Award_Type],
				[Cert_of_Unit_Credit_Issued_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Cert_of_Unit_Credit_Issued_Flag]),
				[Certification_End_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Certification_End_Date]),
				[Certification_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Certification_Start_Date]),
				[Contributing_Units_Listed_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Contributing_Units_Listed_Flag]),
				[Course_Length_Type] = 		source.[Course_Length_Type],
				[Endorsed_Title_Reqd_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Endorsed_Title_Reqd_Flag]),
				[Guided_Learning_Hours_Max] = 		source.[Guided_Learning_Hours_Max],
				[Guided_Learning_Hours_Min] = 		source.[Guided_Learning_Hours_Min],
				[Operational_End_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Operational_End_Date]),
				[Operational_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Operational_Start_Date]),
				[QE_Delivery_Model_Type] = 		source.[QE_Delivery_Model_Type],
				[QE_Evid_Reqmnt_Provided_Flag] = 		DBO.FN_A2C_GETFLAG(source.[QE_Evid_Reqmnt_Provided_Flag]),
				[QE_Evidence_Requirement_Type] = 		source.[QE_Evidence_Requirement_Type],
				[Registration_Expiry_Months] = 		source.[Registration_Expiry_Months],
				[Resit_Rule_Text] = 		source.[Resit_Rule_Text],
				[Statement_Of_Credit_Issued_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Statement_Of_Credit_Issued_Flag]),
				[Study_Guide_Available_Type] = 		source.[Study_Guide_Available_Type],
				[Study_Guide_Details] = 		source.[Study_Guide_Details],
				[Study_Guide_Reference] = 		source.[Study_Guide_Reference],
				[Study_Guide_Reference_Type] = 		source.[Study_Guide_Reference_Type],
				[QE_Classification] = 		source.[QE_Classification],
				[Party_Id_Accreditor] = 		source.[Party_Id_Accreditor],
				[Party_Id_Sector_Lead] = 		source.[Party_Id_Sector_Lead],
				[Party_Role_Type_Assessor] = 		source.[Party_Role_Type_Assessor]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Accreditation_End_Review_Date],
				[Accreditation_Start_Date],
				[AO_Accred_Version_Number],
				[Assessment_Language_Type],
				[Award_Level_Type],
				[Award_Type],
				[Cert_of_Unit_Credit_Issued_Flag],
				[Certification_End_Date],
				[Certification_Start_Date],
				[Contributing_Units_Listed_Flag],
				[Course_Length_Type],
				[Endorsed_Title_Reqd_Flag],
				[Guided_Learning_Hours_Max],
				[Guided_Learning_Hours_Min],
				[Operational_End_Date],
				[Operational_Start_Date],
				[QE_Delivery_Model_Type],
				[QE_Evid_Reqmnt_Provided_Flag],
				[QE_Evidence_Requirement_Type],
				[Registration_Expiry_Months],
				[Resit_Rule_Text],
				[Statement_Of_Credit_Issued_Flag],
				[Study_Guide_Available_Type],
				[Study_Guide_Details],
				[Study_Guide_Reference],
				[Study_Guide_Reference_Type],
				[QE_Classification],
				[Party_Id_Accreditor],
				[Party_Id_Sector_Lead],
				[Party_Role_Type_Assessor])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETDATETIME(source.[Accreditation_End_Review_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Accreditation_Start_Date]),
				source.[AO_Accred_Version_Number],
				source.[Assessment_Language_Type],
				source.[Award_Level_Type],
				source.[Award_Type],
				DBO.FN_A2C_GETFLAG(source.[Cert_of_Unit_Credit_Issued_Flag]),
				DBO.FN_A2C_GETDATETIME(source.[Certification_End_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Certification_Start_Date]),
				DBO.FN_A2C_GETFLAG(source.[Contributing_Units_Listed_Flag]),
				source.[Course_Length_Type],
				DBO.FN_A2C_GETFLAG(source.[Endorsed_Title_Reqd_Flag]),
				source.[Guided_Learning_Hours_Max],
				source.[Guided_Learning_Hours_Min],
				DBO.FN_A2C_GETDATETIME(source.[Operational_End_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Operational_Start_Date]),
				source.[QE_Delivery_Model_Type],
				DBO.FN_A2C_GETFLAG(source.[QE_Evid_Reqmnt_Provided_Flag]),
				source.[QE_Evidence_Requirement_Type],
				source.[Registration_Expiry_Months],
				source.[Resit_Rule_Text],
				DBO.FN_A2C_GETFLAG(source.[Statement_Of_Credit_Issued_Flag]),
				source.[Study_Guide_Available_Type],
				source.[Study_Guide_Details],
				source.[Study_Guide_Reference],
				source.[Study_Guide_Reference_Type],
				source.[QE_Classification],
				source.[Party_Id_Accreditor],
				source.[Party_Id_Sector_Lead],
				source.[Party_Role_Type_Assessor]
				);

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Award block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Award'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.4: IMPORT [Learning Unit]--------------
			---------------------------------------------------
			BEGIN TRY

			MERGE [dbo].[LearningUnit] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Learning Unit' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Learning_Unit_Level_Type] = source.[Learning_Unit_Level_Type],
				[Maximum_Resits_Allowed] = source.[Maximum_Resits_Allowed]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Learning_Unit_Level_Type],
				[Maximum_Resits_Allowed])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				source.[Learning_Unit_Level_Type],
				source.[Maximum_Resits_Allowed]
				);
	
			END TRY
			BEGIN CATCH
				PRINT 'Exception in Learning Unit block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Learning Unit'
					
			END CATCH;
		
			---------------------------------------------------
			-----STEP 1.5: IMPORT [Assessable]-----------------
			---------------------------------------------------
			BEGIN TRY 
						
			MERGE [dbo].[Assessable] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Assessable' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Extra_Time_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Extra_Time_Required_Flag]),
				[Assessment_Method_Type] = LTRIM(RTRIM(source.[Assessment_Method_Type])),
				[Assmnt_Actual_DateTime_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Assmnt_Actual_DateTime_Reqd_Flag]),
				[Attendance_Data_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Attendance_Data_Required_Flag]),
				[Cambridge_Assmnt_TimeZone_Num] = source.[Cambridge_Assmnt_TimeZone_Num],
				[Carry_Forward_Permissible_Flag] = DBO.FN_A2C_GETFLAG(source.[Carry_Forward_Permissible_Flag]),
				[Maximum_Extra_Time_Minutes] = source.[Maximum_Extra_Time_Minutes],
				[On_Demand_Flag] = DBO.FN_A2C_GETFLAG(source.[On_Demand_Flag]),
				[QE_Timetabled_Flag] = DBO.FN_A2C_GETFLAG(source.[QE_Timetabled_Flag]),
				[Test_Day_Photograph_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Test_Day_Photograph_Reqd_Flag]),
				[Tier_Level_Type] = LTRIM(RTRIM(source.[Tier_Level_Type])),
				[Tier_Level_Common_Reference] = LTRIM(RTRIM(source.[Tier_Level_Common_Reference])),
				[Time_Allowed_Mins] = source.[Time_Allowed_Mins],
				[Party_Role_Type_Assessor] = LTRIM(RTRIM(source.[AssessableParty_Role_Type_Assessor])),
				[Party_Role_Type_ADT_Decider] = LTRIM(RTRIM(source.[Party_Role_Type_ADT_Decider])),
				[Assessment_Medium_Type] = LTRIM(RTRIM(source.[Assessment_Medium_Type]))
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Extra_Time_Required_Flag],
				[Assessment_Method_Type],
				[Assmnt_Actual_DateTime_Reqd_Flag],
				[Attendance_Data_Required_Flag],
				[Cambridge_Assmnt_TimeZone_Num],
				[Carry_Forward_Permissible_Flag],
				[Maximum_Extra_Time_Minutes],
				[On_Demand_Flag],
				[QE_Timetabled_Flag],
				[Test_Day_Photograph_Reqd_Flag],
				[Tier_Level_Type],
				[Tier_Level_Common_Reference],
				[Time_Allowed_Mins],
				[Party_Role_Type_Assessor],
				[Party_Role_Type_ADT_Decider],
				[Assessment_Medium_Type])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETFLAG(source.[Extra_Time_Required_Flag]),
				LTRIM(RTRIM(source.[Assessment_Method_Type])),
				DBO.FN_A2C_GETFLAG(source.[Assmnt_Actual_DateTime_Reqd_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Attendance_Data_Required_Flag]),
				source.[Cambridge_Assmnt_TimeZone_Num],
				DBO.FN_A2C_GETFLAG(source.[Carry_Forward_Permissible_Flag]),
				source.[Maximum_Extra_Time_Minutes],
				DBO.FN_A2C_GETFLAG(source.[On_Demand_Flag]),
				DBO.FN_A2C_GETFLAG(source.[QE_Timetabled_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Test_Day_Photograph_Reqd_Flag]),
				LTRIM(RTRIM(source.[Tier_Level_Type])),
				LTRIM(RTRIM(source.[Tier_Level_Common_Reference])),
				source.[Time_Allowed_Mins],
				LTRIM(RTRIM(source.[AssessableParty_Role_Type_Assessor])),
				LTRIM(RTRIM(source.[Party_Role_Type_ADT_Decider])),
				LTRIM(RTRIM(source.[Assessment_Medium_Type])));

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Assessable block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Assessable'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.6: IMPORT [Pathway]--------------------
			---------------------------------------------------
			BEGIN TRY
		
			MERGE [dbo].[Pathway] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Pathway' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Equals_Indicator_Flag] = DBO.FN_A2C_GETFLAG(source.[Equals_Indicator_Flag]),
				[Mandatory_In_Group_Flag] = DBO.FN_A2C_GETFLAG(source.[Mandatory_In_Group_Flag]),
				[Minimum_Unit_Selection] = source.[Minimum_Unit_Selection],
				[Maximum_Unit_Selection] = source.[Maximum_Unit_Selection],
				[Minimum_Pathway_Selection] = source.[Minimum_Pathway_Selection],
				[Maximum_Pathway_Selection] = source.[Maximum_Pathway_Selection],
				[Minimum_Credit_Value] = source.[Minimum_Credit_Value]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Equals_Indicator_Flag],
				[Mandatory_In_Group_Flag],
				[Minimum_Unit_Selection],
				[Maximum_Unit_Selection],
				[Minimum_Pathway_Selection],
				[Maximum_Pathway_Selection],
				[Minimum_Credit_Value])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETFLAG(source.[Equals_Indicator_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Mandatory_In_Group_Flag]),
				source.[Minimum_Unit_Selection],
				source.[Maximum_Unit_Selection],
				source.[Minimum_Pathway_Selection],
				source.[Maximum_Pathway_Selection],
				source.[Minimum_Credit_Value]);

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QE', 'U') IS NOT NULL
			  DROP TABLE #QE;

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Pathway block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Pathway'
					
			END CATCH;
		END TRY
		BEGIN CATCH
			PRINT 'Exception in QUALIFICATION ELEMENTS - Common block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QUALIFICATION ELEMENTS - Common'
					
		END CATCH;

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 2: IMPORT QE Relationships -------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QER.value('(a2c:QERelationship_ID/a2c:AO_Party_Id_Parent/text())[1]','[nvarchar](32)') AO_Party_Id_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:AO_QE_Id_Parent/text())[1]','[nvarchar](50)') AO_QE_Id_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:QE_Type_Parent/text())[1]','[nvarchar](32)') QE_Type_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:AO_Party_Id_Child/text())[1]','[nvarchar](32)') AO_Party_Id_Child,
				QER.value('(a2c:QERelationship_ID/a2c:AO_QE_Id_Child/text())[1]','[nvarchar](50)') AO_QE_Id_Child,
				QER.value('(a2c:QERelationship_ID/a2c:QE_Type_Child/text())[1]','[nvarchar](32)') QE_Type_Child,
				QER.value('(a2c:QE_Relationship_Type/text())[1]','[nvarchar](32)') QE_Relationship_Type,
				QER.value('(a2c:QE_Relationship_Rule_Type/text())[1]','[nvarchar](20)') QE_Relationship_Rule_Type,
				QER.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#QER
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QERelationship') as QERelationship(QER) 
	
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QER 
					WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')='')
			BEGIN
				PRINT 'QE Relationship - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Relationship" - Record AO_QE_Id_Parent="' +  ISNULL(AO_QE_Id_Parent,'') 
					+ '", QE_Type_Parent="' + ISNULL(QE_Type_Parent,'') 
					+ '", AO_QE_Id_Child="' + ISNULL(AO_QE_Id_Child,'') 
					+ '", QE_Type_Child="' + ISNULL(QE_Type_Child,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QER 
				WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QER 
				WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child   
					ORDER BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child ) 'RowRank' 
				FROM 
					#QER)
			SELECT 
				* 
			INTO 
				#QERDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QERDUPS)
			BEGIN

				print 'duplicate records found in QE Relationship'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child   
					ORDER BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child ) 'RowRank' 
				FROM 
					#QER)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Relationship - Record AO_QE_Id_Parent=' 
					+  AO_QE_Id_Parent + ', QE_Type_Parent=' + QE_Type_Parent + ', AO_QE_Id_Child=' 
					+ AO_QE_Id_Child + ', QE_Type_Child=' + QE_Type_Child + ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QERDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QERDUPS', 'U') IS NOT NULL
				DROP TABLE #QERDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy ref columns to temp table for parent and child QEs
			ALTER TABLE #QER ADD [ParentQEId] INT null, [ChildQEId] INT null

			--Update existing IDs for parent QEs
			Update Q 
				set [ParentQEId]=QE.QualificationElementId
			from 
				#QER Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Parent=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Parent=QE.[Qualification_Element_Type]

			--Update existing IDs for child QEs
			Update Q 
				set [ChildQEId]=QE.QualificationElementId
			from 
				#QER Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Child=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Child=QE.[Qualification_Element_Type]
	
			--merge [QERelationship]
			MERGE [dbo].[QERelationship] AS [target]
			USING (SELECT * from #QER where [ParentQEId] is not null and [ChildQEId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId_Parent] = source.[ParentQEId] AND
				[target].[QualificationElementId_Child] = source.[ChildQEId])
			WHEN MATCHED THEN 
			UPDATE SET			
				[QE_Relationship_Type] = source.[QE_Relationship_Type],
				[QE_Relationship_Rule_Type] = source.[QE_Relationship_Rule_Type],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId_Parent],
				[QualificationElementId_Child],
				[QE_Relationship_Type],
				[QE_Relationship_Rule_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[ParentQEId],
				source.[ChildQEId],
				source.[QE_Relationship_Type],
				source.[QE_Relationship_Rule_Type],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QER', 'U') IS NOT NULL
				DROP TABLE #QER;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Relationships block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Relationships'
					
		END CATCH;

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 3: IMPORT QE LearnerIdentifier ---------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QECN.value('(a2c:QELearnerIdentifier_ID/a2c:Party_RR_Reference_Type/text())[1]','[nvarchar](max)') Party_RR_Reference_Type,
				QECN.value('(a2c:Learner_Id_Mandatory_Flag/text())[1]','[nvarchar](max)') Learner_Id_Mandatory_Flag,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QELI
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QELearnerIdentifier_DS/a2c:QELearnerIdentifier') as QLI(QEID) 
				CROSS APPLY QLI.QEID.nodes('a2c:QELearnerIdentifier_CN') as QEL(QECN)
		
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QELI 
					WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')='')
			BEGIN
				PRINT 'QE LearnerIdentifier - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE LearnerIdentifier - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", Party_RR_Reference_Type="' + ISNULL(Party_RR_Reference_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELI 
				WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QELI 
				WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type  
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type ) 'RowRank' 
			FROM 
				#QELI)
			SELECT 
				* 
			INTO 
				#QELIDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QELIDUPS)
			BEGIN

				print 'duplicate records found in QE Learner Identifier'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type  
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type ) 'RowRank' 
				FROM 
					#QELI)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Learner Identifier - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', Party_RR_Reference_Type=' + Party_RR_Reference_Type 
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELIDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELIDUPS', 'U') IS NOT NULL
			  DROP TABLE #QELIDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy pk column to temp table
			ALTER TABLE #QELI ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QELI Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QELearnerIdentifier]
			MERGE [dbo].[QELearnerIdentifier] AS [target]
			USING (SELECT * from #QELI where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[Party_RR_Reference_Type] = LTRIM(RTRIM(source.[Party_RR_Reference_Type])))
			WHEN MATCHED THEN 
			UPDATE SET					
				[Learner_Id_Mandatory_Flag] = DBO.FN_A2C_GETFLAG(source.[Learner_Id_Mandatory_Flag]),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[Party_RR_Reference_Type],
				[Learner_Id_Mandatory_Flag],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[Party_RR_Reference_Type])),
				DBO.FN_A2C_GETFLAG(source.[Learner_Id_Mandatory_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELI', 'U') IS NOT NULL
				DROP TABLE #QELI;
		
		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Learner Identifier block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Learner Identifier'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 4: IMPORT QE Preference ----------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				PID.value('(a2c:Party_ID/a2c:Party_Id_Creator/text())[1]','[nvarchar](32)') Party_Id_Creator,
				QEP.value('(a2c:QEPreference_ID/a2c:QE_Preference/text())[1]','[nvarchar](100)') QE_Preference,
				QEP.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEPR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEPreference_DS/a2c:QEPreference') as QEPreference_DS(PID)
				CROSS APPLY
				QEPreference_DS.PID.nodes('a2c:QEPreference_CN') as QEPreference_CN(QEP)

			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEPR 
					WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')='')
			BEGIN
				PRINT 'QE Preference - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Preference - Record Party_Id_Creator="' +  ISNULL(Party_Id_Creator,'') 
					+ '", QE_Preference="' + ISNULL(QE_Preference,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEPR 
				WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEPR 
				WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], Party_Id_Creator, QE_Preference ) 'RowRank' 
				FROM 
					#QEPR)
			SELECT 
				* 
			INTO 
				#QEPRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEPRDUPS)
			BEGIN

				print 'duplicate records found in QE Preference'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], Party_Id_Creator, QE_Preference ) 'RowRank' 
				FROM 
					#QEPR)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Preference - Record Party_Id_Creator=' +  Party_Id_Creator 
					+ ', QE_Preference=' + QE_Preference + ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEPRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEPRDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEPRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--merge [QEPreference]
			MERGE [dbo].[QEPreference] AS [target]
			USING (SELECT * from #QEPR) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Party_Id_Creator] = LTRIM(RTRIM(source.[Party_Id_Creator])) AND
				[target].[QE_Preference] = LTRIM(RTRIM(source.[QE_Preference])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Party_Id_Creator],
				[QE_Preference],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[Party_Id_Creator])),
				LTRIM(RTRIM(source.[QE_Preference])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEPR', 'U') IS NOT NULL
				DROP TABLE #QEPR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Preference block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Preference'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 5: IMPORT AO QE Preference -------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:AOQEPreference_ID/a2c:Party_Id_Creator/text())[1]','[nvarchar](32)') Party_Id_Creator,
				QECN.value('(a2c:AOQEPreference_ID/a2c:QE_Preference/text())[1]','[nvarchar](100)') QE_Preference,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#AOQEPR	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference') as AOQEPreference(QEID) 
				CROSS APPLY 
				AOQEPreference.QEID.nodes('a2c:AOQEPreference_CN') as AOQEPreference_CN(QECN) 
					
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #AOQEPR 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR ISNULL(Party_Id_Creator,'')=''
						OR ISNULL(QE_Preference,'')='')
			BEGIN
				PRINT 'AO QE Preference - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock AO QE Preference - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", Party_Id_Creator="' + ISNULL(Party_Id_Creator,'') 
					+ '", QE_Preference="' + ISNULL(QE_Preference,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#AOQEPR 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#AOQEPR 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference) 'RowRank' 
				FROM 
					#AOQEPR)
			SELECT 
				* 
			INTO 
				#AOQEPRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #AOQEPRDUPS)
			BEGIN

				print 'duplicate records found in AO QE Preference'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference) 'RowRank' 
				FROM 
					#AOQEPR)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock AO QE Preference - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', Party_Id_Creator=' +  Party_Id_Creator 
					+ ', QE_Preference=' + QE_Preference + ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#AOQEPRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#AOQEPRDUPS', 'U') IS NOT NULL
			  DROP TABLE #AOQEPRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

		
			--add dummy fk column to temp table
			ALTER TABLE #AOQEPR ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#AOQEPR Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--add dummy fk column to temp table
			ALTER TABLE #AOQEPR ADD [QEPreferenceId] INT null

			--Update existing PKs of [dbo].[QEPreference]
			Update Q 
				set [QEPreferenceId]=QEP.[QEPreferenceId]
			from 
				#AOQEPR Q inner join [dbo].[QEPreference] QEP
			on 
				Q.AOCentreID=QEP.AwardingOrganisationCentreId 
				and Q.[Party_Id_Creator]=QEP.[Party_Id_Creator] 
				and Q.[QE_Preference]=QEP.[QE_Preference]

			--merge [AOQEPreference]
			MERGE [dbo].[AOQEPreference] AS [target]
			USING (SELECT * from #AOQEPR where [QualificationElementId] is not null and [QEPreferenceId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEPreferenceId] = source.[QEPreferenceId])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEPreferenceId],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QEPreferenceId],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#AOQEPR', 'U') IS NOT NULL
				DROP TABLE #AOQEPR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in AO QE Preference block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'AO QE Preference'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 6: IMPORT QE Availability --------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				QECN.value('(a2c:QEA_Effective_End_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_End_Date_Time,
				QECN.value('(a2c:SLA_OnDemand_Result_Clndr_Days/text())[1]','int') SLA_OnDemand_Result_Clndr_Days,
				QECN.value('(a2c:Series_Label/text())[1]','[nvarchar](50)') Series_Label,
				QECN.value('(a2c:OnDemand_Entry_Calendar_Days/text())[1]','int') OnDemand_Entry_Calendar_Days,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEA	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QEAvailability_CN(QECN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEA 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QE Availability - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEA 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEA 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEA)
			SELECT 
				* 
			INTO 
				#QEADUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEADUPS)
			BEGIN

				print 'duplicate records found in QE Availability'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEA)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Availability - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type + ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) 
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEADUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEADUPS', 'U') IS NOT NULL
			  DROP TABLE #QEADUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEA ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEA Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]
	
			--merge [QEAvailability]
			MERGE [dbo].[QEAvailability] AS [target]
			USING (SELECT * from #QEA where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]))
			WHEN MATCHED THEN 
			UPDATE SET				
				[QEA_Effective_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_End_Date_Time]),
				[SLA_OnDemand_Result_Clndr_Days] = source.[SLA_OnDemand_Result_Clndr_Days],
				[Series_Label] = LTRIM(RTRIM(source.[Series_Label])),
				[OnDemand_Entry_Calendar_Days] = source.[OnDemand_Entry_Calendar_Days],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEA_Effective_Start_Date_Time],
				[QEA_Effective_End_Date_Time],
				[SLA_OnDemand_Result_Clndr_Days],
				[Series_Label],
				[OnDemand_Entry_Calendar_Days],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_End_Date_Time]),
				source.[SLA_OnDemand_Result_Clndr_Days],
				LTRIM(RTRIM(source.[Series_Label])),
				source.[OnDemand_Entry_Calendar_Days],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEA', 'U') IS NOT NULL
				DROP TABLE #QEA;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability'
					
		END CATCH

		---------------------------------------------------
		----- STEP 6.1: IMPORT QE Availability Key Event --
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				KE.value('(a2c:QEAvailabilityKeyEvent_ID/a2c:Key_Event_Name/text())[1]','[nvarchar](100)') Key_Event_Name,
				KE.value('(a2c:Key_Event_Start_Date_Time/text())[1]','[nvarchar](100)') Key_Event_Start_Date_Time,
				KE.value('(a2c:Key_Event_End_Date_Time/text())[1]','[nvarchar](100)') Key_Event_End_Date_Time,
				KE.value('(a2c:Key_Event_Additional_Text/text())[1]','[nvarchar](400)') Key_Event_Additional_Text,
				KE.value('(a2c:Time_Period_Type/text())[1]','[nvarchar](32)') Time_Period_Type,
				KE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEAKE	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QE(QECN) 
				CROSS APPLY QE.QECN.nodes('a2c:QEAvailabilityKeyEvent') as QEA(KE)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAKE 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
						OR ISNULL(Key_Event_Name,'')='')
			BEGIN
				PRINT 'QE Availability Key Event - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", Key_Event_Name="' + ISNULL(Key_Event_Name,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAKE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name) 'RowRank' 
				FROM 
					#QEAKE)
			SELECT 
				* 
			INTO 
				#QEAKEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAKEDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Key Event'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name) 'RowRank' 
				FROM 
					#QEAKE)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) 
					+ ', Key_Event_Name=' + Key_Event_Name + ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEDUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAKEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy fk column to temp table
			ALTER TABLE #QEAKE ADD [QualificationElementId] INT null, [QEAvailabilityId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAKE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QEAvailability]
			Update Q 
				set [QEAvailabilityId]=QE.[QEAvailabilityId]
			from 
				#QEAKE Q inner join [QEAvailability] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QualificationElementId]=QE.[QualificationElementId] 
				and DBO.FN_A2C_GETDATETIME(Q.[QEA_Effective_Start_Date_Time])=QE.[QEA_Effective_Start_Date_Time]	
	
			--merge [QEAvailabilityKeyEvent]
			MERGE [dbo].[QEAvailabilityKeyEvent] AS [target]
			USING (SELECT * from #QEAKE 
					where [QualificationElementId] is not null 
					and [QEAvailabilityId] is not null
					and [Key_Event_Name] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityId] = source.[QEAvailabilityId] AND
				[target].[Key_Event_Name] =  LTRIM(RTRIM(source.[Key_Event_Name])))
			WHEN MATCHED THEN 
			UPDATE SET				
				[Key_Event_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Key_Event_Start_Date_Time]),
				[Key_Event_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Key_Event_End_Date_Time]),
				[Key_Event_Additional_Text] = LTRIM(RTRIM(source.[Key_Event_Additional_Text])),
				[Time_Period_Type] = LTRIM(RTRIM(source.[Time_Period_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityId],
				[Key_Event_Name],
				[Key_Event_Start_Date_Time],
				[Key_Event_End_Date_Time],
				[Key_Event_Additional_Text],
				[Time_Period_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityId],
				LTRIM(RTRIM(source.[Key_Event_Name])),
				DBO.FN_A2C_GETDATETIME(source.[Key_Event_Start_Date_Time]),
				DBO.FN_A2C_GETDATETIME(source.[Key_Event_End_Date_Time]),
				LTRIM(RTRIM(source.[Key_Event_Additional_Text])),
				LTRIM(RTRIM(source.[Time_Period_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKE', 'U') IS NOT NULL
				DROP TABLE #QEAKE;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Key Event block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Key Event'
					
		END CATCH

		----------------------------------------------------------
		----- STEP 6.2: IMPORT QE Availability Key Event Fee -----
		----------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				KE.value('(a2c:QEAvailabilityKeyEvent_ID/a2c:Key_Event_Name/text())[1]','[nvarchar](100)') Key_Event_Name,	
				KEFEE.value('(a2c:QEAvailabilityKeyEventFee_ID/a2c:QE_Fee_Category_Type/text())[1]','[nvarchar](100)') QE_Fee_Category_Type,
				KEFEE.value('(a2c:QEAvailabilityKeyEventFee_ID/a2c:Fee_Period_Start_Date_Time/text())[1]','[nvarchar](100)') Fee_Period_Start_Date_Time,
				KEFEE.value('(a2c:Fee_Period_Title/text())[1]','[nvarchar](100)') Fee_Period_Title,
				KEFEE.value('(a2c:Fee_Period_End_Date_Time/text())[1]','[nvarchar](100)') Fee_Period_End_Date_Time,
				KEFEE.value('(a2c:Fee_Amount/text())[1]','[Decimal](9,2)') Fee_Amount,
				KEFEE.value('(a2c:Fee_Additional_Text/text())[1]','[nvarchar](400)') Fee_Additional_Text,
				KEFEE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEAKEFEE	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QE(QECN) 
				CROSS APPLY QE.QECN.nodes('a2c:QEAvailabilityKeyEvent') as QEA(KE)
				CROSS APPLY QEA.KE.nodes('a2c:QEAvailabilityKeyEventFee') as QEAKE(KEFEE)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAKEFEE 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
						OR ISNULL(Key_Event_Name,'')=''
						OR ISNULL(QE_Fee_Category_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QE Availability Key Event Fee - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event Fee - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", Key_Event_Name="' + ISNULL(Key_Event_Name,'') 
					+ '", QE_Fee_Category_Type="' + ISNULL(QE_Fee_Category_Type,'') 
					+ '", Fee_Period_Start_Date_Time="' + CASE WHEN Fee_Period_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(Fee_Period_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEFEE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
					OR ISNULL(QE_Fee_Category_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEAKEFEE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
					OR ISNULL(QE_Fee_Category_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL					
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAKEFEE)
			SELECT 
				* 
			INTO 
				#QEAKEFEEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAKEFEEDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Key Event Fee'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAKEFEE)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event Fee - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id + ', Qualification_Element_Type=' 
					+ Qualification_Element_Type + ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) + ', Key_Event_Name=' + Key_Event_Name 
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEFEEDUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEFEEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAKEFEEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAKEFEE ADD [QualificationElementId] INT null, [QEAvailabilityId] INT null, [QEAvailabilityKeyEventId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAKEFEE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QEAvailability]
			Update Q 
				set [QEAvailabilityId]=QE.[QEAvailabilityId]
			from 
				#QEAKEFEE Q inner join [QEAvailability] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QualificationElementId]=QE.[QualificationElementId] 
				and DBO.FN_A2C_GETDATETIME(Q.[QEA_Effective_Start_Date_Time])=QE.[QEA_Effective_Start_Date_Time]	

			--Update existing PKs of [dbo].[QEAvailabilityKeyEvent]
			Update Q 
				set [QEAvailabilityKeyEventId]=QE.[QEAvailabilityKeyEventId]
			from 
				#QEAKEFEE Q inner join [QEAvailabilityKeyEvent] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QEAvailabilityId]=QE.[QEAvailabilityId] 
				and LTRIM(RTRIM(Q.[Key_Event_Name]))=LTRIM(RTRIM(QE.[Key_Event_Name]))
	
			--merge [QEAvailabilityKeyEventFee]
			MERGE [dbo].[QEAvailabilityKeyEventFee] AS [target]
			USING (SELECT * from #QEAKEFEE 
					where [QEAvailabilityKeyEventId] is not null 
					and [QE_Fee_Category_Type] is not null
					and DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NOT NULL) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityKeyEventId] = source.[QEAvailabilityKeyEventId] AND
				[target].[QE_Fee_Category_Type] =  LTRIM(RTRIM(source.[QE_Fee_Category_Type])) AND
				[target].[Fee_Period_Start_Date_Time] =  DBO.FN_A2C_GETDATETIME(source.[Fee_Period_Start_Date_Time]))
			WHEN MATCHED THEN 
			UPDATE SET				
				[Fee_Period_Title] = LTRIM(RTRIM(source.[Fee_Period_Title])),
				[Fee_Period_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Fee_Period_End_Date_Time]),
				[Fee_Amount] = source.[Fee_Amount],
				[Fee_Additional_Text] = LTRIM(RTRIM(source.[Fee_Additional_Text])),		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityKeyEventId],
				[QE_Fee_Category_Type],
				[Fee_Period_Start_Date_Time],
				[Fee_Period_Title],
				[Fee_Period_End_Date_Time],
				[Fee_Amount],
				[Fee_Additional_Text],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityKeyEventId],
				LTRIM(RTRIM(source.[QE_Fee_Category_Type])),
				DBO.FN_A2C_GETDATETIME(source.[Fee_Period_Start_Date_Time]),
				LTRIM(RTRIM(source.[Fee_Period_Title])),
				DBO.FN_A2C_GETDATETIME(source.[Fee_Period_End_Date_Time]),
				source.[Fee_Amount],
				LTRIM(RTRIM(source.[Fee_Additional_Text])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEFEE', 'U') IS NOT NULL
				DROP TABLE #QEAKEFEE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Key Event Fee block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Key Event Fee'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 7: IMPORT QE Fee Category --------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				FEE.value('(a2c:QEFeeCategory_ID/a2c:QE_Fee_Category_Type/text())[1]','[nvarchar](100)') QE_Fee_Category_Type,
				FEE.value('(a2c:Fee_Additional_Information/text())[1]','[nvarchar](400)') Fee_Additional_Information,
				FEE.value('(a2c:Currency_Type/text())[1]','[nvarchar](80)') Currency_Type,
				FEE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#QEFEE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEFeeCategory_DS/a2c:QEFeeCategory') as QE(FEE)

		
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFEE 
					WHERE ISNULL(QE_Fee_Category_Type,'')='')
			BEGIN
				PRINT 'QE Fee Category - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Fee Category" - Record QE_Fee_Category_Type="' +  ISNULL(QE_Fee_Category_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFEE 
				WHERE 
					ISNULL(QE_Fee_Category_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFEE 
				WHERE 
					ISNULL(QE_Fee_Category_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Fee_Category_Type 
				ORDER BY 
					[AOCentreID], QE_Fee_Category_Type) 'RowRank' 
			FROM 
				#QEFEE)
			SELECT 
				* 
			INTO 
				#QEFEEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFEEDUPS)
			BEGIN

				print 'duplicate records found in QE Fee Category'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Fee_Category_Type 
					ORDER BY 
						[AOCentreID], QE_Fee_Category_Type) 'RowRank' 
				FROM 
					#QEFEE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Fee Category - Record QE_Fee_Category_Type=' +  QE_Fee_Category_Type + ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFEEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFEEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFEEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QEFeeCategory]
			MERGE [dbo].[QEFeeCategory] AS [target]
			USING (SELECT * from #QEFEE) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QE_Fee_Category_Type] = LTRIM(RTRIM(source.[QE_Fee_Category_Type])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[Fee_Additional_Information] = LTRIM(RTRIM(source.[Fee_Additional_Information])),
				[Currency_Type] = LTRIM(RTRIM(source.[Currency_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QE_Fee_Category_Type],
				[Fee_Additional_Information],
				[Currency_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[QE_Fee_Category_Type])),
				LTRIM(RTRIM(source.[Fee_Additional_Information])),
				LTRIM(RTRIM(source.[Currency_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFEE', 'U') IS NOT NULL
				DROP TABLE #QEFEE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Fee Category block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Fee Category'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 8: IMPORT Qualification Framework ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],	
				QF.value('(a2c:QualificationFrameworkParty_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](max)') Party_Id_Administrator,
				PQF.value('(a2c:QualificationFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](max)') Qualification_Framework_Type,
				QFL.value('(a2c:Qual_Frmwrk_Level_Type_ID/a2c:Qual_Frmwrk_Level_Type/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type,
				QFL.value('(a2c:Qual_Frmwrk_Level_Tier_Type/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Tier_Type,
				QFL.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into
				#QEFM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationFramework_DS/a2c:QualificationFramework') as Q(QF) 
				CROSS APPLY Q.QF.nodes('a2c:PartyQualificationFramework_CN') as QE(PQF) 
				CROSS APPLY QE.PQF.nodes('a2c:QualificationFrameworkLevel_CN') as QF(QFL) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFM 
					WHERE ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')='')
			BEGIN
				PRINT 'Qualification Framework - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Framework" - Record Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type="' +  ISNULL(Qual_Frmwrk_Level_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFM 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFM 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
				ORDER BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
			FROM 
				#QEFM)
			SELECT 
				* 
			INTO 
				#QEFMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFMDUPS)
			BEGIN

				print 'duplicate records found in Qualification Framework'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
					ORDER BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
				FROM 
					#QEFM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Framework - Record Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type=' +  Qual_Frmwrk_Level_Type 
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QualificationFramework]
			MERGE [dbo].[QualificationFramework] AS [target]
			USING (SELECT * from #QEFM) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Party_Id_Administrator] = LTRIM(RTRIM(source.[Party_Id_Administrator])) AND
				[target].[Qualification_Framework_Type] = LTRIM(RTRIM(source.[Qualification_Framework_Type])) AND
				[target].[Qual_Frmwrk_Level_Type] = LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Type])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[Qual_Frmwrk_Level_Tier_Type] = LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Tier_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Party_Id_Administrator],
				[Qualification_Framework_Type],
				[Qual_Frmwrk_Level_Type],
				[Qual_Frmwrk_Level_Tier_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[Party_Id_Administrator])),
				LTRIM(RTRIM(source.[Qualification_Framework_Type])),
				LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Type])),
				LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Tier_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFM', 'U') IS NOT NULL
				DROP TABLE #QEFM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Qualification Framework block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Framework'
					
		END CATCH

		----------------------------------------------------------------
		----- STEP 8.1 : IMPORT Qualification Framework Hierarchy ------
		----------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select
				@AwardingOrganisationCentreId [AOCentreID],	
				QF.value('(a2c:QualificationFrameworkParty_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](max)') Party_Id_Administrator,
				PQF.value('(a2c:QualificationFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](max)') Qualification_Framework_Type,
				QFH.value('(a2c:QualFrameworkHierarchy_ID/a2c:Qual_Frmwrk_Level_Type_Parent/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type_Parent,
				QFH.value('(a2c:QualFrameworkHierarchy_ID/a2c:Qual_Frmwrk_Level_Type_Child/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type_Child,
				QFH.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into
				#QEFMHR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationFramework_DS/a2c:QualificationFramework') as Q(QF) 
				CROSS APPLY Q.QF.nodes('a2c:PartyQualificationFramework_CN') as QE(PQF) 
				CROSS APPLY QE.PQF.nodes('a2c:QualFrameworkHierarchy') as QF(QFH) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFMHR 
					WHERE ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')='')
			BEGIN
				PRINT 'Qualification Framework Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Framework Hierarchy" - Record Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type_Parent="' +  ISNULL(Qual_Frmwrk_Level_Type_Parent,'') 
					+ '", Qual_Frmwrk_Level_Type_Child="' +  ISNULL(Qual_Frmwrk_Level_Type_Child,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMHR 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFMHR 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child  
				ORDER BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child) 'RowRank' 
			FROM 
				#QEFMHR)
			SELECT 
				* 
			INTO 
				#QEFMHRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFMHRDUPS)
			BEGIN

				print 'duplicate records found in Qualification Framework Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child  
					ORDER BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child) 'RowRank' 
				FROM 
					#QEFMHR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Framework Hierarchy - Record Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type_Parent=' +  Qual_Frmwrk_Level_Type_Parent 
					+ ', Qual_Frmwrk_Level_Type_Child=' +  Qual_Frmwrk_Level_Type_Child 
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMHRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMHRDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFMHRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEFMHR ADD [QualificationFrameworkId_Parent] INT null, [QualificationFrameworkId_Child] INT null

			--Update existing PKs of [dbo].[QualificationFramework]
			Update Q 
				set [QualificationFrameworkId_Parent]=QE.[QualificationFrameworkId]
			from 
				#QEFMHR Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=LTRIM(RTRIM(QE.[Party_Id_Administrator])) 
				and Q.[Qualification_Framework_Type]=LTRIM(RTRIM(QE.[Qualification_Framework_Type]))
				and Q.Qual_Frmwrk_Level_Type_Parent=LTRIM(RTRIM(QE.[Qual_Frmwrk_Level_Type]))

			Update Q 
				set [QualificationFrameworkId_Child]=QE.[QualificationFrameworkId]
			from 
				#QEFMHR Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=LTRIM(RTRIM(QE.[Party_Id_Administrator])) 
				and Q.[Qualification_Framework_Type]=LTRIM(RTRIM(QE.[Qualification_Framework_Type]))
				and Q.Qual_Frmwrk_Level_Type_Child=LTRIM(RTRIM(QE.[Qual_Frmwrk_Level_Type]))

			--merge [QualificationFrameworkHierarchy]
			MERGE [dbo].[QualificationFrameworkHierarchy] AS [target]
			USING (SELECT * from #QEFMHR where [QualificationFrameworkId_Parent] is not null and [QualificationFrameworkId_Child] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationFrameworkId_Parent] = source.[QualificationFrameworkId_Parent] AND
				[target].[QualificationFrameworkId_Child] = source.[QualificationFrameworkId_Child])
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationFrameworkId_Parent],
				[QualificationFrameworkId_Child],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationFrameworkId_Parent],
				source.[QualificationFrameworkId_Child],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMHR', 'U') IS NOT NULL
				DROP TABLE #QEFMHR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Qualification Framework Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Framework Hierarchy'
					
		END CATCH

		----------------------------------------------------------------
		----- STEP 8.2: IMPORT Qualification Element Framework ---------
		----------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QF.value('(a2c:QEFramework_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QF.value('(a2c:QEFramework_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QF.value('(a2c:QEFramework_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](max)') Party_Id_Administrator,
				QF.value('(a2c:QEFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](max)') Qualification_Framework_Type,
				QF.value('(a2c:QEFramework_ID/a2c:Qual_Frmwrk_Level_Type/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type,
				QF.value('(a2c:QE_Framework_Credit_Value/text())[1]','[nvarchar](max)') QE_Framework_Credit_Value,
				QF.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag	
			into
				#QELEFM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementFramework_DS/a2c:QualificationElementFramework') as Q(QF) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QELEFM 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Framework - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Framework" - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' +  ISNULL(Qualification_Element_Type,'') 
					+ '", Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type="' +  ISNULL(Qual_Frmwrk_Level_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELEFM 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QELEFM 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
			FROM 
				#QELEFM)
			SELECT 
				* 
			INTO 
				#QELEFMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QELEFMDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Framework'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
				FROM 
					#QELEFM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Framework - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type 
					+ ', Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type=' +  Qual_Frmwrk_Level_Type
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELEFMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELEFMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QELEFMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QELEFM ADD [QualificationElementId] INT null, [QualificationFrameworkId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QELEFM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QualificationFramework]
			Update Q 
				set [QualificationFrameworkId]=QE.[QualificationFrameworkId]
			from 
				#QELEFM Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=QE.[Party_Id_Administrator] 
				and Q.[Qualification_Framework_Type]=QE.[Qualification_Framework_Type]
				and Q.[Qual_Frmwrk_Level_Type]=QE.[Qual_Frmwrk_Level_Type]

			--merge [QualificationElementFramework]
			MERGE [dbo].[QualificationElementFramework] AS [target]
			USING (SELECT * from #QELEFM where [QualificationElementId] is not null and [QualificationFrameworkId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QualificationFrameworkId] = source.[QualificationFrameworkId])
			WHEN MATCHED THEN 
			UPDATE SET		
				[QE_Framework_Credit_Value] = source.[QE_Framework_Credit_Value],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QualificationFrameworkId],
				[QE_Framework_Credit_Value],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QualificationFrameworkId],
				source.[QE_Framework_Credit_Value],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELEFM', 'U') IS NOT NULL
				DROP TABLE #QELEFM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Framework block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Framework'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 9: IMPORT Sector Subject Area ----------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 			
				@AwardingOrganisationCentreId [AOCentreID],	
				CN.value('(a2c:SectorSubjectArea_ID/a2c:Sector_Subject_Area/text())[1]','decimal(3,1)') Sector_Subject_Area,
				CN.value('(a2c:Sector_Subject_Area_Descr/text())[1]','[nvarchar](100)') Sector_Subject_Area_Descr,
				CN.value('(a2c:Sector_Subject_Area_Level_Type/text())[1]','[nvarchar](8)') Sector_Subject_Area_Level_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#SSA
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:SectorSubjectArea_DS/a2c:SectorSubjectArea/a2c:SectorSubjectArea_CN') as SSA(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSA 
					WHERE Sector_Subject_Area IS NULL)
			BEGIN
				PRINT 'Sector Subject Area - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Sector Subject Area" - Record Sector_Subject_Area="' 
					+  CASE WHEN Sector_Subject_Area IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSA 
				WHERE 
					Sector_Subject_Area IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSA 
				WHERE 
					Sector_Subject_Area IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Sector_Subject_Area
				ORDER BY 
					[AOCentreID], Sector_Subject_Area) 'RowRank' 
			FROM 
				#SSA)
			SELECT 
				* 
			INTO 
				#SSADUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSADUPS)
			BEGIN

				print 'duplicate records found in Sector Subject Area'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Sector_Subject_Area
					ORDER BY 
						[AOCentreID], Sector_Subject_Area) 'RowRank' 
				FROM 
					#SSA)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Sector Subject Area - Record Sector_Subject_Area=' +  cast(Sector_Subject_Area as nvarchar)
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSADUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSADUPS', 'U') IS NOT NULL
			  DROP TABLE #SSADUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [SectorSubjectArea]
			MERGE [dbo].[SectorSubjectArea] AS [target]
			USING (SELECT * from #SSA) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Sector_Subject_Area] = source.[Sector_Subject_Area])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Sector_Subject_Area_Descr] = LTRIM(RTRIM(source.[Sector_Subject_Area_Descr])),
				[Sector_Subject_Area_Level_Type] = LTRIM(RTRIM(source.[Sector_Subject_Area_Level_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Sector_Subject_Area],
				[Sector_Subject_Area_Descr],
				[Sector_Subject_Area_Level_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[Sector_Subject_Area],
				LTRIM(RTRIM(source.[Sector_Subject_Area_Descr])),
				LTRIM(RTRIM(source.[Sector_Subject_Area_Level_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSA', 'U') IS NOT NULL
				DROP TABLE #SSA;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Sector Subject Area block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Sector Subject Area'
					
		END CATCH


		-------------------------------------------------------------
		----- STEP 9.1: IMPORT Sector Subject Area Hierarchy --------
		-------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 			
				@AwardingOrganisationCentreId [AOCentreID],	
				CN.value('(a2c:SectorSubjectAreaHierarchy_ID/a2c:Sector_Subject_Area_Parent/text())[1]','decimal(3,1)') Sector_Subject_Area_Parent,
				CN.value('(a2c:SectorSubjectAreaHierarchy_ID/a2c:Sector_Subject_Area_Child/text())[1]','decimal(3,1)') Sector_Subject_Area_Child,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#SSAHR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:SectorSubjectArea_DS/a2c:SectorSubjectArea/a2c:SectorSubjectAreaHierarchy') as SSA(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSAHR 
					WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL)
			BEGIN
				PRINT 'Sector Subject Area Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Sector Subject Area Hierarchy" - Record Sector_Subject_Area_Parent="' 
					+  CASE WHEN Sector_Subject_Area_Parent IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area_Parent AS VARCHAR) END
					+ '", Sector_Subject_Area_Child="' 
					+  CASE WHEN Sector_Subject_Area_Child IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area_Child AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAHR 
				WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSAHR 
				WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child
				ORDER BY 
					[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child) 'RowRank' 
			FROM 
				#SSAHR)
			SELECT 
				* 
			INTO 
				#SSAHRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSAHRDUPS)
			BEGIN

				print 'duplicate records found in Sector Subject Area Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child
					ORDER BY 
						[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child) 'RowRank' 
				FROM 
					#SSAHR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Sector Subject Area Hierarchy - Record Sector_Subject_Area_Parent=' +  CAST(Sector_Subject_Area_Parent AS VARCHAR)
					+ ' , Sector_Subject_Area_Child=' +  CAST(Sector_Subject_Area_Child AS VARCHAR)
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAHRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAHRDUPS', 'U') IS NOT NULL
			  DROP TABLE #SSAHRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #SSAHR ADD [SectorSubjectAreaId_Parent] INT null, [SectorSubjectAreaId_Child] INT null

			--Update existing PKs of [dbo].[SectorSubjectArea]
			Update Q 
				set [SectorSubjectAreaId_Parent]=QE.[SectorSubjectAreaId]
			from 
				#SSAHR Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area_Parent=QE.[Sector_Subject_Area] 

			Update Q 
				set [SectorSubjectAreaId_Child]=QE.[SectorSubjectAreaId]
			from 
				#SSAHR Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area_Child=QE.[Sector_Subject_Area] 
		
			--merge [SectorSubjectAreaHierarchy]
			MERGE [dbo].[SectorSubjectAreaHierarchy] AS [target]
			USING (SELECT * from #SSAHR where [SectorSubjectAreaId_Parent] is not null and [SectorSubjectAreaId_Child] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[SectorSubjectAreaId_Parent] = source.[SectorSubjectAreaId_Parent] AND
				[target].[SectorSubjectAreaId_Child] = source.[SectorSubjectAreaId_Child])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[SectorSubjectAreaId_Parent],
				[SectorSubjectAreaId_Child],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[SectorSubjectAreaId_Parent],
				source.[SectorSubjectAreaId_Child],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAHR', 'U') IS NOT NULL
				DROP TABLE #SSAHR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Sector Subject Area Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Sector Subject Area Hierarchy'
					
		END CATCH
			
		-------------------------------------------------------------
		----- STEP 9.2: IMPORT QE Sector Subject Area  --------------
		-------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],	
				QE.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](100)') AO_Qualification_Element_Id,
				QE.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](100)') Qualification_Element_Type,
				CN.value('(a2c:SectorSubjectArea_ID/a2c:Sector_Subject_Area/text())[1]','decimal(3,1)') Sector_Subject_Area,
				CN.value('(a2c:QE_Sector_Subject_Area_Eff_Date/text())[1]','[nvarchar](100)') QE_Sector_Subject_Area_Eff_Date,
				CN.value('(a2c:QE_Sector_Subject_Area_End_Date/text())[1]','[nvarchar](100)') QE_Sector_Subject_Area_End_Date,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#SSAQE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QESectorSubjectArea_DS/a2c:QESectorSubjectArea/a2c:QualificationElement') as SSA(QE)
				CROSS APPLY SSA.QE.nodes('a2c:QESectorSubjectArea_CN') as SS(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSAQE 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL)
			BEGIN
				PRINT 'QE Sector Subject Area - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Sector Subject Area" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", Sector_Subject_Area="' 
					+  CASE WHEN Sector_Subject_Area IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAQE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSAQE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area) 'RowRank' 
			FROM 
				#SSAQE)
			SELECT 
				* 
			INTO 
				#SSAQEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSAQEDUPS)
			BEGIN

				print 'duplicate records found in QE Sector Subject Area'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area) 'RowRank' 
				FROM 
					#SSAQE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Sector Subject Area - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ' , Qualification_Element_Type=' +  Qualification_Element_Type
					+ ' , Sector_Subject_Area=' +  CAST(Sector_Subject_Area AS NVARCHAR)
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAQEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAQEDUPS', 'U') IS NOT NULL
			  DROP TABLE #SSAQEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #SSAQE ADD [QualificationElementId] INT null, [SectorSubjectAreaId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#SSAQE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[SectorSubjectArea]
			Update Q 
				set [SectorSubjectAreaId]=QE.[SectorSubjectAreaId]
			from 
				#SSAQE Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area=QE.[Sector_Subject_Area] 
		
			--merge [QESectorSubjectArea]
			MERGE [dbo].[QESectorSubjectArea] AS [target]
			USING (SELECT * from #SSAQE where [QualificationElementId] is not null and [SectorSubjectAreaId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[SectorSubjectAreaId] = source.[SectorSubjectAreaId])
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Sector_Subject_Area_Eff_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_Eff_Date]),
				[QE_Sector_Subject_Area_End_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_End_Date]),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[SectorSubjectAreaId],
				[QE_Sector_Subject_Area_Eff_Date],
				[QE_Sector_Subject_Area_End_Date],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[SectorSubjectAreaId],
				DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_Eff_Date]),
				DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_End_Date]),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAQE', 'U') IS NOT NULL
				DROP TABLE #SSAQE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Sector Subject Area block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Sector Subject Area'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 10: IMPORT QE Assessment Material ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				CN.value('(a2c:QEAssessmentMaterial_ID/a2c:QE_Assmnt_Material_Id/text())[1]','[nvarchar](max)') QE_Assmnt_Material_Id,
				CN.value('(a2c:QE_Assmnt_Material_Name/text())[1]','[nvarchar](100)') QE_Assmnt_Material_Name,
				CN.value('(a2c:QE_Assmnt_Material_Source/text())[1]','[nvarchar](400)') QE_Assmnt_Material_Source,
				CN.value('(a2c:QE_Assmnt_Material_Description/text())[1]','[nvarchar](250)') QE_Assmnt_Material_Description,
				CN.value('(a2c:QE_Assmnt_Material_Source_Type/text())[1]','[nvarchar](32)') QE_Assmnt_Material_Source_Type,
				CN.value('(a2c:QE_Assmnt_Material_Medium_Type/text())[1]','[nvarchar](20)') QE_Assmnt_Material_Medium_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#QEAM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityAssessmentMaterial_DS/a2c:QEAvailabilityAssessmentMaterial/a2c:QEAssessmentMaterial_CN') as Q(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAM 
					WHERE ISNULL(QE_Assmnt_Material_Id,'')='')
			BEGIN
				PRINT 'QE Assessment Material - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Assessment Material" - Record QE_Assmnt_Material_Id="' + ISNULL(QE_Assmnt_Material_Id,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Assmnt_Material_Id
				ORDER BY 
					[AOCentreID], QE_Assmnt_Material_Id) 'RowRank' 
			FROM 
				#QEAM)
			SELECT 
				* 
			INTO 
				#QEAMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAMDUPS)
			BEGIN

				print 'duplicate records found in QE Assessment Material'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Assmnt_Material_Id
					ORDER BY 
						[AOCentreID], QE_Assmnt_Material_Id) 'RowRank' 
				FROM 
					#QEAM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Assessment Material - Record QE_Assmnt_Material_Id=' +  QE_Assmnt_Material_Id
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QEAssessmentMaterial]
			MERGE [dbo].[QEAssessmentMaterial] AS [target]
			USING (SELECT * from #QEAM) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QE_Assmnt_Material_Id] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Id])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[QE_Assmnt_Material_Name] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Name])),
				[QE_Assmnt_Material_Source] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Source])),
				[QE_Assmnt_Material_Description] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Description])),
				[QE_Assmnt_Material_Source_Type] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Source_Type])),
				[QE_Assmnt_Material_Medium_Type] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Medium_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QE_Assmnt_Material_Id],
				[QE_Assmnt_Material_Name],
				[QE_Assmnt_Material_Source],
				[QE_Assmnt_Material_Description],
				[QE_Assmnt_Material_Source_Type],
				[QE_Assmnt_Material_Medium_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Id])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Name])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Source])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Description])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Source_Type])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Medium_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAM', 'U') IS NOT NULL
				DROP TABLE #QEAM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Assessment Material block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Assessment Material'
					
		END CATCH

		---------------------------------------------------
		----- STEP 10.1: IMPORT QEA Assessment Material ---
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				CN.value('(a2c:QEAssessmentMaterial_ID/a2c:QE_Assmnt_Material_Id/text())[1]','[nvarchar](25)') QE_Assmnt_Material_Id,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				QEA.value('(a2c:Number_Per_Learner/text())[1]','int') Number_Per_Learner,
				QEA.value('(a2c:Number_Per_Centre/text())[1]','int') Number_Per_Centre,
				QEA.value('(a2c:Assmnt_Material_Release_Date/text())[1]','date') Assmnt_Material_Release_Date,
				QEA.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#QEAAM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityAssessmentMaterial_DS/a2c:QEAvailabilityAssessmentMaterial/a2c:QEAssessmentMaterial_CN') as Q(CN) 
				CROSS APPLY Q.CN.nodes('a2c:QEAAssessmentMaterial') as QE(QEA)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAAM 
					WHERE ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QEA Assessment Material - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QEA Assessment Material" - Record QE_Assmnt_Material_Id="' + ISNULL(QE_Assmnt_Material_Id,'')
					+ '", AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEAAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time
				ORDER BY 
					[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time) 'RowRank' 
			FROM 
				#QEAAM)
			SELECT 
				* 
			INTO 
				#QEAAMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAAMDUPS)
			BEGIN

				print 'duplicate records found in QEA Assessment Material'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time
					ORDER BY 
						[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAAM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QEA Assessment Material - Record QE_Assmnt_Material_Id=' +  QE_Assmnt_Material_Id
					+ ', AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type
					+ ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100))
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAAMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAAMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAAMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAAM ADD [QualificationElementId] INT null, [QEAssessmentMaterialId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAAM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QEAAssessmentMaterial]]
			Update Q 
				set [QEAssessmentMaterialId]=QE.[QEAssessmentMaterialId]
			from 
				#QEAAM Q inner join [dbo].[QEAssessmentMaterial] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.QE_Assmnt_Material_Id=QE.[QE_Assmnt_Material_Id]

			--merge [QEAAssessmentMaterial]
			MERGE [dbo].[QEAAssessmentMaterial] AS [target]
			USING (SELECT * from #QEAAM where [QualificationElementId] is not null and [QEAssessmentMaterialId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEAssessmentMaterialId] = source.[QEAssessmentMaterialId])
			WHEN MATCHED THEN 
			UPDATE SET				
				[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				[Number_per_Learner] = source.[Number_per_Learner],
				[Number_per_Centre] = source.[Number_per_Centre],
				[Assmnt_Material_Release_Date] = source.[Assmnt_Material_Release_Date],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEAssessmentMaterialId],
				[QEA_Effective_Start_Date_Time],
				[Number_per_Learner],
				[Number_per_Centre],
				[Assmnt_Material_Release_Date],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QEAssessmentMaterialId],
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				source.[Number_per_Learner],
				source.[Number_per_Centre],
				source.[Assmnt_Material_Release_Date],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAAM', 'U') IS NOT NULL
				DROP TABLE #QEAAM;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QEA Assessment Material block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QEA Assessment Material'
					
		END CATCH

		----------------------------------------------------------------------
		----------------------------------------------------------------------
		----- STEP 11: IMPORT Qualification Element Grade --------------------
		----------------------------------------------------------------------
		----------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Grade/text())[1]','[nvarchar](max)') QE_Grade,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Outcome_Type/text())[1]','[nvarchar](max)') QE_Outcome_Type,
				CN.value('(a2c:QE_Grade_Effective_Date/text())[1]','date') QE_Grade_Effective_Date,
				CN.value('(a2c:QE_Grade_Eff_End_Date/text())[1]','date') QE_Grade_Eff_End_Date,
				CN.value('(a2c:QE_Grade_Description/text())[1]','[nvarchar](max)') QE_Grade_Description,
				CN.value('(a2c:QE_Grade_Sequence_Order/text())[1]','int') QE_Grade_Sequence_Order,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEG	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementGrade_DS/a2c:QualificationElementGrade') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QualificationElementGrade_CN') as QEG(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEG 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Grade - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Grade" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '", QE_Outcome_Type="' + ISNULL(QE_Outcome_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEG 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEG 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type) 'RowRank' 
			FROM 
				#QEG)
			SELECT 
				* 
			INTO 
				#QEGDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEGDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Grade'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type) 'RowRank' 
				FROM 
					#QEG)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Grade - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Grade=' +  ISNULL(QE_Grade,'')
					+ ', QE_Outcome_Type=' +  ISNULL(QE_Outcome_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEGDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEG ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEG Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QualificationElementGrade]
			MERGE [dbo].[QualificationElementGrade] AS [target]
			USING (SELECT * from #QEG where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QE_Grade] = LTRIM(RTRIM(source.[QE_Grade])) AND
				[target].[QE_Outcome_Type] = LTRIM(RTRIM(source.[QE_Outcome_Type])))
			WHEN MATCHED THEN 
			UPDATE SET				
				[QE_Grade_Effective_Date] = source.[QE_Grade_Effective_Date],
				[QE_Grade_Eff_End_Date] = source.[QE_Grade_Eff_End_Date],
				[QE_Grade_Description] = LTRIM(RTRIM(source.[QE_Grade_Description])),
				[QE_Grade_Sequence_Order] = source.[QE_Grade_Sequence_Order],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QE_Grade],
				[QE_Outcome_Type],
				[QE_Grade_Effective_Date],
				[QE_Grade_Eff_End_Date],
				[QE_Grade_Description],
				[QE_Grade_Sequence_Order],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[QE_Grade])),
				LTRIM(RTRIM(source.[QE_Outcome_Type])),
				source.[QE_Grade_Effective_Date],
				source.[QE_Grade_Eff_End_Date],
				LTRIM(RTRIM(source.[QE_Grade_Description])),
				source.[QE_Grade_Sequence_Order],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEG', 'U') IS NOT NULL
				DROP TABLE #QEG;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Grade block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Grade'
					
		END CATCH

		-------------------------------------------------------
		----- STEP 11.1: IMPORT QE Grade Performance Points ---
		-------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](100)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](100)') Qualification_Element_Type,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Grade/text())[1]','[nvarchar](100)') QE_Grade,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Outcome_Type/text())[1]','[nvarchar](100)') QE_Outcome_Type,
				PPN.value('(a2c:QEGradePerformancePoints_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](100)') Party_Id_Administrator,
				PPN.value('(a2c:Performance_Points/text())[1]','Decimal(6,2)') Performance_Points,
				PPN.value('(a2c:Level_1_Threshold/text())[1]','Decimal(5,2)') Level_1_Threshold,
				PPN.value('(a2c:Level_2_Threshold/text())[1]','Decimal(5,2)') Level_2_Threshold,
				PPN.value('(a2c:Level_3_Threshold/text())[1]','Decimal(5,2)') Level_3_Threshold,
				PPN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#QEGPPT	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementGrade_DS/a2c:QualificationElementGrade') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QualificationElementGrade_CN') as QEG(CN) 
				CROSS APPLY QEG.CN.nodes('a2c:QEGradePerformancePoints') as QEGP(PPN) 

			
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEGPPT 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')='')
			BEGIN
				PRINT 'QE Grade Performance Points - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Grade Performance Points" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '", QE_Outcome_Type="' + ISNULL(QE_Outcome_Type,'')
					+ '", Party_Id_Administrator="' + ISNULL(Party_Id_Administrator,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGPPT 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEGPPT 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator) 'RowRank' 
			FROM 
				#QEGPPT)
			SELECT 
				* 
			INTO 
				#QEGPPTDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEGPPTDUPS)
			BEGIN

				print 'duplicate records found in QE Grade Performance Points'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator) 'RowRank' 
				FROM 
					#QEGPPT)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Grade - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Grade=' +  ISNULL(QE_Grade,'')
					+ ', QE_Outcome_Type=' +  ISNULL(QE_Outcome_Type,'')
					+ ', Party_Id_Administrator=' +  ISNULL(Party_Id_Administrator,'')
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGPPTDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGPPTDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEGPPTDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEGPPT ADD [QualificationElementId] INT null, [QualificationElementGradeId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEGPPT Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QualificationElementGrade]]
			Update Q 
				set [QualificationElementGradeId]=QE.[QualificationElementGradeId]
			from 
				#QEGPPT Q inner join [dbo].[QualificationElementGrade] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and LTRIM(RTRIM(Q.[QE_Grade]))=LTRIM(RTRIM(QE.[QE_Grade]))
				and LTRIM(RTRIM(Q.[QE_Outcome_Type]))=LTRIM(RTRIM(QE.[QE_Outcome_Type]))

			--merge [QEGradePerformancePoints]
			MERGE [dbo].[QEGradePerformancePoints] AS [target]
			USING (SELECT * from #QEGPPT 
					where [QualificationElementId] is not null 
					and [QualificationElementGradeId] is not null
					and [Party_Id_Administrator] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QualificationElementGradeId] = source.[QualificationElementGradeId] AND
				LTRIM(RTRIM([target].[Party_Id_Administrator]))=LTRIM(RTRIM(source.[Party_Id_Administrator])))
			WHEN MATCHED THEN 
			UPDATE SET
				[Performance_Points] = source.[Performance_Points],
				[Level_1_Threshold] = source.[Level_1_Threshold],
				[Level_2_Threshold] = source.[Level_2_Threshold],
				[Level_3_Threshold] = source.[Level_3_Threshold],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QualificationElementGradeId],
				[Party_Id_Administrator],
				[Performance_Points],
				[Level_1_Threshold],
				[Level_2_Threshold],
				[Level_3_Threshold],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QualificationElementGradeId],
				LTRIM(RTRIM(source.[Party_Id_Administrator])),
				source.[Performance_Points],
				source.[Level_1_Threshold],
				source.[Level_2_Threshold],
				source.[Level_3_Threshold],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGPPT', 'U') IS NOT NULL
				DROP TABLE #QEGPPT;			

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Grade Performance Points block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Grade Performance Points'
					
		END CATCH
					
		---------------------------------------------------
		---------------------------------------------------
		----- STEP 12: IMPORT QE Objective Statement ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				CN.value('(a2c:QEObjectiveStatement_ID/a2c:QE_Objective_Statement_Name/text())[1]','[nvarchar](max)') QE_Objective_Statement_Name,
				CN.value('(a2c:QE_Objective_Statement_Text/text())[1]','[nvarchar](max)') QE_Objective_Statement_Text,
				CN.value('(a2c:QE_Objctv_Stmnt_Level_Seq_Num/text())[1]','int') QE_Objctv_Stmnt_Level_Seq_Num,
				CN.value('(a2c:QE_Objective_Statement_Level/text())[1]','[nvarchar](max)') QE_Objective_Statement_Level,
				CN.value('(a2c:QE_Objective_Statement_Descr/text())[1]','[nvarchar](max)') QE_Objective_Statement_Descr,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEOS
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEObjectiveStatement_DS/a2c:QEObjectiveStatement') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QEObjectiveStatement_CN') as QEO(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEOS 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')='')
			BEGIN
				PRINT 'QE Objective Statement - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Objective Statement" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Objective_Statement_Name="' + ISNULL(QE_Objective_Statement_Name,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOS 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEOS 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name 
			ORDER BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name) 'RowRank' 
			FROM 
				#QEOS)
			SELECT 
				* 
			INTO 
				#QEOSDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEOSDUPS)
			BEGIN

				print 'duplicate records found in QE Objective Statement'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name) 'RowRank' 
				FROM 
					#QEOS)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Objective Statement - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Objective_Statement_Name=' +  ISNULL(QE_Objective_Statement_Name,'')
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEOSDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEOS ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEOS Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QEObjectiveStatement]
			MERGE [dbo].[QEObjectiveStatement] AS [target]
			USING (SELECT * from #QEOS where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QE_Objective_Statement_Name] = LTRIM(RTRIM(source.[QE_Objective_Statement_Name])))
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Objective_Statement_Text] = LTRIM(RTRIM(source.[QE_Objective_Statement_Text])),
				[QE_Objctv_Stmnt_Level_Seq_Num] = source.[QE_Objctv_Stmnt_Level_Seq_Num],
				[QE_Objective_Statement_Level] = LTRIM(RTRIM(source.[QE_Objective_Statement_Level])),
				[QE_Objective_Statement_Descr] = LTRIM(RTRIM(source.[QE_Objective_Statement_Descr])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QE_Objective_Statement_Name],
				[QE_Objective_Statement_Text],
				[QE_Objctv_Stmnt_Level_Seq_Num],
				[QE_Objective_Statement_Level],
				[QE_Objective_Statement_Descr],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[QE_Objective_Statement_Name])),
				LTRIM(RTRIM(source.[QE_Objective_Statement_Text])),
				source.[QE_Objctv_Stmnt_Level_Seq_Num],
				LTRIM(RTRIM(source.[QE_Objective_Statement_Level])),
				LTRIM(RTRIM(source.[QE_Objective_Statement_Descr])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOS', 'U') IS NOT NULL
				DROP TABLE #QEOS;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Objective Statement block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Objective Statement'
					
		END CATCH

		---------------------------------------------------------------
		----- STEP 12.1: IMPORT QE Objective Statement Hierarchy ------
		---------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:AO_QE_Id_First/text())[1]','[nvarchar](max)') AO_QE_Id_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Type_First/text())[1]','[nvarchar](max)') QE_Type_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Objctv_Stmnt_Name_First/text())[1]','[nvarchar](max)') QE_Objctv_Stmnt_Name_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:AO_QE_Id_Second/text())[1]','[nvarchar](max)') AO_QE_Id_Second,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Type_Second/text())[1]','[nvarchar](max)') QE_Type_Second,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Objctv_Stmnt_Name_Second/text())[1]','[nvarchar](max)') QE_Objctv_Stmnt_Name_Second,
				QEID.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEOSH
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEObjectiveStatement_DS/a2c:QEObjectiveStatementHierarchy') as QE(QEID)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEOSH 
					WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')='')
			BEGIN
				PRINT 'QE Objective Statement Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Objective Statement Hierarchy" - Record AO_QE_Id_First="' + ISNULL(AO_QE_Id_First,'')
					+ '", QE_Type_First="' + ISNULL(QE_Type_First,'')
					+ '", QE_Objctv_Stmnt_Name_First="' + ISNULL(QE_Objctv_Stmnt_Name_First,'')
					+ '", AO_QE_Id_Second="' + ISNULL(AO_QE_Id_Second,'')
					+ '", QE_Type_Second="' + ISNULL(QE_Type_Second,'')
					+ '", QE_Objctv_Stmnt_Name_Second="' + ISNULL(QE_Objctv_Stmnt_Name_Second,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSH 
				WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEOSH 
				WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second
			ORDER BY 
				[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second) 'RowRank' 
			FROM 
				#QEOSH)
			SELECT 
				* 
			INTO 
				#QEOSHDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEOSHDUPS)
			BEGIN

				print 'duplicate records found in QE Objective Statement Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second
				ORDER BY 
					[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second) 'RowRank' 
				FROM 
					#QEOSH)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Objective Statement Hierarchy - Record AO_QE_Id_First=' +  ISNULL(AO_QE_Id_First,'')
					+ ', QE_Type_First=' +  ISNULL(QE_Type_First,'')
					+ ', QE_Objctv_Stmnt_Name_First=' +  ISNULL(QE_Objctv_Stmnt_Name_First,'')
					+ ', AO_QE_Id_Second=' +  ISNULL(AO_QE_Id_Second,'')
					+ ', QE_Type_Second=' +  ISNULL(QE_Type_Second,'')
					+ ', QE_Objctv_Stmnt_Name_Second=' +  ISNULL(QE_Objctv_Stmnt_Name_Second,'')
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSHDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSHDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEOSHDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk columns to temp table
			ALTER TABLE #QEOSH ADD 
			[QualificationElementId_First] INT null,
			[QEObjectiveStatementId_First] INT null,
			[QualificationElementId_Second] INT null,
			[QEObjectiveStatementId_Second] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId_First]=QE.QualificationElementId
			from 
				#QEOSH Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_First=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_First=QE.[Qualification_Element_Type]

			Update Q 
				set [QualificationElementId_Second]=QE.QualificationElementId
			from 
				#QEOSH Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Second=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Second=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QEObjectiveStatement]]
			Update Q 
				set [QEObjectiveStatementId_First]=QE.[QEObjectiveStatementId]
			from 
				#QEOSH Q inner join [dbo].[QEObjectiveStatement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId_First]=QE.[QualificationElementId] 
				and Q.QE_Objctv_Stmnt_Name_First=QE.QE_Objective_Statement_Name

			Update Q 
				set [QEObjectiveStatementId_Second]=QE.[QEObjectiveStatementId]
			from 
				#QEOSH Q inner join [dbo].[QEObjectiveStatement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId_Second]=QE.[QualificationElementId] 
				and Q.QE_Objctv_Stmnt_Name_Second=QE.QE_Objective_Statement_Name

			--merge [QEObjectiveStatementHierarchy]
			MERGE [dbo].[QEObjectiveStatementHierarchy] AS [target]
			USING (SELECT * from #QEOSH where 
				[QualificationElementId_First] is not null and
				[QEObjectiveStatementId_First] is not null and
				[QualificationElementId_Second] is not null and
				[QEObjectiveStatementId_Second] is not null
			) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId_First] = source.[QualificationElementId_First] AND
				[target].[QEObjectiveStatementId_First] = source.[QEObjectiveStatementId_First] AND
				[target].[QualificationElementId_Second] = source.[QualificationElementId_Second] AND
				[target].[QEObjectiveStatementId_Second] = source.[QEObjectiveStatementId_Second])
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId_First],
				[QEObjectiveStatementId_First],
				[QualificationElementId_Second],
				[QEObjectiveStatementId_Second],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId_First],
				source.[QEObjectiveStatementId_First],
				source.[QualificationElementId_Second],
				source.[QEObjectiveStatementId_Second],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSH', 'U') IS NOT NULL
				DROP TABLE #QEOSH;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Objective Statement Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Objective Statement Hierarchy'
					
		END CATCH

		-----------------------------------------------------------------------
		-----------------------------------------------------------------------
		----- STEP 13: IMPORT Qualification Element Age Range -----------------
		-----------------------------------------------------------------------
		-----------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				CN.value('(a2c:AgeRange_ID/a2c:Age_Range_Type/text())[1]','[nvarchar](max)') Age_Range_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEAR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementAgeRange_DS/a2c:QualificationElementAgeRange/a2c:QualificationElementAgeRange_CN/a2c:QEAgeRange_ID') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QEAgeRange_CN') as QEO(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAR 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Age Range - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Age Range" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", Age_Range_Type="' + ISNULL(Age_Range_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAR 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAR 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------
		
			
			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type 
			ORDER BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type) 'RowRank' 
			FROM 
				#QEAR)
			SELECT 
				* 
			INTO 
				#QEARDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEARDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Age Range'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type) 'RowRank' 
				FROM 
					#QEAR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Age Range - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', Age_Range_Type=' +  ISNULL(Age_Range_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEARDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEARDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEARDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAR ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAR Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QualificationElementAgeRange]
			MERGE [dbo].[QualificationElementAgeRange] AS [target]
			USING (SELECT * from #QEAR where [QualificationElementId] is not null and [Age_Range_Type] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[Age_Range_Type] = LTRIM(RTRIM(source.[Age_Range_Type])))
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[Age_Range_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[Age_Range_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAR', 'U') IS NOT NULL
				DROP TABLE #QEAR;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Age Range block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Age Range'
					
		END CATCH

		--------------------------------------------------------
		--------------------------------------------------------
		----- STEP 14: IMPORT QE Availability Maximum Mark -----
		--------------------------------------------------------
		--------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEA.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QEA.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				CN.value('(a2c:QEAvailabilityMaximumMark_ID/a2c:QE_Outcome_Value_Type/text())[1]','[nvarchar](max)') QE_Outcome_Value_Type,
				CN.value('(a2c:QE_Availability_Maximum_Mark/text())[1]','int') QE_Availability_Maximum_Mark,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEAMM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityGradeBoundary_DS/a2c:QEAvailabilityMaximumMark/a2c:QEAvailability') as QE(QEA)
				CROSS APPLY QE.QEA.nodes('a2c:QEAvailabilityMaximumMark_CN') as QEM(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAMM 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')='')
			BEGIN
				PRINT 'QE Availability Maximum Mark - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Availability Maximum Mark" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", QE_Outcome_Value_Type="' + ISNULL(QE_Outcome_Value_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMM 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAMM 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type 
			ORDER BY
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type) 'RowRank' 
			FROM 
				#QEAMM)
			SELECT 
				* 
			INTO 
				#QEAMMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAMMDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Maximum Mark'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type 
				ORDER BY
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type) 'RowRank' 
				FROM 
					#QEAMM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Maximum Mark - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QEA_Effective_Start_Date_Time=' + cast(QEA_Effective_Start_Date_Time as varchar)
					+ ', QE_Outcome_Value_Type=' +  ISNULL(QE_Outcome_Value_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAMMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAMM ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAMM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QEAvailabilityMaximumMark]
			MERGE [dbo].[QEAvailabilityMaximumMark] AS [target]
			USING (SELECT * from #QEAMM 
					where [QualificationElementId] is not null
					and DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) is not null
					and [QE_Outcome_Value_Type] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.QEA_Effective_Start_Date_Time) AND
				[target].[QE_Outcome_Value_Type] = LTRIM(RTRIM(source.[QE_Outcome_Value_Type])))
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Availability_Maximum_Mark] = source.[QE_Availability_Maximum_Mark],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEA_Effective_Start_Date_Time],
				[QE_Outcome_Value_Type],
				[QE_Availability_Maximum_Mark],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				DBO.FN_A2C_GETDATETIME(source.QEA_Effective_Start_Date_Time),
				LTRIM(RTRIM(source.[QE_Outcome_Value_Type])),
				source.[QE_Availability_Maximum_Mark],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMM', 'U') IS NOT NULL
				DROP TABLE #QEAMM;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Maximum Mark block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Maximum Mark'
					
		END CATCH

		-------------------------------------------------------------------------
		----- STEP 14.1: IMPORT QE Availability Maximum Mark Grade Boundary -----
		-------------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEA.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QEA.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				CN.value('(a2c:QEAvailabilityMaximumMark_ID/a2c:QE_Outcome_Value_Type/text())[1]','[nvarchar](max)') QE_Outcome_Value_Type,
				GB.value('(a2c:QEAMaxMarkGradeBoundary_ID/a2c:QE_Grade/text())[1]','[nvarchar](max)') QE_Grade,
				GB.value('(a2c:Grade_Boundary_Lower_Limit/text())[1]','int') Grade_Boundary_Lower_Limit,
				GB.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEMMGB	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityGradeBoundary_DS/a2c:QEAvailabilityMaximumMark/a2c:QEAvailability') as QE(QEA)
				CROSS APPLY QE.QEA.nodes('a2c:QEAvailabilityMaximumMark_CN') as QEM(CN)
				CROSS APPLY QEM.CN.nodes('a2c:QEAMaxMarkGradeBoundary') as QEMM(GB) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEMMGB 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')='')
			BEGIN
				PRINT 'QE Availability Maximum Mark Grade Boundary - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Availability Maximum Mark Grade Boundary" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", QE_Outcome_Value_Type="' + ISNULL(QE_Outcome_Value_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEMMGB 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEMMGB 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade 
			ORDER BY
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade) 'RowRank' 
			FROM 
				#QEMMGB)
			SELECT 
				* 
			INTO 
				#QEMMGBDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEMMGBDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Maximum Mark'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade 
				ORDER BY
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade) 'RowRank' 
				FROM 
					#QEMMGB)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					A2CTransactionResponseEnvelopeId, A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Maximum Mark - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type
					+ ', QEA_Effective_Start_Date_Time=' + cast(QEA_Effective_Start_Date_Time as varchar)
					+ ', QE_Outcome_Value_Type=' +  QE_Outcome_Value_Type
					+ ', QE_Grade=' +  QE_Grade
					+ ' - Duplicate record.' as ErrorMessage,
					@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					@A2CTransactionResponseEnvelopeId, @A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEMMGBDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEMMGBDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEMMGBDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEMMGB ADD [QualificationElementId] INT null, [QEAvailabilityMaximumMarkId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEMMGB Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and LTRIM(RTRIM(Q.[AO_Qualification_Element_Id]))=LTRIM(RTRIM(QE.[AO_Qualification_Element_Id])) 
				and LTRIM(RTRIM(Q.[Qualification_Element_Type]))=LTRIM(RTRIM(QE.[Qualification_Element_Type]))

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QEAvailabilityMaximumMarkId]=QE.[QEAvailabilityMaximumMarkId]
			from 
				#QEMMGB Q inner join [dbo].[QEAvailabilityMaximumMark] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId]=QE.[QualificationElementId]		
				and DBO.FN_A2C_GETDATETIME(Q.QEA_Effective_Start_Date_Time)=QE.QEA_Effective_Start_Date_Time
				and LTRIM(RTRIM(Q.[QE_Outcome_Value_Type]))=LTRIM(RTRIM(QE.[QE_Outcome_Value_Type]))

			--merge [QEAMaxMarkGradeBoundary]
			MERGE [dbo].[QEAMaxMarkGradeBoundary] AS [target]
			USING (SELECT * from #QEMMGB 
					where [QualificationElementId] is not null
					and [QEAvailabilityMaximumMarkId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityMaximumMarkId] = source.[QEAvailabilityMaximumMarkId] AND
				[target].[QE_Grade] = LTRIM(RTRIM(source.[QE_Grade])))
			WHEN MATCHED THEN 
			UPDATE SET
				[Grade_Boundary_Lower_Limit] = source.[Grade_Boundary_Lower_Limit],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityMaximumMarkId],
				[QE_Grade],
				[Grade_Boundary_Lower_Limit],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityMaximumMarkId],
				LTRIM(RTRIM(source.[QE_Grade])),
				source.[Grade_Boundary_Lower_Limit],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEMMGB', 'U') IS NOT NULL
				DROP TABLE #QEMMGB;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Maximum Mark Grade Boundary block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Maximum Mark Grade Boundary'
					
		END CATCH

		-------------------------------------------------------------------------
		----- STEP 14.1 finished ------------------------------------------------
		-------------------------------------------------------------------------

		--UPDATE IMPORT STATUS
		IF @IsError=1
		BEGIN
			PRINT 'Exiting with error'
		END
		ELSE
		BEGIN
			--NO ERROR ENCOUNTERED
			--UPDATE SUCESS STATUS
			UPDATE 
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
			SET 
				DATAIMPORTSTATUS = 1
			WHERE
				AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreId AND
				A2CTRANSACTIONID = @A2CTransactionId AND
				A2CTRANSACTIONREQUESTID = @A2CTransactionRequestId AND 
				A2CTRANSACTIONRESPONSEID = @A2CTransactionResponseId AND 
				A2CTRANSACTIONRESPONSEENVELOPEID = @A2CTransactionResponseEnvelopeId AND
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId	
			
			PRINT 'Exiting with success'	
		END

	END TRY
	BEGIN CATCH

		PRINT 'Exception in Main block/Common area'
		
		IF @ScreenMasterId=0 OR @SchoolID=0 OR @AwardingOrganisationCentreId=0--REQUIRED TO LOG ERROR IN ERROR TABLE, SO CANT LOG ERROR
		BEGIN
			PRINT ERROR_NUMBER() 		
			PRINT ERROR_LINE() 
			PRINT ERROR_MESSAGE()			
		END
		ELSE
		BEGIN
			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, @A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Main block/Common area'
		END

		PRINT 'Exiting with error from Main block/Common area'

	END CATCH;
END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]...';


GO



CREATE PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]
@A2CTransactionId int,
@A2CSchoolId int,
@AwardingOrganisationDetailId int,
@CentreId int,
@A2CTransactionResponseId int,
@A2CTransactionRequestId int,
@A2CTransactionResponseEnvelopeId int,
@MessageId nvarchar(50),
@RefMessageId nvarchar(50)=null,
@TimeStamp datetime,
@TransactionName nvarchar(100)=null,
@IncomingSequence bigint=null,
@data varbinary(max),
@IsFeedbackMessage  bit,
@AwardingOrganisationCentreId int
AS
BEGIN
	
	DECLARE @A2CTransactionMasterId INT
	EXEC @A2CTransactionMasterId= [usp_Select_A2CTransactionMasters_IdByName] @TransactionName
	Declare @A2CMessageId int
	--if @RefMessageId<>null and @RefMessageId<>''
	--begin
	--	SELECT @A2CMessageId= A2CMessageId FROM A2CXmlMessages WHERE A2CSchoolId=@A2CSchoolId
	--	AND CentreId=@CentreId AND AwardingOrganisationDetailId=@AwardingOrganisationDetailId AND A2CMessageGuid=@RefMessageId
	--end

	

	Insert into A2CTransactionResponseEnvelopeMessages (A2CTransactionId,A2CTransactionResponseId,A2CTransactionRequestId,A2CTransactionResponseEnvelopeId,MessageId,RefMessageId,[TimeStamp],A2CTransactionMasterId,IncomingSequence,[data],IsFeedbackMessage,A2CMessageId,AwardingOrganisationCentreId)
	values(@A2CTransactionId,@A2CTransactionResponseId,@A2CTransactionRequestId,@A2CTransactionResponseEnvelopeId,@MessageId,@RefMessageId,@TimeStamp,@A2CTransactionMasterId,@IncomingSequence,@data,@IsFeedbackMessage,@A2CMessageId,@AwardingOrganisationCentreId)
	select cast(SCOPE_IdENTITY() as int)

	if @IncomingSequence is not null and @IncomingSequence>0 
	begin
		update AwardingOrganisationCentres
		set IncomingSequence=@IncomingSequence
		where AwardingOrganisationCentreId = @AwardingOrganisationCentreId
	end
END
GO
PRINT N'Creating [dbo].[usp_Insert_A2CTransactions]...';


GO

CREATE PROCEDURE [dbo].[usp_Insert_A2CTransactions]
@TransactionName nvarchar(100)=null,
@AwardingOrganisationCentreId int


AS



BEGIN



DECLARE @A2CTransactionMasterId INT

	EXEC @A2CTransactionMasterId= [usp_Select_A2CTransactionMasters_IdByName] @TransactionName
	Insert into A2CTransactions (A2CTransactionMasterId,AwardingOrganisationCentreId)
	values(@A2CTransactionMasterId,@AwardingOrganisationCentreId)

	select cast(SCOPE_IdENTITY() as int)

END
GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_WebEvent_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_CheckSchemaVersion] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_ChangePasswordQuestionAndAnswer] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_CreateUser] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_FindUsersByEmail] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_FindUsersByName] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetAllUsers] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetNumberOfUsersOnline] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetNumberOfUsersOnline] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetPassword] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetPasswordWithFormat] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByEmail] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByEmail] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByName] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByName] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByUserId] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_GetUserByUserId] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_ResetPassword] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_SetPassword] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_UnlockUser] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_UpdateUser] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Membership_UpdateUserInfo] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Paths_CreatePath] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Personalization_GetApplicationId] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_DeleteAllState] TO [aspnet_Personalization_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_FindState] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_GetCountOfState] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_ResetSharedState] TO [aspnet_Personalization_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAdministration_ResetUserState] TO [aspnet_Personalization_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAllUsers_GetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAllUsers_ResetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationAllUsers_SetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationPerUser_GetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationPerUser_ResetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_PersonalizationPerUser_SetPageSettings] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_DeleteInactiveProfiles] TO [aspnet_Profile_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_DeleteProfiles] TO [aspnet_Profile_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_GetNumberOfInactiveProfiles] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_GetProfiles] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_GetProperties] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Profile_SetProperties] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_WebEvent_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_RegisterSchemaVersion] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Roles_CreateRole] TO [aspnet_Roles_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Roles_DeleteRole] TO [aspnet_Roles_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Roles_GetAllRoles] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Roles_RoleExists] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_WebEvent_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Personalization_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Profile_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UnRegisterSchemaVersion] TO [aspnet_Membership_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_Users_DeleteUser] TO [aspnet_Membership_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_AddUsersToRoles] TO [aspnet_Roles_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_FindUsersInRole] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_GetRolesForUser] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_GetRolesForUser] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_GetUsersInRoles] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_IsUserInRole] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_IsUserInRole] TO [aspnet_Roles_BasicAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_UsersInRoles_RemoveUsersFromRoles] TO [aspnet_Roles_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE
    ON OBJECT::[dbo].[aspnet_WebEvent_LogEvent] TO [aspnet_WebEvent_FullAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Applications] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_MembershipUsers] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Profiles] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Roles] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Profile_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_Users] TO [aspnet_Membership_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_UsersInRoles] TO [aspnet_Roles_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_WebPartState_Paths] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_WebPartState_Shared] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[dbo].[vw_aspnet_WebPartState_User] TO [aspnet_Personalization_ReportingAccess]
    AS [dbo];


GO
PRINT N'Creating [Version]...';


GO
EXECUTE sp_addextendedproperty @name = N'Version', @value = N'15.1.3.1';


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeMessages].[DataImportStatus].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0-not imported, 1-imported successfully, 2-imported with error', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CTransactionResponseEnvelopeMessages', @level2type = N'COLUMN', @level2name = N'DataImportStatus';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

Insert into A2CTransactionMasters( TransactionName,TransactionDescription)
Select	temp.TransactionName,temp.TransactionDescription
From	(Select 'Ping' TransactionName,'Ping' TransactionDescription
		union all
		Select 'ManageRequestProductCatalogue','Manage Request ProductCatalogue' 
		union all
		Select  'ProcessProductCatalogue','Process ProductCatalogue' 
		) As temp
		Left Join A2CTransactionMasters sm 
		on temp.TransactionName = sm.TransactionName
Where sm.A2CTransactionMasterId is null

Insert into dbo.Roles(RoleId, RoleName,RoleDisplayName)
Select	temp.RoleId, temp.RoleName,temp.RoleDisplayName
From	(Select 1 RoleId, 'SuperUser' RoleName, 'Super User' RoleDisplayName
		union all
		Select 2, 'SchoolAdministrator','School Administrator'
		union all
		Select 3, 'ExamOfficer','Exam Officer'
		) As temp
		Left Join dbo.Roles rl 
		on temp.RoleId = rl.RoleId
Where rl.RoleId is null

Insert into ScreenMasters(ScreenMasterId, ScreenName,ScreenDescription)
Select	temp.ScreenMasterId, temp.ScreenName,temp.ScreenDescription
From	(Select 1000 ScreenMasterId, 'General' ScreenName,'General' ScreenDescription
		union all
		Select 1001, 'Component','Component' 
		union all
		Select 1002, 'Ping','Ping' 
		union all
		Select 1003, 'PullRequest','Pull Request' 
		union all
		Select 1004, 'Edi','EDI' 
		) As temp
		Left Join ScreenMasters sm 
		on temp.ScreenMasterId = sm.ScreenMasterId
Where sm.ScreenMasterId is null

Insert into SignalResponseMasters(SignalResponseMasterId, SignalResponseText,Description)
Select	temp.SignalResponseMasterId, temp.SignalResponseText,temp.Description
From	(Select 1000 SignalResponseMasterId, 'Receipt' SignalResponseText,'Receipt' Description
		union all
		Select 1001, 'Error','Error' 
		union all
		Select 1002, 'UnrecognizedError','Unrecognized Error' 
		
		) As temp
		Left Join SignalResponseMasters sm 
		on temp.SignalResponseMasterId = sm.SignalResponseMasterId
Where sm.SignalResponseMasterId is null

Insert into aspnet_SchemaVersions(Feature,CompatibleSchemaVersion,IsCurrentVersion)
Select	temp.Feature, temp.CompatibleSchemaVersion,temp.IsCurrentVersion
From	(Select 'common' Feature, 1 CompatibleSchemaVersion,1 IsCurrentVersion
		union all
		Select 'health monitoring' Feature, 1 CompatibleSchemaVersion,1 IsCurrentVersion
		union all
		Select 'membership' Feature, 1 CompatibleSchemaVersion,1 IsCurrentVersion
		union all
		Select 'personalization' Feature, 1 CompatibleSchemaVersion,1 IsCurrentVersion
		union all
		Select 'profile' Feature, 1 CompatibleSchemaVersion,1 IsCurrentVersion
		union all
		Select 'role manager' Feature, 1 CompatibleSchemaVersion,1 IsCurrentVersion
		) As temp
		Left Join aspnet_SchemaVersions sm 
		on temp.Feature = sm.Feature
Where sm.Feature is null

Insert into ScreenMasters(ScreenMasterId, ScreenName,ScreenDescription)
Select	temp.ScreenMasterId, temp.ScreenName,temp.ScreenDescription
From	(Select 1006 ScreenMasterId, 'ViewSchoolUsers' ScreenName,'School user list screen' ScreenDescription
		union all
		Select 1007, 'AddSchoolUser','Add school user' 
		union all
		Select 1005, 'LogOn','LogOn'
		union all
		Select 1008, 'Home','Home'
		union all
		Select 1009, 'ForgotPassword','Forgot Password'
		union all
		Select 1010, 'ImportCentreCertificate','Import Centre Certificate'
		) As temp
		Left Join ScreenMasters sm 
		on temp.ScreenMasterId = sm.ScreenMasterId
Where sm.ScreenMasterId is null

Insert	into PollingFrequency(AwardingOrganisationId, Frequency)
Select	AO.AwardingOrganisationId, 30 Frequency
From	AwardingOrganisations AO
		LEFT JOIN PollingFrequency PF ON AO.AwardingOrganisationId = PF.AwardingOrganisationId
Where	PF.AwardingOrganisationId is null

Insert into ScreenMasters(ScreenMasterId, ScreenName,ScreenDescription)
Select	temp.ScreenMasterId, temp.ScreenName,temp.ScreenDescription
From	(
		Select 1013 ScreenMasterId, 'ImportProductCatalogue' ScreenName,'Import Product Catalogue' ScreenDescription
		) As temp
		Left Join ScreenMasters sm 
		on temp.ScreenMasterId = sm.ScreenMasterId
Where sm.ScreenMasterId is null

Insert into ScreenMasters(ScreenMasterId, ScreenName,ScreenDescription)
Select	temp.ScreenMasterId, temp.ScreenName,temp.ScreenDescription
From	(Select 1011 ScreenMasterId, 'Transactions' ScreenName,'Transactions' ScreenDescription
		union all
		Select 1012, 'ViewProductCatalogue','View Product Catalogue' 
		union all
		Select 1014, 'WindowServiceTransactions','Window Service Transactions'
		) As temp
		Left Join ScreenMasters sm 
		on temp.ScreenMasterId = sm.ScreenMasterId
Where sm.ScreenMasterId is null

USE [msdb]
GO

DECLARE @Owner VARCHAR(200)   --Job Owner
DECLARE @DBName VARCHAR(200)  --Database Name
SET @Owner = 'sa'
SET @DBName = '$(DatabaseName)'


/****** Object:  Job [UnlockActiveUsers]    Script Date: 02-07-2015 13:52:19 ******/
IF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = N'UnlockActiveUsers')
	EXEC msdb.dbo.sp_delete_job @job_name=N'UnlockActiveUsers', @delete_unused_schedule=1


/****** Object:  Job [UnlockActiveUsers]    Script Date: 02-07-2015 13:52:19 ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [[Uncategorized (Local)]]]    Script Date: 02-07-2015 13:52:19 ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'UnlockActiveUsers', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'No description available.', 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=@Owner, @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [Execute UnlockUsers SP]    Script Date: 02-07-2015 13:52:20 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Execute UnlockUsers SP', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'exec usp_UnlockUsers', 
		@database_name=@DBName, 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'UnlockUsersSchedule', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=4, 
		@freq_subday_interval=2, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=0, 
		@active_start_date=20150702, 
		@active_end_date=99991231, 
		@active_start_time=0, 
		@active_end_time=235959, 
		@schedule_uid=N'35b999d3-7b83-4469-979b-77827fb24e2a'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:

GO


USE [msdb]
GO

DECLARE @Owner VARCHAR(200)   --Job Owner
DECLARE @DBName VARCHAR(200)  --Database Name
SET @Owner = 'sa'
SET @DBName = '$(DatabaseName)'


/****** Object:  Job [A2CXMLDataImport]    Script Date: 7/17/2015 10:33:48 AM ******/
IF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = N'A2CXMLDataImport')
	EXEC msdb.dbo.sp_delete_job @job_name=N'A2CXMLDataImport', @delete_unused_schedule=1

/****** Object:  Job [A2CXMLDataImport]    Script Date: 7/17/2015 10:33:48 AM ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [[Data Import]]]    Script Date: 7/17/2015 10:33:48 AM ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Data Import]' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Data Import]'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'A2CXMLDataImport', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'A2C XML Data Import Job', 
		@category_name=N'[Data Import]', 
		@owner_login_name=@Owner, @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [Import Received XML file from AO]    Script Date: 7/17/2015 10:33:48 AM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Import Received XML file from AO', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'
		
		DECLARE 
			@AwardingOrganisationCentreId				int, 
			@A2CTransactionId							int, 
			@A2CTransactionRequestId					int, 
			@A2CTransactionResponseId					int, 
			@A2CTransactionResponseEnvelopeId			int, 
			@A2CTransactionResponseEnvelopeMessageId	int

		DECLARE TABLE_CURSOR CURSOR FOR 
		SELECT  
			AT.AWARDINGORGANISATIONCENTREID, 
			AT.A2CTRANSACTIONID, 
			AT.A2CTRANSACTIONREQUESTID, 
			AT.A2CTRANSACTIONRESPONSEID, 
			AT.A2CTRANSACTIONRESPONSEENVELOPEID, 
			AT.A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID
		FROM
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGES AT
			INNER JOIN A2CTRANSACTIONRESPONSEENVELOPES AE 
			ON AE.A2CTRANSACTIONRESPONSEENVELOPEID=AT.A2CTRANSACTIONRESPONSEENVELOPEID
			INNER JOIN A2CTRANSACTIONMASTERS AM
			ON AM.A2CTRANSACTIONMASTERID=AT.A2CTRANSACTIONMASTERID
		WHERE 
			ISNULL(ISFEEDBACKMESSAGE, 0) = 0
			AND ISNULL(DATAIMPORTSTATUS, 0) = 0
			AND UPPER(LTRIM(RTRIM(AM.TRANSACTIONNAME))) 
				IN(''PROCESSPRODUCTCATALOGUE'',''PROCESSPRODUCTCATALOGUEINSTANCE'',''PROCESSPRODUCTCATALOGUESTATIC'')
		ORDER BY 
			AT.INCOMINGSEQUENCE

		OPEN TABLE_CURSOR
		FETCH NEXT FROM TABLE_CURSOR 
		INTO @AwardingOrganisationCentreId,
			@A2CTransactionId,
			@A2CTransactionRequestId,
			@A2CTransactionResponseId,
			@A2CTransactionResponseEnvelopeId,
			@A2CTransactionResponseEnvelopeMessageId

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC USP_IMPORTPRODUCTCATALOGE 
				@AwardingOrganisationCentreId,
				@A2CTransactionId,
				@A2CTransactionRequestId,
				@A2CTransactionResponseId,
				@A2CTransactionResponseEnvelopeId,
				@A2CTransactionResponseEnvelopeMessageId

			FETCH NEXT FROM TABLE_CURSOR 
			INTO @AwardingOrganisationCentreId,
				@A2CTransactionId,
				@A2CTransactionRequestId,
				@A2CTransactionResponseId,
				@A2CTransactionResponseEnvelopeId,
				@A2CTransactionResponseEnvelopeMessageId
		END

		CLOSE TABLE_CURSOR;
		DEALLOCATE TABLE_CURSOR;
		', 
		@database_name=@DBName, 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'A2CXMLDataImportSchedule', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=4, 
		@freq_subday_interval=15, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=0, 
		@active_start_date=20150717, 
		@active_end_date=99991231, 
		@active_start_time=0, 
		@active_end_time=235959, 
		@schedule_uid=N'a4feec81-fe07-4b3d-b5e4-205e705a1899'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:

GO



GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
