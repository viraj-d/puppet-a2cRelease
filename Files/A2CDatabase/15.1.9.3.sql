/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar UserName "A2CUser"
:setvar DatabaseName "A2CDB"
:setvar DefaultFilePrefix "A2CDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Altering [dbo].[usp_GetQualificationElementAssessmentMaterial]...';


GO


ALTER PROCEDURE [dbo].[usp_GetQualificationElementAssessmentMaterial]
	@TotalCount int = 0 OUTPUT,
	@OrderBy nvarchar(255) = 'MaterialId',
	@GridWhereClause nvarchar(max) = null,
	@PageNumber int = 1,
	@PageSize int = 10,
	@AwardingOrganisationCentreId int,
	@QEParentId int,
	@QEAvailabilityId int
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;

	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' q1.AwardingOrganisationCentreId=  ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								 ' and q1.QualificationElementId=' + cast(@QEParentId as nvarchar(10)) +
								 ' and q1.QEEffectiveStartDate= (select QEA_Effective_Start_Date_Time from QEavailability QE where QE.QEAvailabilityId=' + cast(@QEAvailabilityId as nvarchar(10)) +') '+
								 case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							( Select 
								AM.AwardingOrganisationCentreId as AwardingOrganisationCentreId,QE.QualificationElementId as QualificationElementId,
								AM.QE_Assmnt_Material_Id as MaterialId, AM.QE_Assmnt_Material_Name as MaterialName,
								AM.QE_Assmnt_Material_Source as Source, AM.QE_Assmnt_Material_Description as MaterialDescription,
								AM.QE_Assmnt_Material_Source_Type as SourceType,AM.QE_Assmnt_Material_Medium_Type as MediumType,
								QEAM.Number_Per_Learner as NumberPerLearner, QEAM.Number_Per_Centre as NumberPerCentre,
								QEAM.Assmnt_Material_Release_Date as ReleaseDate,QEAM.QEA_Effective_Start_Date_Time as QEEffectiveStartDate	 
							from 
								dbo.QEAssessmentMaterial AM
								Inner join QEAAssessmentMaterial QEAM 
									on (QEAM.AwardingOrganisationCentreId=AM.AwardingOrganisationCentreId and QEAM.QEAssessmentMaterialId=AM.QEAssessmentMaterialId)
								Inner join QualificationElement QE 
									on (QE.AwardingOrganisationCentreId=QEAM.AwardingOrganisationCentreId and QE.QualificationElementId=QEAM.QualificationElementId)
							where 
								AM.Record_Delete_Flag=0	
								and QEAM.Record_Delete_Flag=0	
								and QE.Record_Delete_Flag=0
							) q1
						where ' + @WhereClause,							

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(Select 
												AM.AwardingOrganisationCentreId as AwardingOrganisationCentreId,QE.QualificationElementId as QualificationElementId,
												AM.QE_Assmnt_Material_Id as MaterialId, AM.QE_Assmnt_Material_Name as MaterialName,
												AM.QE_Assmnt_Material_Source as Source, AM.QE_Assmnt_Material_Description as MaterialDescription,
												AM.QE_Assmnt_Material_Source_Type as SourceType,AM.QE_Assmnt_Material_Medium_Type as MediumType,
												QEAM.Number_Per_Learner as NumberPerLearner, QEAM.Number_Per_Centre as NumberPerCentre,
												QEAM.Assmnt_Material_Release_Date as ReleaseDate,QEAM.QEA_Effective_Start_Date_Time as QEEffectiveStartDate	 
											from 
												dbo.QEAssessmentMaterial AM
												Inner join QEAAssessmentMaterial QEAM 
													on (QEAM.AwardingOrganisationCentreId=AM.AwardingOrganisationCentreId and QEAM.QEAssessmentMaterialId=AM.QEAssessmentMaterialId)
												Inner join QualificationElement QE 
													on (QE.AwardingOrganisationCentreId=QEAM.AwardingOrganisationCentreId and QE.QualificationElementId=QEAM.QualificationElementId)
											where 
												AM.Record_Delete_Flag=0	
												and QEAM.Record_Delete_Flag=0	
												and QE.Record_Delete_Flag=0	
											) q1
										where ' + @WhereClause + ') q2 
									WHERE q2.RowNumber BETWEEN @Skip AND @Take'
	
									
	EXECUTE sp_executesql @CountQuery, N'@TotalCountOut int OUTPUT', @TotalCountOut = @TotalCount OUTPUT

	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	
End
GO
PRINT N'Altering [dbo].[usp_GetQualificationElementGrades]...';


GO


ALTER  PROCEDURE [dbo].[usp_GetQualificationElementGrades]
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'Grade',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@AwardingOrganisationCentreId int,
@QEQualificationElementId int
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' q1.AwardingOrganisationCentreId=  ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								 ' and q1.QualificationElementId=' + cast(@QEQualificationElementId as nvarchar(10)) +
								 case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							(  Select qeg.AwardingOrganisationCentreId,qeg.QualificationElementId as QualificationElementId,qeg.QE_Grade as Grade,qeg.QE_Grade_Description as [Description]
									,qeg.QE_Outcome_Type as Outcome, qeg.QE_Grade_Sequence_Order as Sequence, qegp.Performance_Points as PerformancePoints,qegp.Level_1_Threshold as Level1Threshold
									,qegp.Level_2_Threshold as Level2Threshold,qegp.Level_3_Threshold as Level3Threshold, qeg.QE_Grade_Effective_Date as EffectiveDate 
									,qeg.QE_Grade_Eff_End_Date as EffectiveEndDate, qegp.Party_Id_Administrator as [Owner] 
								from dbo.QualificationElementGrade qeg
									Inner join dbo.QEGradePerformancePoints qegp 
										on qeg.QualificationElementGradeId=qegp.QualificationElementGradeId and qeg.AwardingOrganisationCentreId=qegp.AwardingOrganisationCentreId and qeg.QualificationElementId  = qegp.QualificationElementId
								where qeg.Record_Delete_Flag=0 and qegp.Record_Delete_Flag=0
							) q1
							where '+@WhereClause,

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(   select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(
												Select qeg.AwardingOrganisationCentreId,qeg.QualificationElementId as QualificationElementId,qeg.QE_Grade as Grade,qeg.QE_Grade_Description as [Description]
													,qeg.QE_Outcome_Type as Outcome, qeg.QE_Grade_Sequence_Order as Sequence, qegp.Performance_Points as PerformancePoints,qegp.Level_1_Threshold as Level1Threshold
													,qegp.Level_2_Threshold as Level2Threshold,qegp.Level_3_Threshold as Level3Threshold, qeg.QE_Grade_Effective_Date as EffectiveDate 
													,qeg.QE_Grade_Eff_End_Date as EffectiveEndDate, qegp.Party_Id_Administrator as [Owner] 
												from dbo.QualificationElementGrade qeg
													Inner join dbo.QEGradePerformancePoints qegp 
														on qeg.QualificationElementGradeId=qegp.QualificationElementGradeId and qeg.AwardingOrganisationCentreId=qegp.AwardingOrganisationCentreId and qeg.QualificationElementId  = qegp.QualificationElementId
												where qeg.Record_Delete_Flag=0 and qegp.Record_Delete_Flag=0			
											) q1
											where ' + @WhereClause + ') q2 
										WHERE q2.RowNumber BETWEEN @Skip AND @Take'

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

End
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.9.3';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Update complete.';


GO
