/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar UserName "A2CUser"
:setvar DatabaseName "A2CDB"
:setvar DefaultFilePrefix "A2CDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Altering [dbo].[A2CTransactionResponseEnvelopeMessages]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages]
    ADD [IsRedCodeFeedback] BIT NULL;


GO
PRINT N'Creating [dbo].[vw_AOCentreDetails]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

CREATE VIEW [dbo].[vw_AOCentreDetails]
AS 

	SELECT	AD.AONumber + ' ' + AO.Name AS AONumberName, 
			AOC.AwardingOrganisationCentreId, AOC.A2CSchoolId, AOC.CentreId, AOC.OutgoingSequence, AOC.IncomingSequence,
			AD.AwardingOrganisationDetailId, AD.AONumber, 
			AO.AwardingOrganisationId, AO.Name, AO.EndPoint, AO.ContactEmail, AO.Description, AO.PhoneNumber
	FROM  AwardingOrganisationCentres AOC WITH (NOLOCK)
		INNER JOIN AwardingOrganisationDetails AD WITH (NOLOCK) ON AOC.AwardingOrganisationDetailId=AD.AwardingOrganisationDetailId
		INNER JOIN AwardingOrganisations AO WITH (NOLOCK) ON AO.AwardingOrganisationId=AD.AwardingOrganisationId
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[usp_GetA2CFeedbackMessages]...';


GO
ALTER PROCEDURE usp_GetA2CFeedbackMessages
	@AwardingOrganisationCentreId INT,
	@A2CFeedbackMessageId INT
AS
BEGIN
	SELECT
		M.A2CFeedbackMessageId,
		D.Code,
		D.Severity as 'SeverityValue',
		D.FeedbackMessage,
		D.FeedbackLevel as 'FeedbackLevelValue',
		T.MessageId, --this is used to send Ref_Message_Id in feedback message when needed
		TM.TransactionName
	FROM
		A2CFeedbackMessages M
		INNER JOIN A2CFeedbackMessageDetails D ON M.A2CFeedbackMessageId = D.A2CFeedbackMessageId
		INNER JOIN A2CTransactionResponseEnvelopeMessages T ON M.A2CTransactionResponseEnvelopeMessageId = T.A2CTransactionResponseEnvelopeMessageId
		LEFT JOIN A2CTransactionMasters TM ON T.A2CTransactionMasterId = TM.A2CTransactionMasterId
	WHERE
		M.A2CFeedbackMessageId = @A2CFeedbackMessageId AND
		M.AwardingOrganisationCentreId = @AwardingOrganisationCentreId
END
GO
PRINT N'Altering [dbo].[USP_IMPORTPRODUCTCATALOGE]...';


GO
ALTER PROCEDURE [dbo].[USP_IMPORTPRODUCTCATALOGE](
	@AwardingOrganisationCentreIdPrimaryKey			int, 
	@A2CTransactionResponseEnvelopeMessageId		int		
) AS BEGIN
	
	BEGIN TRY

		---------------------------------------------------
		----- Variable Declarations -----------------------
		---------------------------------------------------
		DECLARE 
			@AwardingOrganisationCentreId	int,
			@XMLDATA						XML,					
			@AOQEPreferenceExists			bit,
			@QEAvailabilityExists			bit,
			@QEFeeCategoryExists			bit,
			@QELearnerIdentifierExists		bit,
			@QEPreferenceExists				bit,
			@QualificationElementExists		bit,
			@TransactionName				nvarchar(100),
			@MessageID						nvarchar(100),
			@SchoolID						int,
			@ScreenMasterId					int,
			@CentreNumber					nvarchar(100),
			@AONumber						nvarchar(100),
			@ErrorMessage					nvarchar(MAX),
			@IsError						bit = 0
			
		-----------------------------------------------------------------
		----- Required data validation & Set Values for variables -------
		-----------------------------------------------------------------
		IF 
			ISNULL(@AwardingOrganisationCentreIdPrimaryKey,0)		= 0 OR			
			ISNULL(@A2CTransactionResponseEnvelopeMessageId,0)		= 0
		BEGIN
			print 'one of input parameters is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Invalid input parameter.', 16, 1);			
		END

		--Get the xml data to import
		SELECT 	
			@AwardingOrganisationCentreId=ISNULL(AT.MessageAwardingOrganisationCentreId,0),
			@XMLDATA=CAST(AT.DATA AS XML)
		FROM 
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGES AT
		WHERE
			AT.AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND
			AT.A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId
		
		IF @AwardingOrganisationCentreId=0
		BEGIN
			print 'Awarding Organisation Centre Id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Awarding Organisation Centre Id not found.', 16, 1);
		END
				
		IF @XMLDATA is null OR DATALENGTH(@XMLDATA)=0
		BEGIN
			print 'XML data not found, so stop further processing'
			set @IsError=1
			RAISERROR ('XML data not found.', 16, 1);
		END

		--Get SchoolID, Message ID and other details
		Select 
			@SchoolID=ISNULL(AOC.A2CSchoolId,0)
		from 
			AwardingOrganisationCentres AOC 
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		IF @SchoolID=0
		BEGIN
			print 'School id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('School Id not found.', 16, 1);
		END

		select 
			@CentreNumber = C.CentreNumber 
		from 
			AwardingOrganisationCentres AOC
			inner join Centres C on AOC.CentreId=C.CentreId
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		select 
			@AONumber = AOD.AONumber 
		from 
			AwardingOrganisationCentres AOC
			inner join AwardingOrganisationDetails AOD on AOC.AwardingOrganisationDetailId=AOD.AwardingOrganisationDetailId
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		Select 
			@ScreenMasterId = SM.ScreenMasterId 
		from 
			ScreenMasters SM 
		where 
			SM.ScreenName='ImportProductCatalogue'

		IF @ScreenMasterId=0
		BEGIN
			print 'Screen Master Id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Screen Master Id not found.', 16, 1);			
		END			

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@TransactionName = CN.value('(a2c:TransactionName/text())[1]','[nvarchar](100)')
		From	
			@XMLDATA.nodes('/a2c:A2CMessage/a2c:MsgHeader/a2c:TransactionInfo') as Q(CN) 

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@MessageID = CN.value('(a2c:MessageID/text())[1]','[nvarchar](100)')
		From	
			@XMLDATA.nodes('/a2c:A2CMessage/a2c:MsgHeader/a2c:MsgInfo') as Q(CN) 

		IF @MessageID IS NULL
			SET @MessageID=''

		---------------------------------------------------
		---------------------------------------------------
		----- Mandatory/Primary Datablocks Validation -----
		---------------------------------------------------
		---------------------------------------------------	
		--In case a mandatory or primary datablock is missing from the catalogue, 
		--the error should be logged into Business error logs and 
		--the XML should not be imported. It should be ignored.	

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@AOQEPreferenceExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference/a2c:AOQEPreference_CN/a2c:AOQEPreference_ID'),
			@QEAvailabilityExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN/a2c:QEAvailability_ID'),
			@QEFeeCategoryExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QEFeeCategory_DS/a2c:QEFeeCategory/a2c:QEFeeCategory_ID'),
			@QELearnerIdentifierExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QELearnerIdentifier_DS/a2c:QELearnerIdentifier/a2c:QELearnerIdentifier_CN/a2c:QELearnerIdentifier_ID'),
			@QEPreferenceExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference/a2c:AOQEPreference_CN/a2c:AOQEPreference_ID'),
			@QualificationElementExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QualificationElement/a2c:QualificationElement_CN/a2c:QualificationElement_ID')
		
		IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUE'
		BEGIN
			IF 
				(@AOQEPreferenceExists = 1		AND
				@QEAvailabilityExists = 1		AND
				@QEFeeCategoryExists = 1		AND
				@QELearnerIdentifierExists = 1	AND
				@QEPreferenceExists = 1			AND
				@QualificationElementExists = 1) 
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUE Transaction, Mandatory/Primary Datablocks exist.'
			END
			ELSE
			BEGIN
			
				print 'inside PROCESSPRODUCTCATALOGUE Transaction, some Mandatory/Primary Datablock(s) missing'

				IF @AOQEPreferenceExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock AO QE Preference is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)		
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEAvailabilityExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Availability is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEFeeCategoryExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Fee Category is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''		
					set @IsError=1
				END

				IF @QELearnerIdentifierExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Learner Identifier is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)		
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEPreferenceExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Preference is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QualificationElementExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock Qualification Element is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				print 'inside PROCESSPRODUCTCATALOGUE Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'

				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUESTATIC'
		BEGIN
			IF @QualificationElementExists = 1
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUESTATIC Transaction, Mandatory/Primary Datablock exists.'
			END
			ELSE
			BEGIN
				SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock Qualification Element is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
		
				INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)

				SET @ErrorMessage = ''
				set @IsError=1

				print 'inside PROCESSPRODUCTCATALOGUESTATIC Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'

				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUEINSTANCE'
		BEGIN
			IF @QEAvailabilityExists = 1
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUEINSTANCE Transaction, Mandatory/Primary Datablock exists.'
			END
			ELSE
			BEGIN
				SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Availability is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
		
				INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)

				SET @ErrorMessage = ''
				set @IsError=1

				print 'inside PROCESSPRODUCTCATALOGUEINSTANCE Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'
				
				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE
		BEGIN
			print 'Unknown Transaction Name, so stop further processing'
			set @IsError=1			
			RAISERROR ('Unknown Transaction Name.', 16, 1);
		END	
		---------------------------------------------------
		----- Datablocks Validation Finish ----------------
		---------------------------------------------------

		---------------------------------------------------
		---------------------------------------------------
		-----STEP 1: IMPORT QUALIFICATION ELEMENTS---------
		---------------------------------------------------
		---------------------------------------------------

		BEGIN TRY

			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID], 
				QE.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]', '[nvarchar](50)') AO_Qualification_Element_Id,
				QE.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]', '[nvarchar](32)') Qualification_Element_Type,
				QE.value('(a2c:QE_Description/text())[1]','[nvarchar](3500)') QE_Description,
				QE.value('(a2c:Qualification_Element_Title/text())[1]','[nvarchar](200)') Qualification_Element_Title,
				QE.value('(a2c:QE_Short_Title/text())[1]','[nvarchar](50)') QE_Short_Title,
				QE.value('(a2c:QE_Effective_Version_Date/text())[1]','[nvarchar](100)') QE_Effective_Version_Date,
				QE.value('(a2c:QE_Effective_Version_End_Date/text())[1]','[nvarchar](100)') QE_Effective_Version_End_Date,
				QE.value('(a2c:Private_Learner_Type/text())[1]','[nvarchar](32)') Private_Learner_Type,
				QE.value('(a2c:QE_Moderation_Type/text())[1]','[nvarchar](32)') QE_Moderation_Type,
				QE.value('(a2c:First_Language_Required_Flag/text())[1]','[nvarchar](100)') First_Language_Required_Flag,
				QE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag,
				QE.value('(a2c:Qualification_Reference_Number/text())[1]','[nvarchar](10)') Qualification_Reference_Number,
				QE.value('(a2c:Learning_Aim_Code/text())[1]','[nvarchar](10)') Learning_Aim_Code,
				QE.value('(a2c:QE_Admin_Code/text())[1]','[nvarchar](50)') QE_Admin_Code,
				QE.value('(a2c:Scheme/a2c:Assessment_Max_Learner_Age/text())[1]','int') Assessment_Max_Learner_Age,
				QE.value('(a2c:Scheme/a2c:Assessment_Min_Learner_Age/text())[1]','int') Assessment_Min_Learner_Age,
				QE.value('(a2c:Scheme/a2c:First_Teaching_Date/text())[1]','[nvarchar](100)') First_Teaching_Date,
				QE.value('(a2c:Scheme/a2c:Last_Teaching_Date/text())[1]','[nvarchar](100)') Last_Teaching_Date,
				QE.value('(a2c:Scheme/a2c:QE_Centre_Auth_Agreement_Text/text())[1]','[nvarchar](400)') QE_Centre_Auth_Agreement_Text,
				QE.value('(a2c:Scheme/a2c:Qualification_Type/text())[1]','[nvarchar](50)') Qualification_Type,
				QE.value('(a2c:Scheme/a2c:Series_Based_Flag/text())[1]','[nvarchar](100)') Series_Based_Flag,
				QE.value('(a2c:Scheme/a2c:QE_Website_URL_Locator_Id/text())[1]','[nvarchar](1000)') QE_Website_URL_Locator_Id,
				QE.value('(a2c:Scheme/a2c:Date_Of_Birth_Reqd_Flag/text())[1]','[nvarchar](100)') Date_Of_Birth_Reqd_Flag,
				QE.value('(a2c:Scheme/a2c:Legal_Sex_Required_Flag/text())[1]','[nvarchar](100)') Legal_Sex_Required_Flag,
				QE.value('(a2c:Scheme/a2c:QE_Availability_Text/text())[1]','[nvarchar](3000)') QE_Availability_Text,
				QE.value('(a2c:Award/a2c:Accreditation_End_Review_Date/text())[1]','[nvarchar](100)') Accreditation_End_Review_Date,
				QE.value('(a2c:Award/a2c:Accreditation_Start_Date/text())[1]','[nvarchar](100)') Accreditation_Start_Date,
				QE.value('(a2c:Award/a2c:AO_Accred_Version_Number/text())[1]','[nvarchar](4)') AO_Accred_Version_Number,
				QE.value('(a2c:Award/a2c:Assessment_Language_Type/text())[1]','[nvarchar](50)') Assessment_Language_Type,
				QE.value('(a2c:Award/a2c:Award_Level_Type/text())[1]','[nvarchar](32)') Award_Level_Type,
				QE.value('(a2c:Award/a2c:Award_Type/text())[1]','[nvarchar](60)') Award_Type,
				QE.value('(a2c:Award/a2c:Cert_of_Unit_Credit_Issued_Flag/text())[1]','[nvarchar](100)') Cert_of_Unit_Credit_Issued_Flag,
				QE.value('(a2c:Award/a2c:Certification_End_Date/text())[1]','[nvarchar](100)') Certification_End_Date,
				QE.value('(a2c:Award/a2c:Certification_Start_Date/text())[1]','[nvarchar](100)') Certification_Start_Date,
				QE.value('(a2c:Award/a2c:Contributing_Units_Listed_Flag/text())[1]','[nvarchar](100)') Contributing_Units_Listed_Flag,
				QE.value('(a2c:Award/a2c:Course_Length_Type/text())[1]','[nvarchar](32)') Course_Length_Type,
				QE.value('(a2c:Award/a2c:Endorsed_Title_Reqd_Flag/text())[1]','[nvarchar](100)') Endorsed_Title_Reqd_Flag,
				QE.value('(a2c:Award/a2c:Guided_Learning_Hours_Max/text())[1]','int') Guided_Learning_Hours_Max,
				QE.value('(a2c:Award/a2c:Guided_Learning_Hours_Min/text())[1]','int') Guided_Learning_Hours_Min,
				QE.value('(a2c:Award/a2c:Operational_End_Date/text())[1]','[nvarchar](100)') Operational_End_Date,
				QE.value('(a2c:Award/a2c:Operational_Start_Date/text())[1]','[nvarchar](100)') Operational_Start_Date,
				QE.value('(a2c:Award/a2c:QE_Delivery_Model_Type/text())[1]','[nvarchar](32)') QE_Delivery_Model_Type,
				QE.value('(a2c:Award/a2c:QE_Evid_Reqmnt_Provided_Flag/text())[1]','[nvarchar](100)') QE_Evid_Reqmnt_Provided_Flag,
				QE.value('(a2c:Award/a2c:QE_Evidence_Requirement_Type/text())[1]','[nvarchar](32)') QE_Evidence_Requirement_Type,
				QE.value('(a2c:Award/a2c:Registration_Expiry_Months/text())[1]','int') Registration_Expiry_Months,
				QE.value('(a2c:Award/a2c:Resit_Rule_Text/text())[1]','[nvarchar](400)') Resit_Rule_Text,
				QE.value('(a2c:Award/a2c:Statement_Of_Credit_Issued_Flag/text())[1]','[nvarchar](100)') Statement_Of_Credit_Issued_Flag,
				QE.value('(a2c:Award/a2c:Study_Guide_Available_Type/text())[1]','[nvarchar](20)') Study_Guide_Available_Type,
				QE.value('(a2c:Award/a2c:Study_Guide_Details/text())[1]','[nvarchar](400)') Study_Guide_Details,
				QE.value('(a2c:Award/a2c:Study_Guide_Reference/text())[1]','[nvarchar](100)') Study_Guide_Reference,
				QE.value('(a2c:Award/a2c:Study_Guide_Reference_Type/text())[1]','[nvarchar](32)') Study_Guide_Reference_Type,
				QE.value('(a2c:Award/a2c:QE_Classification/text())[1]','[nvarchar](32)') QE_Classification,
				QE.value('(a2c:Award/a2c:Party_Id_Accreditor/text())[1]','[nvarchar](32)') Party_Id_Accreditor,
				QE.value('(a2c:Award/a2c:Party_Id_Sector_Lead/text())[1]','[nvarchar](32)') Party_Id_Sector_Lead,
				QE.value('(a2c:Award/a2c:Party_Role_Type_Assessor/text())[1]','[nvarchar](50)') Party_Role_Type_Assessor,
				QE.value('(a2c:LearningUnit/a2c:Learning_Unit_Level_Type/text())[1]','[nvarchar](32)') Learning_Unit_Level_Type,
				QE.value('(a2c:LearningUnit/a2c:Maximum_Resits_Allowed/text())[1]','int') Maximum_Resits_Allowed,
				QE.value('(a2c:Assessable/a2c:Extra_Time_Required_Flag/text())[1]','[nvarchar](100)') Extra_Time_Required_Flag,
				QE.value('(a2c:Assessable/a2c:Assessment_Method_Type/text())[1]','[nvarchar](40)') Assessment_Method_Type,
				QE.value('(a2c:Assessable/a2c:Assmnt_Actual_DateTime_Reqd_Flag/text())[1]','[nvarchar](100)') Assmnt_Actual_DateTime_Reqd_Flag,
				QE.value('(a2c:Assessable/a2c:Attendance_Data_Required_Flag/text())[1]','[nvarchar](100)') Attendance_Data_Required_Flag,
				QE.value('(a2c:Assessable/a2c:Cambridge_Assmnt_TimeZone_Num/text())[1]','int') Cambridge_Assmnt_TimeZone_Num,
				QE.value('(a2c:Assessable/a2c:Carry_Forward_Permissible_Flag/text())[1]','[nvarchar](100)') Carry_Forward_Permissible_Flag,
				QE.value('(a2c:Assessable/a2c:Maximum_Extra_Time_Minutes/text())[1]','int') Maximum_Extra_Time_Minutes,
				QE.value('(a2c:Assessable/a2c:On_Demand_Flag/text())[1]','[nvarchar](100)') On_Demand_Flag,
				QE.value('(a2c:Assessable/a2c:QE_Timetabled_Flag/text())[1]','[nvarchar](100)') QE_Timetabled_Flag,
				QE.value('(a2c:Assessable/a2c:Test_Day_Photograph_Reqd_Flag/text())[1]','[nvarchar](100)') Test_Day_Photograph_Reqd_Flag,
				QE.value('(a2c:Assessable/a2c:Tier_Level_Type/text())[1]','[nvarchar](20)') Tier_Level_Type,
				QE.value('(a2c:Assessable/a2c:Tier_Level_Common_Reference/text())[1]','[nvarchar](12)') Tier_Level_Common_Reference,
				QE.value('(a2c:Assessable/a2c:Time_Allowed_Mins/text())[1]','int') Time_Allowed_Mins,
				QE.value('(a2c:Assessable/a2c:Party_Role_Type_Assessor/text())[1]','[nvarchar](50)') AssessableParty_Role_Type_Assessor,
				QE.value('(a2c:Assessable/a2c:Party_Role_Type_ADT_Decider/text())[1]','[nvarchar](50)') Party_Role_Type_ADT_Decider,
				QE.value('(a2c:Assessable/a2c:Assessment_Medium_Type/text())[1]','[nvarchar](20)') Assessment_Medium_Type,
				QE.value('(a2c:Pathway/a2c:Equals_Indicator_Flag/text())[1]','[nvarchar](100)') Equals_Indicator_Flag,
				QE.value('(a2c:Pathway/a2c:Mandatory_In_Group_Flag/text())[1]','[nvarchar](100)') Mandatory_In_Group_Flag,
				QE.value('(a2c:Pathway/a2c:Minimum_Unit_Selection/text())[1]','int') Minimum_Unit_Selection,
				QE.value('(a2c:Pathway/a2c:Maximum_Unit_Selection/text())[1]','int') Maximum_Unit_Selection,
				QE.value('(a2c:Pathway/a2c:Minimum_Pathway_Selection/text())[1]','int') Minimum_Pathway_Selection,
				QE.value('(a2c:Pathway/a2c:Maximum_Pathway_Selection/text())[1]','int') Maximum_Pathway_Selection,
				QE.value('(a2c:Pathway/a2c:Minimum_Credit_Value/text())[1]','int') Minimum_Credit_Value
			into 
				#QE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QualificationElement/a2c:QualificationElement_CN') as QualificationElement_CN(QE) 

			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QE 
					WHERE ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')='')
			BEGIN
				PRINT 'Qualification Element - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type) 'RowRank' 
			FROM 
				#QE)
			SELECT 
				* 
			INTO 
				#QEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type 
					ORDER BY 
						[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type) 'RowRank' 
				FROM #QE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock Qualification Element - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id + ', Qualification_Element_Type=' + Qualification_Element_Type + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy pk column to temp table
			ALTER TABLE #QE ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]
				
			---------------------------------------------------
			-----STEP 1.1: IMPORT [QualificationElement]-------
			---------------------------------------------------
			BEGIN TRY

				MERGE 
					[dbo].[QualificationElement] AS [target]
				USING 
					(SELECT * from #QE) AS source
				ON 
					([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
					[target].[QualificationElementId] = source.[QualificationElementId])
				WHEN MATCHED THEN 
				UPDATE SET 
					[QE_Description] = LTRIM(RTRIM(source.[QE_Description])),
					[Qualification_Element_Title] = LTRIM(RTRIM(source.[Qualification_Element_Title])),
					[QE_Short_Title] = LTRIM(RTRIM(source.[QE_Short_Title])),
					[QE_Effective_Version_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_Date]),
					[QE_Effective_Version_End_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_End_Date]),
					[Private_Learner_Type] = LTRIM(RTRIM(source.[Private_Learner_Type])),
					[QE_Moderation_Type] = LTRIM(RTRIM(source.[QE_Moderation_Type])),
					[First_Language_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[First_Language_Required_Flag]),
					[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]),
					[Qualification_Reference_Number] = LTRIM(RTRIM(source.[Qualification_Reference_Number])),
					[Learning_Aim_Code] = LTRIM(RTRIM(source.[Learning_Aim_Code])),
					[QE_Admin_Code] = LTRIM(RTRIM(source.[QE_Admin_Code]))
				WHEN NOT MATCHED THEN	
				INSERT (
					[AwardingOrganisationCentreId],
					[AO_Qualification_Element_Id],
					[Qualification_Element_Type],
					[QE_Description],
					[Qualification_Element_Title],
					[QE_Short_Title],
					[QE_Effective_Version_Date],
					[QE_Effective_Version_End_Date],
					[Private_Learner_Type],
					[QE_Moderation_Type],
					[First_Language_Required_Flag],
					[Record_Delete_Flag],
					[Qualification_Reference_Number],
					[Learning_Aim_Code],
					[QE_Admin_Code])
				VALUES (
					source.[AOCentreID],
					source.[AO_Qualification_Element_Id],
					LTRIM(RTRIM(source.[Qualification_Element_Type])),
					LTRIM(RTRIM(source.[QE_Description])),
					LTRIM(RTRIM(source.[Qualification_Element_Title])),
					LTRIM(RTRIM(source.[QE_Short_Title])),
					DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_Date]),
					DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_End_Date]),
					LTRIM(RTRIM(source.[Private_Learner_Type])),
					LTRIM(RTRIM(source.[QE_Moderation_Type])),
					DBO.FN_A2C_GETFLAG(source.[First_Language_Required_Flag]), 
					DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]),
					LTRIM(RTRIM(source.[Qualification_Reference_Number])),
					LTRIM(RTRIM(source.[Learning_Aim_Code])),
					LTRIM(RTRIM(source.[QE_Admin_Code]))
					);

				--Update newly created PKs of [dbo].[QualificationElement]
				Update 
					Q 
				set 
					[QualificationElementId]=QE.QualificationElementId
				from 
					#QE Q inner join [dbo].[QualificationElement] QE
				on 
					Q.AOCentreID=QE.AwardingOrganisationCentreId 
					and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
					and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Qualification Element block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, 
					@MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Element'
					
			END CATCH;

			
			---------------------------------------------------
			-----STEP 1.2: IMPORT [Scheme]---------------------
			---------------------------------------------------
			BEGIN TRY
				
				MERGE [dbo].[Scheme] AS [target]
				USING (SELECT * from #QE where #QE.Qualification_Element_Type='Scheme' and #QE.[QualificationElementId] is not null) AS source
				ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
					[target].[QualificationElementId] = source.[QualificationElementId])
				WHEN MATCHED THEN 
				UPDATE SET 
					[Assessment_Max_Learner_Age] = source.[Assessment_Max_Learner_Age],
					[Assessment_Min_Learner_Age] = source.[Assessment_Min_Learner_Age],
					[First_Teaching_Date] = DBO.FN_A2C_GETDATETIME(source.[First_Teaching_Date]),
					[Last_Teaching_Date] = DBO.FN_A2C_GETDATETIME(source.[Last_Teaching_Date]),
					[QE_Centre_Auth_Agreement_Text] = source.[QE_Centre_Auth_Agreement_Text],
					[Qualification_Type] = source.[Qualification_Type],
					[Series_Based_Flag] = DBO.FN_A2C_GETFLAG(source.[Series_Based_Flag]),
					[QE_Website_URL_Locator_Id] = source.[QE_Website_URL_Locator_Id],
					[Date_Of_Birth_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Date_Of_Birth_Reqd_Flag]),
					[Legal_Sex_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Legal_Sex_Required_Flag]),
					[QE_Availability_Text] = source.[QE_Availability_Text]
				WHEN NOT MATCHED THEN	
				INSERT (
					[QualificationElementId],
					[AwardingOrganisationCentreId],
					[Assessment_Max_Learner_Age],
					[Assessment_Min_Learner_Age],
					[First_Teaching_Date],
					[Last_Teaching_Date],
					[QE_Centre_Auth_Agreement_Text],
					[Qualification_Type],
					[Series_Based_Flag],
					[QE_Website_URL_Locator_Id],
					[Date_Of_Birth_Reqd_Flag],
					[Legal_Sex_Required_Flag],
					[QE_Availability_Text])
				VALUES (
					source.[QualificationElementId],
					source.[AOCentreID],
					source.[Assessment_Max_Learner_Age],
					source.[Assessment_Min_Learner_Age],
					DBO.FN_A2C_GETDATETIME(source.[First_Teaching_Date]),
					DBO.FN_A2C_GETDATETIME(source.[Last_Teaching_Date]),
					source.[QE_Centre_Auth_Agreement_Text],
					source.[Qualification_Type],
					DBO.FN_A2C_GETFLAG(source.[Series_Based_Flag]),
					source.[QE_Website_URL_Locator_Id],
					DBO.FN_A2C_GETFLAG(source.[Date_Of_Birth_Reqd_Flag]),
					DBO.FN_A2C_GETFLAG(source.[Legal_Sex_Required_Flag]),
					source.[QE_Availability_Text]
					);

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Scheme block'

				set @IsError=1
		
				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Scheme'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.3: IMPORT [Award]----------------------
			---------------------------------------------------
			BEGIN TRY

			MERGE [dbo].[Award] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Award' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Accreditation_End_Review_Date] = DBO.FN_A2C_GETDATETIME(source.[Accreditation_End_Review_Date]),
				[Accreditation_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Accreditation_Start_Date]),
				[AO_Accred_Version_Number] = 		source.[AO_Accred_Version_Number],
				[Assessment_Language_Type] = 		source.[Assessment_Language_Type],
				[Award_Level_Type] = 		source.[Award_Level_Type],
				[Award_Type] = 		source.[Award_Type],
				[Cert_of_Unit_Credit_Issued_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Cert_of_Unit_Credit_Issued_Flag]),
				[Certification_End_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Certification_End_Date]),
				[Certification_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Certification_Start_Date]),
				[Contributing_Units_Listed_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Contributing_Units_Listed_Flag]),
				[Course_Length_Type] = 		source.[Course_Length_Type],
				[Endorsed_Title_Reqd_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Endorsed_Title_Reqd_Flag]),
				[Guided_Learning_Hours_Max] = 		source.[Guided_Learning_Hours_Max],
				[Guided_Learning_Hours_Min] = 		source.[Guided_Learning_Hours_Min],
				[Operational_End_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Operational_End_Date]),
				[Operational_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Operational_Start_Date]),
				[QE_Delivery_Model_Type] = 		source.[QE_Delivery_Model_Type],
				[QE_Evid_Reqmnt_Provided_Flag] = 		DBO.FN_A2C_GETFLAG(source.[QE_Evid_Reqmnt_Provided_Flag]),
				[QE_Evidence_Requirement_Type] = 		source.[QE_Evidence_Requirement_Type],
				[Registration_Expiry_Months] = 		source.[Registration_Expiry_Months],
				[Resit_Rule_Text] = 		source.[Resit_Rule_Text],
				[Statement_Of_Credit_Issued_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Statement_Of_Credit_Issued_Flag]),
				[Study_Guide_Available_Type] = 		source.[Study_Guide_Available_Type],
				[Study_Guide_Details] = 		source.[Study_Guide_Details],
				[Study_Guide_Reference] = 		source.[Study_Guide_Reference],
				[Study_Guide_Reference_Type] = 		source.[Study_Guide_Reference_Type],
				[QE_Classification] = 		source.[QE_Classification],
				[Party_Id_Accreditor] = 		source.[Party_Id_Accreditor],
				[Party_Id_Sector_Lead] = 		source.[Party_Id_Sector_Lead],
				[Party_Role_Type_Assessor] = 		source.[Party_Role_Type_Assessor]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Accreditation_End_Review_Date],
				[Accreditation_Start_Date],
				[AO_Accred_Version_Number],
				[Assessment_Language_Type],
				[Award_Level_Type],
				[Award_Type],
				[Cert_of_Unit_Credit_Issued_Flag],
				[Certification_End_Date],
				[Certification_Start_Date],
				[Contributing_Units_Listed_Flag],
				[Course_Length_Type],
				[Endorsed_Title_Reqd_Flag],
				[Guided_Learning_Hours_Max],
				[Guided_Learning_Hours_Min],
				[Operational_End_Date],
				[Operational_Start_Date],
				[QE_Delivery_Model_Type],
				[QE_Evid_Reqmnt_Provided_Flag],
				[QE_Evidence_Requirement_Type],
				[Registration_Expiry_Months],
				[Resit_Rule_Text],
				[Statement_Of_Credit_Issued_Flag],
				[Study_Guide_Available_Type],
				[Study_Guide_Details],
				[Study_Guide_Reference],
				[Study_Guide_Reference_Type],
				[QE_Classification],
				[Party_Id_Accreditor],
				[Party_Id_Sector_Lead],
				[Party_Role_Type_Assessor])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETDATETIME(source.[Accreditation_End_Review_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Accreditation_Start_Date]),
				source.[AO_Accred_Version_Number],
				source.[Assessment_Language_Type],
				source.[Award_Level_Type],
				source.[Award_Type],
				DBO.FN_A2C_GETFLAG(source.[Cert_of_Unit_Credit_Issued_Flag]),
				DBO.FN_A2C_GETDATETIME(source.[Certification_End_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Certification_Start_Date]),
				DBO.FN_A2C_GETFLAG(source.[Contributing_Units_Listed_Flag]),
				source.[Course_Length_Type],
				DBO.FN_A2C_GETFLAG(source.[Endorsed_Title_Reqd_Flag]),
				source.[Guided_Learning_Hours_Max],
				source.[Guided_Learning_Hours_Min],
				DBO.FN_A2C_GETDATETIME(source.[Operational_End_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Operational_Start_Date]),
				source.[QE_Delivery_Model_Type],
				DBO.FN_A2C_GETFLAG(source.[QE_Evid_Reqmnt_Provided_Flag]),
				source.[QE_Evidence_Requirement_Type],
				source.[Registration_Expiry_Months],
				source.[Resit_Rule_Text],
				DBO.FN_A2C_GETFLAG(source.[Statement_Of_Credit_Issued_Flag]),
				source.[Study_Guide_Available_Type],
				source.[Study_Guide_Details],
				source.[Study_Guide_Reference],
				source.[Study_Guide_Reference_Type],
				source.[QE_Classification],
				source.[Party_Id_Accreditor],
				source.[Party_Id_Sector_Lead],
				source.[Party_Role_Type_Assessor]
				);

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Award block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Award'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.4: IMPORT [Learning Unit]--------------
			---------------------------------------------------
			BEGIN TRY

			MERGE [dbo].[LearningUnit] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Learning Unit' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Learning_Unit_Level_Type] = source.[Learning_Unit_Level_Type],
				[Maximum_Resits_Allowed] = source.[Maximum_Resits_Allowed]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Learning_Unit_Level_Type],
				[Maximum_Resits_Allowed])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				source.[Learning_Unit_Level_Type],
				source.[Maximum_Resits_Allowed]
				);
	
			END TRY
			BEGIN CATCH
				PRINT 'Exception in Learning Unit block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Learning Unit'
					
			END CATCH;
		
			---------------------------------------------------
			-----STEP 1.5: IMPORT [Assessable]-----------------
			---------------------------------------------------
			BEGIN TRY 
						
			MERGE [dbo].[Assessable] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Assessable' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Extra_Time_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Extra_Time_Required_Flag]),
				[Assessment_Method_Type] = LTRIM(RTRIM(source.[Assessment_Method_Type])),
				[Assmnt_Actual_DateTime_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Assmnt_Actual_DateTime_Reqd_Flag]),
				[Attendance_Data_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Attendance_Data_Required_Flag]),
				[Cambridge_Assmnt_TimeZone_Num] = source.[Cambridge_Assmnt_TimeZone_Num],
				[Carry_Forward_Permissible_Flag] = DBO.FN_A2C_GETFLAG(source.[Carry_Forward_Permissible_Flag]),
				[Maximum_Extra_Time_Minutes] = source.[Maximum_Extra_Time_Minutes],
				[On_Demand_Flag] = DBO.FN_A2C_GETFLAG(source.[On_Demand_Flag]),
				[QE_Timetabled_Flag] = DBO.FN_A2C_GETFLAG(source.[QE_Timetabled_Flag]),
				[Test_Day_Photograph_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Test_Day_Photograph_Reqd_Flag]),
				[Tier_Level_Type] = LTRIM(RTRIM(source.[Tier_Level_Type])),
				[Tier_Level_Common_Reference] = LTRIM(RTRIM(source.[Tier_Level_Common_Reference])),
				[Time_Allowed_Mins] = source.[Time_Allowed_Mins],
				[Party_Role_Type_Assessor] = LTRIM(RTRIM(source.[AssessableParty_Role_Type_Assessor])),
				[Party_Role_Type_ADT_Decider] = LTRIM(RTRIM(source.[Party_Role_Type_ADT_Decider])),
				[Assessment_Medium_Type] = LTRIM(RTRIM(source.[Assessment_Medium_Type]))
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Extra_Time_Required_Flag],
				[Assessment_Method_Type],
				[Assmnt_Actual_DateTime_Reqd_Flag],
				[Attendance_Data_Required_Flag],
				[Cambridge_Assmnt_TimeZone_Num],
				[Carry_Forward_Permissible_Flag],
				[Maximum_Extra_Time_Minutes],
				[On_Demand_Flag],
				[QE_Timetabled_Flag],
				[Test_Day_Photograph_Reqd_Flag],
				[Tier_Level_Type],
				[Tier_Level_Common_Reference],
				[Time_Allowed_Mins],
				[Party_Role_Type_Assessor],
				[Party_Role_Type_ADT_Decider],
				[Assessment_Medium_Type])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETFLAG(source.[Extra_Time_Required_Flag]),
				LTRIM(RTRIM(source.[Assessment_Method_Type])),
				DBO.FN_A2C_GETFLAG(source.[Assmnt_Actual_DateTime_Reqd_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Attendance_Data_Required_Flag]),
				source.[Cambridge_Assmnt_TimeZone_Num],
				DBO.FN_A2C_GETFLAG(source.[Carry_Forward_Permissible_Flag]),
				source.[Maximum_Extra_Time_Minutes],
				DBO.FN_A2C_GETFLAG(source.[On_Demand_Flag]),
				DBO.FN_A2C_GETFLAG(source.[QE_Timetabled_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Test_Day_Photograph_Reqd_Flag]),
				LTRIM(RTRIM(source.[Tier_Level_Type])),
				LTRIM(RTRIM(source.[Tier_Level_Common_Reference])),
				source.[Time_Allowed_Mins],
				LTRIM(RTRIM(source.[AssessableParty_Role_Type_Assessor])),
				LTRIM(RTRIM(source.[Party_Role_Type_ADT_Decider])),
				LTRIM(RTRIM(source.[Assessment_Medium_Type])));

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Assessable block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Assessable'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.6: IMPORT [Pathway]--------------------
			---------------------------------------------------
			BEGIN TRY
		
			MERGE [dbo].[Pathway] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Pathway' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Equals_Indicator_Flag] = DBO.FN_A2C_GETFLAG(source.[Equals_Indicator_Flag]),
				[Mandatory_In_Group_Flag] = DBO.FN_A2C_GETFLAG(source.[Mandatory_In_Group_Flag]),
				[Minimum_Unit_Selection] = source.[Minimum_Unit_Selection],
				[Maximum_Unit_Selection] = source.[Maximum_Unit_Selection],
				[Minimum_Pathway_Selection] = source.[Minimum_Pathway_Selection],
				[Maximum_Pathway_Selection] = source.[Maximum_Pathway_Selection],
				[Minimum_Credit_Value] = source.[Minimum_Credit_Value]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Equals_Indicator_Flag],
				[Mandatory_In_Group_Flag],
				[Minimum_Unit_Selection],
				[Maximum_Unit_Selection],
				[Minimum_Pathway_Selection],
				[Maximum_Pathway_Selection],
				[Minimum_Credit_Value])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETFLAG(source.[Equals_Indicator_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Mandatory_In_Group_Flag]),
				source.[Minimum_Unit_Selection],
				source.[Maximum_Unit_Selection],
				source.[Minimum_Pathway_Selection],
				source.[Maximum_Pathway_Selection],
				source.[Minimum_Credit_Value]);

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QE', 'U') IS NOT NULL
			  DROP TABLE #QE;

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Pathway block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Pathway'
					
			END CATCH;
		END TRY
		BEGIN CATCH
			PRINT 'Exception in QUALIFICATION ELEMENTS - Common block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QUALIFICATION ELEMENTS - Common'
					
		END CATCH;

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 2: IMPORT QE Relationships -------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QER.value('(a2c:QERelationship_ID/a2c:AO_Party_Id_Parent/text())[1]','[nvarchar](32)') AO_Party_Id_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:AO_QE_Id_Parent/text())[1]','[nvarchar](50)') AO_QE_Id_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:QE_Type_Parent/text())[1]','[nvarchar](32)') QE_Type_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:AO_Party_Id_Child/text())[1]','[nvarchar](32)') AO_Party_Id_Child,
				QER.value('(a2c:QERelationship_ID/a2c:AO_QE_Id_Child/text())[1]','[nvarchar](50)') AO_QE_Id_Child,
				QER.value('(a2c:QERelationship_ID/a2c:QE_Type_Child/text())[1]','[nvarchar](32)') QE_Type_Child,
				QER.value('(a2c:QE_Relationship_Type/text())[1]','[nvarchar](32)') QE_Relationship_Type,
				QER.value('(a2c:QE_Relationship_Rule_Type/text())[1]','[nvarchar](20)') QE_Relationship_Rule_Type,
				QER.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#QER
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QERelationship') as QERelationship(QER) 
	
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QER 
					WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')='')
			BEGIN
				PRINT 'QE Relationship - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Relationship" - Record AO_QE_Id_Parent="' +  ISNULL(AO_QE_Id_Parent,'') 
					+ '", QE_Type_Parent="' + ISNULL(QE_Type_Parent,'') 
					+ '", AO_QE_Id_Child="' + ISNULL(AO_QE_Id_Child,'') 
					+ '", QE_Type_Child="' + ISNULL(QE_Type_Child,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QER 
				WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QER 
				WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child   
					ORDER BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child ) 'RowRank' 
				FROM 
					#QER)
			SELECT 
				* 
			INTO 
				#QERDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QERDUPS)
			BEGIN

				print 'duplicate records found in QE Relationship'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child   
					ORDER BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child ) 'RowRank' 
				FROM 
					#QER)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Relationship - Record AO_QE_Id_Parent=' 
					+  AO_QE_Id_Parent + ', QE_Type_Parent=' + QE_Type_Parent + ', AO_QE_Id_Child=' 
					+ AO_QE_Id_Child + ', QE_Type_Child=' + QE_Type_Child + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId,@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QERDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QERDUPS', 'U') IS NOT NULL
				DROP TABLE #QERDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy ref columns to temp table for parent and child QEs
			ALTER TABLE #QER ADD [ParentQEId] INT null, [ChildQEId] INT null

			--Update existing IDs for parent QEs
			Update Q 
				set [ParentQEId]=QE.QualificationElementId
			from 
				#QER Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Parent=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Parent=QE.[Qualification_Element_Type]

			--Update existing IDs for child QEs
			Update Q 
				set [ChildQEId]=QE.QualificationElementId
			from 
				#QER Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Child=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Child=QE.[Qualification_Element_Type]
	
			--merge [QERelationship]
			MERGE [dbo].[QERelationship] AS [target]
			USING (SELECT * from #QER where [ParentQEId] is not null and [ChildQEId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId_Parent] = source.[ParentQEId] AND
				[target].[QualificationElementId_Child] = source.[ChildQEId])
			WHEN MATCHED THEN 
			UPDATE SET			
				[QE_Relationship_Type] = source.[QE_Relationship_Type],
				[QE_Relationship_Rule_Type] = source.[QE_Relationship_Rule_Type],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId_Parent],
				[QualificationElementId_Child],
				[QE_Relationship_Type],
				[QE_Relationship_Rule_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[ParentQEId],
				source.[ChildQEId],
				source.[QE_Relationship_Type],
				source.[QE_Relationship_Rule_Type],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QER', 'U') IS NOT NULL
				DROP TABLE #QER;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Relationships block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Relationships'
					
		END CATCH;

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 3: IMPORT QE LearnerIdentifier ---------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QECN.value('(a2c:QELearnerIdentifier_ID/a2c:Party_RR_Reference_Type/text())[1]','[nvarchar](max)') Party_RR_Reference_Type,
				QECN.value('(a2c:Learner_Id_Mandatory_Flag/text())[1]','[nvarchar](max)') Learner_Id_Mandatory_Flag,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QELI
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QELearnerIdentifier_DS/a2c:QELearnerIdentifier') as QLI(QEID) 
				CROSS APPLY QLI.QEID.nodes('a2c:QELearnerIdentifier_CN') as QEL(QECN)
		
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QELI 
					WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')='')
			BEGIN
				PRINT 'QE LearnerIdentifier - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE LearnerIdentifier - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", Party_RR_Reference_Type="' + ISNULL(Party_RR_Reference_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELI 
				WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QELI 
				WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type  
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type ) 'RowRank' 
			FROM 
				#QELI)
			SELECT 
				* 
			INTO 
				#QELIDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QELIDUPS)
			BEGIN

				print 'duplicate records found in QE Learner Identifier'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type  
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type ) 'RowRank' 
				FROM 
					#QELI)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Learner Identifier - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', Party_RR_Reference_Type=' + Party_RR_Reference_Type 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELIDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELIDUPS', 'U') IS NOT NULL
			  DROP TABLE #QELIDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy pk column to temp table
			ALTER TABLE #QELI ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QELI Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QELearnerIdentifier]
			MERGE [dbo].[QELearnerIdentifier] AS [target]
			USING (SELECT * from #QELI where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[Party_RR_Reference_Type] = LTRIM(RTRIM(source.[Party_RR_Reference_Type])))
			WHEN MATCHED THEN 
			UPDATE SET					
				[Learner_Id_Mandatory_Flag] = DBO.FN_A2C_GETFLAG(source.[Learner_Id_Mandatory_Flag]),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[Party_RR_Reference_Type],
				[Learner_Id_Mandatory_Flag],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[Party_RR_Reference_Type])),
				DBO.FN_A2C_GETFLAG(source.[Learner_Id_Mandatory_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELI', 'U') IS NOT NULL
				DROP TABLE #QELI;
		
		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Learner Identifier block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Learner Identifier'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 4: IMPORT QE Preference ----------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				PID.value('(a2c:Party_ID/a2c:Party_Id_Creator/text())[1]','[nvarchar](32)') Party_Id_Creator,
				QEP.value('(a2c:QEPreference_ID/a2c:QE_Preference/text())[1]','[nvarchar](100)') QE_Preference,
				QEP.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEPR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEPreference_DS/a2c:QEPreference') as QEPreference_DS(PID)
				CROSS APPLY
				QEPreference_DS.PID.nodes('a2c:QEPreference_CN') as QEPreference_CN(QEP)

			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEPR 
					WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')='')
			BEGIN
				PRINT 'QE Preference - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Preference - Record Party_Id_Creator="' +  ISNULL(Party_Id_Creator,'') 
					+ '", QE_Preference="' + ISNULL(QE_Preference,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEPR 
				WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEPR 
				WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], Party_Id_Creator, QE_Preference ) 'RowRank' 
				FROM 
					#QEPR)
			SELECT 
				* 
			INTO 
				#QEPRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEPRDUPS)
			BEGIN

				print 'duplicate records found in QE Preference'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], Party_Id_Creator, QE_Preference ) 'RowRank' 
				FROM 
					#QEPR)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Preference - Record Party_Id_Creator=' +  Party_Id_Creator 
					+ ', QE_Preference=' + QE_Preference + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEPRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEPRDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEPRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--merge [QEPreference]
			MERGE [dbo].[QEPreference] AS [target]
			USING (SELECT * from #QEPR) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Party_Id_Creator] = LTRIM(RTRIM(source.[Party_Id_Creator])) AND
				[target].[QE_Preference] = LTRIM(RTRIM(source.[QE_Preference])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Party_Id_Creator],
				[QE_Preference],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[Party_Id_Creator])),
				LTRIM(RTRIM(source.[QE_Preference])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEPR', 'U') IS NOT NULL
				DROP TABLE #QEPR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Preference block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Preference'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 5: IMPORT AO QE Preference -------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:AOQEPreference_ID/a2c:Party_Id_Creator/text())[1]','[nvarchar](32)') Party_Id_Creator,
				QECN.value('(a2c:AOQEPreference_ID/a2c:QE_Preference/text())[1]','[nvarchar](100)') QE_Preference,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#AOQEPR	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference') as AOQEPreference(QEID) 
				CROSS APPLY 
				AOQEPreference.QEID.nodes('a2c:AOQEPreference_CN') as AOQEPreference_CN(QECN) 
					
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #AOQEPR 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR ISNULL(Party_Id_Creator,'')=''
						OR ISNULL(QE_Preference,'')='')
			BEGIN
				PRINT 'AO QE Preference - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock AO QE Preference - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", Party_Id_Creator="' + ISNULL(Party_Id_Creator,'') 
					+ '", QE_Preference="' + ISNULL(QE_Preference,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#AOQEPR 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#AOQEPR 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference) 'RowRank' 
				FROM 
					#AOQEPR)
			SELECT 
				* 
			INTO 
				#AOQEPRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #AOQEPRDUPS)
			BEGIN

				print 'duplicate records found in AO QE Preference'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference) 'RowRank' 
				FROM 
					#AOQEPR)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock AO QE Preference - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', Party_Id_Creator=' +  Party_Id_Creator 
					+ ', QE_Preference=' + QE_Preference + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#AOQEPRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#AOQEPRDUPS', 'U') IS NOT NULL
			  DROP TABLE #AOQEPRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

		
			--add dummy fk column to temp table
			ALTER TABLE #AOQEPR ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#AOQEPR Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--add dummy fk column to temp table
			ALTER TABLE #AOQEPR ADD [QEPreferenceId] INT null

			--Update existing PKs of [dbo].[QEPreference]
			Update Q 
				set [QEPreferenceId]=QEP.[QEPreferenceId]
			from 
				#AOQEPR Q inner join [dbo].[QEPreference] QEP
			on 
				Q.AOCentreID=QEP.AwardingOrganisationCentreId 
				and Q.[Party_Id_Creator]=QEP.[Party_Id_Creator] 
				and Q.[QE_Preference]=QEP.[QE_Preference]

			--merge [AOQEPreference]
			MERGE [dbo].[AOQEPreference] AS [target]
			USING (SELECT * from #AOQEPR where [QualificationElementId] is not null and [QEPreferenceId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEPreferenceId] = source.[QEPreferenceId])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEPreferenceId],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QEPreferenceId],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#AOQEPR', 'U') IS NOT NULL
				DROP TABLE #AOQEPR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in AO QE Preference block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'AO QE Preference'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 6: IMPORT QE Availability --------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				QECN.value('(a2c:QEA_Effective_End_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_End_Date_Time,
				QECN.value('(a2c:SLA_OnDemand_Result_Clndr_Days/text())[1]','int') SLA_OnDemand_Result_Clndr_Days,
				QECN.value('(a2c:Series_Label/text())[1]','[nvarchar](50)') Series_Label,
				QECN.value('(a2c:OnDemand_Entry_Calendar_Days/text())[1]','int') OnDemand_Entry_Calendar_Days,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEA	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QEAvailability_CN(QECN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEA 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QE Availability - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEA 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEA 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEA)
			SELECT 
				* 
			INTO 
				#QEADUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEADUPS)
			BEGIN

				print 'duplicate records found in QE Availability'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEA)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Availability - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type + ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEADUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEADUPS', 'U') IS NOT NULL
			  DROP TABLE #QEADUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEA ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEA Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]
	
			--merge [QEAvailability]
			MERGE [dbo].[QEAvailability] AS [target]
			USING (SELECT * from #QEA where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]))
			WHEN MATCHED THEN 
			UPDATE SET				
				[QEA_Effective_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_End_Date_Time]),
				[SLA_OnDemand_Result_Clndr_Days] = source.[SLA_OnDemand_Result_Clndr_Days],
				[Series_Label] = LTRIM(RTRIM(source.[Series_Label])),
				[OnDemand_Entry_Calendar_Days] = source.[OnDemand_Entry_Calendar_Days],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEA_Effective_Start_Date_Time],
				[QEA_Effective_End_Date_Time],
				[SLA_OnDemand_Result_Clndr_Days],
				[Series_Label],
				[OnDemand_Entry_Calendar_Days],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_End_Date_Time]),
				source.[SLA_OnDemand_Result_Clndr_Days],
				LTRIM(RTRIM(source.[Series_Label])),
				source.[OnDemand_Entry_Calendar_Days],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEA', 'U') IS NOT NULL
				DROP TABLE #QEA;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability'
					
		END CATCH

		---------------------------------------------------
		----- STEP 6.1: IMPORT QE Availability Key Event --
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				KE.value('(a2c:QEAvailabilityKeyEvent_ID/a2c:Key_Event_Name/text())[1]','[nvarchar](100)') Key_Event_Name,
				KE.value('(a2c:Key_Event_Start_Date_Time/text())[1]','[nvarchar](100)') Key_Event_Start_Date_Time,
				KE.value('(a2c:Key_Event_End_Date_Time/text())[1]','[nvarchar](100)') Key_Event_End_Date_Time,
				KE.value('(a2c:Key_Event_Additional_Text/text())[1]','[nvarchar](400)') Key_Event_Additional_Text,
				KE.value('(a2c:Time_Period_Type/text())[1]','[nvarchar](32)') Time_Period_Type,
				KE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEAKE	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QE(QECN) 
				CROSS APPLY QE.QECN.nodes('a2c:QEAvailabilityKeyEvent') as QEA(KE)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAKE 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
						OR ISNULL(Key_Event_Name,'')='')
			BEGIN
				PRINT 'QE Availability Key Event - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", Key_Event_Name="' + ISNULL(Key_Event_Name,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAKE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name) 'RowRank' 
				FROM 
					#QEAKE)
			SELECT 
				* 
			INTO 
				#QEAKEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAKEDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Key Event'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name) 'RowRank' 
				FROM 
					#QEAKE)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) 
					+ ', Key_Event_Name=' + Key_Event_Name + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEDUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAKEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy fk column to temp table
			ALTER TABLE #QEAKE ADD [QualificationElementId] INT null, [QEAvailabilityId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAKE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QEAvailability]
			Update Q 
				set [QEAvailabilityId]=QE.[QEAvailabilityId]
			from 
				#QEAKE Q inner join [QEAvailability] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QualificationElementId]=QE.[QualificationElementId] 
				and DBO.FN_A2C_GETDATETIME(Q.[QEA_Effective_Start_Date_Time])=QE.[QEA_Effective_Start_Date_Time]	
	
			--merge [QEAvailabilityKeyEvent]
			MERGE [dbo].[QEAvailabilityKeyEvent] AS [target]
			USING (SELECT * from #QEAKE 
					where [QualificationElementId] is not null 
					and [QEAvailabilityId] is not null
					and [Key_Event_Name] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityId] = source.[QEAvailabilityId] AND
				[target].[Key_Event_Name] =  LTRIM(RTRIM(source.[Key_Event_Name])))
			WHEN MATCHED THEN 
			UPDATE SET				
				[Key_Event_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Key_Event_Start_Date_Time]),
				[Key_Event_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Key_Event_End_Date_Time]),
				[Key_Event_Additional_Text] = LTRIM(RTRIM(source.[Key_Event_Additional_Text])),
				[Time_Period_Type] = LTRIM(RTRIM(source.[Time_Period_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityId],
				[Key_Event_Name],
				[Key_Event_Start_Date_Time],
				[Key_Event_End_Date_Time],
				[Key_Event_Additional_Text],
				[Time_Period_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityId],
				LTRIM(RTRIM(source.[Key_Event_Name])),
				DBO.FN_A2C_GETDATETIME(source.[Key_Event_Start_Date_Time]),
				DBO.FN_A2C_GETDATETIME(source.[Key_Event_End_Date_Time]),
				LTRIM(RTRIM(source.[Key_Event_Additional_Text])),
				LTRIM(RTRIM(source.[Time_Period_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKE', 'U') IS NOT NULL
				DROP TABLE #QEAKE;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Key Event block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Key Event'
					
		END CATCH

		----------------------------------------------------------
		----- STEP 6.2: IMPORT QE Availability Key Event Fee -----
		----------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				KE.value('(a2c:QEAvailabilityKeyEvent_ID/a2c:Key_Event_Name/text())[1]','[nvarchar](100)') Key_Event_Name,	
				KEFEE.value('(a2c:QEAvailabilityKeyEventFee_ID/a2c:QE_Fee_Category_Type/text())[1]','[nvarchar](100)') QE_Fee_Category_Type,
				KEFEE.value('(a2c:QEAvailabilityKeyEventFee_ID/a2c:Fee_Period_Start_Date_Time/text())[1]','[nvarchar](100)') Fee_Period_Start_Date_Time,
				KEFEE.value('(a2c:Fee_Period_Title/text())[1]','[nvarchar](100)') Fee_Period_Title,
				KEFEE.value('(a2c:Fee_Period_End_Date_Time/text())[1]','[nvarchar](100)') Fee_Period_End_Date_Time,
				KEFEE.value('(a2c:Fee_Amount/text())[1]','[Decimal](9,2)') Fee_Amount,
				KEFEE.value('(a2c:Fee_Additional_Text/text())[1]','[nvarchar](400)') Fee_Additional_Text,
				KEFEE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEAKEFEE	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QE(QECN) 
				CROSS APPLY QE.QECN.nodes('a2c:QEAvailabilityKeyEvent') as QEA(KE)
				CROSS APPLY QEA.KE.nodes('a2c:QEAvailabilityKeyEventFee') as QEAKE(KEFEE)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAKEFEE 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
						OR ISNULL(Key_Event_Name,'')=''
						OR ISNULL(QE_Fee_Category_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QE Availability Key Event Fee - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event Fee - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", Key_Event_Name="' + ISNULL(Key_Event_Name,'') 
					+ '", QE_Fee_Category_Type="' + ISNULL(QE_Fee_Category_Type,'') 
					+ '", Fee_Period_Start_Date_Time="' + CASE WHEN Fee_Period_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(Fee_Period_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEFEE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
					OR ISNULL(QE_Fee_Category_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEAKEFEE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
					OR ISNULL(QE_Fee_Category_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL					
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAKEFEE)
			SELECT 
				* 
			INTO 
				#QEAKEFEEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAKEFEEDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Key Event Fee'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAKEFEE)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event Fee - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id + ', Qualification_Element_Type=' 
					+ Qualification_Element_Type + ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) + ', Key_Event_Name=' + Key_Event_Name 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEFEEDUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEFEEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAKEFEEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAKEFEE ADD [QualificationElementId] INT null, [QEAvailabilityId] INT null, [QEAvailabilityKeyEventId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAKEFEE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QEAvailability]
			Update Q 
				set [QEAvailabilityId]=QE.[QEAvailabilityId]
			from 
				#QEAKEFEE Q inner join [QEAvailability] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QualificationElementId]=QE.[QualificationElementId] 
				and DBO.FN_A2C_GETDATETIME(Q.[QEA_Effective_Start_Date_Time])=QE.[QEA_Effective_Start_Date_Time]	

			--Update existing PKs of [dbo].[QEAvailabilityKeyEvent]
			Update Q 
				set [QEAvailabilityKeyEventId]=QE.[QEAvailabilityKeyEventId]
			from 
				#QEAKEFEE Q inner join [QEAvailabilityKeyEvent] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QEAvailabilityId]=QE.[QEAvailabilityId] 
				and LTRIM(RTRIM(Q.[Key_Event_Name]))=LTRIM(RTRIM(QE.[Key_Event_Name]))
	
			--merge [QEAvailabilityKeyEventFee]
			MERGE [dbo].[QEAvailabilityKeyEventFee] AS [target]
			USING (SELECT * from #QEAKEFEE 
					where [QEAvailabilityKeyEventId] is not null 
					and [QE_Fee_Category_Type] is not null
					and DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NOT NULL) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityKeyEventId] = source.[QEAvailabilityKeyEventId] AND
				[target].[QE_Fee_Category_Type] =  LTRIM(RTRIM(source.[QE_Fee_Category_Type])) AND
				[target].[Fee_Period_Start_Date_Time] =  DBO.FN_A2C_GETDATETIME(source.[Fee_Period_Start_Date_Time]))
			WHEN MATCHED THEN 
			UPDATE SET				
				[Fee_Period_Title] = LTRIM(RTRIM(source.[Fee_Period_Title])),
				[Fee_Period_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Fee_Period_End_Date_Time]),
				[Fee_Amount] = source.[Fee_Amount],
				[Fee_Additional_Text] = LTRIM(RTRIM(source.[Fee_Additional_Text])),		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityKeyEventId],
				[QE_Fee_Category_Type],
				[Fee_Period_Start_Date_Time],
				[Fee_Period_Title],
				[Fee_Period_End_Date_Time],
				[Fee_Amount],
				[Fee_Additional_Text],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityKeyEventId],
				LTRIM(RTRIM(source.[QE_Fee_Category_Type])),
				DBO.FN_A2C_GETDATETIME(source.[Fee_Period_Start_Date_Time]),
				LTRIM(RTRIM(source.[Fee_Period_Title])),
				DBO.FN_A2C_GETDATETIME(source.[Fee_Period_End_Date_Time]),
				source.[Fee_Amount],
				LTRIM(RTRIM(source.[Fee_Additional_Text])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEFEE', 'U') IS NOT NULL
				DROP TABLE #QEAKEFEE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Key Event Fee block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Key Event Fee'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 7: IMPORT QE Fee Category --------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				FEE.value('(a2c:QEFeeCategory_ID/a2c:QE_Fee_Category_Type/text())[1]','[nvarchar](100)') QE_Fee_Category_Type,
				FEE.value('(a2c:Fee_Additional_Information/text())[1]','[nvarchar](400)') Fee_Additional_Information,
				FEE.value('(a2c:Currency_Type/text())[1]','[nvarchar](80)') Currency_Type,
				FEE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#QEFEE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEFeeCategory_DS/a2c:QEFeeCategory') as QE(FEE)

		
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFEE 
					WHERE ISNULL(QE_Fee_Category_Type,'')='')
			BEGIN
				PRINT 'QE Fee Category - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Fee Category" - Record QE_Fee_Category_Type="' +  ISNULL(QE_Fee_Category_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFEE 
				WHERE 
					ISNULL(QE_Fee_Category_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFEE 
				WHERE 
					ISNULL(QE_Fee_Category_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Fee_Category_Type 
				ORDER BY 
					[AOCentreID], QE_Fee_Category_Type) 'RowRank' 
			FROM 
				#QEFEE)
			SELECT 
				* 
			INTO 
				#QEFEEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFEEDUPS)
			BEGIN

				print 'duplicate records found in QE Fee Category'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Fee_Category_Type 
					ORDER BY 
						[AOCentreID], QE_Fee_Category_Type) 'RowRank' 
				FROM 
					#QEFEE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Fee Category - Record QE_Fee_Category_Type=' +  QE_Fee_Category_Type + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFEEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFEEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFEEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QEFeeCategory]
			MERGE [dbo].[QEFeeCategory] AS [target]
			USING (SELECT * from #QEFEE) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QE_Fee_Category_Type] = LTRIM(RTRIM(source.[QE_Fee_Category_Type])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[Fee_Additional_Information] = LTRIM(RTRIM(source.[Fee_Additional_Information])),
				[Currency_Type] = LTRIM(RTRIM(source.[Currency_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QE_Fee_Category_Type],
				[Fee_Additional_Information],
				[Currency_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[QE_Fee_Category_Type])),
				LTRIM(RTRIM(source.[Fee_Additional_Information])),
				LTRIM(RTRIM(source.[Currency_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFEE', 'U') IS NOT NULL
				DROP TABLE #QEFEE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Fee Category block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Fee Category'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 8: IMPORT Qualification Framework ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],	
				QF.value('(a2c:QualificationFrameworkParty_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](max)') Party_Id_Administrator,
				PQF.value('(a2c:QualificationFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](max)') Qualification_Framework_Type,
				QFL.value('(a2c:Qual_Frmwrk_Level_Type_ID/a2c:Qual_Frmwrk_Level_Type/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type,
				QFL.value('(a2c:Qual_Frmwrk_Level_Tier_Type/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Tier_Type,
				QFL.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into
				#QEFM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationFramework_DS/a2c:QualificationFramework') as Q(QF) 
				CROSS APPLY Q.QF.nodes('a2c:PartyQualificationFramework_CN') as QE(PQF) 
				CROSS APPLY QE.PQF.nodes('a2c:QualificationFrameworkLevel_CN') as QF(QFL) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFM 
					WHERE ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')='')
			BEGIN
				PRINT 'Qualification Framework - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Framework" - Record Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type="' +  ISNULL(Qual_Frmwrk_Level_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFM 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFM 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
				ORDER BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
			FROM 
				#QEFM)
			SELECT 
				* 
			INTO 
				#QEFMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFMDUPS)
			BEGIN

				print 'duplicate records found in Qualification Framework'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
					ORDER BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
				FROM 
					#QEFM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Framework - Record Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type=' +  Qual_Frmwrk_Level_Type 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QualificationFramework]
			MERGE [dbo].[QualificationFramework] AS [target]
			USING (SELECT * from #QEFM) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Party_Id_Administrator] = LTRIM(RTRIM(source.[Party_Id_Administrator])) AND
				[target].[Qualification_Framework_Type] = LTRIM(RTRIM(source.[Qualification_Framework_Type])) AND
				[target].[Qual_Frmwrk_Level_Type] = LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Type])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[Qual_Frmwrk_Level_Tier_Type] = LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Tier_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Party_Id_Administrator],
				[Qualification_Framework_Type],
				[Qual_Frmwrk_Level_Type],
				[Qual_Frmwrk_Level_Tier_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[Party_Id_Administrator])),
				LTRIM(RTRIM(source.[Qualification_Framework_Type])),
				LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Type])),
				LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Tier_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFM', 'U') IS NOT NULL
				DROP TABLE #QEFM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Qualification Framework block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Framework'
					
		END CATCH

		----------------------------------------------------------------
		----- STEP 8.1 : IMPORT Qualification Framework Hierarchy ------
		----------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select
				@AwardingOrganisationCentreId [AOCentreID],	
				QF.value('(a2c:QualificationFrameworkParty_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](max)') Party_Id_Administrator,
				PQF.value('(a2c:QualificationFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](max)') Qualification_Framework_Type,
				QFH.value('(a2c:QualFrameworkHierarchy_ID/a2c:Qual_Frmwrk_Level_Type_Parent/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type_Parent,
				QFH.value('(a2c:QualFrameworkHierarchy_ID/a2c:Qual_Frmwrk_Level_Type_Child/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type_Child,
				QFH.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into
				#QEFMHR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationFramework_DS/a2c:QualificationFramework') as Q(QF) 
				CROSS APPLY Q.QF.nodes('a2c:PartyQualificationFramework_CN') as QE(PQF) 
				CROSS APPLY QE.PQF.nodes('a2c:QualFrameworkHierarchy') as QF(QFH) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFMHR 
					WHERE ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')='')
			BEGIN
				PRINT 'Qualification Framework Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Framework Hierarchy" - Record Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type_Parent="' +  ISNULL(Qual_Frmwrk_Level_Type_Parent,'') 
					+ '", Qual_Frmwrk_Level_Type_Child="' +  ISNULL(Qual_Frmwrk_Level_Type_Child,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMHR 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFMHR 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child  
				ORDER BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child) 'RowRank' 
			FROM 
				#QEFMHR)
			SELECT 
				* 
			INTO 
				#QEFMHRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFMHRDUPS)
			BEGIN

				print 'duplicate records found in Qualification Framework Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child  
					ORDER BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child) 'RowRank' 
				FROM 
					#QEFMHR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Framework Hierarchy - Record Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type_Parent=' +  Qual_Frmwrk_Level_Type_Parent 
					+ ', Qual_Frmwrk_Level_Type_Child=' +  Qual_Frmwrk_Level_Type_Child 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMHRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMHRDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFMHRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEFMHR ADD [QualificationFrameworkId_Parent] INT null, [QualificationFrameworkId_Child] INT null

			--Update existing PKs of [dbo].[QualificationFramework]
			Update Q 
				set [QualificationFrameworkId_Parent]=QE.[QualificationFrameworkId]
			from 
				#QEFMHR Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=LTRIM(RTRIM(QE.[Party_Id_Administrator])) 
				and Q.[Qualification_Framework_Type]=LTRIM(RTRIM(QE.[Qualification_Framework_Type]))
				and Q.Qual_Frmwrk_Level_Type_Parent=LTRIM(RTRIM(QE.[Qual_Frmwrk_Level_Type]))

			Update Q 
				set [QualificationFrameworkId_Child]=QE.[QualificationFrameworkId]
			from 
				#QEFMHR Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=LTRIM(RTRIM(QE.[Party_Id_Administrator])) 
				and Q.[Qualification_Framework_Type]=LTRIM(RTRIM(QE.[Qualification_Framework_Type]))
				and Q.Qual_Frmwrk_Level_Type_Child=LTRIM(RTRIM(QE.[Qual_Frmwrk_Level_Type]))

			--merge [QualificationFrameworkHierarchy]
			MERGE [dbo].[QualificationFrameworkHierarchy] AS [target]
			USING (SELECT * from #QEFMHR where [QualificationFrameworkId_Parent] is not null and [QualificationFrameworkId_Child] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationFrameworkId_Parent] = source.[QualificationFrameworkId_Parent] AND
				[target].[QualificationFrameworkId_Child] = source.[QualificationFrameworkId_Child])
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationFrameworkId_Parent],
				[QualificationFrameworkId_Child],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationFrameworkId_Parent],
				source.[QualificationFrameworkId_Child],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMHR', 'U') IS NOT NULL
				DROP TABLE #QEFMHR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Qualification Framework Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Framework Hierarchy'
					
		END CATCH

		----------------------------------------------------------------
		----- STEP 8.2: IMPORT Qualification Element Framework ---------
		----------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QF.value('(a2c:QEFramework_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QF.value('(a2c:QEFramework_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QF.value('(a2c:QEFramework_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](max)') Party_Id_Administrator,
				QF.value('(a2c:QEFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](max)') Qualification_Framework_Type,
				QF.value('(a2c:QEFramework_ID/a2c:Qual_Frmwrk_Level_Type/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type,
				QF.value('(a2c:QE_Framework_Credit_Value/text())[1]','[nvarchar](max)') QE_Framework_Credit_Value,
				QF.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag	
			into
				#QELEFM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementFramework_DS/a2c:QualificationElementFramework') as Q(QF) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QELEFM 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Framework - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId,A2CTransactionResponseEnvelopeId,  
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Framework" - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' +  ISNULL(Qualification_Element_Type,'') 
					+ '", Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type="' +  ISNULL(Qual_Frmwrk_Level_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELEFM 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QELEFM 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
			FROM 
				#QELEFM)
			SELECT 
				* 
			INTO 
				#QELEFMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QELEFMDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Framework'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
				FROM 
					#QELEFM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Framework - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type 
					+ ', Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type=' +  Qual_Frmwrk_Level_Type
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELEFMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELEFMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QELEFMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QELEFM ADD [QualificationElementId] INT null, [QualificationFrameworkId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QELEFM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QualificationFramework]
			Update Q 
				set [QualificationFrameworkId]=QE.[QualificationFrameworkId]
			from 
				#QELEFM Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=QE.[Party_Id_Administrator] 
				and Q.[Qualification_Framework_Type]=QE.[Qualification_Framework_Type]
				and Q.[Qual_Frmwrk_Level_Type]=QE.[Qual_Frmwrk_Level_Type]

			--merge [QualificationElementFramework]
			MERGE [dbo].[QualificationElementFramework] AS [target]
			USING (SELECT * from #QELEFM where [QualificationElementId] is not null and [QualificationFrameworkId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QualificationFrameworkId] = source.[QualificationFrameworkId])
			WHEN MATCHED THEN 
			UPDATE SET		
				[QE_Framework_Credit_Value] = source.[QE_Framework_Credit_Value],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QualificationFrameworkId],
				[QE_Framework_Credit_Value],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QualificationFrameworkId],
				source.[QE_Framework_Credit_Value],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELEFM', 'U') IS NOT NULL
				DROP TABLE #QELEFM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Framework block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Framework'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 9: IMPORT Sector Subject Area ----------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 			
				@AwardingOrganisationCentreId [AOCentreID],	
				CN.value('(a2c:SectorSubjectArea_ID/a2c:Sector_Subject_Area/text())[1]','decimal(3,1)') Sector_Subject_Area,
				CN.value('(a2c:Sector_Subject_Area_Descr/text())[1]','[nvarchar](100)') Sector_Subject_Area_Descr,
				CN.value('(a2c:Sector_Subject_Area_Level_Type/text())[1]','[nvarchar](8)') Sector_Subject_Area_Level_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#SSA
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:SectorSubjectArea_DS/a2c:SectorSubjectArea/a2c:SectorSubjectArea_CN') as SSA(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSA 
					WHERE Sector_Subject_Area IS NULL)
			BEGIN
				PRINT 'Sector Subject Area - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Sector Subject Area" - Record Sector_Subject_Area="' 
					+  CASE WHEN Sector_Subject_Area IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSA 
				WHERE 
					Sector_Subject_Area IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSA 
				WHERE 
					Sector_Subject_Area IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Sector_Subject_Area
				ORDER BY 
					[AOCentreID], Sector_Subject_Area) 'RowRank' 
			FROM 
				#SSA)
			SELECT 
				* 
			INTO 
				#SSADUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSADUPS)
			BEGIN

				print 'duplicate records found in Sector Subject Area'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Sector_Subject_Area
					ORDER BY 
						[AOCentreID], Sector_Subject_Area) 'RowRank' 
				FROM 
					#SSA)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Sector Subject Area - Record Sector_Subject_Area=' +  cast(Sector_Subject_Area as nvarchar)
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSADUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSADUPS', 'U') IS NOT NULL
			  DROP TABLE #SSADUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [SectorSubjectArea]
			MERGE [dbo].[SectorSubjectArea] AS [target]
			USING (SELECT * from #SSA) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Sector_Subject_Area] = source.[Sector_Subject_Area])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Sector_Subject_Area_Descr] = LTRIM(RTRIM(source.[Sector_Subject_Area_Descr])),
				[Sector_Subject_Area_Level_Type] = LTRIM(RTRIM(source.[Sector_Subject_Area_Level_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Sector_Subject_Area],
				[Sector_Subject_Area_Descr],
				[Sector_Subject_Area_Level_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[Sector_Subject_Area],
				LTRIM(RTRIM(source.[Sector_Subject_Area_Descr])),
				LTRIM(RTRIM(source.[Sector_Subject_Area_Level_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSA', 'U') IS NOT NULL
				DROP TABLE #SSA;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Sector Subject Area block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Sector Subject Area'
					
		END CATCH


		-------------------------------------------------------------
		----- STEP 9.1: IMPORT Sector Subject Area Hierarchy --------
		-------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 			
				@AwardingOrganisationCentreId [AOCentreID],	
				CN.value('(a2c:SectorSubjectAreaHierarchy_ID/a2c:Sector_Subject_Area_Parent/text())[1]','decimal(3,1)') Sector_Subject_Area_Parent,
				CN.value('(a2c:SectorSubjectAreaHierarchy_ID/a2c:Sector_Subject_Area_Child/text())[1]','decimal(3,1)') Sector_Subject_Area_Child,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#SSAHR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:SectorSubjectArea_DS/a2c:SectorSubjectArea/a2c:SectorSubjectAreaHierarchy') as SSA(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSAHR 
					WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL)
			BEGIN
				PRINT 'Sector Subject Area Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Sector Subject Area Hierarchy" - Record Sector_Subject_Area_Parent="' 
					+  CASE WHEN Sector_Subject_Area_Parent IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area_Parent AS VARCHAR) END
					+ '", Sector_Subject_Area_Child="' 
					+  CASE WHEN Sector_Subject_Area_Child IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area_Child AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAHR 
				WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSAHR 
				WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child
				ORDER BY 
					[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child) 'RowRank' 
			FROM 
				#SSAHR)
			SELECT 
				* 
			INTO 
				#SSAHRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSAHRDUPS)
			BEGIN

				print 'duplicate records found in Sector Subject Area Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child
					ORDER BY 
						[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child) 'RowRank' 
				FROM 
					#SSAHR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Sector Subject Area Hierarchy - Record Sector_Subject_Area_Parent=' +  CAST(Sector_Subject_Area_Parent AS VARCHAR)
					+ ' , Sector_Subject_Area_Child=' +  CAST(Sector_Subject_Area_Child AS VARCHAR)
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAHRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAHRDUPS', 'U') IS NOT NULL
			  DROP TABLE #SSAHRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #SSAHR ADD [SectorSubjectAreaId_Parent] INT null, [SectorSubjectAreaId_Child] INT null

			--Update existing PKs of [dbo].[SectorSubjectArea]
			Update Q 
				set [SectorSubjectAreaId_Parent]=QE.[SectorSubjectAreaId]
			from 
				#SSAHR Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area_Parent=QE.[Sector_Subject_Area] 

			Update Q 
				set [SectorSubjectAreaId_Child]=QE.[SectorSubjectAreaId]
			from 
				#SSAHR Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area_Child=QE.[Sector_Subject_Area] 
		
			--merge [SectorSubjectAreaHierarchy]
			MERGE [dbo].[SectorSubjectAreaHierarchy] AS [target]
			USING (SELECT * from #SSAHR where [SectorSubjectAreaId_Parent] is not null and [SectorSubjectAreaId_Child] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[SectorSubjectAreaId_Parent] = source.[SectorSubjectAreaId_Parent] AND
				[target].[SectorSubjectAreaId_Child] = source.[SectorSubjectAreaId_Child])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[SectorSubjectAreaId_Parent],
				[SectorSubjectAreaId_Child],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[SectorSubjectAreaId_Parent],
				source.[SectorSubjectAreaId_Child],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAHR', 'U') IS NOT NULL
				DROP TABLE #SSAHR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Sector Subject Area Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Sector Subject Area Hierarchy'
					
		END CATCH
			
		-------------------------------------------------------------
		----- STEP 9.2: IMPORT QE Sector Subject Area  --------------
		-------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],	
				QE.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](100)') AO_Qualification_Element_Id,
				QE.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](100)') Qualification_Element_Type,
				CN.value('(a2c:SectorSubjectArea_ID/a2c:Sector_Subject_Area/text())[1]','decimal(3,1)') Sector_Subject_Area,
				CN.value('(a2c:QE_Sector_Subject_Area_Eff_Date/text())[1]','[nvarchar](100)') QE_Sector_Subject_Area_Eff_Date,
				CN.value('(a2c:QE_Sector_Subject_Area_End_Date/text())[1]','[nvarchar](100)') QE_Sector_Subject_Area_End_Date,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#SSAQE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QESectorSubjectArea_DS/a2c:QESectorSubjectArea/a2c:QualificationElement') as SSA(QE)
				CROSS APPLY SSA.QE.nodes('a2c:QESectorSubjectArea_CN') as SS(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSAQE 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL)
			BEGIN
				PRINT 'QE Sector Subject Area - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Sector Subject Area" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", Sector_Subject_Area="' 
					+  CASE WHEN Sector_Subject_Area IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAQE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSAQE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area) 'RowRank' 
			FROM 
				#SSAQE)
			SELECT 
				* 
			INTO 
				#SSAQEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSAQEDUPS)
			BEGIN

				print 'duplicate records found in QE Sector Subject Area'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area) 'RowRank' 
				FROM 
					#SSAQE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Sector Subject Area - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ' , Qualification_Element_Type=' +  Qualification_Element_Type
					+ ' , Sector_Subject_Area=' +  CAST(Sector_Subject_Area AS NVARCHAR)
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAQEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAQEDUPS', 'U') IS NOT NULL
			  DROP TABLE #SSAQEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #SSAQE ADD [QualificationElementId] INT null, [SectorSubjectAreaId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#SSAQE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[SectorSubjectArea]
			Update Q 
				set [SectorSubjectAreaId]=QE.[SectorSubjectAreaId]
			from 
				#SSAQE Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area=QE.[Sector_Subject_Area] 
		
			--merge [QESectorSubjectArea]
			MERGE [dbo].[QESectorSubjectArea] AS [target]
			USING (SELECT * from #SSAQE where [QualificationElementId] is not null and [SectorSubjectAreaId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[SectorSubjectAreaId] = source.[SectorSubjectAreaId])
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Sector_Subject_Area_Eff_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_Eff_Date]),
				[QE_Sector_Subject_Area_End_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_End_Date]),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[SectorSubjectAreaId],
				[QE_Sector_Subject_Area_Eff_Date],
				[QE_Sector_Subject_Area_End_Date],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[SectorSubjectAreaId],
				DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_Eff_Date]),
				DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_End_Date]),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAQE', 'U') IS NOT NULL
				DROP TABLE #SSAQE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Sector Subject Area block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Sector Subject Area'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 10: IMPORT QE Assessment Material ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				CN.value('(a2c:QEAssessmentMaterial_ID/a2c:QE_Assmnt_Material_Id/text())[1]','[nvarchar](max)') QE_Assmnt_Material_Id,
				CN.value('(a2c:QE_Assmnt_Material_Name/text())[1]','[nvarchar](100)') QE_Assmnt_Material_Name,
				CN.value('(a2c:QE_Assmnt_Material_Source/text())[1]','[nvarchar](400)') QE_Assmnt_Material_Source,
				CN.value('(a2c:QE_Assmnt_Material_Description/text())[1]','[nvarchar](250)') QE_Assmnt_Material_Description,
				CN.value('(a2c:QE_Assmnt_Material_Source_Type/text())[1]','[nvarchar](32)') QE_Assmnt_Material_Source_Type,
				CN.value('(a2c:QE_Assmnt_Material_Medium_Type/text())[1]','[nvarchar](20)') QE_Assmnt_Material_Medium_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#QEAM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityAssessmentMaterial_DS/a2c:QEAvailabilityAssessmentMaterial/a2c:QEAssessmentMaterial_CN') as Q(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAM 
					WHERE ISNULL(QE_Assmnt_Material_Id,'')='')
			BEGIN
				PRINT 'QE Assessment Material - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Assessment Material" - Record QE_Assmnt_Material_Id="' + ISNULL(QE_Assmnt_Material_Id,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Assmnt_Material_Id
				ORDER BY 
					[AOCentreID], QE_Assmnt_Material_Id) 'RowRank' 
			FROM 
				#QEAM)
			SELECT 
				* 
			INTO 
				#QEAMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAMDUPS)
			BEGIN

				print 'duplicate records found in QE Assessment Material'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Assmnt_Material_Id
					ORDER BY 
						[AOCentreID], QE_Assmnt_Material_Id) 'RowRank' 
				FROM 
					#QEAM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Assessment Material - Record QE_Assmnt_Material_Id=' +  QE_Assmnt_Material_Id
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QEAssessmentMaterial]
			MERGE [dbo].[QEAssessmentMaterial] AS [target]
			USING (SELECT * from #QEAM) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QE_Assmnt_Material_Id] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Id])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[QE_Assmnt_Material_Name] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Name])),
				[QE_Assmnt_Material_Source] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Source])),
				[QE_Assmnt_Material_Description] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Description])),
				[QE_Assmnt_Material_Source_Type] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Source_Type])),
				[QE_Assmnt_Material_Medium_Type] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Medium_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QE_Assmnt_Material_Id],
				[QE_Assmnt_Material_Name],
				[QE_Assmnt_Material_Source],
				[QE_Assmnt_Material_Description],
				[QE_Assmnt_Material_Source_Type],
				[QE_Assmnt_Material_Medium_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Id])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Name])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Source])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Description])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Source_Type])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Medium_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAM', 'U') IS NOT NULL
				DROP TABLE #QEAM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Assessment Material block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Assessment Material'
					
		END CATCH

		---------------------------------------------------
		----- STEP 10.1: IMPORT QEA Assessment Material ---
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				CN.value('(a2c:QEAssessmentMaterial_ID/a2c:QE_Assmnt_Material_Id/text())[1]','[nvarchar](25)') QE_Assmnt_Material_Id,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				QEA.value('(a2c:Number_Per_Learner/text())[1]','int') Number_Per_Learner,
				QEA.value('(a2c:Number_Per_Centre/text())[1]','int') Number_Per_Centre,
				QEA.value('(a2c:Assmnt_Material_Release_Date/text())[1]','date') Assmnt_Material_Release_Date,
				QEA.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#QEAAM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityAssessmentMaterial_DS/a2c:QEAvailabilityAssessmentMaterial/a2c:QEAssessmentMaterial_CN') as Q(CN) 
				CROSS APPLY Q.CN.nodes('a2c:QEAAssessmentMaterial') as QE(QEA)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAAM 
					WHERE ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QEA Assessment Material - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QEA Assessment Material" - Record QE_Assmnt_Material_Id="' + ISNULL(QE_Assmnt_Material_Id,'')
					+ '", AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEAAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time
				ORDER BY 
					[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time) 'RowRank' 
			FROM 
				#QEAAM)
			SELECT 
				* 
			INTO 
				#QEAAMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAAMDUPS)
			BEGIN

				print 'duplicate records found in QEA Assessment Material'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time
					ORDER BY 
						[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAAM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QEA Assessment Material - Record QE_Assmnt_Material_Id=' +  QE_Assmnt_Material_Id
					+ ', AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type
					+ ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100))
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAAMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAAMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAAMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAAM ADD [QualificationElementId] INT null, [QEAssessmentMaterialId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAAM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QEAAssessmentMaterial]]
			Update Q 
				set [QEAssessmentMaterialId]=QE.[QEAssessmentMaterialId]
			from 
				#QEAAM Q inner join [dbo].[QEAssessmentMaterial] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.QE_Assmnt_Material_Id=QE.[QE_Assmnt_Material_Id]

			--merge [QEAAssessmentMaterial]
			MERGE [dbo].[QEAAssessmentMaterial] AS [target]
			USING (SELECT * from #QEAAM where [QualificationElementId] is not null and [QEAssessmentMaterialId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEAssessmentMaterialId] = source.[QEAssessmentMaterialId])
			WHEN MATCHED THEN 
			UPDATE SET				
				[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				[Number_per_Learner] = source.[Number_per_Learner],
				[Number_per_Centre] = source.[Number_per_Centre],
				[Assmnt_Material_Release_Date] = source.[Assmnt_Material_Release_Date],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEAssessmentMaterialId],
				[QEA_Effective_Start_Date_Time],
				[Number_per_Learner],
				[Number_per_Centre],
				[Assmnt_Material_Release_Date],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QEAssessmentMaterialId],
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				source.[Number_per_Learner],
				source.[Number_per_Centre],
				source.[Assmnt_Material_Release_Date],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAAM', 'U') IS NOT NULL
				DROP TABLE #QEAAM;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QEA Assessment Material block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QEA Assessment Material'
					
		END CATCH

		----------------------------------------------------------------------
		----------------------------------------------------------------------
		----- STEP 11: IMPORT Qualification Element Grade --------------------
		----------------------------------------------------------------------
		----------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Grade/text())[1]','[nvarchar](max)') QE_Grade,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Outcome_Type/text())[1]','[nvarchar](max)') QE_Outcome_Type,
				CN.value('(a2c:QE_Grade_Effective_Date/text())[1]','date') QE_Grade_Effective_Date,
				CN.value('(a2c:QE_Grade_Eff_End_Date/text())[1]','date') QE_Grade_Eff_End_Date,
				CN.value('(a2c:QE_Grade_Description/text())[1]','[nvarchar](max)') QE_Grade_Description,
				CN.value('(a2c:QE_Grade_Sequence_Order/text())[1]','int') QE_Grade_Sequence_Order,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEG	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementGrade_DS/a2c:QualificationElementGrade') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QualificationElementGrade_CN') as QEG(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEG 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Grade - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Grade" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '", QE_Outcome_Type="' + ISNULL(QE_Outcome_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEG 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEG 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type) 'RowRank' 
			FROM 
				#QEG)
			SELECT 
				* 
			INTO 
				#QEGDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEGDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Grade'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type) 'RowRank' 
				FROM 
					#QEG)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Grade - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Grade=' +  ISNULL(QE_Grade,'')
					+ ', QE_Outcome_Type=' +  ISNULL(QE_Outcome_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEGDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEG ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEG Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QualificationElementGrade]
			MERGE [dbo].[QualificationElementGrade] AS [target]
			USING (SELECT * from #QEG where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QE_Grade] = LTRIM(RTRIM(source.[QE_Grade])) AND
				[target].[QE_Outcome_Type] = LTRIM(RTRIM(source.[QE_Outcome_Type])))
			WHEN MATCHED THEN 
			UPDATE SET				
				[QE_Grade_Effective_Date] = source.[QE_Grade_Effective_Date],
				[QE_Grade_Eff_End_Date] = source.[QE_Grade_Eff_End_Date],
				[QE_Grade_Description] = LTRIM(RTRIM(source.[QE_Grade_Description])),
				[QE_Grade_Sequence_Order] = source.[QE_Grade_Sequence_Order],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QE_Grade],
				[QE_Outcome_Type],
				[QE_Grade_Effective_Date],
				[QE_Grade_Eff_End_Date],
				[QE_Grade_Description],
				[QE_Grade_Sequence_Order],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[QE_Grade])),
				LTRIM(RTRIM(source.[QE_Outcome_Type])),
				source.[QE_Grade_Effective_Date],
				source.[QE_Grade_Eff_End_Date],
				LTRIM(RTRIM(source.[QE_Grade_Description])),
				source.[QE_Grade_Sequence_Order],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEG', 'U') IS NOT NULL
				DROP TABLE #QEG;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Grade block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Grade'
					
		END CATCH

		-------------------------------------------------------
		----- STEP 11.1: IMPORT QE Grade Performance Points ---
		-------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](100)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](100)') Qualification_Element_Type,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Grade/text())[1]','[nvarchar](100)') QE_Grade,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Outcome_Type/text())[1]','[nvarchar](100)') QE_Outcome_Type,
				PPN.value('(a2c:QEGradePerformancePoints_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](100)') Party_Id_Administrator,
				PPN.value('(a2c:Performance_Points/text())[1]','Decimal(6,2)') Performance_Points,
				PPN.value('(a2c:Level_1_Threshold/text())[1]','Decimal(5,2)') Level_1_Threshold,
				PPN.value('(a2c:Level_2_Threshold/text())[1]','Decimal(5,2)') Level_2_Threshold,
				PPN.value('(a2c:Level_3_Threshold/text())[1]','Decimal(5,2)') Level_3_Threshold,
				PPN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#QEGPPT	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementGrade_DS/a2c:QualificationElementGrade') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QualificationElementGrade_CN') as QEG(CN) 
				CROSS APPLY QEG.CN.nodes('a2c:QEGradePerformancePoints') as QEGP(PPN) 

			
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEGPPT 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')='')
			BEGIN
				PRINT 'QE Grade Performance Points - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Grade Performance Points" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '", QE_Outcome_Type="' + ISNULL(QE_Outcome_Type,'')
					+ '", Party_Id_Administrator="' + ISNULL(Party_Id_Administrator,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGPPT 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEGPPT 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator) 'RowRank' 
			FROM 
				#QEGPPT)
			SELECT 
				* 
			INTO 
				#QEGPPTDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEGPPTDUPS)
			BEGIN

				print 'duplicate records found in QE Grade Performance Points'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator) 'RowRank' 
				FROM 
					#QEGPPT)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Grade - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Grade=' +  ISNULL(QE_Grade,'')
					+ ', QE_Outcome_Type=' +  ISNULL(QE_Outcome_Type,'')
					+ ', Party_Id_Administrator=' +  ISNULL(Party_Id_Administrator,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGPPTDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGPPTDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEGPPTDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEGPPT ADD [QualificationElementId] INT null, [QualificationElementGradeId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEGPPT Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QualificationElementGrade]]
			Update Q 
				set [QualificationElementGradeId]=QE.[QualificationElementGradeId]
			from 
				#QEGPPT Q inner join [dbo].[QualificationElementGrade] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.QualificationElementId=QE.QualificationElementId
				and LTRIM(RTRIM(Q.[QE_Grade]))=LTRIM(RTRIM(QE.[QE_Grade]))
				and LTRIM(RTRIM(Q.[QE_Outcome_Type]))=LTRIM(RTRIM(QE.[QE_Outcome_Type]))

			--merge [QEGradePerformancePoints]
			MERGE [dbo].[QEGradePerformancePoints] AS [target]
			USING (SELECT * from #QEGPPT 
					where [QualificationElementId] is not null 
					and [QualificationElementGradeId] is not null
					and [Party_Id_Administrator] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QualificationElementGradeId] = source.[QualificationElementGradeId] AND
				LTRIM(RTRIM([target].[Party_Id_Administrator]))=LTRIM(RTRIM(source.[Party_Id_Administrator])))
			WHEN MATCHED THEN 
			UPDATE SET
				[Performance_Points] = source.[Performance_Points],
				[Level_1_Threshold] = source.[Level_1_Threshold],
				[Level_2_Threshold] = source.[Level_2_Threshold],
				[Level_3_Threshold] = source.[Level_3_Threshold],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QualificationElementGradeId],
				[Party_Id_Administrator],
				[Performance_Points],
				[Level_1_Threshold],
				[Level_2_Threshold],
				[Level_3_Threshold],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QualificationElementGradeId],
				LTRIM(RTRIM(source.[Party_Id_Administrator])),
				source.[Performance_Points],
				source.[Level_1_Threshold],
				source.[Level_2_Threshold],
				source.[Level_3_Threshold],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGPPT', 'U') IS NOT NULL
				DROP TABLE #QEGPPT;			

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Grade Performance Points block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Grade Performance Points'
					
		END CATCH
					
		---------------------------------------------------
		---------------------------------------------------
		----- STEP 12: IMPORT QE Objective Statement ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				CN.value('(a2c:QEObjectiveStatement_ID/a2c:QE_Objective_Statement_Name/text())[1]','[nvarchar](max)') QE_Objective_Statement_Name,
				CN.value('(a2c:QE_Objective_Statement_Text/text())[1]','[nvarchar](max)') QE_Objective_Statement_Text,
				CN.value('(a2c:QE_Objctv_Stmnt_Level_Seq_Num/text())[1]','int') QE_Objctv_Stmnt_Level_Seq_Num,
				CN.value('(a2c:QE_Objective_Statement_Level/text())[1]','[nvarchar](max)') QE_Objective_Statement_Level,
				CN.value('(a2c:QE_Objective_Statement_Descr/text())[1]','[nvarchar](max)') QE_Objective_Statement_Descr,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEOS
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEObjectiveStatement_DS/a2c:QEObjectiveStatement') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QEObjectiveStatement_CN') as QEO(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEOS 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')='')
			BEGIN
				PRINT 'QE Objective Statement - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Objective Statement" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Objective_Statement_Name="' + ISNULL(QE_Objective_Statement_Name,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOS 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEOS 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name 
			ORDER BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name) 'RowRank' 
			FROM 
				#QEOS)
			SELECT 
				* 
			INTO 
				#QEOSDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEOSDUPS)
			BEGIN

				print 'duplicate records found in QE Objective Statement'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name) 'RowRank' 
				FROM 
					#QEOS)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Objective Statement - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Objective_Statement_Name=' +  ISNULL(QE_Objective_Statement_Name,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEOSDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEOS ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEOS Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QEObjectiveStatement]
			MERGE [dbo].[QEObjectiveStatement] AS [target]
			USING (SELECT * from #QEOS where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QE_Objective_Statement_Name] = LTRIM(RTRIM(source.[QE_Objective_Statement_Name])))
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Objective_Statement_Text] = LTRIM(RTRIM(source.[QE_Objective_Statement_Text])),
				[QE_Objctv_Stmnt_Level_Seq_Num] = source.[QE_Objctv_Stmnt_Level_Seq_Num],
				[QE_Objective_Statement_Level] = LTRIM(RTRIM(source.[QE_Objective_Statement_Level])),
				[QE_Objective_Statement_Descr] = LTRIM(RTRIM(source.[QE_Objective_Statement_Descr])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QE_Objective_Statement_Name],
				[QE_Objective_Statement_Text],
				[QE_Objctv_Stmnt_Level_Seq_Num],
				[QE_Objective_Statement_Level],
				[QE_Objective_Statement_Descr],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[QE_Objective_Statement_Name])),
				LTRIM(RTRIM(source.[QE_Objective_Statement_Text])),
				source.[QE_Objctv_Stmnt_Level_Seq_Num],
				LTRIM(RTRIM(source.[QE_Objective_Statement_Level])),
				LTRIM(RTRIM(source.[QE_Objective_Statement_Descr])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOS', 'U') IS NOT NULL
				DROP TABLE #QEOS;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Objective Statement block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Objective Statement'
					
		END CATCH

		---------------------------------------------------------------
		----- STEP 12.1: IMPORT QE Objective Statement Hierarchy ------
		---------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:AO_QE_Id_First/text())[1]','[nvarchar](max)') AO_QE_Id_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Type_First/text())[1]','[nvarchar](max)') QE_Type_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Objctv_Stmnt_Name_First/text())[1]','[nvarchar](max)') QE_Objctv_Stmnt_Name_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:AO_QE_Id_Second/text())[1]','[nvarchar](max)') AO_QE_Id_Second,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Type_Second/text())[1]','[nvarchar](max)') QE_Type_Second,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Objctv_Stmnt_Name_Second/text())[1]','[nvarchar](max)') QE_Objctv_Stmnt_Name_Second,
				QEID.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEOSH
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEObjectiveStatement_DS/a2c:QEObjectiveStatementHierarchy') as QE(QEID)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEOSH 
					WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')='')
			BEGIN
				PRINT 'QE Objective Statement Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Objective Statement Hierarchy" - Record AO_QE_Id_First="' + ISNULL(AO_QE_Id_First,'')
					+ '", QE_Type_First="' + ISNULL(QE_Type_First,'')
					+ '", QE_Objctv_Stmnt_Name_First="' + ISNULL(QE_Objctv_Stmnt_Name_First,'')
					+ '", AO_QE_Id_Second="' + ISNULL(AO_QE_Id_Second,'')
					+ '", QE_Type_Second="' + ISNULL(QE_Type_Second,'')
					+ '", QE_Objctv_Stmnt_Name_Second="' + ISNULL(QE_Objctv_Stmnt_Name_Second,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSH 
				WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEOSH 
				WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second
			ORDER BY 
				[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second) 'RowRank' 
			FROM 
				#QEOSH)
			SELECT 
				* 
			INTO 
				#QEOSHDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEOSHDUPS)
			BEGIN

				print 'duplicate records found in QE Objective Statement Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second
				ORDER BY 
					[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second) 'RowRank' 
				FROM 
					#QEOSH)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Objective Statement Hierarchy - Record AO_QE_Id_First=' +  ISNULL(AO_QE_Id_First,'')
					+ ', QE_Type_First=' +  ISNULL(QE_Type_First,'')
					+ ', QE_Objctv_Stmnt_Name_First=' +  ISNULL(QE_Objctv_Stmnt_Name_First,'')
					+ ', AO_QE_Id_Second=' +  ISNULL(AO_QE_Id_Second,'')
					+ ', QE_Type_Second=' +  ISNULL(QE_Type_Second,'')
					+ ', QE_Objctv_Stmnt_Name_Second=' +  ISNULL(QE_Objctv_Stmnt_Name_Second,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSHDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSHDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEOSHDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk columns to temp table
			ALTER TABLE #QEOSH ADD 
			[QualificationElementId_First] INT null,
			[QEObjectiveStatementId_First] INT null,
			[QualificationElementId_Second] INT null,
			[QEObjectiveStatementId_Second] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId_First]=QE.QualificationElementId
			from 
				#QEOSH Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_First=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_First=QE.[Qualification_Element_Type]

			Update Q 
				set [QualificationElementId_Second]=QE.QualificationElementId
			from 
				#QEOSH Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Second=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Second=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QEObjectiveStatement]]
			Update Q 
				set [QEObjectiveStatementId_First]=QE.[QEObjectiveStatementId]
			from 
				#QEOSH Q inner join [dbo].[QEObjectiveStatement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId_First]=QE.[QualificationElementId] 
				and Q.QE_Objctv_Stmnt_Name_First=QE.QE_Objective_Statement_Name

			Update Q 
				set [QEObjectiveStatementId_Second]=QE.[QEObjectiveStatementId]
			from 
				#QEOSH Q inner join [dbo].[QEObjectiveStatement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId_Second]=QE.[QualificationElementId] 
				and Q.QE_Objctv_Stmnt_Name_Second=QE.QE_Objective_Statement_Name

			--merge [QEObjectiveStatementHierarchy]
			MERGE [dbo].[QEObjectiveStatementHierarchy] AS [target]
			USING (SELECT * from #QEOSH where 
				[QualificationElementId_First] is not null and
				[QEObjectiveStatementId_First] is not null and
				[QualificationElementId_Second] is not null and
				[QEObjectiveStatementId_Second] is not null
			) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId_First] = source.[QualificationElementId_First] AND
				[target].[QEObjectiveStatementId_First] = source.[QEObjectiveStatementId_First] AND
				[target].[QualificationElementId_Second] = source.[QualificationElementId_Second] AND
				[target].[QEObjectiveStatementId_Second] = source.[QEObjectiveStatementId_Second])
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId_First],
				[QEObjectiveStatementId_First],
				[QualificationElementId_Second],
				[QEObjectiveStatementId_Second],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId_First],
				source.[QEObjectiveStatementId_First],
				source.[QualificationElementId_Second],
				source.[QEObjectiveStatementId_Second],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSH', 'U') IS NOT NULL
				DROP TABLE #QEOSH;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Objective Statement Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Objective Statement Hierarchy'
					
		END CATCH

		-----------------------------------------------------------------------
		-----------------------------------------------------------------------
		----- STEP 13: IMPORT Qualification Element Age Range -----------------
		-----------------------------------------------------------------------
		-----------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				CN.value('(a2c:AgeRange_ID/a2c:Age_Range_Type/text())[1]','[nvarchar](max)') Age_Range_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEAR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementAgeRange_DS/a2c:QualificationElementAgeRange/a2c:QualificationElementAgeRange_CN/a2c:QEAgeRange_ID') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QEAgeRange_CN') as QEO(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAR 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Age Range - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Age Range" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", Age_Range_Type="' + ISNULL(Age_Range_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAR 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAR 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------
		
			
			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type 
			ORDER BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type) 'RowRank' 
			FROM 
				#QEAR)
			SELECT 
				* 
			INTO 
				#QEARDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEARDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Age Range'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type) 'RowRank' 
				FROM 
					#QEAR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Age Range - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', Age_Range_Type=' +  ISNULL(Age_Range_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEARDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEARDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEARDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAR ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAR Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QualificationElementAgeRange]
			MERGE [dbo].[QualificationElementAgeRange] AS [target]
			USING (SELECT * from #QEAR where [QualificationElementId] is not null and [Age_Range_Type] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[Age_Range_Type] = LTRIM(RTRIM(source.[Age_Range_Type])))
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[Age_Range_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[Age_Range_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAR', 'U') IS NOT NULL
				DROP TABLE #QEAR;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Age Range block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Age Range'
					
		END CATCH

		--------------------------------------------------------
		--------------------------------------------------------
		----- STEP 14: IMPORT QE Availability Maximum Mark -----
		--------------------------------------------------------
		--------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEA.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QEA.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				CN.value('(a2c:QEAvailabilityMaximumMark_ID/a2c:QE_Outcome_Value_Type/text())[1]','[nvarchar](max)') QE_Outcome_Value_Type,
				CN.value('(a2c:QE_Availability_Maximum_Mark/text())[1]','int') QE_Availability_Maximum_Mark,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEAMM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityGradeBoundary_DS/a2c:QEAvailabilityMaximumMark/a2c:QEAvailability') as QE(QEA)
				CROSS APPLY QE.QEA.nodes('a2c:QEAvailabilityMaximumMark_CN') as QEM(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAMM 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')='')
			BEGIN
				PRINT 'QE Availability Maximum Mark - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Availability Maximum Mark" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", QE_Outcome_Value_Type="' + ISNULL(QE_Outcome_Value_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMM 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAMM 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type 
			ORDER BY
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type) 'RowRank' 
			FROM 
				#QEAMM)
			SELECT 
				* 
			INTO 
				#QEAMMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAMMDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Maximum Mark'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type 
				ORDER BY
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type) 'RowRank' 
				FROM 
					#QEAMM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Maximum Mark - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QEA_Effective_Start_Date_Time=' + cast(QEA_Effective_Start_Date_Time as varchar)
					+ ', QE_Outcome_Value_Type=' +  ISNULL(QE_Outcome_Value_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAMMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAMM ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAMM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QEAvailabilityMaximumMark]
			MERGE [dbo].[QEAvailabilityMaximumMark] AS [target]
			USING (SELECT * from #QEAMM 
					where [QualificationElementId] is not null
					and DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) is not null
					and [QE_Outcome_Value_Type] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.QEA_Effective_Start_Date_Time) AND
				[target].[QE_Outcome_Value_Type] = LTRIM(RTRIM(source.[QE_Outcome_Value_Type])))
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Availability_Maximum_Mark] = source.[QE_Availability_Maximum_Mark],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEA_Effective_Start_Date_Time],
				[QE_Outcome_Value_Type],
				[QE_Availability_Maximum_Mark],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				DBO.FN_A2C_GETDATETIME(source.QEA_Effective_Start_Date_Time),
				LTRIM(RTRIM(source.[QE_Outcome_Value_Type])),
				source.[QE_Availability_Maximum_Mark],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMM', 'U') IS NOT NULL
				DROP TABLE #QEAMM;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Maximum Mark block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Maximum Mark'
					
		END CATCH

		-------------------------------------------------------------------------
		----- STEP 14.1: IMPORT QE Availability Maximum Mark Grade Boundary -----
		-------------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEA.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QEA.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				CN.value('(a2c:QEAvailabilityMaximumMark_ID/a2c:QE_Outcome_Value_Type/text())[1]','[nvarchar](max)') QE_Outcome_Value_Type,
				GB.value('(a2c:QEAMaxMarkGradeBoundary_ID/a2c:QE_Grade/text())[1]','[nvarchar](max)') QE_Grade,
				GB.value('(a2c:Grade_Boundary_Lower_Limit/text())[1]','int') Grade_Boundary_Lower_Limit,
				GB.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEMMGB	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityGradeBoundary_DS/a2c:QEAvailabilityMaximumMark/a2c:QEAvailability') as QE(QEA)
				CROSS APPLY QE.QEA.nodes('a2c:QEAvailabilityMaximumMark_CN') as QEM(CN)
				CROSS APPLY QEM.CN.nodes('a2c:QEAMaxMarkGradeBoundary') as QEMM(GB) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEMMGB 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')='')
			BEGIN
				PRINT 'QE Availability Maximum Mark Grade Boundary - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Availability Maximum Mark Grade Boundary" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", QE_Outcome_Value_Type="' + ISNULL(QE_Outcome_Value_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEMMGB 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEMMGB 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade 
			ORDER BY
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade) 'RowRank' 
			FROM 
				#QEMMGB)
			SELECT 
				* 
			INTO 
				#QEMMGBDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEMMGBDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Maximum Mark'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade 
				ORDER BY
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade) 'RowRank' 
				FROM 
					#QEMMGB)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Maximum Mark - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type
					+ ', QEA_Effective_Start_Date_Time=' + cast(QEA_Effective_Start_Date_Time as varchar)
					+ ', QE_Outcome_Value_Type=' +  QE_Outcome_Value_Type
					+ ', QE_Grade=' +  QE_Grade
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEMMGBDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEMMGBDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEMMGBDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEMMGB ADD [QualificationElementId] INT null, [QEAvailabilityMaximumMarkId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEMMGB Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and LTRIM(RTRIM(Q.[AO_Qualification_Element_Id]))=LTRIM(RTRIM(QE.[AO_Qualification_Element_Id])) 
				and LTRIM(RTRIM(Q.[Qualification_Element_Type]))=LTRIM(RTRIM(QE.[Qualification_Element_Type]))

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QEAvailabilityMaximumMarkId]=QE.[QEAvailabilityMaximumMarkId]
			from 
				#QEMMGB Q inner join [dbo].[QEAvailabilityMaximumMark] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId]=QE.[QualificationElementId]		
				and DBO.FN_A2C_GETDATETIME(Q.QEA_Effective_Start_Date_Time)=QE.QEA_Effective_Start_Date_Time
				and LTRIM(RTRIM(Q.[QE_Outcome_Value_Type]))=LTRIM(RTRIM(QE.[QE_Outcome_Value_Type]))

			--merge [QEAMaxMarkGradeBoundary]
			MERGE [dbo].[QEAMaxMarkGradeBoundary] AS [target]
			USING (SELECT * from #QEMMGB 
					where [QualificationElementId] is not null
					and [QEAvailabilityMaximumMarkId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityMaximumMarkId] = source.[QEAvailabilityMaximumMarkId] AND
				[target].[QE_Grade] = LTRIM(RTRIM(source.[QE_Grade])))
			WHEN MATCHED THEN 
			UPDATE SET
				[Grade_Boundary_Lower_Limit] = source.[Grade_Boundary_Lower_Limit],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityMaximumMarkId],
				[QE_Grade],
				[Grade_Boundary_Lower_Limit],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityMaximumMarkId],
				LTRIM(RTRIM(source.[QE_Grade])),
				source.[Grade_Boundary_Lower_Limit],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEMMGB', 'U') IS NOT NULL
				DROP TABLE #QEMMGB;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Maximum Mark Grade Boundary block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Maximum Mark Grade Boundary'
					
		END CATCH

		-------------------------------------------------------------------------
		----- STEP 14.1 finished ------------------------------------------------
		-------------------------------------------------------------------------

		--UPDATE IMPORT STATUS
		IF @IsError=1
		BEGIN
			PRINT 'Exiting with error'
			--update import status
			UPDATE 
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
			SET 
				DATAIMPORTSTATUS = 2
			WHERE
				AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId

		END
		ELSE
		BEGIN
			--NO ERROR ENCOUNTERED
			--UPDATE SUCESS STATUS
			UPDATE 
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
			SET 
				DATAIMPORTSTATUS = 1
			WHERE
				AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND				
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId	
			
			-- Insert success Feedback message
			EXEC usp_Insert_A2CFeedbackMessages  @A2CTransactionResponseEnvelopeMessageId,@SchoolID, @AwardingOrganisationCentreId, '0001', 1, 'Message successfully processed',1

			PRINT 'Exiting with success'	
		END

	END TRY
	BEGIN CATCH

		PRINT 'Exception in Main block/Common area'
		
		IF @ScreenMasterId=0 OR @SchoolID=0 OR @AwardingOrganisationCentreId=0--REQUIRED TO LOG ERROR IN ERROR TABLE, SO CANT LOG ERROR
		BEGIN
			PRINT ERROR_NUMBER() 		
			PRINT ERROR_LINE() 
			PRINT ERROR_MESSAGE()			
		END
		ELSE
		BEGIN
			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId,
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, 
				@MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Main block/Common area'			
		END

		--update import status
		UPDATE 
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
		SET 
			DATAIMPORTSTATUS = 2
		WHERE
			AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId

		PRINT 'Exiting with error from Main block/Common area'

	END CATCH;
END
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]...';


GO
ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]
@A2CSchoolId int,
@AwardingOrganisationDetailId int,
@CentreId int,
@A2CTransactionResponseEnvelopeId int,
@MessageId nvarchar(50),
@RefMessageId nvarchar(50)=null,
@TimeStamp datetime,
@TransactionName nvarchar(100)=null,
@IncomingSequence bigint=null,
@data varbinary(max),
@IsFeedbackMessage  bit,
@AwardingOrganisationCentreId int,
@AwardingOrganisationNumber nvarchar(200),
@CentreNumber nvarchar(200),
@IsMessageLevelFeedbackMessage bit,
@A2CTransactionRequestId int,
@DataImportStatus int,
@IsRedCodeFeedback bit
AS
BEGIN
	DECLARE @A2CTransactionMasterId INT
	Declare @MessageAwardingOrganisationCentreId int
	EXEC @A2CTransactionMasterId= [usp_Select_A2CTransactionMasters_IdByName] @TransactionName
	Declare @A2CMessageId int

	Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
	inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
	inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
	where 
	aoc.A2CSchoolId=@A2CSchoolId and
	c.CentreNumber=@CentreNumber and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
	and ad.AONumber=@AwardingOrganisationNumber

	If @MessageAwardingOrganisationCentreId is null
	begin
		Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
		inner join AwardingOrganisationAOAssignedCentres aoassign on aoassign.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		and aoassign.A2CSchoolId=aoc.A2CSchoolId
		where 
		aoc.A2CSchoolId=@A2CSchoolId 
		and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
		and aoassign.AOAssignCentreNumber=@CentreNumber
		and ad.AONumber=@AwardingOrganisationNumber
	end
	
	if @IncomingSequence=0
	begin
		set @IncomingSequence=null
	end
	Insert into A2CTransactionResponseEnvelopeMessages (SchoolId,A2CTransactionResponseEnvelopeId,MessageId,RefMessageId,[TimeStamp],A2CTransactionMasterId,IncomingSequence,[data],IsFeedbackMessage,A2CMessageId,AwardingOrganisationCentreId,MessageAwardingOrganisationCentreId,IsMessageLevelFeedbackMessage,DataImportStatus,IsRedCodeFeedback)
	values(@A2CSchoolId,@A2CTransactionResponseEnvelopeId,@MessageId,@RefMessageId,@TimeStamp,@A2CTransactionMasterId,@IncomingSequence,@data,@IsFeedbackMessage,@A2CMessageId,@AwardingOrganisationCentreId,@MessageAwardingOrganisationCentreId,@IsMessageLevelFeedbackMessage,@DataImportStatus,@IsRedCodeFeedback)
	select cast(SCOPE_IdENTITY() as int)

	declare @MaxSequenceLimit bigint
	declare @IncomingSequencePresent bigint=0
	set @MaxSequenceLimit=4294967295 
	select @IncomingSequencePresent = isnull(IncomingSequence,0)
	from AwardingOrganisationCentres
	where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId	

	if @IncomingSequence is not null and @IncomingSequence>0 and @MessageAwardingOrganisationCentreId>0
		begin	
				if @IncomingSequence=1 and @MaxSequenceLimit=@IncomingSequencePresent
				begin
						--print 'update'	
						update AwardingOrganisationCentres
						set IncomingSequence=@IncomingSequence
						where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId
				end
				else
				begin
					--print 'innn'
					declare @OutSequence bigint
					set @OutSequence=@IncomingSequence	
					if not exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId and SequenceNumber<@OutSequence)
					and (@OutSequence - 1 = @IncomingSequencePresent)
					begin
					--print 'innn111'
						while exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  and SequenceNumber= @OutSequence + 1)
						begin
							---print 'delete' + cast(@OutSequence + 1 as varchar(max))
							delete from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  and SequenceNumber= @OutSequence + 1			
			
							update A2CTransactionResponseEnvelopeMessages set DataImportStatus=0 where 			
							SchoolId=@A2CSchoolId and AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  
							and DataImportStatus=-1 and IncomingSequence=@OutSequence+ 1	

							set @OutSequence= @OutSequence+ 1	
						end
					end

					if not exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId and
						SequenceNumber<=@OutSequence)
					begin	
						--print 'insertupdate'
						if @OutSequence>@IncomingSequence or @IncomingSequencePresent + 1 = @IncomingSequence 
						begin
								--print 'update'	
								update AwardingOrganisationCentres
								set IncomingSequence=@OutSequence
								where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId
						end
					end
	
					if @OutSequence<=@IncomingSequence and @IncomingSequence > @IncomingSequencePresent + 1 
					begin
						--print 'insertoutsequence'	

						if not exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId and
						SequenceNumber=@IncomingSequence)
						begin		
							insert into OutSequence(AwardingOrganisationCentreId,SequenceNumber)
							select @MessageAwardingOrganisationCentreId,@IncomingSequence							
						end		
							update A2CTransactionResponseEnvelopeMessages set DataImportStatus=-1 where 			
							SchoolId=@A2CSchoolId and AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  
							and DataImportStatus=0 and IncomingSequence=@IncomingSequence
					end	
			end
	end

	update A2CTransactionRequests set CentreNumber=@CentreNumber where A2CTransactionRequestId=@A2CTransactionRequestId
	and SchoolId=@A2CSchoolId

	END
GO
PRINT N'Altering [dbo].[usp_Select_AwardingOrganisationCentresByIdList]...';


GO

ALTER PROCEDURE [dbo].[usp_Select_AwardingOrganisationCentresByIdList]
(
@AwardingOrganisationCentreIdList ListInt readonly,
@SchoolId int
)
AS
SELECT 

AOC.AwardingOrganisationCentreId,
    AOCCer.AOCentreCertificate,
	AOCCer.CertificatePassword,
	AOAssign.AOAssignCentreNumber,
	C.CentreNumber,
	A.Name as AOName,
	A.EndPoint	,
	AOD.AONumber
  FROM [dbo].[AwardingOrganisationCentres] AOC
  Inner Join AwardingOrganisationDetails AOD on AOC.AwardingOrganisationDetailId=AOD.AwardingOrganisationDetailId
  Inner Join AwardingOrganisations A on A.AwardingOrganisationId=AOD.AwardingOrganisationId
  Inner Join AwardingOrganisationCertificates AOCCer on AOCCer.AwardingOrganisationId=AOD.AwardingOrganisationId
  Inner Join AwardingOrganisationCentreCertificates AOCC on
  AOCCer.AwardingOrganisationCertificateId = AOCC.AwardingOrganisationCertificateId
  AND AOCC.AwardingOrganisationCentreId=AOC.AwardingOrganisationCentreId    
  Inner Join Centres c on AOC.CentreId=C.CentreId and AOC.A2CSchoolId=C.A2CSchoolId  
  Left Join AwardingOrganisationAOAssignedCentres AOAssign on AOAssign.A2CSchoolId=AOC.A2CSchoolId
  and AOAssign.AwardingOrganisationDetailId=AOC.AwardingOrganisationDetailId AND AOAssign.CentreId=AOC.CentreId
  Inner Join @AwardingOrganisationCentreIdList lst on AOC.AwardingOrganisationCentreId=lst.ID
  where aoc.A2CSchoolId=@SchoolId
GO
PRINT N'Altering [dbo].[usp_SelectA2CTransactionLog]...';


GO
ALTER PROCEDURE [dbo].[usp_SelectA2CTransactionLog]
@SchoolId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[TransactionDate] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
	@Take int = (@PageNumber * @PageSize),
	@WhereClause nvarchar(max) = '[SchoolId] = ' + cast(@SchoolId as nvarchar(10)) +
								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end


SET @TotalCount = 0;
	
	
	 Declare @CountQuery as nvarchar(max)
	 Declare @CountQuery1 as nvarchar(max)
	 Declare @CountQueryFinal as nvarchar(max)

	set @CountQuery = 'Select @TotalCountOut = Count(1) from
	(
select at.SchoolId,at.A2CTransactionId,are.A2CTransactionRequestId,atm.A2CTransactionMessageId,case when are.A2CTransactionRequestId is not null then are.CentreNumber 
else at.CentreNumber end as CentreNumber,case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then adEDI.AONumber + '' '' + aoEDI.Name 
when arpem.A2CTransactionResponseEnvelopeMessageId is not null then adMessage.AONumber + '' '' + aoMessage.Name 
else ad.AONumber + '' '' + ao.Name end as AwardingOrganisation,at.LastModifiedDate TransactionDate,
case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then  arpeetrMaster.TransactionName
when arpem.A2CTransactionResponseEnvelopeMessageId is not null then  arpemtrMaster.TransactionName
else am.TransactionName  end as TransactionName,
case when arpem.A2CTransactionResponseEnvelopeMessageId is not null then arpem.MessageId else atm.A2CMessageGuid end as MessageGuid,
case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then arpee.FileName
else atedi.FileName end as FileName,
case when arpem.A2CTransactionResponseEnvelopeMessageId is not null then arpem.IncomingSequence
else  atm.OutgoingSequence end as Sequence,
arpem.A2CTransactionResponseEnvelopeMessageId,
srm.SignalResponseText
from A2CTransactions at inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId
inner join AwardingOrganisationCentres aoc on at.SchoolId=aoc.A2CSchoolId and at.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
inner join AwardingOrganisations ao on ao.AwardingOrganisationId=ad.AwardingOrganisationId
left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 
left join A2CTransactionResponses arp on are.SchoolId=arp.SchoolId and are.A2CTransactionRequestId=arp.A2CTransactionRequestId
left join A2CTransactionResponseEnvelopes arpe on arpe.SchoolId=arp.SchoolId and arpe.A2CTransactionResponseId=arp.A2CTransactionResponseId
left join A2CTransactionResponseEnvelopeMessages arpem on arpe.SchoolId=arpem.SchoolId and arpe.A2CTransactionResponseEnvelopeId=arpem.A2CTransactionResponseEnvelopeId
left join A2CTransactionResponseEnvelopeSignals ares on arpe.SchoolId = ares.SchoolId and arpe.A2CTransactionResponseEnvelopeId = ares.A2CTransactionResponseEnvelopeId
left join SignalResponseMasters srm on ares.SignalResponseMasterId =  srm.SignalResponseMasterId
left join AwardingOrganisationCentres aocMessage on arpem.SchoolId=aocMessage.A2CSchoolId and arpem.MessageAwardingOrganisationCentreId=aocMessage.AwardingOrganisationCentreId
left join AwardingOrganisationDetails adMessage on aocMessage.AwardingOrganisationDetailId=adMessage.AwardingOrganisationDetailId
left join AwardingOrganisations aoMessage on aoMessage.AwardingOrganisationId=adMessage.AwardingOrganisationId
left join A2CTransactionMasters arpemtrMaster on arpemtrMaster.A2CTransactionMasterId = arpem.A2CTransactionMasterId
left join A2CTransactionResponseEnvelopeEDIs arpee on arpee.SchoolId=arpe.SchoolId and arpee.A2CTransactionResponseEnvelopeId=arpe.A2CTransactionResponseEnvelopeId
left join A2CTransactionMasters arpeetrMaster on arpeetrMaster.A2CTransactionMasterId = arpee.A2CTransactionMasterId
left join AwardingOrganisationCentres aocEDI on arpee.SchoolId=aocEDI.A2CSchoolId and arpee.MessageAwardingOrganisationCentreId=aocEDI.AwardingOrganisationCentreId
left join AwardingOrganisationDetails adEDI on aocEDI.AwardingOrganisationDetailId=adEDI.AwardingOrganisationDetailId 
left join AwardingOrganisations aoEDI on aoEDI.AwardingOrganisationId=adEDI.AwardingOrganisationId
) t '

set @CountQuery1= 'Where ' + @WhereClause
	 
set @CountQueryFinal=@CountQuery + ' ' + @CountQuery1	 
	 
set @CountQueryFinal=@CountQuery + ' ' + @CountQuery1	 


	 Declare @ListQuery as nvarchar(max)
	 Declare @ListQuery1 as nvarchar(max)
	
	--print 'ttt1'
	Set @ListQuery=
	'select SchoolId, A2CTransactionId, A2CTransactionRequestId,A2CTransactionMessageId, CentreNumber,AwardingOrganisation,TransactionDate,TransactionName,MessageGuid,FileName,Sequence,RN,
	CASE Transactionname
		WHEN ''ProcessRequestProductCatalogue'' THEN
			ISNULL(SignalResponseText, ''RPC'')
		ELSE	
			CAST(A2CTransactionResponseEnvelopeMessageId AS nvarchar(500))
	END AS Feedback, IsFeedbackMessage,IsRedCodeFeedback from 
(select SchoolId, A2CTransactionId, A2CTransactionRequestId,A2CTransactionMessageId, CentreNumber,AwardingOrganisation,TransactionDate,TransactionName,MessageGuid,FileName,Sequence ,
A2CTransactionResponseEnvelopeMessageId, IsFeedbackMessage,IsRedCodeFeedback,SignalResponseText,ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
from (select at.SchoolId,at.A2CTransactionId,are.A2CTransactionRequestId,atm.A2CTransactionMessageId,case when are.A2CTransactionRequestId is not null then are.CentreNumber 
else at.CentreNumber end as CentreNumber,case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then adEDI.AONumber + '' '' + aoEDI.Name 
when arpem.A2CTransactionResponseEnvelopeMessageId is not null then adMessage.AONumber + '' '' + aoMessage.Name 
else ad.AONumber + '' '' + ao.Name end as AwardingOrganisation,
at.LastModifiedDate TransactionDate,
case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then  arpeetrMaster.TransactionName
when arpem.A2CTransactionResponseEnvelopeMessageId is not null then  arpemtrMaster.TransactionName
else am.TransactionName  end as TransactionName,
case when arpem.A2CTransactionResponseEnvelopeMessageId is not null then arpem.MessageId else atm.A2CMessageGuid end as MessageGuid,
case when arpee.A2CTransactionResponseEnvelopeEDIId is not null then arpee.FileName
else atedi.FileName end as FileName,
case when arpem.A2CTransactionResponseEnvelopeMessageId is not null then arpem.IncomingSequence
else  atm.OutgoingSequence end as Sequence,
arpem.A2CTransactionResponseEnvelopeMessageId,arpem.IsFeedbackMessage,arpem.IsRedCodeFeedback,
srm.SignalResponseText'
SET @ListQuery1 = 'from A2CTransactions at inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId
inner join AwardingOrganisationCentres aoc on at.SchoolId=aoc.A2CSchoolId and at.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
inner join AwardingOrganisations ao on ao.AwardingOrganisationId=ad.AwardingOrganisationId
left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 
left join A2CTransactionResponses arp on are.SchoolId=arp.SchoolId and are.A2CTransactionRequestId=arp.A2CTransactionRequestId
left join A2CTransactionResponseEnvelopes arpe on arpe.SchoolId=arp.SchoolId and arpe.A2CTransactionResponseId=arp.A2CTransactionResponseId
left join A2CTransactionResponseEnvelopeMessages arpem on arpe.SchoolId=arpem.SchoolId and arpe.A2CTransactionResponseEnvelopeId=arpem.A2CTransactionResponseEnvelopeId
left join A2CTransactionResponseEnvelopeSignals ares on arpe.SchoolId = ares.SchoolId and arpe.A2CTransactionResponseEnvelopeId = ares.A2CTransactionResponseEnvelopeId
left join SignalResponseMasters srm on ares.SignalResponseMasterId =  srm.SignalResponseMasterId
left join AwardingOrganisationCentres aocMessage on arpem.SchoolId=aocMessage.A2CSchoolId and arpem.MessageAwardingOrganisationCentreId=aocMessage.AwardingOrganisationCentreId
left join AwardingOrganisationDetails adMessage on aocMessage.AwardingOrganisationDetailId=adMessage.AwardingOrganisationDetailId
left join AwardingOrganisations aoMessage on aoMessage.AwardingOrganisationId=adMessage.AwardingOrganisationId
left join A2CTransactionMasters arpemtrMaster on arpemtrMaster.A2CTransactionMasterId = arpem.A2CTransactionMasterId
left join A2CTransactionResponseEnvelopeEDIs arpee on arpee.SchoolId=arpe.SchoolId and arpee.A2CTransactionResponseEnvelopeId=arpe.A2CTransactionResponseEnvelopeId
left join A2CTransactionMasters arpeetrMaster on arpeetrMaster.A2CTransactionMasterId = arpee.A2CTransactionMasterId
left join AwardingOrganisationCentres aocEDI on arpee.SchoolId=aocEDI.A2CSchoolId and arpee.MessageAwardingOrganisationCentreId=aocEDI.AwardingOrganisationCentreId
left join AwardingOrganisationDetails adEDI on aocEDI.AwardingOrganisationDetailId=adEDI.AwardingOrganisationDetailId 
left join AwardingOrganisations aoEDI on aoEDI.AwardingOrganisationId=adEDI.AwardingOrganisationId
) t where ' + @WhereClause + 
') t1 where t1.RN between @Skip AND @Take'
    --print @ListQuery
	--print 'ttt2'
	
	DECLARE @ListQueryFinal AS NVARCHAR(MAX)
	SET @ListQueryFinal = @ListQuery + ' ' + @ListQuery1
	--print @CountQuery
	--print @ListQuery1
	EXECUTE sp_executesql	@CountQueryFinal, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQueryFinal, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take


END
GO
PRINT N'Altering [dbo].[usp_SelectA2CTransactionToResend]...';


GO



ALTER Procedure [dbo].[usp_SelectA2CTransactionToResend]
(
@ListA2CTransactionRequestsId ListInt readonly,
@SchoolId int
)
as
begin

		select at.AwardingOrganisationCentreId,at.SchoolId, are.CentreNumber,am.TransactionName, 
		atm.OutgoingSequence,atm.A2CMessageGuid,atedi.FileName
		,are.Envelope, are.A2CTransactionRequestId,
		at.CentreNumber as PreviousCentreNumber
		from A2CTransactions at 
		inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId		
		inner join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 						
		inner join @ListA2CTransactionRequestsId list on list.ID=are.A2CTransactionRequestId
		and are.SchoolId=@SchoolId
		left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
		left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
		order by AwardingOrganisationCentreId,OutgoingSequence,at.LastModifiedDate

end
GO
PRINT N'Altering [dbo].[usp_SelectSuccessTransactionLog]...';


GO



--usp_SelectSuccessTransactionLog 1000,1, '[LastModifiedDate] desc','',1,20

ALTER PROCEDURE [dbo].[usp_SelectSuccessTransactionLog]
@SchoolId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[LastModifiedDate] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


SET @TotalCount = 0;
Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
@Take int = (@PageNumber * @PageSize),
@WhereClause nvarchar(max) = '[SchoolId] = ' + cast(@SchoolId as nvarchar(10)) 
							+ case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
							else ' and ' + @GridWhereClause end


SET @TotalCount = 0;
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(select are.CentreNumber,  ad.AONumber + '' '' + ao.Name as AwardingOrganisation, atm.OutgoingSequence,at.LastModifiedDate,am.TransactionName,atedi.FileName,atm.A2CMessageGuid
		,are.A2CTransactionRequestId,at.SchoolId
		from A2CTransactions at inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId
		inner join AwardingOrganisationCentres aoc on at.SchoolId=aoc.A2CSchoolId and at.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join AwardingOrganisations ao on ao.AwardingOrganisationId=ad.AwardingOrganisationId
		inner join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 
		inner join A2CTransactionResponses arp on are.SchoolId=arp.SchoolId and are.A2CTransactionRequestId=arp.A2CTransactionRequestId
		inner join A2CTransactionResponseEnvelopes arpe on arpe.SchoolId=arp.SchoolId and arpe.A2CTransactionResponseId=arp.A2CTransactionResponseId
		inner join A2CTransactionResponseEnvelopeSignals ares on arpe.SchoolId = ares.SchoolId and arpe.A2CTransactionResponseEnvelopeId = ares.A2CTransactionResponseEnvelopeId
		inner join SignalResponseMasters srm on ares.SignalResponseMasterId =  srm.SignalResponseMasterId
		left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
		left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
		where 
		am.TransactionName not in (''PullRequest'', ''Ping'')
		and srm.SignalResponseMasterId=1000		
	) p
		 Where ' + @WhereClause
	 
	

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'Select CentreNumber,AwardingOrganisation,OutgoingSequence,LastModifiedDate,TransactionName,FileName,A2CMessageGuid
		 ,A2CTransactionRequestId,SchoolId,AwardingOrganisationCentreId,RN
	 from (Select CentreNumber,AwardingOrganisation,OutgoingSequence,LastModifiedDate,TransactionName,FileName,A2CMessageGuid
		 ,A2CTransactionRequestId,SchoolId,AwardingOrganisationCentreId,
		 ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	 from 
		(select are.CentreNumber,  ad.AONumber + '' '' + ao.Name as AwardingOrganisation, atm.OutgoingSequence,at.LastModifiedDate,am.TransactionName,atedi.FileName,atm.A2CMessageGuid
		,are.A2CTransactionRequestId,at.SchoolId, aoc.AwardingOrganisationCentreId
		from A2CTransactions at inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId
		inner join AwardingOrganisationCentres aoc on at.SchoolId=aoc.A2CSchoolId and at.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join AwardingOrganisations ao on ao.AwardingOrganisationId=ad.AwardingOrganisationId
		inner join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 
		inner join A2CTransactionResponses arp on are.SchoolId=arp.SchoolId and are.A2CTransactionRequestId=arp.A2CTransactionRequestId
		inner join A2CTransactionResponseEnvelopes arpe on arpe.SchoolId=arp.SchoolId and arpe.A2CTransactionResponseId=arp.A2CTransactionResponseId
		inner join A2CTransactionResponseEnvelopeSignals ares on arpe.SchoolId = ares.SchoolId and arpe.A2CTransactionResponseEnvelopeId = ares.A2CTransactionResponseEnvelopeId
		inner join SignalResponseMasters srm on ares.SignalResponseMasterId =  srm.SignalResponseMasterId
		left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
		left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
		where 
		am.TransactionName not in (''PullRequest'', ''Ping'')
		and srm.SignalResponseMasterId=1000
		) p
		Where ' + @WhereClause
	 + ') p2 where p2.[RN] BETWEEN @Skip AND @Take'
	 --print @CountQuery
	--print @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	print @TotalCount

END
GO
PRINT N'Creating [dbo].[usp_EDINotification]...';


GO

CREATE PROCEDURE [dbo].[usp_EDINotification]
@SchoolId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[TransactionDate] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
	@Take int = (@PageNumber * @PageSize),
	@WhereClause nvarchar(max) = 'TransactionName IN (''E'',''A'',''M'',''F'',''R'') AND [SchoolId] = ' + cast(@SchoolId as nvarchar(10)) +
								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end


SET @TotalCount = 0;
	
	

	declare @CountQuery as nvarchar(max) = 'Select @TotalCountOut = Count(1) from
	(
SELECT at.SchoolId,at.A2CTransactionId,
				CASE WHEN are.A2CTransactionRequestId IS NOT NULL THEN are.CentreNumber ELSE at.CentreNumber END AS CentreNumber,
				CASE WHEN arpee.A2CTransactionResponseEnvelopeEDIId IS NOT NULL THEN AOCEDI.AONumberName 
					 WHEN arpem.A2CTransactionResponseEnvelopeMessageId IS NOT NULL THEN AOCMessage.AONumberName
					 ELSE AOCD.AONumberName END AS AwardingOrganisation, at.LastModifiedDate TransactionDate,
				CASE WHEN arpee.A2CTransactionResponseEnvelopeEDIId IS NOT NULL THEN arpeetrMaster.TransactionName
					 WHEN arpem.A2CTransactionResponseEnvelopeMessageId IS NOT NULL THEN arpemtrMaster.TransactionName
					 ELSE am.TransactionName END AS TransactionName,
				CASE WHEN arpee.A2CTransactionResponseEnvelopeEDIId IS NOT NULL THEN arpee.FileName ELSE atedi.FileName END AS FileName, 
				are.A2CTransactionRequestId,arpee.A2CTransactionResponseEnvelopeEDIId,
				ERR.ErrorDescription as TransactionError,RESERR.ErrorDescription AS ResponseError ,SERR.Description SignalError
FROM A2CTransactions AT WITH (NOLOCK)
INNER JOIN A2CTransactionMasters AM WITH (NOLOCK) ON AT.A2CTransactionMasterId=AM.A2CTransactionMasterId
INNER JOIN vw_AOCentreDetails AOCD ON AT.SchoolId = AOCD.A2CSchoolId AND AT.AwardingOrganisationCentreId = AOCD.AwardingOrganisationCentreId
LEFT JOIN A2CTransactionErrors ERR WITH (NOLOCK) ON at.SchoolId = ERR.SchoolId AND at.A2CTransactionId = ERR.A2CTransactionId
left join A2CTransactionMessages atm  WITH (NOLOCK)on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionEDIs atedi  WITH (NOLOCK)on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionRequests are  WITH (NOLOCK)on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 
left join A2CTransactionResponses arp WITH (NOLOCK) on are.SchoolId=arp.SchoolId and are.A2CTransactionRequestId=arp.A2CTransactionRequestId
LEFT JOIN A2CTransactionResponseErrors RESERR WITH (NOLOCK) ON arp.SchoolId = RESERR.SchoolId AND arp.A2CTransactionResponseId = RESERR.A2CTransactionResponseId
left join A2CTransactionResponseEnvelopes arpe WITH (NOLOCK) on arpe.SchoolId=arp.SchoolId and arpe.A2CTransactionResponseId=arp.A2CTransactionResponseId
left join A2CTransactionResponseEnvelopeMessages arpem WITH (NOLOCK) on arpe.SchoolId=arpem.SchoolId and arpe.A2CTransactionResponseEnvelopeId=arpem.A2CTransactionResponseEnvelopeId
left join A2CTransactionResponseEnvelopeSignals ares WITH (NOLOCK) on arpe.SchoolId = ares.SchoolId and arpe.A2CTransactionResponseEnvelopeId = ares.A2CTransactionResponseEnvelopeId
LEFT JOIN A2CTransactionResponseEnvelopeSignalErrors SERR WITH (NOLOCK) ON ares.SchoolId = SERR.SchoolId AND ares.A2CTransactionResponseEnvelopeSignalId = SERR.A2CTransactionResponseEnvelopeSignalId
left join SignalResponseMasters srm WITH (NOLOCK) on ares.SignalResponseMasterId =  srm.SignalResponseMasterId
LEFT JOIN vw_AOCentreDetails AOCMessage ON arpem.SchoolId=AOCMessage.A2CSchoolId and arpem.MessageAwardingOrganisationCentreId=AOCMessage.AwardingOrganisationCentreId
left join A2CTransactionMasters arpemtrMaster WITH (NOLOCK) on arpemtrMaster.A2CTransactionMasterId = arpem.A2CTransactionMasterId
left join A2CTransactionResponseEnvelopeEDIs arpee WITH (NOLOCK) on arpee.SchoolId=arpe.SchoolId and arpee.A2CTransactionResponseEnvelopeId=arpe.A2CTransactionResponseEnvelopeId
left join A2CTransactionMasters arpeetrMaster WITH (NOLOCK) on arpeetrMaster.A2CTransactionMasterId = arpee.A2CTransactionMasterId
LEFT JOIN vw_AOCentreDetails AOCEDI ON arpee.SchoolId=AOCEDI.A2CSchoolId and arpee.MessageAwardingOrganisationCentreId=AOCEDI.AwardingOrganisationCentreId
) t
Where ' + @WhereClause
	 
	 

	 Declare @ListQuery as nvarchar(max)
	 Declare @ListQuery1 as nvarchar(max)
	
	--print 'ttt1'
	Set @ListQuery=
	'SELECT SchoolId,A2CTransactionId,CentreNumber,AwardingOrganisation,TransactionDate,TransactionName,FileName,A2CTransactionRequestId,A2CTransactionResponseEnvelopeEDIId,TransactionError,ResponseError,SignalError,TransactionResponseStatus,RN 
FROM (SELECT SchoolId,A2CTransactionId,CentreNumber,AwardingOrganisation,TransactionDate,TransactionName,FileName,A2CTransactionRequestId,A2CTransactionResponseEnvelopeEDIId,
		TransactionError,ResponseError,SignalError,TransactionResponseStatus,
		ROW_NUMBER() OVER (ORDER BY [TransactionDate] desc) AS RN
		FROM (SELECT at.SchoolId,at.A2CTransactionId,
				CASE WHEN are.A2CTransactionRequestId IS NOT NULL THEN are.CentreNumber ELSE at.CentreNumber END AS CentreNumber,
				CASE WHEN arpee.A2CTransactionResponseEnvelopeEDIId IS NOT NULL THEN AOCEDI.AONumberName 
					 WHEN arpem.A2CTransactionResponseEnvelopeMessageId IS NOT NULL THEN AOCMessage.AONumberName
					 ELSE AOCD.AONumberName END AS AwardingOrganisation, at.LastModifiedDate TransactionDate,
				CASE WHEN arpee.A2CTransactionResponseEnvelopeEDIId IS NOT NULL THEN arpeetrMaster.TransactionName
					 WHEN arpem.A2CTransactionResponseEnvelopeMessageId IS NOT NULL THEN arpemtrMaster.TransactionName
					 ELSE am.TransactionName END AS TransactionName,
				CASE WHEN arpee.A2CTransactionResponseEnvelopeEDIId IS NOT NULL THEN arpee.FileName ELSE atedi.FileName END AS FileName, 
				are.A2CTransactionRequestId,arpee.A2CTransactionResponseEnvelopeEDIId,
				ERR.ErrorDescription as TransactionError,RESERR.ErrorDescription AS ResponseError ,SERR.Description SignalError,arp.TransactionResponseStatus'
SET @ListQuery1 = 'FROM A2CTransactions AT WITH (NOLOCK)
INNER JOIN A2CTransactionMasters AM WITH (NOLOCK) ON AT.A2CTransactionMasterId=AM.A2CTransactionMasterId
INNER JOIN vw_AOCentreDetails AOCD ON AT.SchoolId = AOCD.A2CSchoolId AND AT.AwardingOrganisationCentreId = AOCD.AwardingOrganisationCentreId
LEFT JOIN A2CTransactionErrors ERR WITH (NOLOCK) ON at.SchoolId = ERR.SchoolId AND at.A2CTransactionId = ERR.A2CTransactionId
left join A2CTransactionMessages atm  WITH (NOLOCK)on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionEDIs atedi  WITH (NOLOCK)on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
left join A2CTransactionRequests are  WITH (NOLOCK)on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 
left join A2CTransactionResponses arp WITH (NOLOCK) on are.SchoolId=arp.SchoolId and are.A2CTransactionRequestId=arp.A2CTransactionRequestId
LEFT JOIN A2CTransactionResponseErrors RESERR WITH (NOLOCK) ON arp.SchoolId = RESERR.SchoolId AND arp.A2CTransactionResponseId = RESERR.A2CTransactionResponseId
left join A2CTransactionResponseEnvelopes arpe WITH (NOLOCK) on arpe.SchoolId=arp.SchoolId and arpe.A2CTransactionResponseId=arp.A2CTransactionResponseId
left join A2CTransactionResponseEnvelopeMessages arpem WITH (NOLOCK) on arpe.SchoolId=arpem.SchoolId and arpe.A2CTransactionResponseEnvelopeId=arpem.A2CTransactionResponseEnvelopeId
left join A2CTransactionResponseEnvelopeSignals ares WITH (NOLOCK) on arpe.SchoolId = ares.SchoolId and arpe.A2CTransactionResponseEnvelopeId = ares.A2CTransactionResponseEnvelopeId
LEFT JOIN A2CTransactionResponseEnvelopeSignalErrors SERR WITH (NOLOCK) ON ares.SchoolId = SERR.SchoolId AND ares.A2CTransactionResponseEnvelopeSignalId = SERR.A2CTransactionResponseEnvelopeSignalId
left join SignalResponseMasters srm WITH (NOLOCK) on ares.SignalResponseMasterId =  srm.SignalResponseMasterId
LEFT JOIN vw_AOCentreDetails AOCMessage ON arpem.SchoolId=AOCMessage.A2CSchoolId and arpem.MessageAwardingOrganisationCentreId=AOCMessage.AwardingOrganisationCentreId
left join A2CTransactionMasters arpemtrMaster WITH (NOLOCK) on arpemtrMaster.A2CTransactionMasterId = arpem.A2CTransactionMasterId
left join A2CTransactionResponseEnvelopeEDIs arpee WITH (NOLOCK) on arpee.SchoolId=arpe.SchoolId and arpee.A2CTransactionResponseEnvelopeId=arpe.A2CTransactionResponseEnvelopeId
left join A2CTransactionMasters arpeetrMaster WITH (NOLOCK) on arpeetrMaster.A2CTransactionMasterId = arpee.A2CTransactionMasterId
LEFT JOIN vw_AOCentreDetails AOCEDI ON arpee.SchoolId=AOCEDI.A2CSchoolId and arpee.MessageAwardingOrganisationCentreId=AOCEDI.AwardingOrganisationCentreId
) t where ' + @WhereClause + 
') t1 where t1.RN between @Skip AND @Take'
    --print @ListQuery
	--print 'ttt2'
	
	DECLARE @ListQueryFinal AS NVARCHAR(MAX)
	SET @ListQueryFinal = @ListQuery + ' ' + @ListQuery1
	--print @ListQuery
	--print @ListQuery1
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQueryFinal, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take


END
GO
PRINT N'Creating [dbo].[usp_SelectEnvelopeByTransactionRequestIdAndTransactionMessageId]...';


GO
CREATE Procedure [dbo].[usp_SelectEnvelopeByTransactionRequestIdAndTransactionMessageId]
(
@SchoolId int,
@A2CTransactionRequestId int,
@A2CTransactionMessageId int
)
as
begin
select ar.envelope from dbo.A2CTransactionRequests ar
	inner join dbo.A2CTransactionMessages am on ar.SchoolId=am.SchoolId and ar.A2CTransactionId=am.A2CTransactionId
where ar.SchoolId=@SchoolId 
	and ar.A2CTransactionRequestId  = @A2CTransactionRequestId 
	and am.A2CTransactionMessageId=@A2CTransactionMessageId
end
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.10.1';


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeMessages].[IsRedCodeFeedback].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'feedback column should be displayed in red when the message has a feedback code : 0002, 0003, 0004, 0005, 0006, 0007, 0008, 0009, 0010, 0016, 0017, 0019, 0202', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CTransactionResponseEnvelopeMessages', @level2type = N'COLUMN', @level2name = N'IsRedCodeFeedback';


GO
PRINT N'Refreshing [DBO].[usp_CheckIncomingSequenceAlreadyUsed]...';


GO
EXECUTE sp_refreshsqlmodule N'[DBO].[usp_CheckIncomingSequenceAlreadyUsed]';


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessages]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessages]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessagesFeedBack]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopeMessagesFeedBack]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopes]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedA2CTransactionResponseEnvelopes]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_GetXMLFeedbackForResponseEnvelopeMessage]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetXMLFeedbackForResponseEnvelopeMessage]';


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedMessages]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedMessages]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing [dbo].[usp_DeleteBackDatedFeedbacks]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteBackDatedFeedbacks]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO


Insert into ScreenMasters(ScreenMasterId, ScreenName,ScreenDescription)
Select	temp.ScreenMasterId, temp.ScreenName,temp.ScreenDescription
From	(Select 1025 ScreenMasterId, 'ViewAndResend' ScreenName,'View and Resend Messages' ScreenDescription) As temp
		Left Join ScreenMasters sm 
		on temp.ScreenMasterId = sm.ScreenMasterId
Where sm.ScreenMasterId is null
GO

GO
PRINT N'Update complete.';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

USE [msdb]
GO

DECLARE @Owner VARCHAR(200)   --Job Owner
DECLARE @DBName VARCHAR(200)  --Database Name
SET @Owner = '$(UserName)'
SET @DBName = '$(DatabaseName)'


/****** Object:  Job [UnlockActiveUsers]    Script Date: 02-07-2015 13:52:19 ******/
IF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = N'DeleteBackDatedMessageFeedbackTransaction')
	EXEC msdb.dbo.sp_delete_job @job_name=N'DeleteBackDatedMessageFeedbackTransaction', @delete_unused_schedule=1



/****** Object:  Job [DeleteBackDatedMessageFeedbackTransaction]    Script Date: 13-10-2015 09:18:14 ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [[Uncategorized (Local)]]]    Script Date: 13-10-2015 09:18:14 ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'DeleteBackDatedMessageFeedbackTransaction', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'No description available.', 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=@Owner, @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [DeleteAuditLog]    Script Date: 13-10-2015 09:18:14 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'DeleteAuditLog', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=3, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'EXEC usp_DeleteBackDatedInformationLogs', 
		@database_name=@DBName, 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [DeleteBusinessErrorLog]    Script Date: 13-10-2015 09:18:14 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'DeleteBusinessErrorLog', 
		@step_id=2, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=3, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'EXEC usp_DeleteBackDatedErrorLogs', 
		@database_name=@DBName, 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [DeleteFeedBack]    Script Date: 13-10-2015 09:18:14 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'DeleteFeedBack', 
		@step_id=3, 
		@cmdexec_success_code=0, 
		@on_success_action=3, 
		@on_success_step_id=0, 
		@on_fail_action=3, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'EXEC usp_DeleteBackDatedFeedbacks', 
		@database_name=@DBName, 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [DeleteMessages]    Script Date: 13-10-2015 09:18:14 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'DeleteMessages', 
		@step_id=4, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'EXEC usp_DeleteBackDatedMessages', 
		@database_name=@DBName, 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'DeleteBackDatedEnteriesNightly', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=1, 
		@freq_subday_interval=0, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=0, 
		@active_start_date=20151020, 
		@active_end_date=99991231, 
		@active_start_time=10000, 
		@active_end_time=235959, 
		@schedule_uid=N'1493dfbf-75ec-4d6e-bee1-36a39b05062e'

IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:

GO



