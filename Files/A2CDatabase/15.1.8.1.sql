/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar UserName "A2CUser"
:setvar DatabaseName "A2CDB"
:setvar DefaultFilePrefix "A2CDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueAward]...';


GO



ALTER  PROCEDURE [dbo].[usp_GetProductCatalogueAward]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@AwardType  nvarchar(60) = null
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	
	if @AwardType is not null and len(ltrim(rtrim(@AwardType))) > 0 
	begin
		set @WhereClause = @WhereClause + ' and AwardType = ''' + @AwardType + ''''
	end
	print @WhereClause
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Accreditation_End_Review_Date AS	AccreditationEndReviewDate,			A.Accreditation_Start_Date AS AccreditationStartDate,
									A.AO_Accred_Version_Number AS AOAccredVersionNumber,					A.Assessment_Language_Type AS AssessmentLanguageType,
									A.Award_Level_Type AS AwardLevelType,									A.Award_Type AS AwardType,
									A.Cert_of_Unit_Credit_Issued_Flag AS IsCertificateofUnitCreditIssued,	A.Certification_End_Date AS CertificationEndDate,
									A.Certification_Start_Date AS CertificationStartDate,					A.Contributing_Units_Listed_Flag AS IsContributingUnitsListed,
									A.Course_Length_Type AS CourseLengthType,								A.Endorsed_Title_Reqd_Flag AS IsEndorsedTitleRequired,
									A.Guided_Learning_Hours_Max AS GuidedLearningHoursMax,					A.Guided_Learning_Hours_Min AS GuidedLearningHoursMin,
									A.Operational_End_Date AS OperationalEndDate,							A.Operational_Start_Date AS OperationalStartDate,
									A.QE_Delivery_Model_Type AS QEDeliveryModelType,						A.QE_Evid_Reqmnt_Provided_Flag AS IsQEEvidenceRequirementProvided,
									A.QE_Evidence_Requirement_Type AS QEEvidenceRequirementType,			A.Registration_Expiry_Months AS RegistrationExpiryMonth,
									A.Resit_Rule_Text AS ResitRuleText,										A.Statement_Of_Credit_Issued_Flag AS IsStatementOfCreditIssued,
									A.Study_Guide_Available_Type AS StudyGuideAvailableType,				A.Study_Guide_Details AS StudyGuideDetails,
									A.Study_Guide_Reference AS StudyGuideReference,							A.Study_Guide_Reference_Type AS StudyGuideReferenceType,
									A.QE_Classification AS QEClassification,								A.Party_Id_Accreditor AS PartyIdAccreditor,
									A.Party_Id_Sector_Lead AS PartyIdSectorLead,							A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM Award A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Accreditation_End_Review_Date AS	AccreditationEndReviewDate,			A.Accreditation_Start_Date AS AccreditationStartDate,
									A.AO_Accred_Version_Number AS AOAccredVersionNumber,					A.Assessment_Language_Type AS AssessmentLanguageType,
									A.Award_Level_Type AS AwardLevelType,									A.Award_Type AS AwardType,
									A.Cert_of_Unit_Credit_Issued_Flag AS IsCertificateofUnitCreditIssued,	A.Certification_End_Date AS CertificationEndDate,
									A.Certification_Start_Date AS CertificationStartDate,					A.Contributing_Units_Listed_Flag AS IsContributingUnitsListed,
									A.Course_Length_Type AS CourseLengthType,								A.Endorsed_Title_Reqd_Flag AS IsEndorsedTitleRequired,
									A.Guided_Learning_Hours_Max AS GuidedLearningHoursMax,					A.Guided_Learning_Hours_Min AS GuidedLearningHoursMin,
									A.Operational_End_Date AS OperationalEndDate,							A.Operational_Start_Date AS OperationalStartDate,
									A.QE_Delivery_Model_Type AS QEDeliveryModelType,						A.QE_Evid_Reqmnt_Provided_Flag AS IsQEEvidenceRequirementProvided,
									A.QE_Evidence_Requirement_Type AS QEEvidenceRequirementType,			A.Registration_Expiry_Months AS RegistrationExpiryMonth,
									A.Resit_Rule_Text AS ResitRuleText,										A.Statement_Of_Credit_Issued_Flag AS IsStatementOfCreditIssued,
									A.Study_Guide_Available_Type AS StudyGuideAvailableType,				A.Study_Guide_Details AS StudyGuideDetails,
									A.Study_Guide_Reference AS StudyGuideReference,							A.Study_Guide_Reference_Type AS StudyGuideReferenceType,
									A.QE_Classification AS QEClassification,								A.Party_Id_Accreditor AS PartyIdAccreditor,
									A.Party_Id_Sector_Lead AS PartyIdSectorLead,							A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM Award A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') Awards
							WHERE Awards.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Altering [dbo].[usp_GetSeriesByAwardingOrganisationCentreID]...';


GO
ALTER PROCEDURE [dbo].[usp_GetSeriesByAwardingOrganisationCentreID]
	@AwardingOrganisationCentreID INT,
	@QualificationElementType nvarchar(32)
As
Begin
	
	SET NOCOUNT ON;

	SELECT 
		distinct QA.Series_Label 
	FROM 
		dbo.QEAvailability QA
		inner join dbo.QualificationElement QE on 
		(QA.AwardingOrganisationCentreID = QE.AwardingOrganisationCentreId and QA.QualificationElementId=QE.QualificationElementId)
	WHERE 
		QA.AwardingOrganisationCentreID = @AwardingOrganisationCentreID 
		and QE.Qualification_Element_Type = @QualificationElementType
		and QA.Record_Delete_Flag=0
		and QE.Record_Delete_Flag=0
	ORDER BY QA.Series_Label
End
GO
PRINT N'Altering [dbo].[usp_SelectA2CRequestListToSend]...';


GO




---EXEC usp_SelectA2CRequestListToSend
ALTER PROCEDURE [dbo].[usp_SelectA2CRequestListToSend]
AS
BEGIN
Select 
distinct a2cSendR.AwardingOrganisationCentreId,
aoc.A2CSchoolId
from
A2CSendRequests a2cSendR
inner join AwardingOrganisationCentres aoc on aoc.AwardingOrganisationCentreId=a2cSendR.AwardingOrganisationCentreId
where a2csendr.Status=0
and aoc.AwardingOrganisationCentreId not in (select AwardingOrganisationCentreId from A2CSentQueues)
END
GO
PRINT N'Altering [dbo].[usp_SelectQEAdditionalDataList]...';


GO



--usp_SelectQEAdditionalDataList 1968,1001,1, '((( [QeaEffectiveEndDateTime]  between '09/03/2015 18:30:00' and '09/04/2015 18:29:59'))) desc','',1,20
ALTER PROCEDURE [dbo].[usp_SelectQEAdditionalDataList]
@QualificationElementId int,
@AwardingOrganisationCentreId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[QeaEffectiveStartDateTime] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20,
@seriesLabel nvarchar(50)
AS
BEGIN

SET NOCOUNT ON;



SET @TotalCount = 0;
Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
@Take int = (@PageNumber * @PageSize),
@WhereClause nvarchar(max) = '[AwardingOrganisationCentreId] = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								' and [QualificationElementId] = ' + cast(@QualificationElementId as nvarchar(10))  +
								' and Record_Delete_Flag=0'+
							case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
							else ' and ' + @GridWhereClause end


if @seriesLabel is not null and len(ltrim(rtrim(@seriesLabel))) > 0 
begin
		set @WhereClause = @WhereClause + ' and SeriesLabel = ''' + @seriesLabel + ''''
end

SET @TotalCount = 0;
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(Select AwardingOrganisationCentreId,QualificationElementId,Record_Delete_Flag,
		QEA_Effective_Start_Date_Time as QeaEffectiveStartDateTime,QEA_Effective_End_Date_Time as QeaEffectiveEndDateTime,
		Series_Label as SeriesLabel
		from QEAvailability qea) p
		 Where ' + @WhereClause
	 
	 print @CountQuery

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'Select AwardingOrganisationCentreId,
				QualificationElementId,
				QeaEffectiveStartDateTime,QeaEffectiveEndDateTime,
				SeriesLabel,RN
	from (Select AwardingOrganisationCentreId,
				QualificationElementId,
				Record_Delete_Flag,
				QeaEffectiveStartDateTime,QeaEffectiveEndDateTime,
				SeriesLabel,ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	from (Select AwardingOrganisationCentreId,
				QualificationElementId,
				Record_Delete_Flag,
				QeaEffectiveStartDateTime,QeaEffectiveEndDateTime,
				SeriesLabel from
		(Select 
				AwardingOrganisationCentreId,
				QualificationElementId,
				Record_Delete_Flag,
				QEA_Effective_Start_Date_Time as QeaEffectiveStartDateTime,QEA_Effective_End_Date_Time as QeaEffectiveEndDateTime,
				Series_Label as SeriesLabel
				from QEAvailability qea
		) p
		Where ' + @WhereClause
	 + ') p1) p2 where p2.[RN] BETWEEN @Skip AND @Take'
	 ---print @CountQuery
	print @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	print @TotalCount

END
GO
PRINT N'Creating [dbo].[usp_GetProductCataloguePathways]...';


GO
CREATE PROCEDURE [dbo].[usp_GetProductCataloguePathways]
	@AwardingOrganisationCentreId int,
	@SeriesLabel  nvarchar(50) = null,
	@OrderBy nvarchar(255) = 'AOQEId',
	@GridWhereClause nvarchar(max) = null,
	@PageNumber int = 1,
	@PageSize int = 10,
	@TotalCount int = 0 OUTPUT
As

Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;

	Declare 
		@Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	

		@Take int = (@PageNumber * @PageSize),

		@SeriesLableSelectPart nvarchar(max) = '',

		@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
											' ) AQE WHERE ' 
										else 
											' LEFT OUTER JOIN QEAvailability QEA ON 
											QEA.AwardingOrganisationCentreId = QE.AwardingOrganisationCentreId AND
											QEA.QualificationElementId = QE.QualificationElementId) AQE
											WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND ' end  +
											' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
										case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
										else ' and ' + @GridWhereClause end

	declare 
		@CountQuery as nvarchar(max), 
		@ListQuery as nvarchar(max) 

	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA.Series_Label AS SeriesLabel '

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							(SELECT
								QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
								QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
								QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
								QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
								QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
								QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
								QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,									
								QE.QE_Admin_Code AS QEAdminCode,
								A.Equals_Indicator_Flag as EqualsIndicatorFlag,							A.Mandatory_In_Group_Flag as MandatoryInGroupFlag,								
								A.Minimum_Unit_Selection as MinimumUnitSelection,						A.Maximum_Unit_Selection as MaximumUnitSelection,								
								A.Minimum_Pathway_Selection as MinimumPathwaySelection,					A.Maximum_Pathway_Selection as MaximumPathwaySelection,								
								A.Minimum_Credit_Value as MinimumCreditValue'							+ @SeriesLableSelectPart + '					
							FROM 
								Pathway A
								INNER JOIN QualificationElement QE ON 
								A.AwardingOrganisationCentreId = QE.AwardingOrganisationCentreId AND
								A.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
								(SELECT
								QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
								QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
								QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
								QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
								QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
								QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
								QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,									
								QE.QE_Admin_Code AS QEAdminCode,
								A.Equals_Indicator_Flag as EqualsIndicatorFlag,							A.Mandatory_In_Group_Flag as MandatoryInGroupFlag,								
								A.Minimum_Unit_Selection as MinimumUnitSelection,						A.Maximum_Unit_Selection as MaximumUnitSelection,								
								A.Minimum_Pathway_Selection as MinimumPathwaySelection,					A.Maximum_Pathway_Selection as MaximumPathwaySelection,								
								A.Minimum_Credit_Value as MinimumCreditValue'							+ @SeriesLableSelectPart + '					
							FROM 
								Pathway A
								INNER JOIN QualificationElement QE ON 
								A.AwardingOrganisationCentreId = QE.AwardingOrganisationCentreId AND
								A.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') Pathways
							WHERE Pathways.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT

	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Creating [dbo].[usp_Select_AwardTypes]...';


GO
Create Procedure usp_Select_AwardTypes
(
@AwardingOrganisationCentreId int
)
As
Begin
	select distinct Award_Type from Award where 
	AwardingOrganisationCentreId=@AwardingOrganisationCentreId and
	Award_Type is not null

End
GO
PRINT N'Creating [dbo].[usp_SelectQEAdditionalDataKeyEventFeeList]...';


GO
---usp_SelectQEAdditionalDataKeyEventList 1971,1001,1, '[QEAEffectiveStartDateTime] desc','',1,20
CREATE PROCEDURE [dbo].[usp_SelectQEAdditionalDataKeyEventFeeList]
@QualificationElementId int,
@AwardingOrganisationCentreId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[QEAEffectiveStartDateTime] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


SET @TotalCount = 0;
Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
@Take int = (@PageNumber * @PageSize),
@WhereClause nvarchar(max) = '[AwardingOrganisationCentreId] = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								' and [QualificationElementId] = ' + cast(@QualificationElementId as nvarchar(10))  +
								' and Record_Delete_Flag=0 and Event_Record_Delete_Flag=0 and EventFee_Record_Delete_Flag=0'+
							case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
							else ' and ' + @GridWhereClause end


SET @TotalCount = 0;
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(select qe.AwardingOrganisationCentreId,qe.QualificationElementId,qeEvent.Key_Event_Name as  KeyEventName, 
	qe.QEA_Effective_Start_Date_Time as QEAEffectiveStartDateTime,qeEventFee.QE_Fee_Category_Type as QEFeeCategoryType,qeEventFee.Fee_Period_Title as FeePeriodTitle,qeEventFee.Fee_Period_Start_Date_Time as FeePeriodStartDateTime
	,qeEventFee.Fee_Period_End_Date_Time as FeePeriodEndDateTime,qeEventFee.Fee_Amount as FeeAmount,qeEventFee.Fee_Additional_Text as FeeAdditionalText	
	,qe.Record_Delete_Flag,qeEvent.Record_Delete_Flag as Event_Record_Delete_Flag,qeEventFee.Record_Delete_Flag as EventFee_Record_Delete_Flag
	from QEAvailability qe
	inner join QEAvailabilityKeyEvent qeEvent on qe.QEAvailabilityId=qeEvent.QEAvailabilityId
	and qe.AwardingOrganisationCentreId=qeEvent.AwardingOrganisationCentreId
	inner join QEAvailabilityKeyEventFee qeEventFee on qeEventFee.AwardingOrganisationCentreId=qeEvent.AwardingOrganisationCentreId
	and qeEventFee.QEAvailabilityKeyEventId = qeEvent.QEAvailabilityKeyEventId) p
		 Where ' + @WhereClause
	 
	

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'Select AwardingOrganisationCentreId,QualificationElementId,KeyEventName, 
			QEAEffectiveStartDateTime,QEFeeCategoryType,FeePeriodTitle,FeePeriodStartDateTime
			,FeePeriodEndDateTime,FeeAmount,FeeAdditionalText	
			,Record_Delete_Flag,Event_Record_Delete_Flag,EventFee_Record_Delete_Flag,RN
	 from (Select AwardingOrganisationCentreId,QualificationElementId,KeyEventName, 
			QEAEffectiveStartDateTime,QEFeeCategoryType,FeePeriodTitle,FeePeriodStartDateTime
			,FeePeriodEndDateTime,FeeAmount,FeeAdditionalText	
			,Record_Delete_Flag,Event_Record_Delete_Flag,EventFee_Record_Delete_Flag,
		 ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	 from (Select AwardingOrganisationCentreId,QualificationElementId,KeyEventName, 
			QEAEffectiveStartDateTime,QEFeeCategoryType,FeePeriodTitle,FeePeriodStartDateTime
			,FeePeriodEndDateTime,FeeAmount,FeeAdditionalText	
			,Record_Delete_Flag,Event_Record_Delete_Flag,EventFee_Record_Delete_Flag
		from
		(select qe.AwardingOrganisationCentreId,qe.QualificationElementId,qeEvent.Key_Event_Name as  KeyEventName, 
		qe.QEA_Effective_Start_Date_Time as QEAEffectiveStartDateTime,qeEventFee.QE_Fee_Category_Type as QEFeeCategoryType,qeEventFee.Fee_Period_Title as FeePeriodTitle,qeEventFee.Fee_Period_Start_Date_Time as FeePeriodStartDateTime
		,qeEventFee.Fee_Period_End_Date_Time as FeePeriodEndDateTime,qeEventFee.Fee_Amount as FeeAmount,qeEventFee.Fee_Additional_Text as FeeAdditionalText	
		,qe.Record_Delete_Flag,qeEvent.Record_Delete_Flag as Event_Record_Delete_Flag,qeEventFee.Record_Delete_Flag as EventFee_Record_Delete_Flag
		from QEAvailability qe
		inner join QEAvailabilityKeyEvent qeEvent on qe.QEAvailabilityId=qeEvent.QEAvailabilityId
		and qe.AwardingOrganisationCentreId=qeEvent.AwardingOrganisationCentreId
		inner join QEAvailabilityKeyEventFee qeEventFee on qeEventFee.AwardingOrganisationCentreId=qeEvent.AwardingOrganisationCentreId
		and qeEventFee.QEAvailabilityKeyEventId = qeEvent.QEAvailabilityKeyEventId
		) p
		Where ' + @WhereClause
	 + ') p1) p2 where p2.[RN] BETWEEN @Skip AND @Take'
	 print @CountQuery
	print @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	print @TotalCount

END
GO
PRINT N'Creating [dbo].[usp_SelectQEAdditionalDataKeyEventList]...';


GO

---usp_SelectQEAdditionalDataKeyEventList 1971,1001,1, '[QEAEffectiveStartDateTime] desc','',1,20
--usp_SelectQEAdditionalDataKeyEventList 1968,1001,1, '[QEAEffectiveStartDateTime] desc','',1,20
CREATE PROCEDURE [dbo].[usp_SelectQEAdditionalDataKeyEventList]
@QualificationElementId int,
@AwardingOrganisationCentreId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[QEAEffectiveStartDateTime] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


SET @TotalCount = 0;
Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
@Take int = (@PageNumber * @PageSize),
@WhereClause nvarchar(max) = '[AwardingOrganisationCentreId] = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								' and [QualificationElementId] = ' + cast(@QualificationElementId as nvarchar(10))  +
								' and Record_Delete_Flag=0 and Event_Record_Delete_Flag=0'+
							case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
							else ' and ' + @GridWhereClause end


SET @TotalCount = 0;
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(select qe.AwardingOrganisationCentreId,qe.QualificationElementId,qeEvent.Key_Event_Name as  KeyEventName, qe.QEA_Effective_Start_Date_Time as QEAEffectiveStartDateTime,qeEvent.Key_Event_Start_Date_Time as KeyEventStartDateTime
	,qeEvent.Key_Event_End_Date_Time as KeyEventEndDateTime,qeEvent.Key_Event_Additional_Text as KeyEventAdditionalText,qeEvent.Time_Period_Type as TimePeriodType
	,qe.Record_Delete_Flag,qeEvent.Record_Delete_Flag as Event_Record_Delete_Flag
	from QEAvailability qe
	inner join QEAvailabilityKeyEvent qeEvent on qe.QEAvailabilityId=qeEvent.QEAvailabilityId
	and qe.AwardingOrganisationCentreId=qeEvent.AwardingOrganisationCentreId) p
		 Where ' + @WhereClause
	 
	

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'Select AwardingOrganisationCentreId,QualificationElementId,QEAEffectiveStartDateTime,KeyEventName,KeyEventStartDateTime,
	 KeyEventEndDateTime,KeyEventAdditionalText,TimePeriodType,RN
	 from (Select AwardingOrganisationCentreId,QualificationElementId,QEAEffectiveStartDateTime,
		 KeyEventName,KeyEventStartDateTime,KeyEventEndDateTime,KeyEventAdditionalText,
		 TimePeriodType,Record_Delete_Flag,Event_Record_Delete_Flag,
		 ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	 from (Select AwardingOrganisationCentreId,QualificationElementId,QEAEffectiveStartDateTime,KeyEventName,KeyEventStartDateTime
		,KeyEventEndDateTime,KeyEventAdditionalText,TimePeriodType
		,Record_Delete_Flag,Event_Record_Delete_Flag
		from
		(select qe.AwardingOrganisationCentreId,qe.QualificationElementId,qeEvent.Key_Event_Name as  KeyEventName,qe.QEA_Effective_Start_Date_Time as QEAEffectiveStartDateTime,qeEvent.Key_Event_Start_Date_Time as KeyEventStartDateTime
		,qeEvent.Key_Event_End_Date_Time as KeyEventEndDateTime,qeEvent.Key_Event_Additional_Text as KeyEventAdditionalText,qeEvent.Time_Period_Type as TimePeriodType
		,qe.Record_Delete_Flag,qeEvent.Record_Delete_Flag as Event_Record_Delete_Flag
		from QEAvailability qe
		inner join QEAvailabilityKeyEvent qeEvent on qe.QEAvailabilityId=qeEvent.QEAvailabilityId
		and qe.AwardingOrganisationCentreId=qeEvent.AwardingOrganisationCentreId
		) p
		Where ' + @WhereClause
	 + ') p1) p2 where p2.[RN] BETWEEN @Skip AND @Take'
	 print @CountQuery
	print @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	print @TotalCount

END
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.8.1';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Update complete.';


GO
