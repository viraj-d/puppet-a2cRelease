/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar UserName "A2CUser"
:setvar DatabaseName "A2CDB"
:setvar DefaultFilePrefix "A2CDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

update A2CTransactionResponseEnvelopeMessages set IncomingSequence=null where IncomingSequence=0
GO

GO
PRINT N'Creating [dbo].[QEAvailability].[IX_AvailabilitySeries]...';


GO
CREATE NONCLUSTERED INDEX [IX_AvailabilitySeries]
    ON [dbo].[QEAvailability]([AwardingOrganisationCentreId] ASC, [Record_Delete_Flag] ASC, [Series_Label] ASC)
    INCLUDE([QualificationElementId]);


GO
PRINT N'Creating [dbo].[QualificationElement].[IX_QualificationElementSeries]...';


GO
CREATE NONCLUSTERED INDEX [IX_QualificationElementSeries]
    ON [dbo].[QualificationElement]([AwardingOrganisationCentreId] ASC, [Qualification_Element_Type] ASC, [Record_Delete_Flag] ASC)
    INCLUDE([QualificationElementId]);


GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueAward]...';


GO



ALTER  PROCEDURE [dbo].[usp_GetProductCatalogueAward]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@AwardType  nvarchar(60) = null,
@SearchPCDetialForColumn nvarchar(max) =null,
@SearchTextValue nvarchar(max) =null
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +	
									
									case when (@SearchTextValue is null or len(ltrim(rtrim(@SearchTextValue))) <= 0) OR (@SearchPCDetialForColumn is null or len(ltrim(rtrim(@SearchPCDetialForColumn))) <= 0) then '' 
									else 
										case	when @SearchPCDetialForColumn = 'AoqeId' then ' and AoqeId LIKE ''%' + @SearchTextValue + '%''' 
												when @SearchPCDetialForColumn = 'QEShortTitle' then ' and QEShortTitle LIKE ''%' + @SearchTextValue + '%''' 
												when @SearchPCDetialForColumn = 'QualificationReferenceNumber' then ' and QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%''' 
												when @SearchPCDetialForColumn = 'All' then ' and (AoqeId LIKE ''%' + @SearchTextValue + '%'' OR ' +
																					' QEShortTitle LIKE ''%' + @SearchTextValue + '%'' OR '  + 
																					' QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%'')'
												else ''
										end
									end  +
															
									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	
	if @AwardType is not null and len(ltrim(rtrim(@AwardType))) > 0 
	begin
		set @WhereClause = @WhereClause + ' and AwardType = ''' + @AwardType + ''''
	end
	--print @WhereClause
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Accreditation_End_Review_Date AS	AccreditationEndReviewDate,			A.Accreditation_Start_Date AS AccreditationStartDate,
									A.AO_Accred_Version_Number AS AOAccredVersionNumber,					A.Assessment_Language_Type AS AssessmentLanguageType,
									A.Award_Level_Type AS AwardLevelType,									A.Award_Type AS AwardType,
									A.Cert_of_Unit_Credit_Issued_Flag AS IsCertificateofUnitCreditIssued,	A.Certification_End_Date AS CertificationEndDate,
									A.Certification_Start_Date AS CertificationStartDate,					A.Contributing_Units_Listed_Flag AS IsContributingUnitsListed,
									A.Course_Length_Type AS CourseLengthType,								A.Endorsed_Title_Reqd_Flag AS IsEndorsedTitleRequired,
									A.Guided_Learning_Hours_Max AS GuidedLearningHoursMax,					A.Guided_Learning_Hours_Min AS GuidedLearningHoursMin,
									A.Operational_End_Date AS OperationalEndDate,							A.Operational_Start_Date AS OperationalStartDate,
									A.QE_Delivery_Model_Type AS QEDeliveryModelType,						A.QE_Evid_Reqmnt_Provided_Flag AS IsQEEvidenceRequirementProvided,
									A.QE_Evidence_Requirement_Type AS QEEvidenceRequirementType,			A.Registration_Expiry_Months AS RegistrationExpiryMonth,
									A.Resit_Rule_Text AS ResitRuleText,										A.Statement_Of_Credit_Issued_Flag AS IsStatementOfCreditIssued,
									A.Study_Guide_Available_Type AS StudyGuideAvailableType,				A.Study_Guide_Details AS StudyGuideDetails,
									A.Study_Guide_Reference AS StudyGuideReference,							A.Study_Guide_Reference_Type AS StudyGuideReferenceType,
									A.QE_Classification AS QEClassification,								A.Party_Id_Accreditor AS PartyIdAccreditor,
									A.Party_Id_Sector_Lead AS PartyIdSectorLead,							A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM Award A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Accreditation_End_Review_Date AS	AccreditationEndReviewDate,			A.Accreditation_Start_Date AS AccreditationStartDate,
									A.AO_Accred_Version_Number AS AOAccredVersionNumber,					A.Assessment_Language_Type AS AssessmentLanguageType,
									A.Award_Level_Type AS AwardLevelType,									A.Award_Type AS AwardType,
									A.Cert_of_Unit_Credit_Issued_Flag AS IsCertificateofUnitCreditIssued,	A.Certification_End_Date AS CertificationEndDate,
									A.Certification_Start_Date AS CertificationStartDate,					A.Contributing_Units_Listed_Flag AS IsContributingUnitsListed,
									A.Course_Length_Type AS CourseLengthType,								A.Endorsed_Title_Reqd_Flag AS IsEndorsedTitleRequired,
									A.Guided_Learning_Hours_Max AS GuidedLearningHoursMax,					A.Guided_Learning_Hours_Min AS GuidedLearningHoursMin,
									A.Operational_End_Date AS OperationalEndDate,							A.Operational_Start_Date AS OperationalStartDate,
									A.QE_Delivery_Model_Type AS QEDeliveryModelType,						A.QE_Evid_Reqmnt_Provided_Flag AS IsQEEvidenceRequirementProvided,
									A.QE_Evidence_Requirement_Type AS QEEvidenceRequirementType,			A.Registration_Expiry_Months AS RegistrationExpiryMonth,
									A.Resit_Rule_Text AS ResitRuleText,										A.Statement_Of_Credit_Issued_Flag AS IsStatementOfCreditIssued,
									A.Study_Guide_Available_Type AS StudyGuideAvailableType,				A.Study_Guide_Details AS StudyGuideDetails,
									A.Study_Guide_Reference AS StudyGuideReference,							A.Study_Guide_Reference_Type AS StudyGuideReferenceType,
									A.QE_Classification AS QEClassification,								A.Party_Id_Accreditor AS PartyIdAccreditor,
									A.Party_Id_Sector_Lead AS PartyIdSectorLead,							A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM Award A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') Awards
							WHERE Awards.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueLearningUnits]...';


GO




ALTER  PROCEDURE [dbo].[usp_GetProductCatalogueLearningUnits]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@SearchPCDetialForColumn nvarchar(max) =null,
@SearchTextValue nvarchar(max) =null
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
									
									case when (@SearchTextValue is null or len(ltrim(rtrim(@SearchTextValue))) <= 0) OR (@SearchPCDetialForColumn is null or len(ltrim(rtrim(@SearchPCDetialForColumn))) <= 0) then '' 
									else 
										case	when @SearchPCDetialForColumn = 'AoqeId' then ' and AoqeId LIKE ''%' + @SearchTextValue + '%''' 
												when @SearchPCDetialForColumn = 'QEShortTitle' then ' and QEShortTitle LIKE ''%' + @SearchTextValue + '%''' 
												when @SearchPCDetialForColumn = 'QualificationReferenceNumber' then ' and QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%''' 
												when @SearchPCDetialForColumn = 'All' then ' and (AoqeId LIKE ''%' + @SearchTextValue + '%'' OR ' +
																					' QEShortTitle LIKE ''%' + @SearchTextValue + '%'' OR '  + 
																					' QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%'')'
												else ''
										end
									end  +
									
									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									L.Learning_Unit_Level_Type AS LearningUnitLevelType,					L.Maximum_Resits_Allowed AS MaximumResitsAllowed,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM LearningUnit L
								INNER JOIN QualificationElement QE ON L.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									L.Learning_Unit_Level_Type AS LearningUnitLevelType,					L.Maximum_Resits_Allowed AS MaximumResitsAllowed,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM LearningUnit L
								INNER JOIN QualificationElement QE ON L.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') LU
							WHERE LU.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Altering [dbo].[usp_GetProductCataloguePathways]...';


GO
ALTER PROCEDURE [dbo].[usp_GetProductCataloguePathways]
	@AwardingOrganisationCentreId int,
	@SeriesLabel  nvarchar(50) = null,
	@OrderBy nvarchar(255) = 'AOQEId',
	@GridWhereClause nvarchar(max) = null,
	@PageNumber int = 1,
	@PageSize int = 10,
	@TotalCount int = 0 OUTPUT
As

Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;

	Declare 
		@Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	

		@Take int = (@PageNumber * @PageSize),

		@SeriesLableSelectPart nvarchar(max) = '',

		@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
											' ) AQE WHERE ' 
										else 
											' LEFT OUTER JOIN QEAvailability QEA ON 
											QEA.AwardingOrganisationCentreId = QE.AwardingOrganisationCentreId AND
											QEA.QualificationElementId = QE.QualificationElementId) AQE
											WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND ' end  +
											' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
										case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
										else ' and ' + @GridWhereClause end

	declare 
		@CountQuery as nvarchar(max), 
		@ListQuery as nvarchar(max) 

	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA.Series_Label AS SeriesLabel '

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							(SELECT
								QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
								QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
								QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
								QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
								QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
								QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
								QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,									
								QE.QE_Admin_Code AS QEAdminCode,
								A.Equals_Indicator_Flag as EqualsIndicator,								A.Mandatory_In_Group_Flag as MandatoryInGroup,								
								A.Minimum_Unit_Selection as MinimumUnitSelection,						A.Maximum_Unit_Selection as MaximumUnitSelection,								
								A.Minimum_Pathway_Selection as MinimumPathwaySelection,					A.Maximum_Pathway_Selection as MaximumPathwaySelection,								
								A.Minimum_Credit_Value as MinimumCreditValue'							+ @SeriesLableSelectPart + '					
							FROM 
								Pathway A
								INNER JOIN QualificationElement QE ON 
								A.AwardingOrganisationCentreId = QE.AwardingOrganisationCentreId AND
								A.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
								(SELECT
								QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
								QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
								QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
								QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
								QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
								QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
								QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,									
								QE.QE_Admin_Code AS QEAdminCode,
								A.Equals_Indicator_Flag as EqualsIndicator,								A.Mandatory_In_Group_Flag as MandatoryInGroup,								
								A.Minimum_Unit_Selection as MinimumUnitSelection,						A.Maximum_Unit_Selection as MaximumUnitSelection,								
								A.Minimum_Pathway_Selection as MinimumPathwaySelection,					A.Maximum_Pathway_Selection as MaximumPathwaySelection,								
								A.Minimum_Credit_Value as MinimumCreditValue'							+ @SeriesLableSelectPart + '					
							FROM 
								Pathway A
								INNER JOIN QualificationElement QE ON 
								A.AwardingOrganisationCentreId = QE.AwardingOrganisationCentreId AND
								A.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') Pathways
							WHERE Pathways.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT

	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueSchemes]...';


GO
ALTER  PROCEDURE [dbo].[usp_GetProductCatalogueSchemes]
@AwardingOrganisationCentreId int,
@QualificationType  nvarchar(50) = null,
@SeriesLabel  nvarchar(50) = null,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'AoqeId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@SearchPCDetialForColumn nvarchar(max) =null,
@SearchTextValue nvarchar(max) =null
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) = case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') q1 WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) q1
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
								' RecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								case when @QualificationType is null or len(ltrim(rtrim(@QualificationType))) <= 0 then '' 
								else ' and QualificationType = ''' + @QualificationType + '''' end  +

								case when (@SearchTextValue is null or len(ltrim(rtrim(@SearchTextValue))) <= 0) OR (@SearchPCDetialForColumn is null or len(ltrim(rtrim(@SearchPCDetialForColumn))) <= 0) then '' 
								else 
									case	when @SearchPCDetialForColumn = 'AoqeId' then ' and AoqeId LIKE ''%' + @SearchTextValue + '%''' 
											when @SearchPCDetialForColumn = 'QEShortTitle' then ' and QEShortTitle LIKE ''%' + @SearchTextValue + '%''' 
											when @SearchPCDetialForColumn = 'QualificationReferenceNumber' then ' and QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%''' 
											when @SearchPCDetialForColumn = 'All' then ' and (AoqeId LIKE ''%' + @SearchTextValue + '%'' OR ' +
																				' QEShortTitle LIKE ''%' + @SearchTextValue + '%'' OR '  + 
																				' QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%'')'
											else ''
									end
								end  +

								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1)
							From (Select
										QE.QualificationElementId AS QEId,									QE.AO_Qualification_Element_Id AS AoqeId,							
										QE.QE_Short_Title AS QEShortTitle,									QE.QE_Description AS QEDescription,  
										QE.Qualification_Element_Title AS QETitle,							QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,				
										QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,		QE.Private_Learner_Type AS PrivateLearnerType,						
										QE.QE_Moderation_Type AS QEModerationType,							QE.First_Language_Required_Flag AS FirstLanguageRequired,		
										QE.Record_Delete_Flag AS RecordDeleted,								QE.QE_Admin_Code AS QEAdminCode,	
										QE.Qualification_Reference_Number AS QualificationReferenceNumber,	QE.Learning_Aim_Code AS LearningAimCode, 
										QE.AwardingOrganisationCentreId,
										S.Qualification_Type AS QualificationType,							S.Series_Based_Flag AS SeriesBased,
										S.QE_Availability_Text AS QEAvailabilityText,						S.Assessment_Max_Learner_Age AS AssessmentMaxLearnerAge,
										S.Assessment_Min_Learner_Age AS AssessmentMinLearnerAge,			S.First_Teaching_Date AS FirstTeachingDate,
										S.Last_Teaching_Date AS LastTeachingDate,							S.QE_Centre_Auth_Agreement_Text AS QECentreAuthenticationAgreementText,
										S.Date_Of_Birth_Reqd_Flag AS DateOfBirthRequired,					S.Legal_Sex_Required_Flag AS LegalSexRequired' 
										+ @SeriesLableSelectPart + '
									 FROM Scheme S
											INNER JOIN QualificationElement QE ON S.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	*, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber
								From (Select
										QE.QualificationElementId AS QEId,									QE.AO_Qualification_Element_Id AS AoqeId,							
										QE.QE_Short_Title AS QEShortTitle,									QE.QE_Description AS QEDescription,  
										QE.Qualification_Element_Title AS QETitle,							QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,				
										QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,		QE.Private_Learner_Type AS PrivateLearnerType,						
										QE.QE_Moderation_Type AS QEModerationType,							QE.First_Language_Required_Flag AS FirstLanguageRequired,		
										QE.Record_Delete_Flag AS RecordDeleted,								QE.QE_Admin_Code AS QEAdminCode,	
										QE.Qualification_Reference_Number AS QualificationReferenceNumber,	QE.Learning_Aim_Code AS LearningAimCode, 
										QE.AwardingOrganisationCentreId,
										S.Qualification_Type AS QualificationType,							S.Series_Based_Flag AS SeriesBased,
										S.QE_Availability_Text AS QEAvailabilityText,						S.Assessment_Max_Learner_Age AS AssessmentMaxLearnerAge,
										S.Assessment_Min_Learner_Age AS AssessmentMinLearnerAge,			S.First_Teaching_Date AS FirstTeachingDate,
										S.Last_Teaching_Date AS LastTeachingDate,							S.QE_Centre_Auth_Agreement_Text AS QECentreAuthenticationAgreementText,
										S.Date_Of_Birth_Reqd_Flag AS DateOfBirthRequired,					S.Legal_Sex_Required_Flag AS LegalSexRequired'
										+ @SeriesLableSelectPart + '
									 FROM Scheme S
											INNER JOIN QualificationElement QE ON S.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') q2
							WHERE q2.RowNumber BETWEEN @Skip AND @Take'

		
	--PRINT @CountQuery
	--PRINT @ListQuery

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT

	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take


End
GO
PRINT N'Altering [dbo].[usp_GetSeriesByAwardingOrganisationCentreID]...';


GO

ALTER PROCEDURE [dbo].[usp_GetSeriesByAwardingOrganisationCentreID]
	@AwardingOrganisationCentreID INT,
	@QualificationElementType nvarchar(32)
As
Begin
	
	SET NOCOUNT ON;
	Select Series_Label  from
	(
	SELECT 
		distinct QA.Series_Label 
	FROM 
		dbo.QEAvailability QA
		inner join dbo.QualificationElement QE on 
		(QA.AwardingOrganisationCentreID = QE.AwardingOrganisationCentreId and QA.QualificationElementId=QE.QualificationElementId)
	WHERE 
		QA.AwardingOrganisationCentreID = @AwardingOrganisationCentreID 
		and QE.Qualification_Element_Type = @QualificationElementType
		and QA.Record_Delete_Flag=0
		and QE.Record_Delete_Flag=0
		and Series_Label is not null	
	) Series where Len(LTRIM(RTrim(Series_Label)))>0
	ORDER BY Series_Label
End
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]...';


GO

ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]
@A2CSchoolId int,
@AwardingOrganisationDetailId int,
@CentreId int,
@A2CTransactionResponseEnvelopeId int,
@MessageId nvarchar(50),
@RefMessageId nvarchar(50)=null,
@TimeStamp datetime,
@TransactionName nvarchar(100)=null,
@IncomingSequence bigint=null,
@data varbinary(max),
@IsFeedbackMessage  bit,
@AwardingOrganisationCentreId int,
@AwardingOrganisationNumber nvarchar(200),
@CentreNumber nvarchar(200),
@IsMessageLevelFeedbackMessage bit,
@A2CTransactionRequestId int,
@DataImportStatus int
AS
BEGIN
	DECLARE @A2CTransactionMasterId INT
	Declare @MessageAwardingOrganisationCentreId int
	EXEC @A2CTransactionMasterId= [usp_Select_A2CTransactionMasters_IdByName] @TransactionName
	Declare @A2CMessageId int

	Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
	inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
	inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
	where 
	aoc.A2CSchoolId=@A2CSchoolId and
	c.CentreNumber=@CentreNumber and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
	and ad.AONumber=@AwardingOrganisationNumber

	If @MessageAwardingOrganisationCentreId is null
	begin
		Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
		inner join AwardingOrganisationAOAssignedCentres aoassign on aoassign.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		and aoassign.A2CSchoolId=aoc.A2CSchoolId
		where 
		aoc.A2CSchoolId=@A2CSchoolId 
		and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
		and aoassign.AOAssignCentreNumber=@CentreNumber
		and ad.AONumber=@AwardingOrganisationNumber
	end
	
	if @IncomingSequence=0
	begin
		set @IncomingSequence=null
	end
	Insert into A2CTransactionResponseEnvelopeMessages (SchoolId,A2CTransactionResponseEnvelopeId,MessageId,RefMessageId,[TimeStamp],A2CTransactionMasterId,IncomingSequence,[data],IsFeedbackMessage,A2CMessageId,AwardingOrganisationCentreId,MessageAwardingOrganisationCentreId,IsMessageLevelFeedbackMessage,DataImportStatus)
	values(@A2CSchoolId,@A2CTransactionResponseEnvelopeId,@MessageId,@RefMessageId,@TimeStamp,@A2CTransactionMasterId,@IncomingSequence,@data,@IsFeedbackMessage,@A2CMessageId,@AwardingOrganisationCentreId,@MessageAwardingOrganisationCentreId,@IsMessageLevelFeedbackMessage,@DataImportStatus)
	select cast(SCOPE_IdENTITY() as int)

	declare @MaxSequenceLimit bigint
	declare @IncomingSequencePresent bigint=0
	set @MaxSequenceLimit=4294967295 
	select @IncomingSequencePresent = isnull(IncomingSequence,0)
	from AwardingOrganisationCentres
	where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId	

	if @IncomingSequence is not null and @IncomingSequence>0 and @MessageAwardingOrganisationCentreId>0
		begin	
				if @IncomingSequence=1 and @MaxSequenceLimit=@IncomingSequencePresent
				begin
						--print 'update'	
						update AwardingOrganisationCentres
						set IncomingSequence=@IncomingSequence
						where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId
				end
				else
				begin
					--print 'innn'
					declare @OutSequence bigint
					set @OutSequence=@IncomingSequence	
					if not exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId and SequenceNumber<@OutSequence)
					and (@OutSequence - 1 = @IncomingSequencePresent)
					begin
					--print 'innn111'
						while exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  and SequenceNumber= @OutSequence + 1)
						begin
							---print 'delete' + cast(@OutSequence + 1 as varchar(max))
							delete from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  and SequenceNumber= @OutSequence + 1			
			
							update A2CTransactionResponseEnvelopeMessages set DataImportStatus=0 where 			
							SchoolId=@A2CSchoolId and AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  
							and DataImportStatus=-1 and IncomingSequence=@OutSequence+ 1	

							set @OutSequence= @OutSequence+ 1	
						end
					end

					if not exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId and
						SequenceNumber<=@OutSequence)
					begin	
						--print 'insertupdate'
						if @OutSequence>@IncomingSequence or @IncomingSequencePresent + 1 = @IncomingSequence 
						begin
								--print 'update'	
								update AwardingOrganisationCentres
								set IncomingSequence=@OutSequence
								where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId
						end
					end
	
					if @OutSequence<=@IncomingSequence and @IncomingSequence > @IncomingSequencePresent + 1 
					begin
						--print 'insertoutsequence'	

						if not exists(select 1 from OutSequence where AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId and
						SequenceNumber=@IncomingSequence)
						begin		
							insert into OutSequence(AwardingOrganisationCentreId,SequenceNumber)
							select @MessageAwardingOrganisationCentreId,@IncomingSequence							
						end		
							update A2CTransactionResponseEnvelopeMessages set DataImportStatus=-1 where 			
							SchoolId=@A2CSchoolId and AwardingOrganisationCentreId=@MessageAwardingOrganisationCentreId  
							and DataImportStatus=0 and IncomingSequence=@IncomingSequence
					end	
			end
	end

	update A2CTransactionRequests set CentreNumber=@CentreNumber where A2CTransactionRequestId=@A2CTransactionRequestId
	and SchoolId=@A2CSchoolId

	END
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.8.2';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Update complete.';


GO
