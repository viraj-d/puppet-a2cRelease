/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar UserName "A2CUser"
:setvar DatabaseName "A2CDB"
:setvar DefaultFilePrefix "A2CDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Altering [dbo].[SystemConfigurations]...';


GO
ALTER TABLE [dbo].[SystemConfigurations]
    ADD [NoOfDaysToStoreAuditLogs]         INT DEFAULT ((330)) NOT NULL,
        [NoOfDaysToStoreMessages]          INT DEFAULT ((330)) NOT NULL,
        [NoOfDaysToStoreFeedbackMessages]  INT DEFAULT ((330)) NOT NULL,
        [NoOfDaysToStoreBusinessErrorLogs] INT DEFAULT ((330)) NOT NULL;


GO
PRINT N'Altering [dbo].[usp_GetSystemConfigurations]...';


GO

ALTER PROCEDURE [dbo].[usp_GetSystemConfigurations]
AS   
BEGIN


SELECT [SystemConfigurationId]
      ,[A2CApplicationUrl]
      ,[ContactEmail]
      ,[ContactPhoneNumber]
      ,[PickupFileFromEdiFolderInMinutes]
      ,[SendA2CRequestInMinutes]
      ,[PollingInMinutes]
      ,[LastModified]
	  ,[NoOfDaysToStoreAuditLogs]
	  ,[NoOfDaysToStoreMessages]
	  ,[NoOfDaysToStoreFeedbackMessages]
	  ,[NoOfDaysToStoreBusinessErrorLogs]
  FROM [dbo].[SystemConfigurations]

 END
GO
PRINT N'Creating [dbo].[usp_GetQualificationElementGrades]...';


GO


CREATE  PROCEDURE [dbo].[usp_GetQualificationElementGrades]
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'Grade',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@AwardingOrganisationCentreId int,
@QEQualificationElementId int
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' q1.AwardingOrganisationCentreId=  ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								 ' and q1.QualificationElementId=' + cast(@QEQualificationElementId as nvarchar(10)) +
								 case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							(  Select qeg.AwardingOrganisationCentreId,qeg.QualificationElementId as QualificationElementId,qeg.QE_Grade as Grade,qeg.QE_Grade_Description as [Description]
									,qeg.QE_Outcome_Type as Outcome, qeg.QE_Grade_Sequence_Order as Sequence, qegp.Performance_Points as PerformancePoints,qegp.Level_1_Threshold as Level1Threshold
									,qegp.Level_2_Threshold as Level2Threshold,qegp.Level_3_Threshold as Level3Threshold, qeg.QE_Grade_Effective_Date as EffectiveDate 
									,qeg.QE_Grade_Eff_End_Date as EffectiveEndDate, qegp.Party_Id_Administrator as [Owner] 
								from dbo.QualificationElementGrade qeg
									Inner join dbo.QEGradePerformancePoints qegp on qeg.QualificationElementGradeId=qegp.QualificationElementGradeId and qeg.AwardingOrganisationCentreId=qegp.AwardingOrganisationCentreId
								where qeg.Record_Delete_Flag=0 and qegp.Record_Delete_Flag=0
							) q1
							where '+@WhereClause,

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(   select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(
												Select qeg.AwardingOrganisationCentreId,qeg.QualificationElementId as QualificationElementId,qeg.QE_Grade as Grade,qeg.QE_Grade_Description as [Description]
													,qeg.QE_Outcome_Type as Outcome, qeg.QE_Grade_Sequence_Order as Sequence, qegp.Performance_Points as PerformancePoints,qegp.Level_1_Threshold as Level1Threshold
													,qegp.Level_2_Threshold as Level2Threshold,qegp.Level_3_Threshold as Level3Threshold, qeg.QE_Grade_Effective_Date as EffectiveDate 
													,qeg.QE_Grade_Eff_End_Date as EffectiveEndDate, qegp.Party_Id_Administrator as [Owner] 
												from dbo.QualificationElementGrade qeg
													Inner join dbo.QEGradePerformancePoints qegp on qeg.QualificationElementGradeId=qegp.QualificationElementGradeId and qeg.AwardingOrganisationCentreId=qegp.AwardingOrganisationCentreId
												where qeg.Record_Delete_Flag=0 and qegp.Record_Delete_Flag=0			
											) q1
											where ' + @WhereClause + ') q2 
										WHERE q2.RowNumber BETWEEN @Skip AND @Take'

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

End
GO
PRINT N'Creating [dbo].[usp_SelectQEGradeBoundaryList]...';


GO
CREATE PROCEDURE [dbo].[usp_SelectQEGradeBoundaryList]
	@QualificationElementId int,
	@AwardingOrganisationCentreId int,	
	@AvailabilityId int,
	@OrderBy nvarchar(255) = 'QEOutcomeValueType asc, QEGrade asc',
	@GridWhereClause nvarchar(max) = null,
	@PageNumber int = 1,
	@PageSize int = 20,	
	@TotalCount int = 0 OUTPUT
AS
BEGIN

	SET NOCOUNT ON;

	SET @TotalCount = 0;

	Declare 
	@Skip int = (@PageNumber * @PageSize) - (@PageSize-1),

	@Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = '[AwardingOrganisationCentreId] = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
									' and [QualificationElementId] = ' + cast(@QualificationElementId as nvarchar(10))  +
									' and [QEAvailabilityId] = ' + cast(@AvailabilityId as nvarchar(10))  +
									' and RecordDeleteFlag = 0' +
								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end
	
	declare @CountQuery as nvarchar(max) = 
		N'Select 
			@TotalCountOut = Count(1) from
				(select
					g.AwardingOrganisationCentreId,
					m.QualificationElementId,
					e.QEAvailabilityId,	
					m.QEAvailabilityMaximumMarkId,
					m.[QE_Outcome_Value_Type] as QEOutcomeValueType,
					g.QEAMaxMarkGradeBoundaryId,
					g.QE_Grade as QEGrade,
					g.Grade_Boundary_Lower_Limit as GradeBoundaryLowerLimit,
					g.Record_Delete_Flag as RecordDeleteFlag 
				from  
					QEAvailability e 
					inner join [QEAvailabilityMaximumMark] m on 
						(e.AwardingOrganisationCentreId = m.AwardingOrganisationCentreId and
						e.QualificationElementId = m.QualificationElementId and
						e.QEA_Effective_Start_Date_Time = m.QEA_Effective_Start_Date_Time)
					inner join QEAMaxMarkGradeBoundary g on
						(m.AwardingOrganisationCentreId = g.AwardingOrganisationCentreId and
						m.QEAvailabilityMaximumMarkId = g.QEAvailabilityMaximumMarkId)) p
				 Where ' + @WhereClause
	
	 Declare @ListQuery as nvarchar(max)	

	Set @ListQuery=
	'Select 
		QEAvailabilityMaximumMarkId,
		QEAMaxMarkGradeBoundaryId,
		AwardingOrganisationCentreId,
		QualificationElementId,
		QEOutcomeValueType,		
		QEGrade,
		GradeBoundaryLowerLimit
	 from 
		(Select 
			AwardingOrganisationCentreId,
			QualificationElementId,
			QEAvailabilityId,
			QEAvailabilityMaximumMarkId,	
			QEOutcomeValueType,
			QEAMaxMarkGradeBoundaryId,
			QEGrade,
			GradeBoundaryLowerLimit,
			RecordDeleteFlag,
			ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
		from 
			(Select 
				AwardingOrganisationCentreId,
				QualificationElementId,
				QEAvailabilityId,
				QEAvailabilityMaximumMarkId,	
				QEOutcomeValueType,
				QEAMaxMarkGradeBoundaryId,
				QEGrade,
				GradeBoundaryLowerLimit,
				RecordDeleteFlag
			from
				(select
					g.AwardingOrganisationCentreId,
					m.QualificationElementId,
					e.QEAvailabilityId,	
					m.QEAvailabilityMaximumMarkId,
					m.[QE_Outcome_Value_Type] as QEOutcomeValueType,
					g.QEAMaxMarkGradeBoundaryId,
					g.QE_Grade as QEGrade,
					g.Grade_Boundary_Lower_Limit as GradeBoundaryLowerLimit,
					g.Record_Delete_Flag as RecordDeleteFlag 
				from  
					QEAvailability e 
					inner join [QEAvailabilityMaximumMark] m on 
						(e.AwardingOrganisationCentreId = m.AwardingOrganisationCentreId and
						e.QualificationElementId = m.QualificationElementId and
						e.QEA_Effective_Start_Date_Time = m.QEA_Effective_Start_Date_Time)
					inner join QEAMaxMarkGradeBoundary g on
						(m.AwardingOrganisationCentreId = g.AwardingOrganisationCentreId and
						m.QEAvailabilityMaximumMarkId = g.QEAvailabilityMaximumMarkId)
			) p Where ' + @WhereClause
		+ ') p1) p2 where p2.[RN] BETWEEN @Skip AND @Take'
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT

	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	
END
GO
PRINT N'Creating [dbo].[usp_SelectSuccessTransactionLog]...';


GO


--usp_SelectSuccessTransactionLog 1000,1, '[LastModifiedDate] desc','',1,20

CREATE PROCEDURE [dbo].[usp_SelectSuccessTransactionLog]
@SchoolId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[LastModifiedDate] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


SET @TotalCount = 0;
Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
@Take int = (@PageNumber * @PageSize),
@WhereClause nvarchar(max) = '[SchoolId] = ' + cast(@SchoolId as nvarchar(10)) 
							+ case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
							else ' and ' + @GridWhereClause end


SET @TotalCount = 0;
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(select are.CentreNumber,  ad.AONumber + '' '' + ao.Name as AwardingOrganisation, atm.OutgoingSequence,at.LastModifiedDate,am.TransactionName,atedi.FileName,atm.A2CMessageGuid
		,are.A2CTransactionRequestId,at.SchoolId
		from A2CTransactions at inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId
		inner join AwardingOrganisationCentres aoc on at.SchoolId=aoc.A2CSchoolId and at.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join AwardingOrganisations ao on ao.AwardingOrganisationId=ad.AwardingOrganisationId
		inner join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 
		inner join A2CTransactionResponses arp on are.SchoolId=arp.SchoolId and are.A2CTransactionRequestId=arp.A2CTransactionRequestId
		inner join A2CTransactionResponseEnvelopes arpe on arpe.SchoolId=arp.SchoolId and arpe.A2CTransactionResponseId=arp.A2CTransactionResponseId
		inner join A2CTransactionResponseEnvelopeSignals ares on arpe.SchoolId = ares.SchoolId and arpe.A2CTransactionResponseEnvelopeId = ares.A2CTransactionResponseEnvelopeId
		inner join SignalResponseMasters srm on ares.SignalResponseMasterId =  srm.SignalResponseMasterId
		left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
		left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
		where 
		am.TransactionName not in (''PullRequest'', ''Ping'')
		and srm.SignalResponseMasterId=1000		
	) p
		 Where ' + @WhereClause
	 
	

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'Select CentreNumber,AwardingOrganisation,OutgoingSequence,LastModifiedDate,TransactionName,FileName,A2CMessageGuid
		 ,A2CTransactionRequestId,SchoolId,RN
	 from (Select CentreNumber,AwardingOrganisation,OutgoingSequence,LastModifiedDate,TransactionName,FileName,A2CMessageGuid
		 ,A2CTransactionRequestId,SchoolId,
		 ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	 from 
		(select are.CentreNumber,  ad.AONumber + '' '' + ao.Name as AwardingOrganisation, atm.OutgoingSequence,at.LastModifiedDate,am.TransactionName,atedi.FileName,atm.A2CMessageGuid
		,are.A2CTransactionRequestId,at.SchoolId
		from A2CTransactions at inner join A2CTransactionMasters am on at.A2CTransactionMasterId=am.A2CTransactionMasterId
		inner join AwardingOrganisationCentres aoc on at.SchoolId=aoc.A2CSchoolId and at.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join AwardingOrganisations ao on ao.AwardingOrganisationId=ad.AwardingOrganisationId
		inner join A2CTransactionRequests are on at.SchoolId=are.SchoolId and at.A2CTransactionId=are.A2CTransactionId 
		inner join A2CTransactionResponses arp on are.SchoolId=arp.SchoolId and are.A2CTransactionRequestId=arp.A2CTransactionRequestId
		inner join A2CTransactionResponseEnvelopes arpe on arpe.SchoolId=arp.SchoolId and arpe.A2CTransactionResponseId=arp.A2CTransactionResponseId
		inner join A2CTransactionResponseEnvelopeSignals ares on arpe.SchoolId = ares.SchoolId and arpe.A2CTransactionResponseEnvelopeId = ares.A2CTransactionResponseEnvelopeId
		inner join SignalResponseMasters srm on ares.SignalResponseMasterId =  srm.SignalResponseMasterId
		left join A2CTransactionMessages atm on atm.SchoolId=at.SchoolId and atm.A2CTransactionId=at.A2CTransactionId
		left join A2CTransactionEDIs atedi on atedi.SchoolId=at.SchoolId and atedi.A2CTransactionId=at.A2CTransactionId
		where 
		am.TransactionName not in (''PullRequest'', ''Ping'')
		and srm.SignalResponseMasterId=1000
		) p
		Where ' + @WhereClause
	 + ') p2 where p2.[RN] BETWEEN @Skip AND @Take'
	 --print @CountQuery
	--print @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	print @TotalCount

END
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.9.2';


GO
PRINT N'Refreshing [dbo].[usp_GetActiveAwardingOrganisation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetActiveAwardingOrganisation]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Update complete.';


GO
