/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;



IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ENABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY ON 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

if(Select OBJECT_ID('PullMessageSync')) > 0
Begin
	Print 'Truncate PullMessageSync table'
	Truncate table PullMessageSync
End

GO

CREATE TABLE #AwardingOrganisationCentreCertificates(
	[AwardingOrganisationCentreId] [int] ,
	[AwardingOrganisationCertificateId] [int] ,
	[IsDeleted] [bit] NULL,
	[LastModifiedDate] [datetime])

INSERT INTO #AwardingOrganisationCentreCertificates
           ([AwardingOrganisationCentreId]
           ,[AwardingOrganisationCertificateId]
           ,[IsDeleted]
           ,[LastModifiedDate])		   
		   select [AwardingOrganisationCentreId]
           ,[AwardingOrganisationCertificateId]
           ,[IsDeleted]
           ,[LastModifiedDate] from 
		   AwardingOrganisationCentreCertificates

CREATE TABLE #AwardingOrganisationCertificates(
	[AwardingOrganisationCertificateId] [int],
	[A2CSchoolId] [int] NOT NULL,
	[AwardingOrganisationId] [int] NOT NULL,
	[LastModifiedDate] [datetime] NOT NULL,
	[AOCentreCertificate] [varbinary](max) NULL,
	[CertificatePassword] [nvarchar](50) NULL,
	[CertificateExpiredDate] [date] NULL,
	[CertificateFileName] [nvarchar](100) NULL)

Insert into #AwardingOrganisationCertificates
([AwardingOrganisationCertificateId],[A2CSchoolId]
           ,[AwardingOrganisationId]
           ,[LastModifiedDate]
           ,[AOCentreCertificate]
           ,[CertificatePassword]
           ,[CertificateExpiredDate]
           ,[CertificateFileName])
		   Select 
		    [AwardingOrganisationCertificateId],
		    [A2CSchoolId]
           ,AOD.AwardingOrganisationId
           ,AC.[LastModifiedDate]
           ,[AOCentreCertificate]
           ,[CertificatePassword]
           ,[CertificateExpiredDate]
           ,[CertificateFileName]
		   From AwardingOrganisationCertificates AC
		   INNER JOIN AwardingOrganisationDetails AOD  ON AC.AwardingOrganisationDetailId=AOD.AwardingOrganisationDetailId

delete from  AwardingOrganisationCentreCertificates
delete from AwardingOrganisationCertificates


GO

GO
PRINT N'Dropping [dbo].[DF_A2CTransactionEDIs_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionEDIs] DROP CONSTRAINT [DF_A2CTransactionEDIs_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[DF_AwardingOrganisationCertificates_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCertificates] DROP CONSTRAINT [DF_AwardingOrganisationCertificates_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[DF__A2CTransacti__Id__24285DB4]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] DROP CONSTRAINT [DF__A2CTransacti__Id__24285DB4];


GO
PRINT N'Dropping [dbo].[DF_A2CTransactionResponseEDIs_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] DROP CONSTRAINT [DF_A2CTransactionResponseEDIs_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[DF__A2CTransacti__Id__34B3CB38]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes] DROP CONSTRAINT [DF__A2CTransacti__Id__34B3CB38];


GO
PRINT N'Dropping [dbo].[DF_A2CTransactionResponseEnvelopes_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes] DROP CONSTRAINT [DF_A2CTransactionResponseEnvelopes_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[DF_A2CTransactionResponseEnvelopeSignalErrors_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignalErrors] DROP CONSTRAINT [DF_A2CTransactionResponseEnvelopeSignalErrors_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[DF_A2CTransactionResponseSignals_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals] DROP CONSTRAINT [DF_A2CTransactionResponseSignals_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[DF_A2CTransactions_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactions] DROP CONSTRAINT [DF_A2CTransactions_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[DF_A2CTransactionErrors_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionErrors] DROP CONSTRAINT [DF_A2CTransactionErrors_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[DF_A2CTransactionMessages_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionMessages] DROP CONSTRAINT [DF_A2CTransactionMessages_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[DF__A2CTransacti__Id__0D99FE17]...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests] DROP CONSTRAINT [DF__A2CTransacti__Id__0D99FE17];


GO
PRINT N'Dropping [dbo].[DF_A2CTransactionRequests_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests] DROP CONSTRAINT [DF_A2CTransactionRequests_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[DF__A2CTransacti__Id__27F8EE98]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP CONSTRAINT [DF__A2CTransacti__Id__27F8EE98];


GO
PRINT N'Dropping [dbo].[DF_A2CTransactionResponseEnvelopeMessages_DataImportStatus]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP CONSTRAINT [DF_A2CTransactionResponseEnvelopeMessages_DataImportStatus];


GO
PRINT N'Dropping [dbo].[DF_A2CTransactionResponseMessages_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP CONSTRAINT [DF_A2CTransactionResponseMessages_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[DF_A2CTransactionResponseExceptions_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseErrors] DROP CONSTRAINT [DF_A2CTransactionResponseExceptions_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[DF_A2CTransactionResponses_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponses] DROP CONSTRAINT [DF_A2CTransactionResponses_LastModifiedDate];


GO
PRINT N'Dropping [dbo].[FK_AwardingOrganizationCentreCertificates_AwardingOrganizationCertificates]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCentreCertificates] DROP CONSTRAINT [FK_AwardingOrganizationCentreCertificates_AwardingOrganizationCertificates];


GO
PRINT N'Dropping [dbo].[FK_AwardingOrganizationCertificates_A2CSchools]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCertificates] DROP CONSTRAINT [FK_AwardingOrganizationCertificates_A2CSchools];


GO
PRINT N'Dropping [dbo].[FK_AwardingOrganizationCertificates_AwardingOrganizations]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCertificates] DROP CONSTRAINT [FK_AwardingOrganizationCertificates_AwardingOrganizations];


GO
PRINT N'Dropping [dbo].[FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionResponseEnvelopes]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionResponseEnvelopes];


GO
PRINT N'Dropping [dbo].[FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionResponseEnvelopes]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionResponseEnvelopes];


GO
PRINT N'Dropping [dbo].[FK_A2CTransactionResponseEnvelopes_A2CTransactionResponses]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopes_A2CTransactionResponses];


GO
PRINT N'Dropping [dbo].[FK_A2CTransactionResponseEnvelopeSignalErrors_A2CTransactionResponseEnvelopeSignals]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignalErrors] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignalErrors_A2CTransactionResponseEnvelopeSignals];


GO
PRINT N'Dropping [dbo].[FK_A2CTransactionResponseEnvelopeSignals_A2CTransactionResponseEnvelopes]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignals_A2CTransactionResponseEnvelopes];


GO
PRINT N'Dropping [dbo].[FK_A2CTransactionResponses_A2CTransactionRequests]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponses] DROP CONSTRAINT [FK_A2CTransactionResponses_A2CTransactionRequests];


GO
PRINT N'Dropping [dbo].[FK_A2CTransactionResponseEnvelopeSignals_SignalResponseMasters]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignals_SignalResponseMasters];


GO
PRINT N'Dropping [dbo].[FK_A2CTransactionMessages_A2CTransactions]...';


GO
ALTER TABLE [dbo].[A2CTransactionMessages] DROP CONSTRAINT [FK_A2CTransactionMessages_A2CTransactions];


GO
PRINT N'Dropping [dbo].[FK_A2CTransactionRequests_A2CTransactions]...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests] DROP CONSTRAINT [FK_A2CTransactionRequests_A2CTransactions];


GO
PRINT N'Dropping [dbo].[FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionMasters]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] DROP CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionMasters];


GO
PRINT N'Dropping [dbo].[FK_A2CTransactionResponseExceptions_A2CTransactionResponses]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseErrors] DROP CONSTRAINT [FK_A2CTransactionResponseExceptions_A2CTransactionResponses];


GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionEDIs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionEDIs] (
    [A2CTransactionEDIId]          INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [A2CTransactionId]             INT            NOT NULL,
    [LastModifiedDate]             DATETIME       CONSTRAINT [DF_A2CTransactionEDIs_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [FileName]                     NVARCHAR (100) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CTransactionEDIs] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionEDIId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionEDIs])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionEDIs] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionEDIs] ([AwardingOrganisationCentreId], [A2CTransactionEDIId], [A2CTransactionId], [LastModifiedDate], [FileName])
        SELECT   [AwardingOrganisationCentreId],
                 [A2CTransactionEDIId],
                 [A2CTransactionId],
                 [LastModifiedDate],
                 [FileName]
        FROM     [dbo].[A2CTransactionEDIs]
        ORDER BY [AwardingOrganisationCentreId] ASC, [A2CTransactionEDIId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionEDIs] OFF;
    END

DROP TABLE [dbo].[A2CTransactionEDIs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionEDIs]', N'A2CTransactionEDIs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CTransactionEDIs]', N'PK_A2CTransactionEDIs', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
/*
The column [dbo].[A2CTransactionResponseEnvelopeEDIs].[A2CTransactionId] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopeEDIs].[A2CTransactionRequestId] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopeEDIs].[A2CTransactionResponseId] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionResponseEnvelopeEDIs]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeEDIs] (
    [A2CTransactionResponseEnvelopeEDIId] INT                        IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]        INT                        NOT NULL,
    [A2CTransactionResponseEnvelopeId]    INT                        NOT NULL,
    [FileName]                            NVARCHAR (100)             NULL,
    [LastModifiedDate]                    DATETIME                   CONSTRAINT [DF_A2CTransactionResponseEDIs_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                  UNIQUEIDENTIFIER           CONSTRAINT [DF__A2CTransacti__Id__24285DB4] DEFAULT (newid()) ROWGUIDCOL NOT NULL,
    [data]                                VARBINARY (MAX) FILESTREAM NULL,
    [MessageAwardingOrganisationCentreId] INT                        NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CTransactionResponseEnvelopeEDIs] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionResponseEnvelopeEDIId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UQ__A2CTrans__3214EC06C5BC8BDB] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionResponseEnvelopeEDIs])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeEDIs] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeEDIs] ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeEDIId], [A2CTransactionResponseEnvelopeId], [FileName], [LastModifiedDate], [Id], [data])
        SELECT   [AwardingOrganisationCentreId],
                 [A2CTransactionResponseEnvelopeEDIId],
                 [A2CTransactionResponseEnvelopeId],
                 [FileName],
                 [LastModifiedDate],
                 [Id],
                 [data]
        FROM     [dbo].[A2CTransactionResponseEnvelopeEDIs]
        ORDER BY [AwardingOrganisationCentreId] ASC, [A2CTransactionResponseEnvelopeEDIId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeEDIs] OFF;
    END

DROP TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeEDIs]', N'A2CTransactionResponseEnvelopeEDIs';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CTransactionResponseEnvelopeEDIs]', N'PK_A2CTransactionResponseEnvelopeEDIs', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UQ__A2CTrans__3214EC06C5BC8BDB]', N'UQ__A2CTrans__3214EC06C5BC8BDB', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
/*
The column [dbo].[A2CTransactionResponseEnvelopeMessages].[A2CTransactionId] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopeMessages].[A2CTransactionRequestId] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopeMessages].[A2CTransactionResponseId] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionResponseEnvelopeMessages]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeMessages] (
    [A2CTransactionResponseEnvelopeMessageId] INT                        IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]            INT                        NOT NULL,
    [A2CTransactionResponseEnvelopeId]        INT                        NOT NULL,
    [MessageId]                               NVARCHAR (50)              NULL,
    [RefMessageId]                            NVARCHAR (50)              NULL,
    [TimeStamp]                               DATETIME                   NULL,
    [A2CMessageId]                            INT                        NULL,
    [A2CTransactionMasterId]                  INT                        NULL,
    [IncomingSequence]                        INT                        NULL,
    [LastModifiedDate]                        DATETIME                   CONSTRAINT [DF_A2CTransactionResponseMessages_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                                      UNIQUEIDENTIFIER           CONSTRAINT [DF__A2CTransacti__Id__27F8EE98] DEFAULT (newid()) ROWGUIDCOL NOT NULL,
    [data]                                    VARBINARY (MAX) FILESTREAM NULL,
    [IsFeedbackMessage]                       BIT                        NULL,
    [DataImportStatus]                        SMALLINT                   CONSTRAINT [DF_A2CTransactionResponseEnvelopeMessages_DataImportStatus] DEFAULT ((0)) NULL,
    [MessageAwardingOrganisationCentreId]     INT                        NULL,
    [IsMessageLevelFeedbackMessage]           BIT                        NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CTransactionResponseEnvelopeMessages] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionResponseEnvelopeMessageId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UQ__A2CTrans__3214EC06E7A133DC] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionResponseEnvelopeMessages])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeMessages] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeMessages] ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeMessageId], [A2CTransactionResponseEnvelopeId], [MessageId], [RefMessageId], [TimeStamp], [A2CMessageId], [A2CTransactionMasterId], [IncomingSequence], [LastModifiedDate], [Id], [data], [IsFeedbackMessage], [DataImportStatus])
        SELECT   [AwardingOrganisationCentreId],
                 [A2CTransactionResponseEnvelopeMessageId],
                 [A2CTransactionResponseEnvelopeId],
                 [MessageId],
                 [RefMessageId],
                 [TimeStamp],
                 [A2CMessageId],
                 [A2CTransactionMasterId],
                 [IncomingSequence],
                 [LastModifiedDate],
                 [Id],
                 [data],
                 [IsFeedbackMessage],
                 [DataImportStatus]
        FROM     [dbo].[A2CTransactionResponseEnvelopeMessages]
        ORDER BY [AwardingOrganisationCentreId] ASC, [A2CTransactionResponseEnvelopeMessageId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeMessages] OFF;
    END

DROP TABLE [dbo].[A2CTransactionResponseEnvelopeMessages];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeMessages]', N'A2CTransactionResponseEnvelopeMessages';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CTransactionResponseEnvelopeMessages]', N'PK_A2CTransactionResponseEnvelopeMessages', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UQ__A2CTrans__3214EC06E7A133DC]', N'UQ__A2CTrans__3214EC06E7A133DC', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
/*
The column [dbo].[A2CTransactionResponseEnvelopes].[A2CTransactionId] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopes].[A2CTransactionRequestId] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionResponseEnvelopes]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopes] (
    [A2CTransactionResponseEnvelopeId] INT                        IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]     INT                        NOT NULL,
    [A2CTransactionResponseId]         INT                        NOT NULL,
    [IsSignalMessage]                  BIT                        NULL,
    [LastModifiedDate]                 DATETIME                   CONSTRAINT [DF_A2CTransactionResponseEnvelopes_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                               UNIQUEIDENTIFIER           CONSTRAINT [DF__A2CTransacti__Id__34B3CB38] DEFAULT (newid()) ROWGUIDCOL NOT NULL,
    [ResponseEnvelope]                 VARBINARY (MAX) FILESTREAM NULL,
    [IsEDIMessage]                     BIT                        NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CTransactionResponseEnvelopes] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionResponseEnvelopeId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UQ__A2CTrans__3214EC068F756BDD] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionResponseEnvelopes])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopes] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopes] ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeId], [A2CTransactionResponseId], [IsSignalMessage], [LastModifiedDate], [Id], [ResponseEnvelope], [IsEDIMessage])
        SELECT   [AwardingOrganisationCentreId],
                 [A2CTransactionResponseEnvelopeId],
                 [A2CTransactionResponseId],
                 [IsSignalMessage],
                 [LastModifiedDate],
                 [Id],
                 [ResponseEnvelope],
                 [IsEDIMessage]
        FROM     [dbo].[A2CTransactionResponseEnvelopes]
        ORDER BY [AwardingOrganisationCentreId] ASC, [A2CTransactionResponseEnvelopeId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopes] OFF;
    END

DROP TABLE [dbo].[A2CTransactionResponseEnvelopes];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopes]', N'A2CTransactionResponseEnvelopes';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CTransactionResponseEnvelopes]', N'PK_A2CTransactionResponseEnvelopes', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UQ__A2CTrans__3214EC068F756BDD]', N'UQ__A2CTrans__3214EC068F756BDD', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
/*
The column [dbo].[A2CTransactionResponseEnvelopeSignalErrors].[A2CTransactionId] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopeSignalErrors].[A2CTransactionRequestId] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopeSignalErrors].[A2CTransactionResponseEnvelopeId] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopeSignalErrors].[A2CTransactionResponseId] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionResponseEnvelopeSignalErrors]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeSignalErrors] (
    [A2CTransactionResponseEnvelopeSignalErrorId] INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]                INT            NOT NULL,
    [A2CTransactionResponseEnvelopeSignalId]      INT            NOT NULL,
    [ErrorCode]                                   NVARCHAR (50)  NULL,
    [ErrorDetail]                                 NVARCHAR (MAX) NULL,
    [Origin]                                      NVARCHAR (MAX) NULL,
    [RefMessageId]                                NVARCHAR (50)  NULL,
    [Severity]                                    NVARCHAR (50)  NULL,
    [ShortDescription]                            NVARCHAR (50)  NULL,
    [Category]                                    NVARCHAR (50)  NULL,
    [Description]                                 NVARCHAR (MAX) NULL,
    [LastModifiedDate]                            DATETIME       CONSTRAINT [DF_A2CTransactionResponseEnvelopeSignalErrors_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CTransactionResponseEnvelopeSignalErrors] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionResponseEnvelopeSignalErrorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionResponseEnvelopeSignalErrors])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeSignalErrors] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeSignalErrors] ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeSignalErrorId], [A2CTransactionResponseEnvelopeSignalId], [ErrorCode], [ErrorDetail], [Origin], [RefMessageId], [Severity], [ShortDescription], [Category], [Description], [LastModifiedDate])
        SELECT   [AwardingOrganisationCentreId],
                 [A2CTransactionResponseEnvelopeSignalErrorId],
                 [A2CTransactionResponseEnvelopeSignalId],
                 [ErrorCode],
                 [ErrorDetail],
                 [Origin],
                 [RefMessageId],
                 [Severity],
                 [ShortDescription],
                 [Category],
                 [Description],
                 [LastModifiedDate]
        FROM     [dbo].[A2CTransactionResponseEnvelopeSignalErrors]
        ORDER BY [AwardingOrganisationCentreId] ASC, [A2CTransactionResponseEnvelopeSignalErrorId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeSignalErrors] OFF;
    END

DROP TABLE [dbo].[A2CTransactionResponseEnvelopeSignalErrors];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeSignalErrors]', N'A2CTransactionResponseEnvelopeSignalErrors';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CTransactionResponseEnvelopeSignalErrors]', N'PK_A2CTransactionResponseEnvelopeSignalErrors', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
/*
The column [dbo].[A2CTransactionResponseEnvelopeSignals].[A2CTransactionId] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopeSignals].[A2CTransactionRequestId] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseEnvelopeSignals].[A2CTransactionResponseId] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionResponseEnvelopeSignals]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeSignals] (
    [A2CTransactionResponseEnvelopeSignalId] INT      IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]           INT      NOT NULL,
    [A2CTransactionResponseEnvelopeId]       INT      NOT NULL,
    [SignalResponseMasterId]                 INT      NULL,
    [LastModifiedDate]                       DATETIME CONSTRAINT [DF_A2CTransactionResponseSignals_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CTransactionResponseEnvelopeSignals] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionResponseEnvelopeSignalId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionResponseEnvelopeSignals])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeSignals] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeSignals] ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeSignalId], [A2CTransactionResponseEnvelopeId], [SignalResponseMasterId], [LastModifiedDate])
        SELECT   [AwardingOrganisationCentreId],
                 [A2CTransactionResponseEnvelopeSignalId],
                 [A2CTransactionResponseEnvelopeId],
                 [SignalResponseMasterId],
                 [LastModifiedDate]
        FROM     [dbo].[A2CTransactionResponseEnvelopeSignals]
        ORDER BY [AwardingOrganisationCentreId] ASC, [A2CTransactionResponseEnvelopeSignalId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeSignals] OFF;
    END

DROP TABLE [dbo].[A2CTransactionResponseEnvelopeSignals];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionResponseEnvelopeSignals]', N'A2CTransactionResponseEnvelopeSignals';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CTransactionResponseEnvelopeSignals]', N'PK_A2CTransactionResponseEnvelopeSignals', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
/*
The column [dbo].[A2CTransactionResponseErrors].[A2CTransactionId] is being dropped, data loss could occur.

The column [dbo].[A2CTransactionResponseErrors].[A2CTransactionRequestId] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionResponseErrors]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionResponseErrors] (
    [A2CTransactionResponseErrorId] INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId]  INT            NOT NULL,
    [A2CTransactionResponseId]      INT            NOT NULL,
    [ErrorDescription]              NVARCHAR (MAX) NULL,
    [LastModifiedDate]              DATETIME       CONSTRAINT [DF_A2CTransactionResponseExceptions_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CTransactionResponseErrors] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionResponseErrorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionResponseErrors])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseErrors] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionResponseErrors] ([AwardingOrganisationCentreId], [A2CTransactionResponseErrorId], [A2CTransactionResponseId], [ErrorDescription], [LastModifiedDate])
        SELECT   [AwardingOrganisationCentreId],
                 [A2CTransactionResponseErrorId],
                 [A2CTransactionResponseId],
                 [ErrorDescription],
                 [LastModifiedDate]
        FROM     [dbo].[A2CTransactionResponseErrors]
        ORDER BY [AwardingOrganisationCentreId] ASC, [A2CTransactionResponseErrorId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponseErrors] OFF;
    END

DROP TABLE [dbo].[A2CTransactionResponseErrors];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionResponseErrors]', N'A2CTransactionResponseErrors';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CTransactionResponseErrors]', N'PK_A2CTransactionResponseErrors', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
/*
The column [dbo].[A2CTransactionResponses].[A2CTransactionId] is being dropped, data loss could occur.
*/
GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionResponses]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionResponses] (
    [A2CTransactionResponseId]     INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [A2CTransactionRequestId]      INT            NOT NULL,
    [TransactionResponseStatus]    NVARCHAR (200) NULL,
    [LastModifiedDate]             DATETIME       CONSTRAINT [DF_A2CTransactionResponses_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [IsErrorAssociated]            BIT            NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CTransactionResponses] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionResponseId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionResponses])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponses] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionResponses] ([AwardingOrganisationCentreId], [A2CTransactionResponseId], [A2CTransactionRequestId], [TransactionResponseStatus], [LastModifiedDate], [IsErrorAssociated])
        SELECT   [AwardingOrganisationCentreId],
                 [A2CTransactionResponseId],
                 [A2CTransactionRequestId],
                 [TransactionResponseStatus],
                 [LastModifiedDate],
                 [IsErrorAssociated]
        FROM     [dbo].[A2CTransactionResponses]
        ORDER BY [AwardingOrganisationCentreId] ASC, [A2CTransactionResponseId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionResponses] OFF;
    END

DROP TABLE [dbo].[A2CTransactionResponses];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionResponses]', N'A2CTransactionResponses';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CTransactionResponses]', N'PK_A2CTransactionResponses', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
/*
The column [dbo].[AwardingOrganisationCertificates].[AwardingOrganisationDetailId] is being dropped, data loss could occur.

The column [dbo].[AwardingOrganisationCertificates].[AwardingOrganisationId] on table [dbo].[AwardingOrganisationCertificates] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/
GO
PRINT N'Starting rebuilding table [dbo].[AwardingOrganisationCertificates]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_AwardingOrganisationCertificates] (
    [AwardingOrganisationCertificateId] INT             IDENTITY (1000, 1) NOT NULL,
    [A2CSchoolId]                       INT             NOT NULL,
    [AwardingOrganisationId]            INT             NOT NULL,
    [LastModifiedDate]                  DATETIME        CONSTRAINT [DF_AwardingOrganisationCertificates_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [AOCentreCertificate]               VARBINARY (MAX) NULL,
    [CertificatePassword]               NVARCHAR (50)   NULL,
    [CertificateExpiredDate]            DATE            NULL,
    [CertificateFileName]               NVARCHAR (100)  NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_AwardingOrganizationCertificates] PRIMARY KEY CLUSTERED ([AwardingOrganisationCertificateId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[AwardingOrganisationCertificates])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_AwardingOrganisationCertificates] ON;
        INSERT INTO [dbo].[tmp_ms_xx_AwardingOrganisationCertificates] ([AwardingOrganisationCertificateId], [A2CSchoolId], [LastModifiedDate], [AOCentreCertificate], [CertificatePassword], [CertificateExpiredDate], [CertificateFileName])
        SELECT   [AwardingOrganisationCertificateId],
                 [A2CSchoolId],
                 [LastModifiedDate],
                 [AOCentreCertificate],
                 [CertificatePassword],
                 [CertificateExpiredDate],
                 [CertificateFileName]
        FROM     [dbo].[AwardingOrganisationCertificates]
        ORDER BY [AwardingOrganisationCertificateId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_AwardingOrganisationCertificates] OFF;
    END

DROP TABLE [dbo].[AwardingOrganisationCertificates];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_AwardingOrganisationCertificates]', N'AwardingOrganisationCertificates';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_AwardingOrganizationCertificates]', N'PK_AwardingOrganizationCertificates', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
/*
The column [dbo].[PullMessageSync].[AwardingOrganisationDetailId] is being dropped, data loss could occur.

The column [dbo].[PullMessageSync].[CentreId] is being dropped, data loss could occur.

The column [dbo].[PullMessageSync].[A2CSchoolId] on table [dbo].[PullMessageSync] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [dbo].[PullMessageSync].[AwardingOrganisationId] on table [dbo].[PullMessageSync] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/
GO
PRINT N'Starting rebuilding table [dbo].[PullMessageSync]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_PullMessageSync] (
    [A2CSchoolId]            INT           NOT NULL,
    [AwardingOrganisationId] INT           NOT NULL,
    [Status]                 BIT           NOT NULL,
    [Timestamp]              SMALLDATETIME NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_PullMessageSync] PRIMARY KEY CLUSTERED ([A2CSchoolId] ASC, [AwardingOrganisationId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[PullMessageSync])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_PullMessageSync] ([Status], [Timestamp])
        SELECT [Status],
               [Timestamp]
        FROM   [dbo].[PullMessageSync];
    END

DROP TABLE [dbo].[PullMessageSync];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_PullMessageSync]', N'PullMessageSync';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_PullMessageSync]', N'PK_PullMessageSync', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionErrors]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionErrors] (
    [A2CTransactionErrorId]        INT            IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT            NOT NULL,
    [A2CTransactionId]             INT            NOT NULL,
    [ErrorDescription]             NVARCHAR (MAX) NULL,
    [LastModifiedDate]             DATETIME       CONSTRAINT [DF_A2CTransactionErrors_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CTransactionErrors] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionErrorId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionErrors])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionErrors] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionErrors] ([AwardingOrganisationCentreId], [A2CTransactionErrorId], [A2CTransactionId], [ErrorDescription], [LastModifiedDate])
        SELECT   [AwardingOrganisationCentreId],
                 [A2CTransactionErrorId],
                 [A2CTransactionId],
                 [ErrorDescription],
                 [LastModifiedDate]
        FROM     [dbo].[A2CTransactionErrors]
        ORDER BY [AwardingOrganisationCentreId] ASC, [A2CTransactionErrorId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionErrors] OFF;
    END

DROP TABLE [dbo].[A2CTransactionErrors];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionErrors]', N'A2CTransactionErrors';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CTransactionErrors]', N'PK_A2CTransactionErrors', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionMessages]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionMessages] (
    [A2CTransactionMessageId]      INT              IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT              NOT NULL,
    [A2CTransactionId]             INT              NOT NULL,
    [A2CMessageGuid]               UNIQUEIDENTIFIER NOT NULL,
    [OutgoingSequence]             BIGINT           NOT NULL,
    [LastModifiedDate]             DATETIME         CONSTRAINT [DF_A2CTransactionMessages_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CTransactionMessages] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionMessageId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionMessages])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionMessages] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionMessages] ([AwardingOrganisationCentreId], [A2CTransactionMessageId], [A2CTransactionId], [A2CMessageGuid], [OutgoingSequence], [LastModifiedDate])
        SELECT   [AwardingOrganisationCentreId],
                 [A2CTransactionMessageId],
                 [A2CTransactionId],
                 [A2CMessageGuid],
                 [OutgoingSequence],
                 [LastModifiedDate]
        FROM     [dbo].[A2CTransactionMessages]
        ORDER BY [AwardingOrganisationCentreId] ASC, [A2CTransactionMessageId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionMessages] OFF;
    END

DROP TABLE [dbo].[A2CTransactionMessages];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionMessages]', N'A2CTransactionMessages';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CTransactionMessages]', N'PK_A2CTransactionMessages', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[A2CTransactionRequests]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_A2CTransactionRequests] (
    [A2CTransactionRequestId]      INT                        IDENTITY (1000, 1) NOT NULL,
    [AwardingOrganisationCentreId] INT                        NOT NULL,
    [A2CTransactionId]             INT                        NOT NULL,
    [A2CTransactionGuid]           NVARCHAR (50)              NOT NULL,
    [EndPoint]                     NVARCHAR (300)             NULL,
    [LastModifiedDate]             DATETIME                   CONSTRAINT [DF_A2CTransactionRequests_LastModifiedDate] DEFAULT (getutcdate()) NOT NULL,
    [Id]                           UNIQUEIDENTIFIER           CONSTRAINT [DF__A2CTransacti__Id__0D99FE17] DEFAULT (newid()) ROWGUIDCOL NOT NULL,
    [Envelope]                     VARBINARY (MAX) FILESTREAM NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_A2CTransactionRequests_1] PRIMARY KEY CLUSTERED ([AwardingOrganisationCentreId] ASC, [A2CTransactionRequestId] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UQ__A2CTrans__3214EC06A4AD1F24] UNIQUE NONCLUSTERED ([Id] ASC)
) FILESTREAM_ON [FileStream];

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[A2CTransactionRequests])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionRequests] ON;
        INSERT INTO [dbo].[tmp_ms_xx_A2CTransactionRequests] ([AwardingOrganisationCentreId], [A2CTransactionRequestId], [A2CTransactionId], [A2CTransactionGuid], [EndPoint], [LastModifiedDate], [Id], [Envelope])
        SELECT   [AwardingOrganisationCentreId],
                 [A2CTransactionRequestId],
                 [A2CTransactionId],
                 [A2CTransactionGuid],
                 [EndPoint],
                 [LastModifiedDate],
                 [Id],
                 [Envelope]
        FROM     [dbo].[A2CTransactionRequests]
        ORDER BY [AwardingOrganisationCentreId] ASC, [A2CTransactionRequestId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_A2CTransactionRequests] OFF;
    END

DROP TABLE [dbo].[A2CTransactionRequests];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_A2CTransactionRequests]', N'A2CTransactionRequests';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_A2CTransactionRequests_1]', N'PK_A2CTransactionRequests_1', N'OBJECT';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_UQ__A2CTrans__3214EC06A4AD1F24]', N'UQ__A2CTrans__3214EC06A4AD1F24', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[DF_A2CTransactions_LastModifiedDate]...';


GO
ALTER TABLE [dbo].[A2CTransactions]
    ADD CONSTRAINT [DF_A2CTransactions_LastModifiedDate] DEFAULT (getutcdate()) FOR [LastModifiedDate];


GO
PRINT N'Creating [dbo].[FK_A2CTransactionEDIs_A2CTransactions]...';


GO
ALTER TABLE [dbo].[A2CTransactionEDIs] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionEDIs_A2CTransactions] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId]) REFERENCES [dbo].[A2CTransactions] ([AwardingOrganisationCentreId], [A2CTransactionId]);


GO
PRINT N'Creating [dbo].[FK_AwardingOrganizationCentreCertificates_AwardingOrganizationCertificates]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCentreCertificates] WITH NOCHECK
    ADD CONSTRAINT [FK_AwardingOrganizationCentreCertificates_AwardingOrganizationCertificates] FOREIGN KEY ([AwardingOrganisationCertificateId]) REFERENCES [dbo].[AwardingOrganisationCertificates] ([AwardingOrganisationCertificateId]);


GO
PRINT N'Creating [dbo].[FK_AwardingOrganizationCertificates_A2CSchools]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCertificates] WITH NOCHECK
    ADD CONSTRAINT [FK_AwardingOrganizationCertificates_A2CSchools] FOREIGN KEY ([A2CSchoolId]) REFERENCES [dbo].[A2CSchools] ([A2CSchoolId]);


GO
PRINT N'Creating [dbo].[FK_AwardingOrganisationCertificates_AwardingOrganisations]...';


GO
ALTER TABLE [dbo].[AwardingOrganisationCertificates] WITH NOCHECK
    ADD CONSTRAINT [FK_AwardingOrganisationCertificates_AwardingOrganisations] FOREIGN KEY ([AwardingOrganisationId]) REFERENCES [dbo].[AwardingOrganisations] ([AwardingOrganisationId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionResponseEnvelopes]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionResponseEnvelopes] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopes] ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionResponseEnvelopes]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionResponseEnvelopes] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopes] ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopes_A2CTransactionResponses]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopes_A2CTransactionResponses] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionResponseId]) REFERENCES [dbo].[A2CTransactionResponses] ([AwardingOrganisationCentreId], [A2CTransactionResponseId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeSignalErrors_A2CTransactionResponseEnvelopeSignals]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignalErrors] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignalErrors_A2CTransactionResponseEnvelopeSignals] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeSignalId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopeSignals] ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeSignalId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeSignals_A2CTransactionResponseEnvelopes]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignals_A2CTransactionResponseEnvelopes] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeId]) REFERENCES [dbo].[A2CTransactionResponseEnvelopes] ([AwardingOrganisationCentreId], [A2CTransactionResponseEnvelopeId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponses_A2CTransactionRequests]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponses] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponses_A2CTransactionRequests] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionRequestId]) REFERENCES [dbo].[A2CTransactionRequests] ([AwardingOrganisationCentreId], [A2CTransactionRequestId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeEDIs_AwardingOrganisationCentres]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_AwardingOrganisationCentres] FOREIGN KEY ([MessageAwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeSignals_SignalResponseMasters]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignals_SignalResponseMasters] FOREIGN KEY ([SignalResponseMasterId]) REFERENCES [dbo].[SignalResponseMasters] ([SignalResponseMasterId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionErrors_A2CTransactions]...';


GO
ALTER TABLE [dbo].[A2CTransactionErrors] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionErrors_A2CTransactions] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId]) REFERENCES [dbo].[A2CTransactions] ([AwardingOrganisationCentreId], [A2CTransactionId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionMessages_A2CTransactions]...';


GO
ALTER TABLE [dbo].[A2CTransactionMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionMessages_A2CTransactions] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId]) REFERENCES [dbo].[A2CTransactions] ([AwardingOrganisationCentreId], [A2CTransactionId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionRequests_A2CTransactions]...';


GO
ALTER TABLE [dbo].[A2CTransactionRequests] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionRequests_A2CTransactions] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionId]) REFERENCES [dbo].[A2CTransactions] ([AwardingOrganisationCentreId], [A2CTransactionId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionMasters]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionMasters] FOREIGN KEY ([A2CTransactionMasterId]) REFERENCES [dbo].[A2CTransactionMasters] ([A2CTransactionMasterId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseEnvelopeMessages_AwardingOrganisationCentres]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_AwardingOrganisationCentres] FOREIGN KEY ([MessageAwardingOrganisationCentreId]) REFERENCES [dbo].[AwardingOrganisationCentres] ([AwardingOrganisationCentreId]);


GO
PRINT N'Creating [dbo].[FK_A2CTransactionResponseErrors_A2CTransactionResponses]...';


GO
ALTER TABLE [dbo].[A2CTransactionResponseErrors] WITH NOCHECK
    ADD CONSTRAINT [FK_A2CTransactionResponseErrors_A2CTransactionResponses] FOREIGN KEY ([AwardingOrganisationCentreId], [A2CTransactionResponseId]) REFERENCES [dbo].[A2CTransactionResponses] ([AwardingOrganisationCentreId], [A2CTransactionResponseId]);


GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopeEDIs]...';


GO




ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeEDIs]
@AwardingOrganisationCentreId int,
@A2CTransactionResponseEnvelopeId int,
@data varbinary(max) ,
@FileName nvarchar(100),
@AwardingOrganisationNumber nvarchar(200),
@CentreNumber nvarchar(200),
@A2CSchoolId int
AS
BEGIN
	Declare @MessageAwardingOrganisationCentreId int
	Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
	inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
	inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
	where 
	aoc.A2CSchoolId=@A2CSchoolId and
	c.CentreNumber=@CentreNumber and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
	and ad.AONumber=@AwardingOrganisationNumber

	If @MessageAwardingOrganisationCentreId is null
	begin
		Select @CentreNumber = c.CentreNumber, @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
		inner join AwardingOrganisationAOAssignedCentres aoassign on aoassign.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		and aoassign.A2CSchoolId=aoc.A2CSchoolId
		where 
		aoc.A2CSchoolId=@A2CSchoolId 
		and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
		and aoassign.AOAssignCentreNumber=@CentreNumber
		and ad.AONumber=@AwardingOrganisationNumber
	end

	Insert into A2CTransactionResponseEnvelopeEDIs (AwardingOrganisationCentreId,A2CTransactionResponseEnvelopeId,[data],FileName, MessageAwardingOrganisationCentreId)
	values(@AwardingOrganisationCentreId,@A2CTransactionResponseEnvelopeId,@data,@FileName,@MessageAwardingOrganisationCentreId)
	
	select @CentreNumber
END
GO
PRINT N'Altering [dbo].[USP_IMPORTXMLEXCEPTION]...';


GO

ALTER PROCEDURE USP_IMPORTXMLEXCEPTION(
	@MessageAwardingOrganisationCentreId		int, 
	@A2CTransactionResponseEnvelopeMessageId	int,
	@TransactionName							nvarchar(100),
	@MessageID									nvarchar(100),
	@SchoolID									int,
	@ScreenMasterId								int,
	@CentreNumber								nvarchar(100),
	@AONumber									nvarchar(100),
	@ErrorDataBlock								nvarchar(500)
) AS BEGIN

	PRINT 'EXCEPTION IN XML IMPORT'
	PRINT ERROR_NUMBER() 		
	PRINT ERROR_LINE() 
	PRINT ERROR_MESSAGE()

	---------------------------------------------------
	----- Variable Declarations -----------------------
	---------------------------------------------------
	DECLARE 
	@ErrorMessageWithIDs	nvarchar(MAX)

	SET @ErrorMessageWithIDs = 
		'Exception in processing Product catalogue - "' 
		+ @ErrorDataBlock + '" area/Data Block'
		+ CHAR(13)
		+ 'ERROR_NUMBER=' + cast(ERROR_NUMBER() as nvarchar) 
		+ ', ERROR_LINE=' + cast(ERROR_LINE() as nvarchar) 
		+ ', ERROR_MESSAGE=' + ERROR_MESSAGE()
		+ CHAR(13)
		+ 'Message ID=' + @MessageID
		+ ', Transaction Name=' + @TransactionName
		+ ', AO ID=' + @AONumber
		+ ', Centre ID=' + @CentreNumber 
		+ CHAR(13)
		+ 'MessageAwardingOrganisationCentreId=' + cast(@MessageAwardingOrganisationCentreId as nvarchar) 
		+ ', A2CTransactionResponseEnvelopeMessageId=' + cast(@A2CTransactionResponseEnvelopeMessageId as nvarchar)		

	PRINT 'Error Message'
	PRINT @ErrorMessageWithIDs
							
	INSERT into ErrorLogs(
		ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage, A2CTransactionResponseEnvelopeMessageId,MessageID)				
	VALUES (@ScreenMasterId, @SchoolID, @MessageAwardingOrganisationCentreId, @ErrorMessageWithIDs, @A2CTransactionResponseEnvelopeMessageId,@MessageID)
									
END
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]...';


GO

ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]
@A2CSchoolId int,
@AwardingOrganisationDetailId int,
@CentreId int,
@A2CTransactionResponseEnvelopeId int,
@MessageId nvarchar(50),
@RefMessageId nvarchar(50)=null,
@TimeStamp datetime,
@TransactionName nvarchar(100)=null,
@IncomingSequence bigint=null,
@data varbinary(max),
@IsFeedbackMessage  bit,
@AwardingOrganisationCentreId int,
@AwardingOrganisationNumber nvarchar(200),
@CentreNumber nvarchar(200),
@IsMessageLevelFeedbackMessage bit
AS
BEGIN
	DECLARE @A2CTransactionMasterId INT
	Declare @MessageAwardingOrganisationCentreId int
	EXEC @A2CTransactionMasterId= [usp_Select_A2CTransactionMasters_IdByName] @TransactionName
	Declare @A2CMessageId int

	Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
	inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
	inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
	where 
	aoc.A2CSchoolId=@A2CSchoolId and
	c.CentreNumber=@CentreNumber and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
	and ad.AONumber=@AwardingOrganisationNumber

	If @MessageAwardingOrganisationCentreId is null
	begin
		Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
		inner join AwardingOrganisationAOAssignedCentres aoassign on aoassign.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		and aoassign.A2CSchoolId=aoc.A2CSchoolId
		where 
		aoc.A2CSchoolId=@A2CSchoolId 
		and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
		and aoassign.AOAssignCentreNumber=@CentreNumber
		and ad.AONumber=@AwardingOrganisationNumber
	end
	--if @RefMessageId<>null and @RefMessageId<>''
	--begin
	--	SELECT @A2CMessageId= A2CMessageId FROM A2CXmlMessages WHERE A2CSchoolId=@A2CSchoolId
	--	AND CentreId=@CentreId AND AwardingOrganisationDetailId=@AwardingOrganisationDetailId AND A2CMessageGuid=@RefMessageId
	--end

	

	Insert into A2CTransactionResponseEnvelopeMessages (A2CTransactionResponseEnvelopeId,MessageId,RefMessageId,[TimeStamp],A2CTransactionMasterId,IncomingSequence,[data],IsFeedbackMessage,A2CMessageId,AwardingOrganisationCentreId,MessageAwardingOrganisationCentreId,IsMessageLevelFeedbackMessage)
	values(@A2CTransactionResponseEnvelopeId,@MessageId,@RefMessageId,@TimeStamp,@A2CTransactionMasterId,@IncomingSequence,@data,@IsFeedbackMessage,@A2CMessageId,@AwardingOrganisationCentreId,@MessageAwardingOrganisationCentreId,@IsMessageLevelFeedbackMessage)
	select cast(SCOPE_IdENTITY() as int)

	if @IncomingSequence is not null and @IncomingSequence>0 
	begin
		update AwardingOrganisationCentres
		set IncomingSequence=@IncomingSequence
		where AwardingOrganisationCentreId = @AwardingOrganisationCentreId
	end
END
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopes]...';


GO

ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopes]
@A2CTransactionResponseId int,
@IsSignalMessage bit,
@ResponseEnvelope varbinary(max) ,
@IsEDIMessage bit,
@AwardingOrganisationCentreId int
AS
BEGIN
	Insert into A2CTransactionResponseEnvelopes (A2CTransactionResponseId,IsSignalMessage,ResponseEnvelope,IsEDIMessage,AwardingOrganisationCentreId)
	values(@A2CTransactionResponseId,@IsSignalMessage
	,@ResponseEnvelope,@IsEDIMessage,@AwardingOrganisationCentreId)

SELECT CAST(SCOPE_IdENTITY() AS INT)

END
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopeSignalErrors]...';


GO

 ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeSignalErrors] 
@A2CTransactionResponseEnvelopeSignalId int,
@ErrorCode nvarchar(50)=null,
@ErrorDetail nvarchar(max)=null,
@Origin nvarchar(max)=null,
@RefMessageId nvarchar(50)=null,
@Severity nvarchar(50)=null,
@ShortDescription nvarchar(50)=null,
@Category nvarchar(50)=null,
@Description nvarchar(max)=null,
@AwardingOrganisationCentreId int 
AS
BEGIN
	Insert into A2CTransactionResponseEnvelopeSignalErrors (A2CTransactionResponseEnvelopeSignalId,ErrorCode,ErrorDetail,Origin,RefMessageId,Severity,ShortDescription,Category,Description,AwardingOrganisationCentreId)
	values(@A2CTransactionResponseEnvelopeSignalId,@ErrorCode,@ErrorDetail,@Origin,@RefMessageId,@Severity,@ShortDescription,@Category,@Description,@AwardingOrganisationCentreId)
	SELECT CAST(SCOPE_IdENTITY() AS int)
END
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopeSignals]...';


GO

 ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeSignals]
@A2CTransactionResponseEnvelopeId int,
@SignalResponseMasterId int,
@AwardingOrganisationCentreId int
AS
BEGIN
	Insert into A2CTransactionResponseEnvelopeSignals (A2CTransactionResponseEnvelopeId,SignalResponseMasterId,AwardingOrganisationCentreId)
	values(@A2CTransactionResponseEnvelopeId,@SignalResponseMasterId,@AwardingOrganisationCentreId)

	select cast(SCOPE_IdENTITY() as int)
END
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseErrors]...';


GO

ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseErrors]
@A2CTransactionResponseId int,
@AwardingOrganisationCentreId int,
@ErrorDescription nvarchar(max)
AS
BEGIN
	Insert into A2CTransactionResponseErrors (A2CTransactionResponseId,AwardingOrganisationCentreId,ErrorDescription)
	values(@A2CTransactionResponseId,@AwardingOrganisationCentreId,@ErrorDescription)

select cast(scope_identity() as int)

END
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponses]...';


GO
ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponses] 
@A2CTransactionRequestId int,
@TransactionResponseStatus nvarchar(200),
@AwardingOrganisationCentreId int,
@IsErrorAssociated bit
AS
BEGIN
	Insert into A2CTransactionResponses (A2CTransactionRequestId,TransactionResponseStatus,AwardingOrganisationCentreId,IsErrorAssociated)
	values(@A2CTransactionRequestId,@TransactionResponseStatus,@AwardingOrganisationCentreId,@IsErrorAssociated)
	Select cast(SCOPE_IdENTITY() as int)

END
GO
PRINT N'Altering [dbo].[usp_GetActiveAwardingOrganisation]...';


GO
ALTER PROCEDURE usp_GetActiveAwardingOrganisation
AS
BEGIN
	SET NOCOUNT ON;

	Select	Distinct AO.AwardingOrganisationId AwardingOrganisationId, 
			AO.Name AoName, 
			AO.[EndPoint] [EndPoint],
			PF.Frequency Frequency
	From	AwardingOrganisationCentreCertificates AOCC
		JOIN AwardingOrganisationCentres AOCE
			ON AOCC.AwardingOrganisationCentreId = AOCE.AwardingOrganisationCentreId
		JOIN AwardingOrganisationCertificates AOC
			ON AOCC.AwardingOrganisationCertificateId = AOC.AwardingOrganisationCertificateId
		JOIN Centres C
			ON AOCE.CentreId = C.CentreId
		JOIN A2CSchools S
			ON C.A2CSchoolId = S.A2CSchoolId
			AND AOCE.A2CSchoolId = S.A2CSchoolId
			AND AOC.A2CSchoolId = S.A2CSchoolId
		JOIN AwardingOrganisations AO
			ON AOC.AwardingOrganisationId = AO.AwardingOrganisationId
		JOIN PollingFrequency PF
			ON PF.AwardingOrganisationId = AO.AwardingOrganisationId
END
GO
PRINT N'Altering [dbo].[usp_InsertUpdate_AwardingOrganisationCentres]...';


GO



ALTER PROCEDURE [dbo].[usp_InsertUpdate_AwardingOrganisationCentres]
@A2CSchoolId int,
@AwardingBodyIdList ListNVarchar readonly,
@CentreNumberList ListNVarchar readonly,
@AOCentreCertificate varbinary(max),
@CertificatePassword nvarchar(50) ,
@CertificateExpiredDate date=null,
@CertificateFileName nvarchar(100)
AS

BEGIN

declare @CenterTable table (CentreId int, Name nvarchar(50), IsCentre bit, AOAssignNumber nvarchar(50))

insert into @CenterTable(CentreId,Name,IsCentre)
select CentreId,c.CentreNumber,1 from Centres c inner join @CentreNumberList list
on c.CentreNumber=list.Item
where c.A2CSchoolId = @A2CSchoolId



declare @AwardingOrganisationTable table (AwardingOrganisationDetailId int, Name nvarchar(50), IsCentre bit)
insert into @AwardingOrganisationTable(AwardingOrganisationDetailId,Name,IsCentre)
select AwardingOrganisationDetailId,c.AONumber,0 from AwardingOrganisationDetails c
inner join @AwardingBodyIdList list
on c.AONumber=list.Item

insert into @CenterTable(CentreId,Name,IsCentre,AOAssignNumber)
select c.CentreId,c.CentreNumber,1, list.Item from Centres c 
join AwardingOrganisationAOAssignedCentres aoassign
on c.CentreId= aoassign.CentreId
and c.A2CSchoolId=aoassign.A2CSchoolId
inner join @CentreNumberList list on list.Item=aoassign.AOAssignCentreNumber
where c.A2CSchoolId=@A2CSchoolId



declare @AwardingOrganisationCenterTable table (CentreId int, AwardingOrganisationDetailId int)
insert into @AwardingOrganisationCenterTable(CentreId,AwardingOrganisationDetailId)
select CentreId, AwardingOrganisationDetailId from
@CenterTable cross join @AwardingOrganisationTable


if exists(select 1 from @AwardingOrganisationCenterTable)
begin
Insert into AwardingOrganisationCentres (A2CSchoolId,AwardingOrganisationDetailId,CentreId)
select @A2CSchoolId,aoctable.AwardingOrganisationDetailId, aoctable.CentreId from @AwardingOrganisationCenterTable aoctable
left join AwardingOrganisationCentres aoc on aoc.A2CSchoolId=@A2CSchoolId and aoc.CentreId=aoctable.CentreId
and aoc.AwardingOrganisationDetailId=aoctable.AwardingOrganisationDetailId
where aoc.AwardingOrganisationCentreId is null



DECLARE @AwardingOrganisationCertificateId INT
Declare @AwardingOrganisationId INT
Select top 1  @AwardingOrganisationId=AwardingOrganisationId from @AwardingOrganisationTable at
		join AwardingOrganisationDetails aod on at.AwardingOrganisationDetailId=aod.AwardingOrganisationDetailId


INSERT INTO [dbo].[AwardingOrganisationCertificates]
           ([A2CSchoolId]
           ,[AwardingOrganisationId]
           ,[AOCentreCertificate]
           ,[CertificatePassword]
           ,[CertificateExpiredDate],CertificateFileName)
     Select top 1
		@A2CSchoolId,aod.AwardingOrganisationId,
		@AOCentreCertificate,@CertificatePassword,
		@CertificateExpiredDate,@CertificateFileName
		from @AwardingOrganisationTable at
		join AwardingOrganisationDetails aod on at.AwardingOrganisationDetailId=aod.AwardingOrganisationDetailId

Set @AwardingOrganisationCertificateId= SCOPE_IDENTITY()

declare @AwardingOrganisationCertificateIdListDeleted as listint
insert into @AwardingOrganisationCertificateIdListDeleted(ID)
select 
aocert.AwardingOrganisationCertificateId
from AwardingOrganisationCentreCertificates aocc
join AwardingOrganisationCertificates aocert
on aocc.AwardingOrganisationCertificateId=aocert.AwardingOrganisationCertificateId
join AwardingOrganisationCentres aocenter on aocenter.A2CSchoolId=@A2CSchoolId
and aocenter.AwardingOrganisationCentreId= aocc.AwardingOrganisationCentreId
join @AwardingOrganisationCenterTable aoctable on aoctable.CentreId=aocenter.CentreId
and aoctable.AwardingOrganisationDetailId=aocenter.AwardingOrganisationDetailId



Delete aocc from AwardingOrganisationCentreCertificates aocc
join AwardingOrganisationCertificates aocert
on aocc.AwardingOrganisationCertificateId=aocert.AwardingOrganisationCertificateId
join AwardingOrganisationCentres aocenter on aocenter.A2CSchoolId=@A2CSchoolId
and aocenter.AwardingOrganisationCentreId= aocc.AwardingOrganisationCentreId
join @AwardingOrganisationCenterTable aoctable on aoctable.CentreId=aocenter.CentreId
and aoctable.AwardingOrganisationDetailId=aocenter.AwardingOrganisationDetailId


	

Delete aocert 
from AwardingOrganisationCertificates aocert
where
aocert.AwardingOrganisationCertificateId in
(
	select deleteIds.ID  from
	@AwardingOrganisationCertificateIdListDeleted deleteIds
	left join AwardingOrganisationCentreCertificates aocentrecert 
	on deleteIds.ID 
	=aocentrecert.AwardingOrganisationCertificateId
	where aocentrecert.AwardingOrganisationCertificateId is null
)


INSERT INTO [dbo].[AwardingOrganisationCentreCertificates]
(
AwardingOrganisationCentreId,
AwardingOrganisationCertificateId
)
Select 
aoc.AwardingOrganisationCentreId,@AwardingOrganisationCertificateId
from 
 @AwardingOrganisationCenterTable aoctable 
inner join AwardingOrganisationCentres aoc on aoc.A2CSchoolId=@A2CSchoolId 
and aoc.CentreId=aoctable.CentreId and aoc.AwardingOrganisationDetailId=aoctable.AwardingOrganisationDetailId
end

Select Name as Name,IsCentre as IsCentre,AOAssignNumber as AOAssignNumber from @CenterTable
union
Select Name as Name,IsCentre as IsCentre,'' as AOAssignNumber from @AwardingOrganisationTable

END
GO
PRINT N'Altering [dbo].[usp_Select_AwardingOrganisationCentres]...';


GO

ALTER Procedure usp_Select_AwardingOrganisationCentres

(

@A2CSchoolId int,
@ActiveStatus nvarchar(30),
@ExpireStatus nvarchar(30),
@ExpireMessage nvarchar(200),
@ToExpireMessage nvarchar(200)
)

as

begin


Declare @DatetoCompare date



set @DatetoCompare=CONVERT (date, GETUTCDATE())

select  aod.AONumber,ao.Name, c.CentreNumber,

aocert.CertificateExpiredDate,

case when 

aocert.CertificateExpiredDate>=@DatetoCompare then @ActiveStatus

else @ExpireStatus end as Status

,aocc.LastModifiedDate

,

case when aocert.CertificateExpiredDate<@DatetoCompare then @ExpireMessage 

when dateadd(mm,-3, CONVERT (date, aocert.CertificateExpiredDate)) 

<=@DatetoCompare then @ToExpireMessage 

else '' end

as message

from AwardingOrganisations ao

inner join AwardingOrganisationDetails aod on ao.AwardingOrganisationId=aod.AwardingOrganisationId

inner join AwardingOrganisationCentres aoc on aoc.AwardingOrganisationDetailId=aod.AwardingOrganisationDetailId

inner join AwardingOrganisationCentreCertificates aocc on aocc.AwardingOrganisationCentreId= aoc.AwardingOrganisationCentreId

inner join AwardingOrganisationCertificates aocert on aocert.AwardingOrganisationCertificateId

=aocc.AwardingOrganisationCertificateId

inner join Centres c on c.CentreId=aoc.CentreId

where c.A2CSchoolId=@A2CSchoolId

order by aocc.LastModifiedDate desc



end
GO
PRINT N'Altering [dbo].[usp_Select_AwardingOrganisationCentresByUniqueKeyWithAOCentre]...';


GO
ALTER PROCEDURE [dbo].[usp_Select_AwardingOrganisationCentresByUniqueKeyWithAOCentre]

(
@A2CSchoolId int,
@AwardingOrganisationDetailId int,
@CentreId int
)

AS

SELECT 
AOC.AwardingOrganisationCentreId,
    AOCCer.AOCentreCertificate,
	AOCCer.CertificatePassword,
	AOAssign.AOAssignCentreNumber,
	C.CentreNumber
  FROM [dbo].[AwardingOrganisationCentres] AOC
  Inner Join AwardingOrganisationDetails AOD on AOC.AwardingOrganisationDetailId=AOD.AwardingOrganisationDetailId
  Inner Join AwardingOrganisationCertificates AOCCer on AOCCer.AwardingOrganisationId=AOD.AwardingOrganisationId
  Inner Join AwardingOrganisationCentreCertificates AOCC on
  AOCCer.AwardingOrganisationCertificateId = AOCC.AwardingOrganisationCertificateId
  AND AOCC.AwardingOrganisationCentreId=AOC.AwardingOrganisationCentreId    
  Inner Join Centres c on AOC.CentreId=C.CentreId and AOC.A2CSchoolId=C.A2CSchoolId
  Left Join AwardingOrganisationAOAssignedCentres AOAssign on AOAssign.A2CSchoolId=AOC.A2CSchoolId
  and AOAssign.AwardingOrganisationDetailId=AOC.AwardingOrganisationDetailId AND AOAssign.CentreId=AOC.CentreId
  Where AOC.A2CSchoolId=@A2CSchoolId AND AOC.CentreId =@CentreId AND AOC.AwardingOrganisationDetailId=@AwardingOrganisationDetailId
GO
PRINT N'Altering [dbo].[usp_Select_AwardingOrganisationsByCentreId]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO


ALTER PROCEDURE [dbo].[usp_Select_AwardingOrganisationsByCentreId]
(
@A2CSchoolId int,
@CentreId int,
@AwardingOrganisationsByCentreId int
)
AS
SELECT 
      Distinct AWO.Name, AO.AwardingOrganisationDetailId,AO.AONumber,AOC.AwardingOrganisationCentreId
  FROM [dbo].[AwardingOrganisationCentres] AOC
  Inner Join AwardingOrganisationDetails AO ON AO.AwardingOrganisationDetailId=AOC.AwardingOrganisationDetailId
  Inner Join AwardingOrganisations AwO ON AO.AwardingOrganisationId=AwO.AwardingOrganisationId
  Inner Join Centres C ON C.A2CSchoolId=AOC.A2CSchoolId AND C.CentreId=AOC.CentreId
  Inner Join AwardingOrganisationCertificates AOCCer on AOCCer.AwardingOrganisationId=AO.AwardingOrganisationId
  Inner Join AwardingOrganisationCentreCertificates AOCC on
  AOCCer.AwardingOrganisationCertificateId = AOCC.AwardingOrganisationCertificateId
  AND AOCC.AwardingOrganisationCentreId=AOC.AwardingOrganisationCentreId  
  Left Join AwardingOrganisationAOAssignedCentres ACI
  on ACI.AwardingOrganisationDetailId = AOC.AwardingOrganisationDetailId
  and ACI.A2CSchoolId = AOC.A2CSchoolId
  and AOC.CentreId = ACI.CentreId
  Where AOC.A2CSchoolId=@A2CSchoolId
  AND ((@AwardingOrganisationsByCentreId<=0 and C.CentreId=@CentreId and ACI.AwardingOrganisationAOAssignedCentreId is null)
  or (@AwardingOrganisationsByCentreId>0 AND AOC.AwardingOrganisationCentreId = @AwardingOrganisationsByCentreId))
  order by AWO.Name,AO.AONumber
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering [dbo].[usp_Select_CentresBySchoolIdLinkedAwardingOrganisation]...';


GO
ALTER PROCEDURE [dbo].[usp_Select_CentresBySchoolIdLinkedAwardingOrganisation]
(
	@A2CSchoolId int
)
AS
BEGIN
	SET NOCOUNT ON;


	DECLARE @Centre table(
		CentreId int,
		 AwardingOrganisationCentreId int,
		 CentreNumber nvarchar(100)
	)
	Insert into @Centre(CentreId,AwardingOrganisationCentreId,CentreNumber)
	SELECT	AOC.[CentreId], aoc.AwardingOrganisationCentreId as AwardingOrganisationCentreId, ACI.AOAssignCentreNumber + ' (' + AwO.Name +')' CentreNumber
	FROM	[dbo].[AwardingOrganisationCentres] AOC
			Inner Join AwardingOrganisationAOAssignedCentres ACI
				on ACI.AwardingOrganisationDetailId = AOC.AwardingOrganisationDetailId
				and ACI.A2CSchoolId = AOC.A2CSchoolId
				and AOC.CentreId = ACI.CentreId
			Inner Join AwardingOrganisationDetails AO 
				ON AO.AwardingOrganisationDetailId=AOC.AwardingOrganisationDetailId
			Inner Join AwardingOrganisations AwO 
				ON AO.AwardingOrganisationId=AwO.AwardingOrganisationId
			Inner Join Centres C 
				ON C.A2CSchoolId=AOC.A2CSchoolId AND C.CentreId=AOC.CentreId
			Inner Join AwardingOrganisationCertificates AOCCer 
				on AOCCer.AwardingOrganisationId=AO.AwardingOrganisationId
			Inner Join AwardingOrganisationCentreCertificates AOCC 
				on AOCCer.AwardingOrganisationCertificateId = AOCC.AwardingOrganisationCertificateId
				AND AOCC.AwardingOrganisationCentreId=AOC.AwardingOrganisationCentreId
	Where	AOC.A2CSchoolId=@A2CSchoolId
	ORDER BY CentreNumber
	Insert into @Centre(CentreId,AwardingOrganisationCentreId,CentreNumber)
	SELECT	Distinct AOC.[CentreId], 0 AwardingOrganisationCentreId, C.CentreNumber + ' (NCN)' CentreNumber
	FROM	[dbo].[AwardingOrganisationCentres] AOC
			Inner Join AwardingOrganisationDetails AO 
				ON AO.AwardingOrganisationDetailId=AOC.AwardingOrganisationDetailId
			Inner Join AwardingOrganisations AwO 
				ON AO.AwardingOrganisationId=AwO.AwardingOrganisationId
			Inner Join Centres C 
				ON C.A2CSchoolId=AOC.A2CSchoolId AND C.CentreId=AOC.CentreId
			Inner Join AwardingOrganisationCertificates AOCCer 
				on AOCCer.AwardingOrganisationId=AO.AwardingOrganisationId
			Inner Join AwardingOrganisationCentreCertificates AOCC 
				on AOCCer.AwardingOrganisationCertificateId = AOCC.AwardingOrganisationCertificateId
				AND AOCC.AwardingOrganisationCentreId=AOC.AwardingOrganisationCentreId  
			left join @Centre ce on AOC.AwardingOrganisationCentreId=ce.AwardingOrganisationCentreId
	Where	AOC.A2CSchoolId=@A2CSchoolId and ce.AwardingOrganisationCentreId is null
	
	Select * from @Centre order by CentreNumber
END
GO
PRINT N'Altering [dbo].[usp_CheckPullMessageSync]...';


GO
ALTER PROCEDURE usp_CheckPullMessageSync
	@A2CSchoolId INT, 
	@AwardingOrganisationId INT,
	@Status BIT OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	SET @Status = 0
	Declare @Timestamp smalldatetime = null,
			@TempStatus bit = null

	Select	@Timestamp = pms.[Timestamp], @TempStatus = pms.[Status]
	From	[PullMessageSync] pms 
	Where	pms.[A2CSchoolId] = @A2CSchoolId
			AND pms.[AwardingOrganisationId] = @AwardingOrganisationId

	IF (@Timestamp IS NULL)
	BEGIN
		Set @Status = 1

		Insert into PullMessageSync([A2CSchoolId], [AwardingOrganisationId], [Status], [Timestamp])
		Select @A2CSchoolId, @AwardingOrganisationId, @Status, GETUTCDATE()
	END
	ELSE IF (@TempStatus = 0) OR (DATEDIFF(hh, @Timestamp, GETUTCDATE()) >= 1)
	BEGIN
		SET @Status = 1

		Update	PullMessageSync
		SET		[Status] = @Status,
				[Timestamp] = GETUTCDATE()
		Where	[A2CSchoolId] = @A2CSchoolId 
				AND [AwardingOrganisationId] = @AwardingOrganisationId
	END
END
GO
PRINT N'Altering [dbo].[usp_ReleasePullMessageSyncLock]...';


GO
ALTER PROCEDURE usp_ReleasePullMessageSyncLock
	@A2CSchoolId INT, 
	@AwardingOrganisationId INT
AS
BEGIN
	SET NOCOUNT ON;
	Update	PullMessageSync
	SET		[Status] = 0,
			[Timestamp] = GETUTCDATE()
	Where	[A2CSchoolId] = @A2CSchoolId 
			AND [AwardingOrganisationId] = @AwardingOrganisationId
END
GO
PRINT N'Altering [dbo].[usp_GetCentresByAwardingOrganization]...';


GO
ALTER PROCEDURE [dbo].[usp_GetCentresByAwardingOrganization]
	@A2CSchoolId INT,
	@AwardingOrganisationDetailId INT
AS
BEGIN
	SET NOCOUNT ON;

	Select	AOCE.A2CSchoolId, c.CentreId, c.CentreNumber, ISNULL(aac.AOAssignCentreNumber, '') as AOAssignCentreNumber
	From	AwardingOrganisationCentreCertificates AOCC
			JOIN AwardingOrganisationCentres AOCE
				ON AOCC.AwardingOrganisationCentreId = AOCE.AwardingOrganisationCentreId
			JOIN AwardingOrganisationCertificates AOC
				ON AOCC.AwardingOrganisationCertificateId = AOC.AwardingOrganisationCertificateId
			JOIN Centres C
				ON AOCE.CentreId = C.CentreId
			JOIN A2CSchools S
				ON C.A2CSchoolId = S.A2CSchoolId
				AND AOCE.A2CSchoolId = S.A2CSchoolId
				AND AOC.A2CSchoolId = S.A2CSchoolId
			left join AwardingOrganisationAOAssignedCentres aac
				on aac.AwardingOrganisationDetailId = AOCE.AwardingOrganisationDetailId and aac.CentreId = c.CentreId
	Where	s.A2CSchoolId = @A2CSchoolId AND AOCE.AwardingOrganisationDetailId = @AwardingOrganisationDetailId
END
GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueAssessables]...';


GO



ALTER  PROCEDURE [dbo].[usp_GetProductCatalogueAssessables]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AoqeId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Extra_Time_Required_Flag AS ExtraTimeRequired,						A.Assessment_Method_Type AS AssessmentMethodType,
									A.Assmnt_Actual_DateTime_Reqd_Flag AS AssessmentActualDateTimeRequired,	A.Attendance_Data_Required_Flag AS AttendanceDataRequired,
									A.Cambridge_Assmnt_TimeZone_Num AS CambridgeAssessmentTimeZoneNumber,	A.Carry_Forward_Permissible_Flag AS CarryForwardPermissible,
									A.Maximum_Extra_Time_Minutes AS MaximumExtraTimeMinutes,				A.On_Demand_Flag AS OnDemand,
									A.QE_Timetabled_Flag AS QETimetabled,									A.Test_Day_Photograph_Reqd_Flag AS TestDayPhotographRequired,
									A.Tier_Level_Type AS TierLevelType,									 	A.Tier_Level_Common_Reference AS TierLevelCommonReference,
 									A.Time_Allowed_Mins AS TimeAllowedMinutes,								 	A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
 									A.Party_Role_Type_ADT_Decider AS PartyRoleTypeAdditionalDecider,			 	A.Assessment_Medium_Type AS AssessmentMediumType,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM Assessable A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AoqeId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Extra_Time_Required_Flag AS ExtraTimeRequired,						A.Assessment_Method_Type AS AssessmentMethodType,
									A.Assmnt_Actual_DateTime_Reqd_Flag AS AssessmentActualDateTimeRequired,	A.Attendance_Data_Required_Flag AS AttendanceDataRequired,
									A.Cambridge_Assmnt_TimeZone_Num AS CambridgeAssessmentTimeZoneNumber,	A.Carry_Forward_Permissible_Flag AS CarryForwardPermissible,
									A.Maximum_Extra_Time_Minutes AS MaximumExtraTimeMinutes,				A.On_Demand_Flag AS OnDemand,
									A.QE_Timetabled_Flag AS QETimetabled,									A.Test_Day_Photograph_Reqd_Flag AS TestDayPhotographRequired,
									A.Tier_Level_Type AS TierLevelType,									 	A.Tier_Level_Common_Reference AS TierLevelCommonReference,
 									A.Time_Allowed_Mins AS TimeAllowedMinutes,								 	A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
 									A.Party_Role_Type_ADT_Decider AS PartyRoleTypeAdditionalDecider,			 	A.Assessment_Medium_Type AS AssessmentMediumType,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM Assessable A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') Assessables
							WHERE Assessables.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueAward]...';


GO


ALTER  PROCEDURE [dbo].[usp_GetProductCatalogueAward]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Accreditation_End_Review_Date AS	AccreditationEndReviewDate,			A.Accreditation_Start_Date AS AccreditationStartDate,
									A.AO_Accred_Version_Number AS AOAccredVersionNumber,					A.Assessment_Language_Type AS AssessmentLanguageType,
									A.Award_Level_Type AS AwardLevelType,									A.Award_Type AS AwardType,
									A.Cert_of_Unit_Credit_Issued_Flag AS IsCertificateofUnitCreditIssued,	A.Certification_End_Date AS CertificationEndDate,
									A.Certification_Start_Date AS CertificationStartDate,					A.Contributing_Units_Listed_Flag AS IsContributingUnitsListed,
									A.Course_Length_Type AS CourseLengthType,								A.Endorsed_Title_Reqd_Flag AS IsEndorsedTitleRequired,
									A.Guided_Learning_Hours_Max AS GuidedLearningHoursMax,					A.Guided_Learning_Hours_Min AS GuidedLearningHoursMin,
									A.Operational_End_Date AS OperationalEndDate,							A.Operational_Start_Date AS OperationalStartDate,
									A.QE_Delivery_Model_Type AS QEDeliveryModelType,						A.QE_Evid_Reqmnt_Provided_Flag AS IsQEEvidenceRequirementProvided,
									A.QE_Evidence_Requirement_Type AS QEEvidenceRequirementType,			A.Registration_Expiry_Months AS RegistrationExpiryMonth,
									A.Resit_Rule_Text AS ResitRuleText,										A.Statement_Of_Credit_Issued_Flag AS IsStatementOfCreditIssued,
									A.Study_Guide_Available_Type AS StudyGuideAvailableType,				A.Study_Guide_Details AS StudyGuideDetails,
									A.Study_Guide_Reference AS StudyGuideReference,							A.Study_Guide_Reference_Type AS StudyGuideReferenceType,
									A.QE_Classification AS QEClassification,								A.Party_Id_Accreditor AS PartyIdAccreditor,
									A.Party_Id_Sector_Lead AS PartyIdSectorLead,							A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM Award A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Accreditation_End_Review_Date AS	AccreditationEndReviewDate,			A.Accreditation_Start_Date AS AccreditationStartDate,
									A.AO_Accred_Version_Number AS AOAccredVersionNumber,					A.Assessment_Language_Type AS AssessmentLanguageType,
									A.Award_Level_Type AS AwardLevelType,									A.Award_Type AS AwardType,
									A.Cert_of_Unit_Credit_Issued_Flag AS IsCertificateofUnitCreditIssued,	A.Certification_End_Date AS CertificationEndDate,
									A.Certification_Start_Date AS CertificationStartDate,					A.Contributing_Units_Listed_Flag AS IsContributingUnitsListed,
									A.Course_Length_Type AS CourseLengthType,								A.Endorsed_Title_Reqd_Flag AS IsEndorsedTitleRequired,
									A.Guided_Learning_Hours_Max AS GuidedLearningHoursMax,					A.Guided_Learning_Hours_Min AS GuidedLearningHoursMin,
									A.Operational_End_Date AS OperationalEndDate,							A.Operational_Start_Date AS OperationalStartDate,
									A.QE_Delivery_Model_Type AS QEDeliveryModelType,						A.QE_Evid_Reqmnt_Provided_Flag AS IsQEEvidenceRequirementProvided,
									A.QE_Evidence_Requirement_Type AS QEEvidenceRequirementType,			A.Registration_Expiry_Months AS RegistrationExpiryMonth,
									A.Resit_Rule_Text AS ResitRuleText,										A.Statement_Of_Credit_Issued_Flag AS IsStatementOfCreditIssued,
									A.Study_Guide_Available_Type AS StudyGuideAvailableType,				A.Study_Guide_Details AS StudyGuideDetails,
									A.Study_Guide_Reference AS StudyGuideReference,							A.Study_Guide_Reference_Type AS StudyGuideReferenceType,
									A.QE_Classification AS QEClassification,								A.Party_Id_Accreditor AS PartyIdAccreditor,
									A.Party_Id_Sector_Lead AS PartyIdSectorLead,							A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM Award A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') Awards
							WHERE Awards.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueLearningUnits]...';


GO




ALTER  PROCEDURE [dbo].[usp_GetProductCatalogueLearningUnits]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									L.Learning_Unit_Level_Type AS LearningUnitLevelType,					L.Maximum_Resits_Allowed AS MaximumResitsAllowed,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM LearningUnit L
								INNER JOIN QualificationElement QE ON L.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									L.Learning_Unit_Level_Type AS LearningUnitLevelType,					L.Maximum_Resits_Allowed AS MaximumResitsAllowed,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM LearningUnit L
								INNER JOIN QualificationElement QE ON L.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') LU
							WHERE LU.RowNumber BETWEEN @Skip AND @Take'
	
	PRINT @CountQuery
	PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueSchemes]...';


GO
ALTER  PROCEDURE [dbo].[usp_GetProductCatalogueSchemes]
@AwardingOrganisationCentreId int,
@QualificationType  nvarchar(50) = null,
@SeriesLabel  nvarchar(50) = null,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'AoqeId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) = case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') q1 WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) q1
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
								' RecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								case when @QualificationType is null or len(ltrim(rtrim(@QualificationType))) <= 0 then '' 
								else ' and QualificationType = ''' + @QualificationType + '''' end  +
								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1)
							From (Select
										QE.QualificationElementId AS QEId,									QE.AO_Qualification_Element_Id AS AoqeId,							
										QE.QE_Short_Title AS QEShortTitle,									QE.QE_Description AS QEDescription,  
										QE.Qualification_Element_Title AS QETitle,							QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,				
										QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,		QE.Private_Learner_Type AS PrivateLearnerType,						
										QE.QE_Moderation_Type AS QEModerationType,							QE.First_Language_Required_Flag AS FirstLanguageRequired,		
										QE.Record_Delete_Flag AS RecordDeleted,								QE.QE_Admin_Code AS QEAdminCode,	
										QE.Qualification_Reference_Number AS QualificationReferenceNumber,	QE.Learning_Aim_Code AS LearningAimCode, 
										QE.AwardingOrganisationCentreId,
										S.Qualification_Type AS QualificationType,							S.Series_Based_Flag AS SeriesBased,
										S.QE_Availability_Text AS QEAvailabilityText,						S.Assessment_Max_Learner_Age AS AssessmentMaxLearnerAge,
										S.Assessment_Min_Learner_Age AS AssessmentMinLearnerAge,			S.First_Teaching_Date AS FirstTeachingDate,
										S.Last_Teaching_Date AS LastTeachingDate,							S.QE_Centre_Auth_Agreement_Text AS QECentreAuthenticationAgreementText,
										S.Date_Of_Birth_Reqd_Flag AS DateOfBirthRequired,					S.Legal_Sex_Required_Flag AS LegalSexRequired' 
										+ @SeriesLableSelectPart + '
									 FROM Scheme S
											INNER JOIN QualificationElement QE ON S.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	*, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber
								From (Select
										QE.QualificationElementId AS QEId,									QE.AO_Qualification_Element_Id AS AoqeId,							
										QE.QE_Short_Title AS QEShortTitle,									QE.QE_Description AS QEDescription,  
										QE.Qualification_Element_Title AS QETitle,							QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,				
										QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,		QE.Private_Learner_Type AS PrivateLearnerType,						
										QE.QE_Moderation_Type AS QEModerationType,							QE.First_Language_Required_Flag AS FirstLanguageRequired,		
										QE.Record_Delete_Flag AS RecordDeleted,								QE.QE_Admin_Code AS QEAdminCode,	
										QE.Qualification_Reference_Number AS QualificationReferenceNumber,	QE.Learning_Aim_Code AS LearningAimCode, 
										QE.AwardingOrganisationCentreId,
										S.Qualification_Type AS QualificationType,							S.Series_Based_Flag AS SeriesBased,
										S.QE_Availability_Text AS QEAvailabilityText,						S.Assessment_Max_Learner_Age AS AssessmentMaxLearnerAge,
										S.Assessment_Min_Learner_Age AS AssessmentMinLearnerAge,			S.First_Teaching_Date AS FirstTeachingDate,
										S.Last_Teaching_Date AS LastTeachingDate,							S.QE_Centre_Auth_Agreement_Text AS QECentreAuthenticationAgreementText,
										S.Date_Of_Birth_Reqd_Flag AS DateOfBirthRequired,					S.Legal_Sex_Required_Flag AS LegalSexRequired'
										+ @SeriesLableSelectPart + '
									 FROM Scheme S
											INNER JOIN QualificationElement QE ON S.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') q2
							WHERE q2.RowNumber BETWEEN @Skip AND @Take'

		
	--PRINT @CountQuery
	--PRINT @ListQuery

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT

	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take


End
GO
PRINT N'Altering [dbo].[usp_GetQualificationElementAssessmentMaterial]...';


GO
--drop PROCEDURE [dbo].usp_GetQualificationElementAssessmentMaterial

ALTER PROCEDURE [dbo].[usp_GetQualificationElementAssessmentMaterial]
	@TotalCount int = 0 OUTPUT,
	@OrderBy nvarchar(255) = 'MaterialId',
	@GridWhereClause nvarchar(max) = null,
	@PageNumber int = 1,
	@PageSize int = 10,
	@AwardingOrganisationCentreId int,
	@QEParentId int
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;

	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' q1.AwardingOrganisationCentreId=  ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								 ' and q1.QualificationElementId=' + cast(@QEParentId as nvarchar(10)) +
								 case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							( Select 
								AM.AwardingOrganisationCentreId as AwardingOrganisationCentreId,QE.QualificationElementId as QualificationElementId,
								AM.QE_Assmnt_Material_Id as MaterialId, AM.QE_Assmnt_Material_Name as MaterialName,
								AM.QE_Assmnt_Material_Source as Source, AM.QE_Assmnt_Material_Description as MaterialDescription,
								AM.QE_Assmnt_Material_Source_Type as SourceType,AM.QE_Assmnt_Material_Medium_Type as MediumType,
								QEAM.Number_Per_Learner as NumberPerLearner, QEAM.Number_Per_Centre as NumberPerCentre,
								QEAM.Assmnt_Material_Release_Date as ReleaseDate	 
							from 
								dbo.QEAssessmentMaterial AM
								Inner join QEAAssessmentMaterial QEAM 
									on (QEAM.AwardingOrganisationCentreId=AM.AwardingOrganisationCentreId and QEAM.QEAssessmentMaterialId=AM.QEAssessmentMaterialId)
								Inner join QualificationElement QE 
									on (QE.AwardingOrganisationCentreId=QEAM.AwardingOrganisationCentreId and QE.QualificationElementId=QEAM.QualificationElementId)
							where 
								AM.Record_Delete_Flag=0	
								and QEAM.Record_Delete_Flag=0	
								and QE.Record_Delete_Flag=0
							) q1
						where ' + @WhereClause,							

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(Select 
												AM.AwardingOrganisationCentreId as AwardingOrganisationCentreId,QE.QualificationElementId as QualificationElementId,
												AM.QE_Assmnt_Material_Id as MaterialId, AM.QE_Assmnt_Material_Name as MaterialName,
												AM.QE_Assmnt_Material_Source as Source, AM.QE_Assmnt_Material_Description as MaterialDescription,
												AM.QE_Assmnt_Material_Source_Type as SourceType,AM.QE_Assmnt_Material_Medium_Type as MediumType,
												QEAM.Number_Per_Learner as NumberPerLearner, QEAM.Number_Per_Centre as NumberPerCentre,
												QEAM.Assmnt_Material_Release_Date as ReleaseDate	 
											from 
												dbo.QEAssessmentMaterial AM
												Inner join QEAAssessmentMaterial QEAM 
													on (QEAM.AwardingOrganisationCentreId=AM.AwardingOrganisationCentreId and QEAM.QEAssessmentMaterialId=AM.QEAssessmentMaterialId)
												Inner join QualificationElement QE 
													on (QE.AwardingOrganisationCentreId=QEAM.AwardingOrganisationCentreId and QE.QualificationElementId=QEAM.QualificationElementId)
											where 
												AM.Record_Delete_Flag=0	
												and QEAM.Record_Delete_Flag=0	
												and QE.Record_Delete_Flag=0	
											) q1
										where ' + @WhereClause + ') q2 
									WHERE q2.RowNumber BETWEEN @Skip AND @Take'
										
	EXECUTE sp_executesql @CountQuery, N'@TotalCountOut int OUTPUT', @TotalCountOut = @TotalCount OUTPUT

	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	
End
GO
PRINT N'Altering [dbo].[usp_GetQualificationElementLearnerIdentifiers]...';


GO

ALTER  PROCEDURE [dbo].[usp_GetQualificationElementLearnerIdentifiers]
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'QEPartyRRReferenceType',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@AwardingOrganisationCentreId int,
@QEParentId int
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' q1.AwardingOrganisationCentreId=  ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								 ' and q1.QualificationElementId=' + cast(@QEParentId as nvarchar(10)) +
								 case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							(  Select QE.AwardingOrganisationCentreId,QE.QualificationElementId ,QELI.Party_RR_Reference_Type as QEPartyRRReferenceType,QELI.Learner_Id_Mandatory_Flag  as QELearnerIdMandatory
								from dbo.QELearnerIdentifier QELI
									Inner join QualificationElement QE on QELI.QualificationElementId=QE.QualificationElementId and QELI.AwardingOrganisationCentreId=QE.AwardingOrganisationCentreId
								where QELI.Record_Delete_Flag=0
							) q1
							where '+@WhereClause,

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(   select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(
												Select QE.AwardingOrganisationCentreId,QE.QualificationElementId ,QELI.Party_RR_Reference_Type as QEPartyRRReferenceType,QELI.Learner_Id_Mandatory_Flag  as QELearnerIdMandatory
												from dbo.QELearnerIdentifier QELI
													Inner join QualificationElement QE on QELI.QualificationElementId=QE.QualificationElementId and QELI.AwardingOrganisationCentreId=QE.AwardingOrganisationCentreId
												where QELI.Record_Delete_Flag=0			
											) q1
											where ' + @WhereClause + ') q2 
										WHERE q2.RowNumber BETWEEN @Skip AND @Take'

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

End
GO
PRINT N'Altering [dbo].[usp_GetQualificationElementPreferences]...';


GO

ALTER  PROCEDURE [dbo].[usp_GetQualificationElementPreferences]
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'QEPartyIdCreator',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@AwardingOrganisationCentreId int,
@QEParentId int
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' q1.AwardingOrganisationCentreId=  ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								 ' and q1.QualificationElementId=' + cast(@QEParentId as nvarchar(10)) +
								 case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							(  Select QE.AwardingOrganisationCentreId,QE.QualificationElementId ,QEP.Party_Id_Creator as QEPartyIdCreator,QEP.QE_Preference  as QEPreference
								from dbo.AOQEPreference AOQEP
									Inner join QualificationElement QE on AOQEP.QualificationElementId=QE.QualificationElementId and AOQEP.AwardingOrganisationCentreId=QE.AwardingOrganisationCentreId
									Inner join QEPreference QEP on AOQEP.QEPreferenceId=QEP.QEPreferenceId
								where AOQEP.Record_Delete_Flag=0 and QEP.Record_Delete_Flag=0
							) q1
							where '+@WhereClause,

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(   select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(
												Select QE.AwardingOrganisationCentreId,QE.QualificationElementId ,QEP.Party_Id_Creator as QEPartyIdCreator,QEP.QE_Preference  as QEPreference
												from dbo.AOQEPreference AOQEP
													Inner join QualificationElement QE on AOQEP.QualificationElementId=QE.QualificationElementId and AOQEP.AwardingOrganisationCentreId=QE.AwardingOrganisationCentreId
													Inner join QEPreference QEP on AOQEP.QEPreferenceId=QEP.QEPreferenceId
												where AOQEP.Record_Delete_Flag=0 and QEP.Record_Delete_Flag=0			
											) q1
											where ' + @WhereClause + ') q2 
										WHERE q2.RowNumber BETWEEN @Skip AND @Take'

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

End
GO
PRINT N'Altering [dbo].[usp_GetQualificationElementRelationships]...';


GO

ALTER  PROCEDURE [dbo].[usp_GetQualificationElementRelationships]
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'AoqeId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@AwardingOrganisationCentreId int,
@QEParentId int
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1), @Take int = (@PageNumber * @PageSize),

	@WhereClause nvarchar(max) = ' q1.AwardingOrganisationCentreId=  ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								 ' and q1.QEParentId=' + cast(@QEParentId as nvarchar(10)) +
								 case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								 else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max) = N'select @TotalCountOut=count(1)
						from
							(  Select qr.AwardingOrganisationCentreId,qeChild.QualificationElementId as QualificationElementId,qeChild.AO_Qualification_Element_Id AS AoqeId,qeChild.QE_Short_Title AS QEChildShortTitle
								, qeChild.Qualification_Element_Type as  QualificationElementType,qr.QualificationElementId_Parent as QEParentId,qr.QE_Relationship_Type as RelationshipType
									, qr.QE_Relationship_Rule_Type as RelationshipRuleType
								from dbo.QERelationship qr
									Inner join QualificationElement qeParent on qr.QualificationElementId_Parent=qeParent.QualificationElementId
									Inner join QualificationElement qeChild on qr.QualificationElementId_Child=qeChild.QualificationElementId
								where qr.Record_Delete_Flag=0
							) q1
							where '+@WhereClause,

	@ListQuery as nvarchar(max) =	N'select * 
										from
										(   select  *,Row_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber from
											(
												Select qr.AwardingOrganisationCentreId,qeChild.QualificationElementId as QualificationElementId,qeChild.AO_Qualification_Element_Id AS AoqeId,qeChild.QE_Short_Title AS QEChildShortTitle
													, qeChild.Qualification_Element_Type as  QualificationElementType,qr.QualificationElementId_Parent as QEParentId,qr.QE_Relationship_Type as RelationshipType
														, qr.QE_Relationship_Rule_Type as RelationshipRuleType
													from dbo.QERelationship qr
														Inner join QualificationElement qeParent on qr.QualificationElementId_Parent=qeParent.QualificationElementId
														Inner join QualificationElement qeChild on qr.QualificationElementId_Child=qeChild.QualificationElementId
												where qr.Record_Delete_Flag=0			
											) q1
											where ' + @WhereClause + ') q2 
										WHERE q2.RowNumber BETWEEN @Skip AND @Take'

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

End
GO
PRINT N'Altering [dbo].[usp_GetSchoolUserList]...';


GO
ALTER proc [dbo].[usp_GetSchoolUserList]
@SchoolId int = 0,
@RoleId int = 1,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[UserName]',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10
As
Begin
	
	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
	@Take int = (@PageNumber * @PageSize),
	@WhereClause nvarchar(max) = '[SchoolId] = ' + cast(@SchoolId as nvarchar(10)) +
								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1)
											From (	Select	u.[SchoolId], am.[UserId], au.[UserName], u.[ForeName], u.[SurName], 
													case when am.[IsApproved] = 0 then ''Deactivated'' 
															 when am.[IsLockedOut] = 1 then ''Locked''
															 else ''Activated'' end [Status], ur.[Role]
													From	[dbo].[aspnet_Membership] am 
															Join [dbo].[aspnet_Users] au on am.[UserId] = au.[UserId]
															join [dbo].[Users] u on am.[UserId] = u.[UserId]
															join (Select u.SchoolId, u.UserId, stuff((Select '','' + r.[RoleDisplayName]
																									From	[dbo].[UsersInRoles] ur
																											join [dbo].[Roles] r on ur.[RoleId] = r.[RoleId]
																									where ur.[UserId] = u.[UserId]
																									order by r.[RoleId] asc
																									for xml path('''')),1,1,'''') [Role]
																	From [dbo].[Users] u) ur
															on ur.[UserId] = u.[UserId]
															where (Select count(1) cnt From [dbo].[UsersInRoles] ur 
														where ur.UserId = am.UserId and ur.RoleId >= ' + cast(@RoleId as nvarchar(2)) + ' and 
														(Select count(1) From UsersInRoles tur Where tur.UserId = am.UserId and tur.RoleId < ' + cast(@RoleId as nvarchar(2)) + ') = 0)>0) p1
											where ' + @WhereClause,

	@ListQuery as nvarchar(max) =	N'Select p2.[SchoolId], p2.[UserId], p2.[UserName], p2.[Forename], p2.[Surname], p2.[Status], p2.[Role]
										From	(Select p1.[SchoolId], p1.[UserId], p1.[UserName], p1.[ForeName], p1.[SurName], p1.[Status], p1.[Role],
														ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
												From (	Select	u.[SchoolId], am.[UserId], au.[UserName], u.[ForeName], u.[SurName], 
														case when am.[IsApproved] = 0 then ''Deactivated'' 
															 when am.[IsLockedOut] = 1 then ''Locked''
															 else ''Activated'' end [Status], ur.[Role]
														From	[dbo].[aspnet_Membership] am 
																Join [dbo].[aspnet_Users] au on am.[UserId] = au.[UserId]
																join [dbo].[Users] u on am.[UserId] = u.[UserId]
																join (Select u.SchoolId, u.UserId, stuff((Select '','' + r.[RoleDisplayName] 
																											From [dbo].[UsersInRoles] ur
																											join [dbo].[Roles] r on ur.[RoleId] = r.[RoleId]
																											where ur.[UserId] = u.[UserId]
																											order by r.[RoleId] asc
																											for xml path('''')),1,1,'''') [Role]
																		From [dbo].[Users] u) ur
																on ur.[UserId] = u.[UserId]
																where (Select count(1) cnt From [dbo].[UsersInRoles] ur 
															where ur.UserId = am.UserId and ur.RoleId >= ' + cast(@RoleId as nvarchar(2)) + ' and 
																(Select count(1) From UsersInRoles tur Where tur.UserId = am.UserId and tur.RoleId < ' + cast(@RoleId as nvarchar(2)) + ') = 0) > 0
													  ) p1
												Where ' + @WhereClause + ') p2
										 Where p2.[RN] BETWEEN @Skip AND @Take'

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

End
GO
PRINT N'Altering [dbo].[usp_SelectA2CRequestList]...';


GO

---usp_SelectA2CRequestList 1001
ALTER PROCEDURE [dbo].[usp_SelectA2CRequestList]
@A2CSchoolId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[LastModifiedDate] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
	@Take int = (@PageNumber * @PageSize),
	@WhereClause nvarchar(max) = '[A2CSchoolId] = ' + cast(@A2CSchoolId as nvarchar(10)) +
								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end

 print @WhereClause
SET @TotalCount = 0;
	
	

	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(Select c.CentreNumber,a.Name,aod.AONumber
	,case when rpc.AOAssignCentreNumber is null then ''NCN (HCN)'' else ''AO Assigned Centre ID''
	end as IdentifierType
	,''RPC'' as TransactionType
	,case when rpc.AOAssignCentreNumber IS null then c.CentreNumber else rpc.AOAssignCentreNumber
	end as IdentifierValue,
	rpc.Feedback,
	rpc.LastModifiedDate,aoc.A2CSchoolId
	from A2CRequests rpc
	inner join AwardingOrganisationCentres aoc
	on rpc.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
	inner join AwardingOrganisationDetails aod on aoc.AwardingOrganisationDetailId=aod.AwardingOrganisationDetailId
	inner join AwardingOrganisations a on a.AwardingOrganisationId=aod.AwardingOrganisationId
	inner join Centres c on c.CentreId=aoc.CentreId and aoc.A2CSchoolId=c.A2CSchoolId
	) p
	 Where ' + @WhereClause
	 

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'Select p2.CentreNumber,p2.Name,p2.AONumber,p2.IdentifierType,p2.TransactionType,p2.IdentifierValue,
	p2.Feedback,p2.LastModifiedDate,p2.RN
	from (Select p1.CentreNumber,p1.Name,p1.AONumber,p1.IdentifierType,p1.TransactionType,p1.IdentifierValue,
	p1.Feedback,p1.LastModifiedDate,p1.A2CSchoolId,ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	from (Select p.CentreNumber,p.Name,p.AONumber,p.IdentifierType,p.TransactionType,p.IdentifierValue,
	p.Feedback,p.LastModifiedDate,p.A2CSchoolId from
	(Select 	c.CentreNumber,a.Name,aod.AONumber
	,case when rpc.AOAssignCentreNumber is null then ''NCN (HCN)'' else ''AO Assigned Centre ID''
	end as IdentifierType
	,''RPC'' as TransactionType
	,case when rpc.AOAssignCentreNumber IS null then c.CentreNumber else rpc.AOAssignCentreNumber
	end as IdentifierValue,
	rpc.Feedback,
	rpc.LastModifiedDate,aoc.A2CSchoolId
	from A2CRequests rpc
	inner join AwardingOrganisationCentres aoc
	on rpc.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
	inner join AwardingOrganisationDetails aod on aoc.AwardingOrganisationDetailId=aod.AwardingOrganisationDetailId
	inner join AwardingOrganisations a on a.AwardingOrganisationId=aod.AwardingOrganisationId
	inner join Centres c on c.CentreId=aoc.CentreId and aoc.A2CSchoolId=c.A2CSchoolId
	) p
	 Where ' + @WhereClause
	 + ') p1) p2 where p2.[RN] BETWEEN @Skip AND @Take'
	print @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take


END
GO
PRINT N'Altering [dbo].[usp_SelectQEAdditionalDataList]...';


GO

--usp_SelectQEAdditionalDataList 1968,1001,1, '((( [QeaEffectiveEndDateTime]  between '09/03/2015 18:30:00' and '09/04/2015 18:29:59'))) desc','',1,20
ALTER PROCEDURE [dbo].[usp_SelectQEAdditionalDataList]
@QualificationElementId int,
@AwardingOrganisationCentreId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[QeaEffectiveStartDateTime] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


SET @TotalCount = 0;
Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
@Take int = (@PageNumber * @PageSize),
@WhereClause nvarchar(max) = '[AwardingOrganisationCentreId] = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								' and [QualificationElementId] = ' + cast(@QualificationElementId as nvarchar(10))  +
								' and Record_Delete_Flag=0'+
							case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
							else ' and ' + @GridWhereClause end


SET @TotalCount = 0;
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(Select AwardingOrganisationCentreId,QualificationElementId,Record_Delete_Flag,
		QEA_Effective_Start_Date_Time as QeaEffectiveStartDateTime,QEA_Effective_End_Date_Time as QeaEffectiveEndDateTime,
		SLA_OnDemand_Result_Clndr_Days as SlaOnDemandResultClndrDays,Series_Label as SeriesLabel,
		OnDemand_Entry_Calendar_Days as OnDemandEntryCalendarDays
		from QEAvailability qea) p
		 Where ' + @WhereClause
	 
	 print @CountQuery

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'Select AwardingOrganisationCentreId,
				QualificationElementId,
				QeaEffectiveStartDateTime,QeaEffectiveEndDateTime,SlaOnDemandResultClndrDays,
				SeriesLabel,OnDemandEntryCalendarDays,RN
	from (Select AwardingOrganisationCentreId,
				QualificationElementId,
				Record_Delete_Flag,
				QeaEffectiveStartDateTime,QeaEffectiveEndDateTime,SlaOnDemandResultClndrDays,
				SeriesLabel,OnDemandEntryCalendarDays,ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	from (Select AwardingOrganisationCentreId,
				QualificationElementId,
				Record_Delete_Flag,
				QeaEffectiveStartDateTime,QeaEffectiveEndDateTime,SlaOnDemandResultClndrDays,
				SeriesLabel,OnDemandEntryCalendarDays from
		(Select 
				AwardingOrganisationCentreId,
				QualificationElementId,
				Record_Delete_Flag,
				QEA_Effective_Start_Date_Time as QeaEffectiveStartDateTime,QEA_Effective_End_Date_Time as QeaEffectiveEndDateTime,
				SLA_OnDemand_Result_Clndr_Days as SlaOnDemandResultClndrDays,Series_Label as SeriesLabel,
				OnDemand_Entry_Calendar_Days as OnDemandEntryCalendarDays
				from QEAvailability qea
		) p
		Where ' + @WhereClause
	 + ') p1) p2 where p2.[RN] BETWEEN @Skip AND @Take'
	 ---print @CountQuery
	print @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	print @TotalCount

END
GO
PRINT N'Creating [dbo].[usp_GetSchoolsByAwardingOrganization]...';


GO
CREATE PROCEDURE [dbo].[usp_GetSchoolsByAwardingOrganization]
	@AwardingOrganizationId INT
AS
BEGIN
	SET NOCOUNT ON;

	Select	DISTINCT AOC.A2CSchoolId, AOCE.AwardingOrganisationDetailId
	From	AwardingOrganisationCertificates AOC
			Join A2CSchools S
				ON AOC.A2CSchoolId = S.A2CSchoolId
			Join AwardingOrganisationCentreCertificates AOCC
				on AOC.AwardingOrganisationCertificateId = AOCC.AwardingOrganisationCertificateId
			Join AwardingOrganisationCentres AOCE
				on AOCE.AwardingOrganisationCentreId = AOCC.AwardingOrganisationCentreId
	Where	AOC.AwardingOrganisationId = @AwardingOrganizationId
END
GO
PRINT N'Altering [dbo].[USP_IMPORTPRODUCTCATALOGE]...';


GO

ALTER PROCEDURE USP_IMPORTPRODUCTCATALOGE(
	@AwardingOrganisationCentreIdPrimaryKey			int, 
	@A2CTransactionResponseEnvelopeMessageId		int		
) AS BEGIN
	
	BEGIN TRY

		---------------------------------------------------
		----- Variable Declarations -----------------------
		---------------------------------------------------
		DECLARE 
			@AwardingOrganisationCentreId	int,
			@XMLDATA						XML,					
			@AOQEPreferenceExists			bit,
			@QEAvailabilityExists			bit,
			@QEFeeCategoryExists			bit,
			@QELearnerIdentifierExists		bit,
			@QEPreferenceExists				bit,
			@QualificationElementExists		bit,
			@TransactionName				nvarchar(100),
			@MessageID						nvarchar(100),
			@SchoolID						int,
			@ScreenMasterId					int,
			@CentreNumber					nvarchar(100),
			@AONumber						nvarchar(100),
			@ErrorMessage					nvarchar(MAX),
			@IsError						bit = 0
			
		-----------------------------------------------------------------
		----- Required data validation & Set Values for variables -------
		-----------------------------------------------------------------
		IF 
			ISNULL(@AwardingOrganisationCentreIdPrimaryKey,0)		= 0 OR			
			ISNULL(@A2CTransactionResponseEnvelopeMessageId,0)		= 0
		BEGIN
			print 'one of input parameters is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Invalid input parameter.', 16, 1);			
		END

		--Get the xml data to import
		SELECT 	
			@AwardingOrganisationCentreId=ISNULL(AT.MessageAwardingOrganisationCentreId,0),
			@XMLDATA=CAST(AT.DATA AS XML)
		FROM 
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGES AT
		WHERE
			AT.AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND
			AT.A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId
		
		IF @AwardingOrganisationCentreId=0
		BEGIN
			print 'Awarding Organisation Centre Id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Awarding Organisation Centre Id not found.', 16, 1);
		END
				
		IF @XMLDATA is null OR DATALENGTH(@XMLDATA)=0
		BEGIN
			print 'XML data not found, so stop further processing'
			set @IsError=1
			RAISERROR ('XML data not found.', 16, 1);
		END

		--Get SchoolID, Message ID and other details
		Select 
			@SchoolID=ISNULL(AOC.A2CSchoolId,0)
		from 
			AwardingOrganisationCentres AOC 
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		IF @SchoolID=0
		BEGIN
			print 'School id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('School Id not found.', 16, 1);
		END

		select 
			@CentreNumber = C.CentreNumber 
		from 
			AwardingOrganisationCentres AOC
			inner join Centres C on AOC.CentreId=C.CentreId
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		select 
			@AONumber = AOD.AONumber 
		from 
			AwardingOrganisationCentres AOC
			inner join AwardingOrganisationDetails AOD on AOC.AwardingOrganisationDetailId=AOD.AwardingOrganisationDetailId
		where 
			AOC.AwardingOrganisationCentreId=@AwardingOrganisationCentreId

		Select 
			@ScreenMasterId = SM.ScreenMasterId 
		from 
			ScreenMasters SM 
		where 
			SM.ScreenName='ImportProductCatalogue'

		IF @ScreenMasterId=0
		BEGIN
			print 'Screen Master Id is zero, so stop further processing.'
			set @IsError=1
			RAISERROR ('Screen Master Id not found.', 16, 1);			
		END			

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@TransactionName = CN.value('(a2c:TransactionName/text())[1]','[nvarchar](100)')
		From	
			@XMLDATA.nodes('/a2c:A2CMessage/a2c:MsgHeader/a2c:TransactionInfo') as Q(CN) 

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@MessageID = CN.value('(a2c:MessageID/text())[1]','[nvarchar](100)')
		From	
			@XMLDATA.nodes('/a2c:A2CMessage/a2c:MsgHeader/a2c:MsgInfo') as Q(CN) 

		IF @MessageID IS NULL
			SET @MessageID=''

		---------------------------------------------------
		---------------------------------------------------
		----- Mandatory/Primary Datablocks Validation -----
		---------------------------------------------------
		---------------------------------------------------	
		--In case a mandatory or primary datablock is missing from the catalogue, 
		--the error should be logged into Business error logs and 
		--the XML should not be imported. It should be ignored.	

		;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
		select 
			@AOQEPreferenceExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference/a2c:AOQEPreference_CN/a2c:AOQEPreference_ID'),
			@QEAvailabilityExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN/a2c:QEAvailability_ID'),
			@QEFeeCategoryExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QEFeeCategory_DS/a2c:QEFeeCategory/a2c:QEFeeCategory_ID'),
			@QELearnerIdentifierExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QELearnerIdentifier_DS/a2c:QELearnerIdentifier/a2c:QELearnerIdentifier_CN/a2c:QELearnerIdentifier_ID'),
			@QEPreferenceExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference/a2c:AOQEPreference_CN/a2c:AOQEPreference_ID'),
			@QualificationElementExists = @XMLDATA.exist('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QualificationElement/a2c:QualificationElement_CN/a2c:QualificationElement_ID')
		
		IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUE'
		BEGIN
			IF 
				(@AOQEPreferenceExists = 1		AND
				@QEAvailabilityExists = 1		AND
				@QEFeeCategoryExists = 1		AND
				@QELearnerIdentifierExists = 1	AND
				@QEPreferenceExists = 1			AND
				@QualificationElementExists = 1) 
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUE Transaction, Mandatory/Primary Datablocks exist.'
			END
			ELSE
			BEGIN
			
				print 'inside PROCESSPRODUCTCATALOGUE Transaction, some Mandatory/Primary Datablock(s) missing'

				IF @AOQEPreferenceExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock AO QE Preference is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)		
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEAvailabilityExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Availability is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEFeeCategoryExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Fee Category is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''		
					set @IsError=1
				END

				IF @QELearnerIdentifierExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Learner Identifier is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)		
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QEPreferenceExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Preference is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				IF @QualificationElementExists = 0
				BEGIN
					SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock Qualification Element is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
			
					INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)	
			
					SET @ErrorMessage = ''	
					set @IsError=1
				END

				print 'inside PROCESSPRODUCTCATALOGUE Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'

				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUESTATIC'
		BEGIN
			IF @QualificationElementExists = 1
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUESTATIC Transaction, Mandatory/Primary Datablock exists.'
			END
			ELSE
			BEGIN
				SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock Qualification Element is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
		
				INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)

				SET @ErrorMessage = ''
				set @IsError=1

				print 'inside PROCESSPRODUCTCATALOGUESTATIC Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'

				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE IF @TransactionName IS NOT NULL AND UPPER(LTRIM(RTRIM(@TransactionName))) = 'PROCESSPRODUCTCATALOGUEINSTANCE'
		BEGIN
			IF @QEAvailabilityExists = 1
			BEGIN 
				print 'inside PROCESSPRODUCTCATALOGUEINSTANCE Transaction, Mandatory/Primary Datablock exists.'
			END
			ELSE
			BEGIN
				SET @ErrorMessage = 'Message ID ' + @MessageID + ' -Datablock QE Availability is missing from Product catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + '.'
		
				INSERT into ErrorLogs(
						ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
						--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
						A2CTransactionResponseEnvelopeMessageId,MessageID)
					VALUES (@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId, @ErrorMessage,
						--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
						@A2CTransactionResponseEnvelopeMessageId,@MessageID)

				SET @ErrorMessage = ''
				set @IsError=1

				print 'inside PROCESSPRODUCTCATALOGUEINSTANCE Transaction, Mandatory/Primary Datablock(s) missing, cannot process this XML, so stop further processing'
				
				RAISERROR ('Mandatory/Primary Datablock(s) missing.', 16, 1);
			END
		END
		ELSE
		BEGIN
			print 'Unknown Transaction Name, so stop further processing'
			set @IsError=1			
			RAISERROR ('Unknown Transaction Name.', 16, 1);
		END	
		---------------------------------------------------
		----- Datablocks Validation Finish ----------------
		---------------------------------------------------

		---------------------------------------------------
		---------------------------------------------------
		-----STEP 1: IMPORT QUALIFICATION ELEMENTS---------
		---------------------------------------------------
		---------------------------------------------------

		BEGIN TRY

			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID], 
				QE.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]', '[nvarchar](50)') AO_Qualification_Element_Id,
				QE.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]', '[nvarchar](32)') Qualification_Element_Type,
				QE.value('(a2c:QE_Description/text())[1]','[nvarchar](3500)') QE_Description,
				QE.value('(a2c:Qualification_Element_Title/text())[1]','[nvarchar](200)') Qualification_Element_Title,
				QE.value('(a2c:QE_Short_Title/text())[1]','[nvarchar](50)') QE_Short_Title,
				QE.value('(a2c:QE_Effective_Version_Date/text())[1]','[nvarchar](100)') QE_Effective_Version_Date,
				QE.value('(a2c:QE_Effective_Version_End_Date/text())[1]','[nvarchar](100)') QE_Effective_Version_End_Date,
				QE.value('(a2c:Private_Learner_Type/text())[1]','[nvarchar](32)') Private_Learner_Type,
				QE.value('(a2c:QE_Moderation_Type/text())[1]','[nvarchar](32)') QE_Moderation_Type,
				QE.value('(a2c:First_Language_Required_Flag/text())[1]','[nvarchar](100)') First_Language_Required_Flag,
				QE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag,
				QE.value('(a2c:Qualification_Reference_Number/text())[1]','[nvarchar](10)') Qualification_Reference_Number,
				QE.value('(a2c:Learning_Aim_Code/text())[1]','[nvarchar](10)') Learning_Aim_Code,
				QE.value('(a2c:QE_Admin_Code/text())[1]','[nvarchar](50)') QE_Admin_Code,
				QE.value('(a2c:Scheme/a2c:Assessment_Max_Learner_Age/text())[1]','int') Assessment_Max_Learner_Age,
				QE.value('(a2c:Scheme/a2c:Assessment_Min_Learner_Age/text())[1]','int') Assessment_Min_Learner_Age,
				QE.value('(a2c:Scheme/a2c:First_Teaching_Date/text())[1]','[nvarchar](100)') First_Teaching_Date,
				QE.value('(a2c:Scheme/a2c:Last_Teaching_Date/text())[1]','[nvarchar](100)') Last_Teaching_Date,
				QE.value('(a2c:Scheme/a2c:QE_Centre_Auth_Agreement_Text/text())[1]','[nvarchar](400)') QE_Centre_Auth_Agreement_Text,
				QE.value('(a2c:Scheme/a2c:Qualification_Type/text())[1]','[nvarchar](50)') Qualification_Type,
				QE.value('(a2c:Scheme/a2c:Series_Based_Flag/text())[1]','[nvarchar](100)') Series_Based_Flag,
				QE.value('(a2c:Scheme/a2c:QE_Website_URL_Locator_Id/text())[1]','[nvarchar](1000)') QE_Website_URL_Locator_Id,
				QE.value('(a2c:Scheme/a2c:Date_Of_Birth_Reqd_Flag/text())[1]','[nvarchar](100)') Date_Of_Birth_Reqd_Flag,
				QE.value('(a2c:Scheme/a2c:Legal_Sex_Required_Flag/text())[1]','[nvarchar](100)') Legal_Sex_Required_Flag,
				QE.value('(a2c:Scheme/a2c:QE_Availability_Text/text())[1]','[nvarchar](3000)') QE_Availability_Text,
				QE.value('(a2c:Award/a2c:Accreditation_End_Review_Date/text())[1]','[nvarchar](100)') Accreditation_End_Review_Date,
				QE.value('(a2c:Award/a2c:Accreditation_Start_Date/text())[1]','[nvarchar](100)') Accreditation_Start_Date,
				QE.value('(a2c:Award/a2c:AO_Accred_Version_Number/text())[1]','[nvarchar](4)') AO_Accred_Version_Number,
				QE.value('(a2c:Award/a2c:Assessment_Language_Type/text())[1]','[nvarchar](50)') Assessment_Language_Type,
				QE.value('(a2c:Award/a2c:Award_Level_Type/text())[1]','[nvarchar](32)') Award_Level_Type,
				QE.value('(a2c:Award/a2c:Award_Type/text())[1]','[nvarchar](60)') Award_Type,
				QE.value('(a2c:Award/a2c:Cert_of_Unit_Credit_Issued_Flag/text())[1]','[nvarchar](100)') Cert_of_Unit_Credit_Issued_Flag,
				QE.value('(a2c:Award/a2c:Certification_End_Date/text())[1]','[nvarchar](100)') Certification_End_Date,
				QE.value('(a2c:Award/a2c:Certification_Start_Date/text())[1]','[nvarchar](100)') Certification_Start_Date,
				QE.value('(a2c:Award/a2c:Contributing_Units_Listed_Flag/text())[1]','[nvarchar](100)') Contributing_Units_Listed_Flag,
				QE.value('(a2c:Award/a2c:Course_Length_Type/text())[1]','[nvarchar](32)') Course_Length_Type,
				QE.value('(a2c:Award/a2c:Endorsed_Title_Reqd_Flag/text())[1]','[nvarchar](100)') Endorsed_Title_Reqd_Flag,
				QE.value('(a2c:Award/a2c:Guided_Learning_Hours_Max/text())[1]','int') Guided_Learning_Hours_Max,
				QE.value('(a2c:Award/a2c:Guided_Learning_Hours_Min/text())[1]','int') Guided_Learning_Hours_Min,
				QE.value('(a2c:Award/a2c:Operational_End_Date/text())[1]','[nvarchar](100)') Operational_End_Date,
				QE.value('(a2c:Award/a2c:Operational_Start_Date/text())[1]','[nvarchar](100)') Operational_Start_Date,
				QE.value('(a2c:Award/a2c:QE_Delivery_Model_Type/text())[1]','[nvarchar](32)') QE_Delivery_Model_Type,
				QE.value('(a2c:Award/a2c:QE_Evid_Reqmnt_Provided_Flag/text())[1]','[nvarchar](100)') QE_Evid_Reqmnt_Provided_Flag,
				QE.value('(a2c:Award/a2c:QE_Evidence_Requirement_Type/text())[1]','[nvarchar](32)') QE_Evidence_Requirement_Type,
				QE.value('(a2c:Award/a2c:Registration_Expiry_Months/text())[1]','int') Registration_Expiry_Months,
				QE.value('(a2c:Award/a2c:Resit_Rule_Text/text())[1]','[nvarchar](400)') Resit_Rule_Text,
				QE.value('(a2c:Award/a2c:Statement_Of_Credit_Issued_Flag/text())[1]','[nvarchar](100)') Statement_Of_Credit_Issued_Flag,
				QE.value('(a2c:Award/a2c:Study_Guide_Available_Type/text())[1]','[nvarchar](20)') Study_Guide_Available_Type,
				QE.value('(a2c:Award/a2c:Study_Guide_Details/text())[1]','[nvarchar](400)') Study_Guide_Details,
				QE.value('(a2c:Award/a2c:Study_Guide_Reference/text())[1]','[nvarchar](100)') Study_Guide_Reference,
				QE.value('(a2c:Award/a2c:Study_Guide_Reference_Type/text())[1]','[nvarchar](32)') Study_Guide_Reference_Type,
				QE.value('(a2c:Award/a2c:QE_Classification/text())[1]','[nvarchar](32)') QE_Classification,
				QE.value('(a2c:Award/a2c:Party_Id_Accreditor/text())[1]','[nvarchar](32)') Party_Id_Accreditor,
				QE.value('(a2c:Award/a2c:Party_Id_Sector_Lead/text())[1]','[nvarchar](32)') Party_Id_Sector_Lead,
				QE.value('(a2c:Award/a2c:Party_Role_Type_Assessor/text())[1]','[nvarchar](50)') Party_Role_Type_Assessor,
				QE.value('(a2c:LearningUnit/a2c:Learning_Unit_Level_Type/text())[1]','[nvarchar](32)') Learning_Unit_Level_Type,
				QE.value('(a2c:LearningUnit/a2c:Maximum_Resits_Allowed/text())[1]','int') Maximum_Resits_Allowed,
				QE.value('(a2c:Assessable/a2c:Extra_Time_Required_Flag/text())[1]','[nvarchar](100)') Extra_Time_Required_Flag,
				QE.value('(a2c:Assessable/a2c:Assessment_Method_Type/text())[1]','[nvarchar](40)') Assessment_Method_Type,
				QE.value('(a2c:Assessable/a2c:Assmnt_Actual_DateTime_Reqd_Flag/text())[1]','[nvarchar](100)') Assmnt_Actual_DateTime_Reqd_Flag,
				QE.value('(a2c:Assessable/a2c:Attendance_Data_Required_Flag/text())[1]','[nvarchar](100)') Attendance_Data_Required_Flag,
				QE.value('(a2c:Assessable/a2c:Cambridge_Assmnt_TimeZone_Num/text())[1]','int') Cambridge_Assmnt_TimeZone_Num,
				QE.value('(a2c:Assessable/a2c:Carry_Forward_Permissible_Flag/text())[1]','[nvarchar](100)') Carry_Forward_Permissible_Flag,
				QE.value('(a2c:Assessable/a2c:Maximum_Extra_Time_Minutes/text())[1]','int') Maximum_Extra_Time_Minutes,
				QE.value('(a2c:Assessable/a2c:On_Demand_Flag/text())[1]','[nvarchar](100)') On_Demand_Flag,
				QE.value('(a2c:Assessable/a2c:QE_Timetabled_Flag/text())[1]','[nvarchar](100)') QE_Timetabled_Flag,
				QE.value('(a2c:Assessable/a2c:Test_Day_Photograph_Reqd_Flag/text())[1]','[nvarchar](100)') Test_Day_Photograph_Reqd_Flag,
				QE.value('(a2c:Assessable/a2c:Tier_Level_Type/text())[1]','[nvarchar](20)') Tier_Level_Type,
				QE.value('(a2c:Assessable/a2c:Tier_Level_Common_Reference/text())[1]','[nvarchar](12)') Tier_Level_Common_Reference,
				QE.value('(a2c:Assessable/a2c:Time_Allowed_Mins/text())[1]','int') Time_Allowed_Mins,
				QE.value('(a2c:Assessable/a2c:Party_Role_Type_Assessor/text())[1]','[nvarchar](50)') AssessableParty_Role_Type_Assessor,
				QE.value('(a2c:Assessable/a2c:Party_Role_Type_ADT_Decider/text())[1]','[nvarchar](50)') Party_Role_Type_ADT_Decider,
				QE.value('(a2c:Assessable/a2c:Assessment_Medium_Type/text())[1]','[nvarchar](20)') Assessment_Medium_Type,
				QE.value('(a2c:Pathway/a2c:Equals_Indicator_Flag/text())[1]','[nvarchar](100)') Equals_Indicator_Flag,
				QE.value('(a2c:Pathway/a2c:Mandatory_In_Group_Flag/text())[1]','[nvarchar](100)') Mandatory_In_Group_Flag,
				QE.value('(a2c:Pathway/a2c:Minimum_Unit_Selection/text())[1]','int') Minimum_Unit_Selection,
				QE.value('(a2c:Pathway/a2c:Maximum_Unit_Selection/text())[1]','int') Maximum_Unit_Selection,
				QE.value('(a2c:Pathway/a2c:Minimum_Pathway_Selection/text())[1]','int') Minimum_Pathway_Selection,
				QE.value('(a2c:Pathway/a2c:Maximum_Pathway_Selection/text())[1]','int') Maximum_Pathway_Selection,
				QE.value('(a2c:Pathway/a2c:Minimum_Credit_Value/text())[1]','int') Minimum_Credit_Value
			into 
				#QE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QualificationElement/a2c:QualificationElement_CN') as QualificationElement_CN(QE) 

			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QE 
					WHERE ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')='')
			BEGIN
				PRINT 'Qualification Element - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' OR ISNULL(Qualification_Element_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type) 'RowRank' 
			FROM 
				#QE)
			SELECT 
				* 
			INTO 
				#QEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type 
					ORDER BY 
						[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type) 'RowRank' 
				FROM #QE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock Qualification Element - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id + ', Qualification_Element_Type=' + Qualification_Element_Type + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy pk column to temp table
			ALTER TABLE #QE ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]
				
			---------------------------------------------------
			-----STEP 1.1: IMPORT [QualificationElement]-------
			---------------------------------------------------
			BEGIN TRY

				MERGE 
					[dbo].[QualificationElement] AS [target]
				USING 
					(SELECT * from #QE) AS source
				ON 
					([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
					[target].[QualificationElementId] = source.[QualificationElementId])
				WHEN MATCHED THEN 
				UPDATE SET 
					[QE_Description] = LTRIM(RTRIM(source.[QE_Description])),
					[Qualification_Element_Title] = LTRIM(RTRIM(source.[Qualification_Element_Title])),
					[QE_Short_Title] = LTRIM(RTRIM(source.[QE_Short_Title])),
					[QE_Effective_Version_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_Date]),
					[QE_Effective_Version_End_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_End_Date]),
					[Private_Learner_Type] = LTRIM(RTRIM(source.[Private_Learner_Type])),
					[QE_Moderation_Type] = LTRIM(RTRIM(source.[QE_Moderation_Type])),
					[First_Language_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[First_Language_Required_Flag]),
					[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]),
					[Qualification_Reference_Number] = LTRIM(RTRIM(source.[Qualification_Reference_Number])),
					[Learning_Aim_Code] = LTRIM(RTRIM(source.[Learning_Aim_Code])),
					[QE_Admin_Code] = LTRIM(RTRIM(source.[QE_Admin_Code]))
				WHEN NOT MATCHED THEN	
				INSERT (
					[AwardingOrganisationCentreId],
					[AO_Qualification_Element_Id],
					[Qualification_Element_Type],
					[QE_Description],
					[Qualification_Element_Title],
					[QE_Short_Title],
					[QE_Effective_Version_Date],
					[QE_Effective_Version_End_Date],
					[Private_Learner_Type],
					[QE_Moderation_Type],
					[First_Language_Required_Flag],
					[Record_Delete_Flag],
					[Qualification_Reference_Number],
					[Learning_Aim_Code],
					[QE_Admin_Code])
				VALUES (
					source.[AOCentreID],
					source.[AO_Qualification_Element_Id],
					LTRIM(RTRIM(source.[Qualification_Element_Type])),
					LTRIM(RTRIM(source.[QE_Description])),
					LTRIM(RTRIM(source.[Qualification_Element_Title])),
					LTRIM(RTRIM(source.[QE_Short_Title])),
					DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_Date]),
					DBO.FN_A2C_GETDATETIME(source.[QE_Effective_Version_End_Date]),
					LTRIM(RTRIM(source.[Private_Learner_Type])),
					LTRIM(RTRIM(source.[QE_Moderation_Type])),
					DBO.FN_A2C_GETFLAG(source.[First_Language_Required_Flag]), 
					DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]),
					LTRIM(RTRIM(source.[Qualification_Reference_Number])),
					LTRIM(RTRIM(source.[Learning_Aim_Code])),
					LTRIM(RTRIM(source.[QE_Admin_Code]))
					);

				--Update newly created PKs of [dbo].[QualificationElement]
				Update 
					Q 
				set 
					[QualificationElementId]=QE.QualificationElementId
				from 
					#QE Q inner join [dbo].[QualificationElement] QE
				on 
					Q.AOCentreID=QE.AwardingOrganisationCentreId 
					and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
					and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Qualification Element block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, 
					@MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Element'
					
			END CATCH;

			
			---------------------------------------------------
			-----STEP 1.2: IMPORT [Scheme]---------------------
			---------------------------------------------------
			BEGIN TRY
				
				MERGE [dbo].[Scheme] AS [target]
				USING (SELECT * from #QE where #QE.Qualification_Element_Type='Scheme' and #QE.[QualificationElementId] is not null) AS source
				ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
					[target].[QualificationElementId] = source.[QualificationElementId])
				WHEN MATCHED THEN 
				UPDATE SET 
					[Assessment_Max_Learner_Age] = source.[Assessment_Max_Learner_Age],
					[Assessment_Min_Learner_Age] = source.[Assessment_Min_Learner_Age],
					[First_Teaching_Date] = DBO.FN_A2C_GETDATETIME(source.[First_Teaching_Date]),
					[Last_Teaching_Date] = DBO.FN_A2C_GETDATETIME(source.[Last_Teaching_Date]),
					[QE_Centre_Auth_Agreement_Text] = source.[QE_Centre_Auth_Agreement_Text],
					[Qualification_Type] = source.[Qualification_Type],
					[Series_Based_Flag] = DBO.FN_A2C_GETFLAG(source.[Series_Based_Flag]),
					[QE_Website_URL_Locator_Id] = source.[QE_Website_URL_Locator_Id],
					[Date_Of_Birth_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Date_Of_Birth_Reqd_Flag]),
					[Legal_Sex_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Legal_Sex_Required_Flag]),
					[QE_Availability_Text] = source.[QE_Availability_Text]
				WHEN NOT MATCHED THEN	
				INSERT (
					[QualificationElementId],
					[AwardingOrganisationCentreId],
					[Assessment_Max_Learner_Age],
					[Assessment_Min_Learner_Age],
					[First_Teaching_Date],
					[Last_Teaching_Date],
					[QE_Centre_Auth_Agreement_Text],
					[Qualification_Type],
					[Series_Based_Flag],
					[QE_Website_URL_Locator_Id],
					[Date_Of_Birth_Reqd_Flag],
					[Legal_Sex_Required_Flag],
					[QE_Availability_Text])
				VALUES (
					source.[QualificationElementId],
					source.[AOCentreID],
					source.[Assessment_Max_Learner_Age],
					source.[Assessment_Min_Learner_Age],
					DBO.FN_A2C_GETDATETIME(source.[First_Teaching_Date]),
					DBO.FN_A2C_GETDATETIME(source.[Last_Teaching_Date]),
					source.[QE_Centre_Auth_Agreement_Text],
					source.[Qualification_Type],
					DBO.FN_A2C_GETFLAG(source.[Series_Based_Flag]),
					source.[QE_Website_URL_Locator_Id],
					DBO.FN_A2C_GETFLAG(source.[Date_Of_Birth_Reqd_Flag]),
					DBO.FN_A2C_GETFLAG(source.[Legal_Sex_Required_Flag]),
					source.[QE_Availability_Text]
					);

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Scheme block'

				set @IsError=1
		
				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Scheme'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.3: IMPORT [Award]----------------------
			---------------------------------------------------
			BEGIN TRY

			MERGE [dbo].[Award] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Award' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Accreditation_End_Review_Date] = DBO.FN_A2C_GETDATETIME(source.[Accreditation_End_Review_Date]),
				[Accreditation_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Accreditation_Start_Date]),
				[AO_Accred_Version_Number] = 		source.[AO_Accred_Version_Number],
				[Assessment_Language_Type] = 		source.[Assessment_Language_Type],
				[Award_Level_Type] = 		source.[Award_Level_Type],
				[Award_Type] = 		source.[Award_Type],
				[Cert_of_Unit_Credit_Issued_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Cert_of_Unit_Credit_Issued_Flag]),
				[Certification_End_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Certification_End_Date]),
				[Certification_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Certification_Start_Date]),
				[Contributing_Units_Listed_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Contributing_Units_Listed_Flag]),
				[Course_Length_Type] = 		source.[Course_Length_Type],
				[Endorsed_Title_Reqd_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Endorsed_Title_Reqd_Flag]),
				[Guided_Learning_Hours_Max] = 		source.[Guided_Learning_Hours_Max],
				[Guided_Learning_Hours_Min] = 		source.[Guided_Learning_Hours_Min],
				[Operational_End_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Operational_End_Date]),
				[Operational_Start_Date] = 		DBO.FN_A2C_GETDATETIME(source.[Operational_Start_Date]),
				[QE_Delivery_Model_Type] = 		source.[QE_Delivery_Model_Type],
				[QE_Evid_Reqmnt_Provided_Flag] = 		DBO.FN_A2C_GETFLAG(source.[QE_Evid_Reqmnt_Provided_Flag]),
				[QE_Evidence_Requirement_Type] = 		source.[QE_Evidence_Requirement_Type],
				[Registration_Expiry_Months] = 		source.[Registration_Expiry_Months],
				[Resit_Rule_Text] = 		source.[Resit_Rule_Text],
				[Statement_Of_Credit_Issued_Flag] = 		DBO.FN_A2C_GETFLAG(source.[Statement_Of_Credit_Issued_Flag]),
				[Study_Guide_Available_Type] = 		source.[Study_Guide_Available_Type],
				[Study_Guide_Details] = 		source.[Study_Guide_Details],
				[Study_Guide_Reference] = 		source.[Study_Guide_Reference],
				[Study_Guide_Reference_Type] = 		source.[Study_Guide_Reference_Type],
				[QE_Classification] = 		source.[QE_Classification],
				[Party_Id_Accreditor] = 		source.[Party_Id_Accreditor],
				[Party_Id_Sector_Lead] = 		source.[Party_Id_Sector_Lead],
				[Party_Role_Type_Assessor] = 		source.[Party_Role_Type_Assessor]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Accreditation_End_Review_Date],
				[Accreditation_Start_Date],
				[AO_Accred_Version_Number],
				[Assessment_Language_Type],
				[Award_Level_Type],
				[Award_Type],
				[Cert_of_Unit_Credit_Issued_Flag],
				[Certification_End_Date],
				[Certification_Start_Date],
				[Contributing_Units_Listed_Flag],
				[Course_Length_Type],
				[Endorsed_Title_Reqd_Flag],
				[Guided_Learning_Hours_Max],
				[Guided_Learning_Hours_Min],
				[Operational_End_Date],
				[Operational_Start_Date],
				[QE_Delivery_Model_Type],
				[QE_Evid_Reqmnt_Provided_Flag],
				[QE_Evidence_Requirement_Type],
				[Registration_Expiry_Months],
				[Resit_Rule_Text],
				[Statement_Of_Credit_Issued_Flag],
				[Study_Guide_Available_Type],
				[Study_Guide_Details],
				[Study_Guide_Reference],
				[Study_Guide_Reference_Type],
				[QE_Classification],
				[Party_Id_Accreditor],
				[Party_Id_Sector_Lead],
				[Party_Role_Type_Assessor])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETDATETIME(source.[Accreditation_End_Review_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Accreditation_Start_Date]),
				source.[AO_Accred_Version_Number],
				source.[Assessment_Language_Type],
				source.[Award_Level_Type],
				source.[Award_Type],
				DBO.FN_A2C_GETFLAG(source.[Cert_of_Unit_Credit_Issued_Flag]),
				DBO.FN_A2C_GETDATETIME(source.[Certification_End_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Certification_Start_Date]),
				DBO.FN_A2C_GETFLAG(source.[Contributing_Units_Listed_Flag]),
				source.[Course_Length_Type],
				DBO.FN_A2C_GETFLAG(source.[Endorsed_Title_Reqd_Flag]),
				source.[Guided_Learning_Hours_Max],
				source.[Guided_Learning_Hours_Min],
				DBO.FN_A2C_GETDATETIME(source.[Operational_End_Date]),
				DBO.FN_A2C_GETDATETIME(source.[Operational_Start_Date]),
				source.[QE_Delivery_Model_Type],
				DBO.FN_A2C_GETFLAG(source.[QE_Evid_Reqmnt_Provided_Flag]),
				source.[QE_Evidence_Requirement_Type],
				source.[Registration_Expiry_Months],
				source.[Resit_Rule_Text],
				DBO.FN_A2C_GETFLAG(source.[Statement_Of_Credit_Issued_Flag]),
				source.[Study_Guide_Available_Type],
				source.[Study_Guide_Details],
				source.[Study_Guide_Reference],
				source.[Study_Guide_Reference_Type],
				source.[QE_Classification],
				source.[Party_Id_Accreditor],
				source.[Party_Id_Sector_Lead],
				source.[Party_Role_Type_Assessor]
				);

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Award block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Award'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.4: IMPORT [Learning Unit]--------------
			---------------------------------------------------
			BEGIN TRY

			MERGE [dbo].[LearningUnit] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Learning Unit' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Learning_Unit_Level_Type] = source.[Learning_Unit_Level_Type],
				[Maximum_Resits_Allowed] = source.[Maximum_Resits_Allowed]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Learning_Unit_Level_Type],
				[Maximum_Resits_Allowed])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				source.[Learning_Unit_Level_Type],
				source.[Maximum_Resits_Allowed]
				);
	
			END TRY
			BEGIN CATCH
				PRINT 'Exception in Learning Unit block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Learning Unit'
					
			END CATCH;
		
			---------------------------------------------------
			-----STEP 1.5: IMPORT [Assessable]-----------------
			---------------------------------------------------
			BEGIN TRY 
						
			MERGE [dbo].[Assessable] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Assessable' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Extra_Time_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Extra_Time_Required_Flag]),
				[Assessment_Method_Type] = LTRIM(RTRIM(source.[Assessment_Method_Type])),
				[Assmnt_Actual_DateTime_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Assmnt_Actual_DateTime_Reqd_Flag]),
				[Attendance_Data_Required_Flag] = DBO.FN_A2C_GETFLAG(source.[Attendance_Data_Required_Flag]),
				[Cambridge_Assmnt_TimeZone_Num] = source.[Cambridge_Assmnt_TimeZone_Num],
				[Carry_Forward_Permissible_Flag] = DBO.FN_A2C_GETFLAG(source.[Carry_Forward_Permissible_Flag]),
				[Maximum_Extra_Time_Minutes] = source.[Maximum_Extra_Time_Minutes],
				[On_Demand_Flag] = DBO.FN_A2C_GETFLAG(source.[On_Demand_Flag]),
				[QE_Timetabled_Flag] = DBO.FN_A2C_GETFLAG(source.[QE_Timetabled_Flag]),
				[Test_Day_Photograph_Reqd_Flag] = DBO.FN_A2C_GETFLAG(source.[Test_Day_Photograph_Reqd_Flag]),
				[Tier_Level_Type] = LTRIM(RTRIM(source.[Tier_Level_Type])),
				[Tier_Level_Common_Reference] = LTRIM(RTRIM(source.[Tier_Level_Common_Reference])),
				[Time_Allowed_Mins] = source.[Time_Allowed_Mins],
				[Party_Role_Type_Assessor] = LTRIM(RTRIM(source.[AssessableParty_Role_Type_Assessor])),
				[Party_Role_Type_ADT_Decider] = LTRIM(RTRIM(source.[Party_Role_Type_ADT_Decider])),
				[Assessment_Medium_Type] = LTRIM(RTRIM(source.[Assessment_Medium_Type]))
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Extra_Time_Required_Flag],
				[Assessment_Method_Type],
				[Assmnt_Actual_DateTime_Reqd_Flag],
				[Attendance_Data_Required_Flag],
				[Cambridge_Assmnt_TimeZone_Num],
				[Carry_Forward_Permissible_Flag],
				[Maximum_Extra_Time_Minutes],
				[On_Demand_Flag],
				[QE_Timetabled_Flag],
				[Test_Day_Photograph_Reqd_Flag],
				[Tier_Level_Type],
				[Tier_Level_Common_Reference],
				[Time_Allowed_Mins],
				[Party_Role_Type_Assessor],
				[Party_Role_Type_ADT_Decider],
				[Assessment_Medium_Type])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETFLAG(source.[Extra_Time_Required_Flag]),
				LTRIM(RTRIM(source.[Assessment_Method_Type])),
				DBO.FN_A2C_GETFLAG(source.[Assmnt_Actual_DateTime_Reqd_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Attendance_Data_Required_Flag]),
				source.[Cambridge_Assmnt_TimeZone_Num],
				DBO.FN_A2C_GETFLAG(source.[Carry_Forward_Permissible_Flag]),
				source.[Maximum_Extra_Time_Minutes],
				DBO.FN_A2C_GETFLAG(source.[On_Demand_Flag]),
				DBO.FN_A2C_GETFLAG(source.[QE_Timetabled_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Test_Day_Photograph_Reqd_Flag]),
				LTRIM(RTRIM(source.[Tier_Level_Type])),
				LTRIM(RTRIM(source.[Tier_Level_Common_Reference])),
				source.[Time_Allowed_Mins],
				LTRIM(RTRIM(source.[AssessableParty_Role_Type_Assessor])),
				LTRIM(RTRIM(source.[Party_Role_Type_ADT_Decider])),
				LTRIM(RTRIM(source.[Assessment_Medium_Type])));

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Assessable block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Assessable'
					
			END CATCH;

			---------------------------------------------------
			-----STEP 1.6: IMPORT [Pathway]--------------------
			---------------------------------------------------
			BEGIN TRY
		
			MERGE [dbo].[Pathway] AS [target]
			USING (SELECT * from #QE where #QE.Qualification_Element_Type='Pathway' and #QE.[QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId])
			WHEN MATCHED THEN 
			UPDATE SET 
				[Equals_Indicator_Flag] = DBO.FN_A2C_GETFLAG(source.[Equals_Indicator_Flag]),
				[Mandatory_In_Group_Flag] = DBO.FN_A2C_GETFLAG(source.[Mandatory_In_Group_Flag]),
				[Minimum_Unit_Selection] = source.[Minimum_Unit_Selection],
				[Maximum_Unit_Selection] = source.[Maximum_Unit_Selection],
				[Minimum_Pathway_Selection] = source.[Minimum_Pathway_Selection],
				[Maximum_Pathway_Selection] = source.[Maximum_Pathway_Selection],
				[Minimum_Credit_Value] = source.[Minimum_Credit_Value]
			WHEN NOT MATCHED THEN	
			INSERT (
				[QualificationElementId],
				[AwardingOrganisationCentreId],
				[Equals_Indicator_Flag],
				[Mandatory_In_Group_Flag],
				[Minimum_Unit_Selection],
				[Maximum_Unit_Selection],
				[Minimum_Pathway_Selection],
				[Maximum_Pathway_Selection],
				[Minimum_Credit_Value])
			VALUES (
				source.[QualificationElementId],
				source.[AOCentreID],
				DBO.FN_A2C_GETFLAG(source.[Equals_Indicator_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Mandatory_In_Group_Flag]),
				source.[Minimum_Unit_Selection],
				source.[Maximum_Unit_Selection],
				source.[Minimum_Pathway_Selection],
				source.[Maximum_Pathway_Selection],
				source.[Minimum_Credit_Value]);

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QE', 'U') IS NOT NULL
			  DROP TABLE #QE;

			END TRY
			BEGIN CATCH
				PRINT 'Exception in Pathway block'
		
				set @IsError=1

				EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Pathway'
					
			END CATCH;
		END TRY
		BEGIN CATCH
			PRINT 'Exception in QUALIFICATION ELEMENTS - Common block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QUALIFICATION ELEMENTS - Common'
					
		END CATCH;

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 2: IMPORT QE Relationships -------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QER.value('(a2c:QERelationship_ID/a2c:AO_Party_Id_Parent/text())[1]','[nvarchar](32)') AO_Party_Id_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:AO_QE_Id_Parent/text())[1]','[nvarchar](50)') AO_QE_Id_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:QE_Type_Parent/text())[1]','[nvarchar](32)') QE_Type_Parent,
				QER.value('(a2c:QERelationship_ID/a2c:AO_Party_Id_Child/text())[1]','[nvarchar](32)') AO_Party_Id_Child,
				QER.value('(a2c:QERelationship_ID/a2c:AO_QE_Id_Child/text())[1]','[nvarchar](50)') AO_QE_Id_Child,
				QER.value('(a2c:QERelationship_ID/a2c:QE_Type_Child/text())[1]','[nvarchar](32)') QE_Type_Child,
				QER.value('(a2c:QE_Relationship_Type/text())[1]','[nvarchar](32)') QE_Relationship_Type,
				QER.value('(a2c:QE_Relationship_Rule_Type/text())[1]','[nvarchar](20)') QE_Relationship_Rule_Type,
				QER.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#QER
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElement_DS/a2c:QERelationship') as QERelationship(QER) 
	
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QER 
					WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')='')
			BEGIN
				PRINT 'QE Relationship - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Relationship" - Record AO_QE_Id_Parent="' +  ISNULL(AO_QE_Id_Parent,'') 
					+ '", QE_Type_Parent="' + ISNULL(QE_Type_Parent,'') 
					+ '", AO_QE_Id_Child="' + ISNULL(AO_QE_Id_Child,'') 
					+ '", QE_Type_Child="' + ISNULL(QE_Type_Child,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QER 
				WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QER 
				WHERE ISNULL(AO_QE_Id_Parent,'')='' 
					OR ISNULL(QE_Type_Parent,'')=''
					OR ISNULL(AO_QE_Id_Child,'')=''
					OR ISNULL(QE_Type_Child,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child   
					ORDER BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child ) 'RowRank' 
				FROM 
					#QER)
			SELECT 
				* 
			INTO 
				#QERDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QERDUPS)
			BEGIN

				print 'duplicate records found in QE Relationship'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child   
					ORDER BY 
						[AOCentreID], AO_QE_Id_Parent, QE_Type_Parent, AO_Party_Id_Child, AO_QE_Id_Child ) 'RowRank' 
				FROM 
					#QER)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Relationship - Record AO_QE_Id_Parent=' 
					+  AO_QE_Id_Parent + ', QE_Type_Parent=' + QE_Type_Parent + ', AO_QE_Id_Child=' 
					+ AO_QE_Id_Child + ', QE_Type_Child=' + QE_Type_Child + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId,@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QERDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QERDUPS', 'U') IS NOT NULL
				DROP TABLE #QERDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy ref columns to temp table for parent and child QEs
			ALTER TABLE #QER ADD [ParentQEId] INT null, [ChildQEId] INT null

			--Update existing IDs for parent QEs
			Update Q 
				set [ParentQEId]=QE.QualificationElementId
			from 
				#QER Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Parent=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Parent=QE.[Qualification_Element_Type]

			--Update existing IDs for child QEs
			Update Q 
				set [ChildQEId]=QE.QualificationElementId
			from 
				#QER Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Child=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Child=QE.[Qualification_Element_Type]
	
			--merge [QERelationship]
			MERGE [dbo].[QERelationship] AS [target]
			USING (SELECT * from #QER where [ParentQEId] is not null and [ChildQEId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId_Parent] = source.[ParentQEId] AND
				[target].[QualificationElementId_Child] = source.[ChildQEId])
			WHEN MATCHED THEN 
			UPDATE SET			
				[QE_Relationship_Type] = source.[QE_Relationship_Type],
				[QE_Relationship_Rule_Type] = source.[QE_Relationship_Rule_Type],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId_Parent],
				[QualificationElementId_Child],
				[QE_Relationship_Type],
				[QE_Relationship_Rule_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[ParentQEId],
				source.[ChildQEId],
				source.[QE_Relationship_Type],
				source.[QE_Relationship_Rule_Type],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QER', 'U') IS NOT NULL
				DROP TABLE #QER;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Relationships block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Relationships'
					
		END CATCH;

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 3: IMPORT QE LearnerIdentifier ---------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QECN.value('(a2c:QELearnerIdentifier_ID/a2c:Party_RR_Reference_Type/text())[1]','[nvarchar](max)') Party_RR_Reference_Type,
				QECN.value('(a2c:Learner_Id_Mandatory_Flag/text())[1]','[nvarchar](max)') Learner_Id_Mandatory_Flag,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QELI
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QELearnerIdentifier_DS/a2c:QELearnerIdentifier') as QLI(QEID) 
				CROSS APPLY QLI.QEID.nodes('a2c:QELearnerIdentifier_CN') as QEL(QECN)
		
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QELI 
					WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')='')
			BEGIN
				PRINT 'QE LearnerIdentifier - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE LearnerIdentifier - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", Party_RR_Reference_Type="' + ISNULL(Party_RR_Reference_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELI 
				WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QELI 
				WHERE ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_RR_Reference_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type  
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type ) 'RowRank' 
			FROM 
				#QELI)
			SELECT 
				* 
			INTO 
				#QELIDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QELIDUPS)
			BEGIN

				print 'duplicate records found in QE Learner Identifier'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type  
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_RR_Reference_Type ) 'RowRank' 
				FROM 
					#QELI)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Learner Identifier - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', Party_RR_Reference_Type=' + Party_RR_Reference_Type 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELIDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELIDUPS', 'U') IS NOT NULL
			  DROP TABLE #QELIDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy pk column to temp table
			ALTER TABLE #QELI ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QELI Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QELearnerIdentifier]
			MERGE [dbo].[QELearnerIdentifier] AS [target]
			USING (SELECT * from #QELI where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[Party_RR_Reference_Type] = LTRIM(RTRIM(source.[Party_RR_Reference_Type])))
			WHEN MATCHED THEN 
			UPDATE SET					
				[Learner_Id_Mandatory_Flag] = DBO.FN_A2C_GETFLAG(source.[Learner_Id_Mandatory_Flag]),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[Party_RR_Reference_Type],
				[Learner_Id_Mandatory_Flag],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[Party_RR_Reference_Type])),
				DBO.FN_A2C_GETFLAG(source.[Learner_Id_Mandatory_Flag]),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELI', 'U') IS NOT NULL
				DROP TABLE #QELI;
		
		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Learner Identifier block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Learner Identifier'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 4: IMPORT QE Preference ----------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				PID.value('(a2c:Party_ID/a2c:Party_Id_Creator/text())[1]','[nvarchar](32)') Party_Id_Creator,
				QEP.value('(a2c:QEPreference_ID/a2c:QE_Preference/text())[1]','[nvarchar](100)') QE_Preference,
				QEP.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEPR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEPreference_DS/a2c:QEPreference') as QEPreference_DS(PID)
				CROSS APPLY
				QEPreference_DS.PID.nodes('a2c:QEPreference_CN') as QEPreference_CN(QEP)

			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEPR 
					WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')='')
			BEGIN
				PRINT 'QE Preference - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Preference - Record Party_Id_Creator="' +  ISNULL(Party_Id_Creator,'') 
					+ '", QE_Preference="' + ISNULL(QE_Preference,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEPR 
				WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEPR 
				WHERE ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------

			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], Party_Id_Creator, QE_Preference ) 'RowRank' 
				FROM 
					#QEPR)
			SELECT 
				* 
			INTO 
				#QEPRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEPRDUPS)
			BEGIN

				print 'duplicate records found in QE Preference'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], Party_Id_Creator, QE_Preference ) 'RowRank' 
				FROM 
					#QEPR)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Preference - Record Party_Id_Creator=' +  Party_Id_Creator 
					+ ', QE_Preference=' + QE_Preference + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEPRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEPRDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEPRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--merge [QEPreference]
			MERGE [dbo].[QEPreference] AS [target]
			USING (SELECT * from #QEPR) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Party_Id_Creator] = LTRIM(RTRIM(source.[Party_Id_Creator])) AND
				[target].[QE_Preference] = LTRIM(RTRIM(source.[QE_Preference])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Party_Id_Creator],
				[QE_Preference],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[Party_Id_Creator])),
				LTRIM(RTRIM(source.[QE_Preference])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEPR', 'U') IS NOT NULL
				DROP TABLE #QEPR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Preference block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Preference'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 5: IMPORT AO QE Preference -------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:AOQEPreference_ID/a2c:Party_Id_Creator/text())[1]','[nvarchar](32)') Party_Id_Creator,
				QECN.value('(a2c:AOQEPreference_ID/a2c:QE_Preference/text())[1]','[nvarchar](100)') QE_Preference,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#AOQEPR	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:AOQEPreference_DS/a2c:AOQEPreference') as AOQEPreference(QEID) 
				CROSS APPLY 
				AOQEPreference.QEID.nodes('a2c:AOQEPreference_CN') as AOQEPreference_CN(QECN) 
					
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #AOQEPR 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR ISNULL(Party_Id_Creator,'')=''
						OR ISNULL(QE_Preference,'')='')
			BEGIN
				PRINT 'AO QE Preference - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock AO QE Preference - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", Party_Id_Creator="' + ISNULL(Party_Id_Creator,'') 
					+ '", QE_Preference="' + ISNULL(QE_Preference,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#AOQEPR 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#AOQEPR 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Creator,'')=''
					OR ISNULL(QE_Preference,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference) 'RowRank' 
				FROM 
					#AOQEPR)
			SELECT 
				* 
			INTO 
				#AOQEPRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #AOQEPRDUPS)
			BEGIN

				print 'duplicate records found in AO QE Preference'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Creator, QE_Preference) 'RowRank' 
				FROM 
					#AOQEPR)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock AO QE Preference - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', Party_Id_Creator=' +  Party_Id_Creator 
					+ ', QE_Preference=' + QE_Preference + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#AOQEPRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#AOQEPRDUPS', 'U') IS NOT NULL
			  DROP TABLE #AOQEPRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

		
			--add dummy fk column to temp table
			ALTER TABLE #AOQEPR ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#AOQEPR Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--add dummy fk column to temp table
			ALTER TABLE #AOQEPR ADD [QEPreferenceId] INT null

			--Update existing PKs of [dbo].[QEPreference]
			Update Q 
				set [QEPreferenceId]=QEP.[QEPreferenceId]
			from 
				#AOQEPR Q inner join [dbo].[QEPreference] QEP
			on 
				Q.AOCentreID=QEP.AwardingOrganisationCentreId 
				and Q.[Party_Id_Creator]=QEP.[Party_Id_Creator] 
				and Q.[QE_Preference]=QEP.[QE_Preference]

			--merge [AOQEPreference]
			MERGE [dbo].[AOQEPreference] AS [target]
			USING (SELECT * from #AOQEPR where [QualificationElementId] is not null and [QEPreferenceId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEPreferenceId] = source.[QEPreferenceId])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEPreferenceId],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QEPreferenceId],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#AOQEPR', 'U') IS NOT NULL
				DROP TABLE #AOQEPR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in AO QE Preference block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'AO QE Preference'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 6: IMPORT QE Availability --------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				QECN.value('(a2c:QEA_Effective_End_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_End_Date_Time,
				QECN.value('(a2c:SLA_OnDemand_Result_Clndr_Days/text())[1]','int') SLA_OnDemand_Result_Clndr_Days,
				QECN.value('(a2c:Series_Label/text())[1]','[nvarchar](50)') Series_Label,
				QECN.value('(a2c:OnDemand_Entry_Calendar_Days/text())[1]','int') OnDemand_Entry_Calendar_Days,
				QECN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEA	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QEAvailability_CN(QECN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEA 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QE Availability - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEA 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEA 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEA)
			SELECT 
				* 
			INTO 
				#QEADUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEADUPS)
			BEGIN

				print 'duplicate records found in QE Availability'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEA)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) + ' - Datablock QE Availability - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' + Qualification_Element_Type + ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEADUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEADUPS', 'U') IS NOT NULL
			  DROP TABLE #QEADUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEA ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEA Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]
	
			--merge [QEAvailability]
			MERGE [dbo].[QEAvailability] AS [target]
			USING (SELECT * from #QEA where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]))
			WHEN MATCHED THEN 
			UPDATE SET				
				[QEA_Effective_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_End_Date_Time]),
				[SLA_OnDemand_Result_Clndr_Days] = source.[SLA_OnDemand_Result_Clndr_Days],
				[Series_Label] = LTRIM(RTRIM(source.[Series_Label])),
				[OnDemand_Entry_Calendar_Days] = source.[OnDemand_Entry_Calendar_Days],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEA_Effective_Start_Date_Time],
				[QEA_Effective_End_Date_Time],
				[SLA_OnDemand_Result_Clndr_Days],
				[Series_Label],
				[OnDemand_Entry_Calendar_Days],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_End_Date_Time]),
				source.[SLA_OnDemand_Result_Clndr_Days],
				LTRIM(RTRIM(source.[Series_Label])),
				source.[OnDemand_Entry_Calendar_Days],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEA', 'U') IS NOT NULL
				DROP TABLE #QEA;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability'
					
		END CATCH

		---------------------------------------------------
		----- STEP 6.1: IMPORT QE Availability Key Event --
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				KE.value('(a2c:QEAvailabilityKeyEvent_ID/a2c:Key_Event_Name/text())[1]','[nvarchar](100)') Key_Event_Name,
				KE.value('(a2c:Key_Event_Start_Date_Time/text())[1]','[nvarchar](100)') Key_Event_Start_Date_Time,
				KE.value('(a2c:Key_Event_End_Date_Time/text())[1]','[nvarchar](100)') Key_Event_End_Date_Time,
				KE.value('(a2c:Key_Event_Additional_Text/text())[1]','[nvarchar](400)') Key_Event_Additional_Text,
				KE.value('(a2c:Time_Period_Type/text())[1]','[nvarchar](32)') Time_Period_Type,
				KE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEAKE	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QE(QECN) 
				CROSS APPLY QE.QECN.nodes('a2c:QEAvailabilityKeyEvent') as QEA(KE)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAKE 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
						OR ISNULL(Key_Event_Name,'')='')
			BEGIN
				PRINT 'QE Availability Key Event - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", Key_Event_Name="' + ISNULL(Key_Event_Name,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAKE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name) 'RowRank' 
				FROM 
					#QEAKE)
			SELECT 
				* 
			INTO 
				#QEAKEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAKEDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Key Event'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name) 'RowRank' 
				FROM 
					#QEAKE)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' + Qualification_Element_Type 
					+ ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) 
					+ ', Key_Event_Name=' + Key_Event_Name + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEDUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAKEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------

			--add dummy fk column to temp table
			ALTER TABLE #QEAKE ADD [QualificationElementId] INT null, [QEAvailabilityId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAKE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QEAvailability]
			Update Q 
				set [QEAvailabilityId]=QE.[QEAvailabilityId]
			from 
				#QEAKE Q inner join [QEAvailability] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QualificationElementId]=QE.[QualificationElementId] 
				and DBO.FN_A2C_GETDATETIME(Q.[QEA_Effective_Start_Date_Time])=QE.[QEA_Effective_Start_Date_Time]	
	
			--merge [QEAvailabilityKeyEvent]
			MERGE [dbo].[QEAvailabilityKeyEvent] AS [target]
			USING (SELECT * from #QEAKE 
					where [QualificationElementId] is not null 
					and [QEAvailabilityId] is not null
					and [Key_Event_Name] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityId] = source.[QEAvailabilityId] AND
				[target].[Key_Event_Name] =  LTRIM(RTRIM(source.[Key_Event_Name])))
			WHEN MATCHED THEN 
			UPDATE SET				
				[Key_Event_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Key_Event_Start_Date_Time]),
				[Key_Event_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Key_Event_End_Date_Time]),
				[Key_Event_Additional_Text] = LTRIM(RTRIM(source.[Key_Event_Additional_Text])),
				[Time_Period_Type] = LTRIM(RTRIM(source.[Time_Period_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityId],
				[Key_Event_Name],
				[Key_Event_Start_Date_Time],
				[Key_Event_End_Date_Time],
				[Key_Event_Additional_Text],
				[Time_Period_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityId],
				LTRIM(RTRIM(source.[Key_Event_Name])),
				DBO.FN_A2C_GETDATETIME(source.[Key_Event_Start_Date_Time]),
				DBO.FN_A2C_GETDATETIME(source.[Key_Event_End_Date_Time]),
				LTRIM(RTRIM(source.[Key_Event_Additional_Text])),
				LTRIM(RTRIM(source.[Time_Period_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKE', 'U') IS NOT NULL
				DROP TABLE #QEAKE;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Key Event block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Key Event'
					
		END CATCH

		----------------------------------------------------------
		----- STEP 6.2: IMPORT QE Availability Key Event Fee -----
		----------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				QECN.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QECN.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QECN.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				KE.value('(a2c:QEAvailabilityKeyEvent_ID/a2c:Key_Event_Name/text())[1]','[nvarchar](100)') Key_Event_Name,	
				KEFEE.value('(a2c:QEAvailabilityKeyEventFee_ID/a2c:QE_Fee_Category_Type/text())[1]','[nvarchar](100)') QE_Fee_Category_Type,
				KEFEE.value('(a2c:QEAvailabilityKeyEventFee_ID/a2c:Fee_Period_Start_Date_Time/text())[1]','[nvarchar](100)') Fee_Period_Start_Date_Time,
				KEFEE.value('(a2c:Fee_Period_Title/text())[1]','[nvarchar](100)') Fee_Period_Title,
				KEFEE.value('(a2c:Fee_Period_End_Date_Time/text())[1]','[nvarchar](100)') Fee_Period_End_Date_Time,
				KEFEE.value('(a2c:Fee_Amount/text())[1]','[Decimal](9,2)') Fee_Amount,
				KEFEE.value('(a2c:Fee_Additional_Text/text())[1]','[nvarchar](400)') Fee_Additional_Text,
				KEFEE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag	
			into 
				#QEAKEFEE	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailability_DS/a2c:QEAvailability/a2c:QEAvailability_CN') as QE(QECN) 
				CROSS APPLY QE.QECN.nodes('a2c:QEAvailabilityKeyEvent') as QEA(KE)
				CROSS APPLY QEA.KE.nodes('a2c:QEAvailabilityKeyEventFee') as QEAKE(KEFEE)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAKEFEE 
					WHERE 
						ISNULL(AO_Qualification_Element_Id,'')='' 
						OR ISNULL(Qualification_Element_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
						OR ISNULL(Key_Event_Name,'')=''
						OR ISNULL(QE_Fee_Category_Type,'')=''
						OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QE Availability Key Event Fee - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event Fee - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'') 
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", Key_Event_Name="' + ISNULL(Key_Event_Name,'') 
					+ '", QE_Fee_Category_Type="' + ISNULL(QE_Fee_Category_Type,'') 
					+ '", Fee_Period_Start_Date_Time="' + CASE WHEN Fee_Period_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(Fee_Period_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEFEE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
					OR ISNULL(QE_Fee_Category_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEAKEFEE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')='' 
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(Key_Event_Name,'')=''
					OR ISNULL(QE_Fee_Category_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NULL					
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAKEFEE)
			SELECT 
				* 
			INTO 
				#QEAKEFEEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAKEFEEDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Key Event Fee'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, QEA_Effective_Start_Date_Time, Key_Event_Name, QE_Fee_Category_Type, Fee_Period_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAKEFEE)
				DELETE 
					FROM CTE 
				WHERE 
					RowRank > 1

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Key Event Fee - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id + ', Qualification_Element_Type=' 
					+ Qualification_Element_Type + ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100)) + ', Key_Event_Name=' + Key_Event_Name 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAKEFEEDUPS
			END
	
			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEFEEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAKEFEEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAKEFEE ADD [QualificationElementId] INT null, [QEAvailabilityId] INT null, [QEAvailabilityKeyEventId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAKEFEE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QEAvailability]
			Update Q 
				set [QEAvailabilityId]=QE.[QEAvailabilityId]
			from 
				#QEAKEFEE Q inner join [QEAvailability] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QualificationElementId]=QE.[QualificationElementId] 
				and DBO.FN_A2C_GETDATETIME(Q.[QEA_Effective_Start_Date_Time])=QE.[QEA_Effective_Start_Date_Time]	

			--Update existing PKs of [dbo].[QEAvailabilityKeyEvent]
			Update Q 
				set [QEAvailabilityKeyEventId]=QE.[QEAvailabilityKeyEventId]
			from 
				#QEAKEFEE Q inner join [QEAvailabilityKeyEvent] QE
			on 
				Q.AOCentreID=QE.[AwardingOrganisationCentreId] 
				and Q.[QEAvailabilityId]=QE.[QEAvailabilityId] 
				and LTRIM(RTRIM(Q.[Key_Event_Name]))=LTRIM(RTRIM(QE.[Key_Event_Name]))
	
			--merge [QEAvailabilityKeyEventFee]
			MERGE [dbo].[QEAvailabilityKeyEventFee] AS [target]
			USING (SELECT * from #QEAKEFEE 
					where [QEAvailabilityKeyEventId] is not null 
					and [QE_Fee_Category_Type] is not null
					and DBO.FN_A2C_GETDATETIME(Fee_Period_Start_Date_Time) IS NOT NULL) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityKeyEventId] = source.[QEAvailabilityKeyEventId] AND
				[target].[QE_Fee_Category_Type] =  LTRIM(RTRIM(source.[QE_Fee_Category_Type])) AND
				[target].[Fee_Period_Start_Date_Time] =  DBO.FN_A2C_GETDATETIME(source.[Fee_Period_Start_Date_Time]))
			WHEN MATCHED THEN 
			UPDATE SET				
				[Fee_Period_Title] = LTRIM(RTRIM(source.[Fee_Period_Title])),
				[Fee_Period_End_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[Fee_Period_End_Date_Time]),
				[Fee_Amount] = source.[Fee_Amount],
				[Fee_Additional_Text] = LTRIM(RTRIM(source.[Fee_Additional_Text])),		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityKeyEventId],
				[QE_Fee_Category_Type],
				[Fee_Period_Start_Date_Time],
				[Fee_Period_Title],
				[Fee_Period_End_Date_Time],
				[Fee_Amount],
				[Fee_Additional_Text],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityKeyEventId],
				LTRIM(RTRIM(source.[QE_Fee_Category_Type])),
				DBO.FN_A2C_GETDATETIME(source.[Fee_Period_Start_Date_Time]),
				LTRIM(RTRIM(source.[Fee_Period_Title])),
				DBO.FN_A2C_GETDATETIME(source.[Fee_Period_End_Date_Time]),
				source.[Fee_Amount],
				LTRIM(RTRIM(source.[Fee_Additional_Text])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAKEFEE', 'U') IS NOT NULL
				DROP TABLE #QEAKEFEE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Key Event Fee block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Key Event Fee'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 7: IMPORT QE Fee Category --------------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],
				FEE.value('(a2c:QEFeeCategory_ID/a2c:QE_Fee_Category_Type/text())[1]','[nvarchar](100)') QE_Fee_Category_Type,
				FEE.value('(a2c:Fee_Additional_Information/text())[1]','[nvarchar](400)') Fee_Additional_Information,
				FEE.value('(a2c:Currency_Type/text())[1]','[nvarchar](80)') Currency_Type,
				FEE.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#QEFEE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEFeeCategory_DS/a2c:QEFeeCategory') as QE(FEE)

		
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFEE 
					WHERE ISNULL(QE_Fee_Category_Type,'')='')
			BEGIN
				PRINT 'QE Fee Category - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Fee Category" - Record QE_Fee_Category_Type="' +  ISNULL(QE_Fee_Category_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFEE 
				WHERE 
					ISNULL(QE_Fee_Category_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFEE 
				WHERE 
					ISNULL(QE_Fee_Category_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Fee_Category_Type 
				ORDER BY 
					[AOCentreID], QE_Fee_Category_Type) 'RowRank' 
			FROM 
				#QEFEE)
			SELECT 
				* 
			INTO 
				#QEFEEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFEEDUPS)
			BEGIN

				print 'duplicate records found in QE Fee Category'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Fee_Category_Type 
					ORDER BY 
						[AOCentreID], QE_Fee_Category_Type) 'RowRank' 
				FROM 
					#QEFEE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Fee Category - Record QE_Fee_Category_Type=' +  QE_Fee_Category_Type + ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFEEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFEEDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFEEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QEFeeCategory]
			MERGE [dbo].[QEFeeCategory] AS [target]
			USING (SELECT * from #QEFEE) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QE_Fee_Category_Type] = LTRIM(RTRIM(source.[QE_Fee_Category_Type])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[Fee_Additional_Information] = LTRIM(RTRIM(source.[Fee_Additional_Information])),
				[Currency_Type] = LTRIM(RTRIM(source.[Currency_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QE_Fee_Category_Type],
				[Fee_Additional_Information],
				[Currency_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[QE_Fee_Category_Type])),
				LTRIM(RTRIM(source.[Fee_Additional_Information])),
				LTRIM(RTRIM(source.[Currency_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFEE', 'U') IS NOT NULL
				DROP TABLE #QEFEE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Fee Category block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Fee Category'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 8: IMPORT Qualification Framework ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 	
				@AwardingOrganisationCentreId [AOCentreID],	
				QF.value('(a2c:QualificationFrameworkParty_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](max)') Party_Id_Administrator,
				PQF.value('(a2c:QualificationFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](max)') Qualification_Framework_Type,
				QFL.value('(a2c:Qual_Frmwrk_Level_Type_ID/a2c:Qual_Frmwrk_Level_Type/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type,
				QFL.value('(a2c:Qual_Frmwrk_Level_Tier_Type/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Tier_Type,
				QFL.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into
				#QEFM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationFramework_DS/a2c:QualificationFramework') as Q(QF) 
				CROSS APPLY Q.QF.nodes('a2c:PartyQualificationFramework_CN') as QE(PQF) 
				CROSS APPLY QE.PQF.nodes('a2c:QualificationFrameworkLevel_CN') as QF(QFL) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFM 
					WHERE ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')='')
			BEGIN
				PRINT 'Qualification Framework - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Framework" - Record Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type="' +  ISNULL(Qual_Frmwrk_Level_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFM 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFM 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
				ORDER BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
			FROM 
				#QEFM)
			SELECT 
				* 
			INTO 
				#QEFMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFMDUPS)
			BEGIN

				print 'duplicate records found in Qualification Framework'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
					ORDER BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
				FROM 
					#QEFM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Framework - Record Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type=' +  Qual_Frmwrk_Level_Type 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QualificationFramework]
			MERGE [dbo].[QualificationFramework] AS [target]
			USING (SELECT * from #QEFM) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Party_Id_Administrator] = LTRIM(RTRIM(source.[Party_Id_Administrator])) AND
				[target].[Qualification_Framework_Type] = LTRIM(RTRIM(source.[Qualification_Framework_Type])) AND
				[target].[Qual_Frmwrk_Level_Type] = LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Type])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[Qual_Frmwrk_Level_Tier_Type] = LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Tier_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Party_Id_Administrator],
				[Qualification_Framework_Type],
				[Qual_Frmwrk_Level_Type],
				[Qual_Frmwrk_Level_Tier_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[Party_Id_Administrator])),
				LTRIM(RTRIM(source.[Qualification_Framework_Type])),
				LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Type])),
				LTRIM(RTRIM(source.[Qual_Frmwrk_Level_Tier_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFM', 'U') IS NOT NULL
				DROP TABLE #QEFM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Qualification Framework block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Framework'
					
		END CATCH

		----------------------------------------------------------------
		----- STEP 8.1 : IMPORT Qualification Framework Hierarchy ------
		----------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select
				@AwardingOrganisationCentreId [AOCentreID],	
				QF.value('(a2c:QualificationFrameworkParty_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](max)') Party_Id_Administrator,
				PQF.value('(a2c:QualificationFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](max)') Qualification_Framework_Type,
				QFH.value('(a2c:QualFrameworkHierarchy_ID/a2c:Qual_Frmwrk_Level_Type_Parent/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type_Parent,
				QFH.value('(a2c:QualFrameworkHierarchy_ID/a2c:Qual_Frmwrk_Level_Type_Child/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type_Child,
				QFH.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into
				#QEFMHR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationFramework_DS/a2c:QualificationFramework') as Q(QF) 
				CROSS APPLY Q.QF.nodes('a2c:PartyQualificationFramework_CN') as QE(PQF) 
				CROSS APPLY QE.PQF.nodes('a2c:QualFrameworkHierarchy') as QF(QFH) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEFMHR 
					WHERE ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')='')
			BEGIN
				PRINT 'Qualification Framework Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Framework Hierarchy" - Record Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type_Parent="' +  ISNULL(Qual_Frmwrk_Level_Type_Parent,'') 
					+ '", Qual_Frmwrk_Level_Type_Child="' +  ISNULL(Qual_Frmwrk_Level_Type_Child,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMHR 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEFMHR 
				WHERE 
					ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Parent,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type_Child,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child  
				ORDER BY 
					[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child) 'RowRank' 
			FROM 
				#QEFMHR)
			SELECT 
				* 
			INTO 
				#QEFMHRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEFMHRDUPS)
			BEGIN

				print 'duplicate records found in Qualification Framework Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child  
					ORDER BY 
						[AOCentreID], Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type_Parent, Qual_Frmwrk_Level_Type_Child) 'RowRank' 
				FROM 
					#QEFMHR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Framework Hierarchy - Record Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type_Parent=' +  Qual_Frmwrk_Level_Type_Parent 
					+ ', Qual_Frmwrk_Level_Type_Child=' +  Qual_Frmwrk_Level_Type_Child 
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId,
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEFMHRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMHRDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEFMHRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEFMHR ADD [QualificationFrameworkId_Parent] INT null, [QualificationFrameworkId_Child] INT null

			--Update existing PKs of [dbo].[QualificationFramework]
			Update Q 
				set [QualificationFrameworkId_Parent]=QE.[QualificationFrameworkId]
			from 
				#QEFMHR Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=LTRIM(RTRIM(QE.[Party_Id_Administrator])) 
				and Q.[Qualification_Framework_Type]=LTRIM(RTRIM(QE.[Qualification_Framework_Type]))
				and Q.Qual_Frmwrk_Level_Type_Parent=LTRIM(RTRIM(QE.[Qual_Frmwrk_Level_Type]))

			Update Q 
				set [QualificationFrameworkId_Child]=QE.[QualificationFrameworkId]
			from 
				#QEFMHR Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=LTRIM(RTRIM(QE.[Party_Id_Administrator])) 
				and Q.[Qualification_Framework_Type]=LTRIM(RTRIM(QE.[Qualification_Framework_Type]))
				and Q.Qual_Frmwrk_Level_Type_Child=LTRIM(RTRIM(QE.[Qual_Frmwrk_Level_Type]))

			--merge [QualificationFrameworkHierarchy]
			MERGE [dbo].[QualificationFrameworkHierarchy] AS [target]
			USING (SELECT * from #QEFMHR where [QualificationFrameworkId_Parent] is not null and [QualificationFrameworkId_Child] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationFrameworkId_Parent] = source.[QualificationFrameworkId_Parent] AND
				[target].[QualificationFrameworkId_Child] = source.[QualificationFrameworkId_Child])
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationFrameworkId_Parent],
				[QualificationFrameworkId_Child],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationFrameworkId_Parent],
				source.[QualificationFrameworkId_Child],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEFMHR', 'U') IS NOT NULL
				DROP TABLE #QEFMHR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Qualification Framework Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Qualification Framework Hierarchy'
					
		END CATCH

		----------------------------------------------------------------
		----- STEP 8.2: IMPORT Qualification Element Framework ---------
		----------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QF.value('(a2c:QEFramework_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QF.value('(a2c:QEFramework_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QF.value('(a2c:QEFramework_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](max)') Party_Id_Administrator,
				QF.value('(a2c:QEFramework_ID/a2c:Qualification_Framework_Type/text())[1]','[nvarchar](max)') Qualification_Framework_Type,
				QF.value('(a2c:QEFramework_ID/a2c:Qual_Frmwrk_Level_Type/text())[1]','[nvarchar](max)') Qual_Frmwrk_Level_Type,
				QF.value('(a2c:QE_Framework_Credit_Value/text())[1]','[nvarchar](max)') QE_Framework_Credit_Value,
				QF.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag	
			into
				#QELEFM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementFramework_DS/a2c:QualificationElementFramework') as Q(QF) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QELEFM 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Framework - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId,A2CTransactionResponseEnvelopeId,  
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Framework" - Record AO_Qualification_Element_Id="' +  ISNULL(AO_Qualification_Element_Id,'') 
					+ '", Qualification_Element_Type="' +  ISNULL(Qualification_Element_Type,'') 
					+ '", Party_Id_Administrator="' +  ISNULL(Party_Id_Administrator,'') 
					+ '", Qualification_Framework_Type="' +  ISNULL(Qualification_Framework_Type,'') 
					+ '", Qual_Frmwrk_Level_Type="' +  ISNULL(Qual_Frmwrk_Level_Type,'') 
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELEFM 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QELEFM 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
					OR ISNULL(Qualification_Framework_Type,'')=''
					OR ISNULL(Qual_Frmwrk_Level_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
			FROM 
				#QELEFM)
			SELECT 
				* 
			INTO 
				#QELEFMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QELEFMDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Framework'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type 
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Party_Id_Administrator, Qualification_Framework_Type, Qual_Frmwrk_Level_Type) 'RowRank' 
				FROM 
					#QELEFM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Framework - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id 
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type 
					+ ', Party_Id_Administrator=' +  Party_Id_Administrator 
					+ ', Qualification_Framework_Type=' +  Qualification_Framework_Type 
					+ ', Qual_Frmwrk_Level_Type=' +  Qual_Frmwrk_Level_Type
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QELEFMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELEFMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QELEFMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QELEFM ADD [QualificationElementId] INT null, [QualificationFrameworkId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QELEFM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[QualificationFramework]
			Update Q 
				set [QualificationFrameworkId]=QE.[QualificationFrameworkId]
			from 
				#QELEFM Q inner join [dbo].[QualificationFramework] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[Party_Id_Administrator]=QE.[Party_Id_Administrator] 
				and Q.[Qualification_Framework_Type]=QE.[Qualification_Framework_Type]
				and Q.[Qual_Frmwrk_Level_Type]=QE.[Qual_Frmwrk_Level_Type]

			--merge [QualificationElementFramework]
			MERGE [dbo].[QualificationElementFramework] AS [target]
			USING (SELECT * from #QELEFM where [QualificationElementId] is not null and [QualificationFrameworkId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QualificationFrameworkId] = source.[QualificationFrameworkId])
			WHEN MATCHED THEN 
			UPDATE SET		
				[QE_Framework_Credit_Value] = source.[QE_Framework_Credit_Value],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QualificationFrameworkId],
				[QE_Framework_Credit_Value],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QualificationFrameworkId],
				source.[QE_Framework_Credit_Value],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QELEFM', 'U') IS NOT NULL
				DROP TABLE #QELEFM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Framework block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Framework'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 9: IMPORT Sector Subject Area ----------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 			
				@AwardingOrganisationCentreId [AOCentreID],	
				CN.value('(a2c:SectorSubjectArea_ID/a2c:Sector_Subject_Area/text())[1]','decimal(3,1)') Sector_Subject_Area,
				CN.value('(a2c:Sector_Subject_Area_Descr/text())[1]','[nvarchar](100)') Sector_Subject_Area_Descr,
				CN.value('(a2c:Sector_Subject_Area_Level_Type/text())[1]','[nvarchar](8)') Sector_Subject_Area_Level_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#SSA
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:SectorSubjectArea_DS/a2c:SectorSubjectArea/a2c:SectorSubjectArea_CN') as SSA(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSA 
					WHERE Sector_Subject_Area IS NULL)
			BEGIN
				PRINT 'Sector Subject Area - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Sector Subject Area" - Record Sector_Subject_Area="' 
					+  CASE WHEN Sector_Subject_Area IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSA 
				WHERE 
					Sector_Subject_Area IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSA 
				WHERE 
					Sector_Subject_Area IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Sector_Subject_Area
				ORDER BY 
					[AOCentreID], Sector_Subject_Area) 'RowRank' 
			FROM 
				#SSA)
			SELECT 
				* 
			INTO 
				#SSADUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSADUPS)
			BEGIN

				print 'duplicate records found in Sector Subject Area'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Sector_Subject_Area
					ORDER BY 
						[AOCentreID], Sector_Subject_Area) 'RowRank' 
				FROM 
					#SSA)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) + ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Sector Subject Area - Record Sector_Subject_Area=' +  cast(Sector_Subject_Area as nvarchar)
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSADUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSADUPS', 'U') IS NOT NULL
			  DROP TABLE #SSADUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [SectorSubjectArea]
			MERGE [dbo].[SectorSubjectArea] AS [target]
			USING (SELECT * from #SSA) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[Sector_Subject_Area] = source.[Sector_Subject_Area])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Sector_Subject_Area_Descr] = LTRIM(RTRIM(source.[Sector_Subject_Area_Descr])),
				[Sector_Subject_Area_Level_Type] = LTRIM(RTRIM(source.[Sector_Subject_Area_Level_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[Sector_Subject_Area],
				[Sector_Subject_Area_Descr],
				[Sector_Subject_Area_Level_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[Sector_Subject_Area],
				LTRIM(RTRIM(source.[Sector_Subject_Area_Descr])),
				LTRIM(RTRIM(source.[Sector_Subject_Area_Level_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSA', 'U') IS NOT NULL
				DROP TABLE #SSA;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Sector Subject Area block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Sector Subject Area'
					
		END CATCH


		-------------------------------------------------------------
		----- STEP 9.1: IMPORT Sector Subject Area Hierarchy --------
		-------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select 			
				@AwardingOrganisationCentreId [AOCentreID],	
				CN.value('(a2c:SectorSubjectAreaHierarchy_ID/a2c:Sector_Subject_Area_Parent/text())[1]','decimal(3,1)') Sector_Subject_Area_Parent,
				CN.value('(a2c:SectorSubjectAreaHierarchy_ID/a2c:Sector_Subject_Area_Child/text())[1]','decimal(3,1)') Sector_Subject_Area_Child,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#SSAHR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:SectorSubjectArea_DS/a2c:SectorSubjectArea/a2c:SectorSubjectAreaHierarchy') as SSA(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSAHR 
					WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL)
			BEGIN
				PRINT 'Sector Subject Area Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Sector Subject Area Hierarchy" - Record Sector_Subject_Area_Parent="' 
					+  CASE WHEN Sector_Subject_Area_Parent IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area_Parent AS VARCHAR) END
					+ '", Sector_Subject_Area_Child="' 
					+  CASE WHEN Sector_Subject_Area_Child IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area_Child AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAHR 
				WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSAHR 
				WHERE Sector_Subject_Area_Parent IS NULL
					OR Sector_Subject_Area_Child IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child
				ORDER BY 
					[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child) 'RowRank' 
			FROM 
				#SSAHR)
			SELECT 
				* 
			INTO 
				#SSAHRDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSAHRDUPS)
			BEGIN

				print 'duplicate records found in Sector Subject Area Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child
					ORDER BY 
						[AOCentreID], Sector_Subject_Area_Parent, Sector_Subject_Area_Child) 'RowRank' 
				FROM 
					#SSAHR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Sector Subject Area Hierarchy - Record Sector_Subject_Area_Parent=' +  CAST(Sector_Subject_Area_Parent AS VARCHAR)
					+ ' , Sector_Subject_Area_Child=' +  CAST(Sector_Subject_Area_Child AS VARCHAR)
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAHRDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAHRDUPS', 'U') IS NOT NULL
			  DROP TABLE #SSAHRDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #SSAHR ADD [SectorSubjectAreaId_Parent] INT null, [SectorSubjectAreaId_Child] INT null

			--Update existing PKs of [dbo].[SectorSubjectArea]
			Update Q 
				set [SectorSubjectAreaId_Parent]=QE.[SectorSubjectAreaId]
			from 
				#SSAHR Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area_Parent=QE.[Sector_Subject_Area] 

			Update Q 
				set [SectorSubjectAreaId_Child]=QE.[SectorSubjectAreaId]
			from 
				#SSAHR Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area_Child=QE.[Sector_Subject_Area] 
		
			--merge [SectorSubjectAreaHierarchy]
			MERGE [dbo].[SectorSubjectAreaHierarchy] AS [target]
			USING (SELECT * from #SSAHR where [SectorSubjectAreaId_Parent] is not null and [SectorSubjectAreaId_Child] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[SectorSubjectAreaId_Parent] = source.[SectorSubjectAreaId_Parent] AND
				[target].[SectorSubjectAreaId_Child] = source.[SectorSubjectAreaId_Child])
			WHEN MATCHED THEN 
			UPDATE SET		
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[SectorSubjectAreaId_Parent],
				[SectorSubjectAreaId_Child],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[SectorSubjectAreaId_Parent],
				source.[SectorSubjectAreaId_Child],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAHR', 'U') IS NOT NULL
				DROP TABLE #SSAHR;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in Sector Subject Area Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Sector Subject Area Hierarchy'
					
		END CATCH
			
		-------------------------------------------------------------
		----- STEP 9.2: IMPORT QE Sector Subject Area  --------------
		-------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],	
				QE.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](100)') AO_Qualification_Element_Id,
				QE.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](100)') Qualification_Element_Type,
				CN.value('(a2c:SectorSubjectArea_ID/a2c:Sector_Subject_Area/text())[1]','decimal(3,1)') Sector_Subject_Area,
				CN.value('(a2c:QE_Sector_Subject_Area_Eff_Date/text())[1]','[nvarchar](100)') QE_Sector_Subject_Area_Eff_Date,
				CN.value('(a2c:QE_Sector_Subject_Area_End_Date/text())[1]','[nvarchar](100)') QE_Sector_Subject_Area_End_Date,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#SSAQE
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QESectorSubjectArea_DS/a2c:QESectorSubjectArea/a2c:QualificationElement') as SSA(QE)
				CROSS APPLY SSA.QE.nodes('a2c:QESectorSubjectArea_CN') as SS(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #SSAQE 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL)
			BEGIN
				PRINT 'QE Sector Subject Area - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Sector Subject Area" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", Sector_Subject_Area="' 
					+  CASE WHEN Sector_Subject_Area IS NULL THEN 'NULL' ELSE CAST(Sector_Subject_Area AS VARCHAR) END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAQE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#SSAQE 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR Sector_Subject_Area IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area) 'RowRank' 
			FROM 
				#SSAQE)
			SELECT 
				* 
			INTO 
				#SSAQEDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #SSAQEDUPS)
			BEGIN

				print 'duplicate records found in QE Sector Subject Area'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id, Qualification_Element_Type, Sector_Subject_Area) 'RowRank' 
				FROM 
					#SSAQE)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Sector Subject Area - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ' , Qualification_Element_Type=' +  Qualification_Element_Type
					+ ' , Sector_Subject_Area=' +  CAST(Sector_Subject_Area AS NVARCHAR)
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#SSAQEDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAQEDUPS', 'U') IS NOT NULL
			  DROP TABLE #SSAQEDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #SSAQE ADD [QualificationElementId] INT null, [SectorSubjectAreaId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#SSAQE Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[SectorSubjectArea]
			Update Q 
				set [SectorSubjectAreaId]=QE.[SectorSubjectAreaId]
			from 
				#SSAQE Q inner join [dbo].[SectorSubjectArea] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.Sector_Subject_Area=QE.[Sector_Subject_Area] 
		
			--merge [QESectorSubjectArea]
			MERGE [dbo].[QESectorSubjectArea] AS [target]
			USING (SELECT * from #SSAQE where [QualificationElementId] is not null and [SectorSubjectAreaId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[SectorSubjectAreaId] = source.[SectorSubjectAreaId])
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Sector_Subject_Area_Eff_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_Eff_Date]),
				[QE_Sector_Subject_Area_End_Date] = DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_End_Date]),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[SectorSubjectAreaId],
				[QE_Sector_Subject_Area_Eff_Date],
				[QE_Sector_Subject_Area_End_Date],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[SectorSubjectAreaId],
				DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_Eff_Date]),
				DBO.FN_A2C_GETDATETIME(source.[QE_Sector_Subject_Area_End_Date]),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#SSAQE', 'U') IS NOT NULL
				DROP TABLE #SSAQE;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Sector Subject Area block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Sector Subject Area'
					
		END CATCH

		---------------------------------------------------
		---------------------------------------------------
		----- STEP 10: IMPORT QE Assessment Material ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				CN.value('(a2c:QEAssessmentMaterial_ID/a2c:QE_Assmnt_Material_Id/text())[1]','[nvarchar](max)') QE_Assmnt_Material_Id,
				CN.value('(a2c:QE_Assmnt_Material_Name/text())[1]','[nvarchar](100)') QE_Assmnt_Material_Name,
				CN.value('(a2c:QE_Assmnt_Material_Source/text())[1]','[nvarchar](400)') QE_Assmnt_Material_Source,
				CN.value('(a2c:QE_Assmnt_Material_Description/text())[1]','[nvarchar](250)') QE_Assmnt_Material_Description,
				CN.value('(a2c:QE_Assmnt_Material_Source_Type/text())[1]','[nvarchar](32)') QE_Assmnt_Material_Source_Type,
				CN.value('(a2c:QE_Assmnt_Material_Medium_Type/text())[1]','[nvarchar](20)') QE_Assmnt_Material_Medium_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#QEAM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityAssessmentMaterial_DS/a2c:QEAvailabilityAssessmentMaterial/a2c:QEAssessmentMaterial_CN') as Q(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAM 
					WHERE ISNULL(QE_Assmnt_Material_Id,'')='')
			BEGIN
				PRINT 'QE Assessment Material - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Assessment Material" - Record QE_Assmnt_Material_Id="' + ISNULL(QE_Assmnt_Material_Id,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Assmnt_Material_Id
				ORDER BY 
					[AOCentreID], QE_Assmnt_Material_Id) 'RowRank' 
			FROM 
				#QEAM)
			SELECT 
				* 
			INTO 
				#QEAMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAMDUPS)
			BEGIN

				print 'duplicate records found in QE Assessment Material'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Assmnt_Material_Id
					ORDER BY 
						[AOCentreID], QE_Assmnt_Material_Id) 'RowRank' 
				FROM 
					#QEAM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Assessment Material - Record QE_Assmnt_Material_Id=' +  QE_Assmnt_Material_Id
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--merge [QEAssessmentMaterial]
			MERGE [dbo].[QEAssessmentMaterial] AS [target]
			USING (SELECT * from #QEAM) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QE_Assmnt_Material_Id] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Id])))
			WHEN MATCHED THEN 
			UPDATE SET		
				[QE_Assmnt_Material_Name] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Name])),
				[QE_Assmnt_Material_Source] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Source])),
				[QE_Assmnt_Material_Description] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Description])),
				[QE_Assmnt_Material_Source_Type] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Source_Type])),
				[QE_Assmnt_Material_Medium_Type] = LTRIM(RTRIM(source.[QE_Assmnt_Material_Medium_Type])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QE_Assmnt_Material_Id],
				[QE_Assmnt_Material_Name],
				[QE_Assmnt_Material_Source],
				[QE_Assmnt_Material_Description],
				[QE_Assmnt_Material_Source_Type],
				[QE_Assmnt_Material_Medium_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Id])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Name])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Source])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Description])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Source_Type])),
				LTRIM(RTRIM(source.[QE_Assmnt_Material_Medium_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAM', 'U') IS NOT NULL
				DROP TABLE #QEAM;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Assessment Material block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Assessment Material'
					
		END CATCH

		---------------------------------------------------
		----- STEP 10.1: IMPORT QEA Assessment Material ---
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				CN.value('(a2c:QEAssessmentMaterial_ID/a2c:QE_Assmnt_Material_Id/text())[1]','[nvarchar](25)') QE_Assmnt_Material_Id,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](50)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](32)') Qualification_Element_Type,
				QEA.value('(a2c:QEAAssessmentAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				QEA.value('(a2c:Number_Per_Learner/text())[1]','int') Number_Per_Learner,
				QEA.value('(a2c:Number_Per_Centre/text())[1]','int') Number_Per_Centre,
				QEA.value('(a2c:Assmnt_Material_Release_Date/text())[1]','date') Assmnt_Material_Release_Date,
				QEA.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into
				#QEAAM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityAssessmentMaterial_DS/a2c:QEAvailabilityAssessmentMaterial/a2c:QEAssessmentMaterial_CN') as Q(CN) 
				CROSS APPLY Q.CN.nodes('a2c:QEAAssessmentMaterial') as QE(QEA)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAAM 
					WHERE ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL)
			BEGIN
				PRINT 'QEA Assessment Material - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QEA Assessment Material" - Record QE_Assmnt_Material_Id="' + ISNULL(QE_Assmnt_Material_Id,'')
					+ '", AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL

				--delete Missing mandatory value records from source
				DELETE
					#QEAAM 
				WHERE 
					ISNULL(QE_Assmnt_Material_Id,'')=''
					OR ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time
				ORDER BY 
					[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time) 'RowRank' 
			FROM 
				#QEAAM)
			SELECT 
				* 
			INTO 
				#QEAAMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAAMDUPS)
			BEGIN

				print 'duplicate records found in QEA Assessment Material'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time
					ORDER BY 
						[AOCentreID], QE_Assmnt_Material_Id,AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time) 'RowRank' 
				FROM 
					#QEAAM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QEA Assessment Material - Record QE_Assmnt_Material_Id=' +  QE_Assmnt_Material_Id
					+ ', AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type
					+ ', QEA_Effective_Start_Date_Time=' +  cast(QEA_Effective_Start_Date_Time as nvarchar(100))
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAAMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAAMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAAMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAAM ADD [QualificationElementId] INT null, [QEAssessmentMaterialId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAAM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QEAAssessmentMaterial]]
			Update Q 
				set [QEAssessmentMaterialId]=QE.[QEAssessmentMaterialId]
			from 
				#QEAAM Q inner join [dbo].[QEAssessmentMaterial] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.QE_Assmnt_Material_Id=QE.[QE_Assmnt_Material_Id]

			--merge [QEAAssessmentMaterial]
			MERGE [dbo].[QEAAssessmentMaterial] AS [target]
			USING (SELECT * from #QEAAM where [QualificationElementId] is not null and [QEAssessmentMaterialId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEAssessmentMaterialId] = source.[QEAssessmentMaterialId])
			WHEN MATCHED THEN 
			UPDATE SET				
				[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				[Number_per_Learner] = source.[Number_per_Learner],
				[Number_per_Centre] = source.[Number_per_Centre],
				[Assmnt_Material_Release_Date] = source.[Assmnt_Material_Release_Date],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEAssessmentMaterialId],
				[QEA_Effective_Start_Date_Time],
				[Number_per_Learner],
				[Number_per_Centre],
				[Assmnt_Material_Release_Date],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QEAssessmentMaterialId],
				DBO.FN_A2C_GETDATETIME(source.[QEA_Effective_Start_Date_Time]),
				source.[Number_per_Learner],
				source.[Number_per_Centre],
				source.[Assmnt_Material_Release_Date],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAAM', 'U') IS NOT NULL
				DROP TABLE #QEAAM;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QEA Assessment Material block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QEA Assessment Material'
					
		END CATCH

		----------------------------------------------------------------------
		----------------------------------------------------------------------
		----- STEP 11: IMPORT Qualification Element Grade --------------------
		----------------------------------------------------------------------
		----------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Grade/text())[1]','[nvarchar](max)') QE_Grade,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Outcome_Type/text())[1]','[nvarchar](max)') QE_Outcome_Type,
				CN.value('(a2c:QE_Grade_Effective_Date/text())[1]','date') QE_Grade_Effective_Date,
				CN.value('(a2c:QE_Grade_Eff_End_Date/text())[1]','date') QE_Grade_Eff_End_Date,
				CN.value('(a2c:QE_Grade_Description/text())[1]','[nvarchar](max)') QE_Grade_Description,
				CN.value('(a2c:QE_Grade_Sequence_Order/text())[1]','int') QE_Grade_Sequence_Order,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEG	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementGrade_DS/a2c:QualificationElementGrade') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QualificationElementGrade_CN') as QEG(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEG 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Grade - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId,
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Grade" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '", QE_Outcome_Type="' + ISNULL(QE_Outcome_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEG 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEG 
				WHERE 
					ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type) 'RowRank' 
			FROM 
				#QEG)
			SELECT 
				* 
			INTO 
				#QEGDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEGDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Grade'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type) 'RowRank' 
				FROM 
					#QEG)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Grade - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Grade=' +  ISNULL(QE_Grade,'')
					+ ', QE_Outcome_Type=' +  ISNULL(QE_Outcome_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEGDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEG ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEG Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QualificationElementGrade]
			MERGE [dbo].[QualificationElementGrade] AS [target]
			USING (SELECT * from #QEG where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QE_Grade] = LTRIM(RTRIM(source.[QE_Grade])) AND
				[target].[QE_Outcome_Type] = LTRIM(RTRIM(source.[QE_Outcome_Type])))
			WHEN MATCHED THEN 
			UPDATE SET				
				[QE_Grade_Effective_Date] = source.[QE_Grade_Effective_Date],
				[QE_Grade_Eff_End_Date] = source.[QE_Grade_Eff_End_Date],
				[QE_Grade_Description] = LTRIM(RTRIM(source.[QE_Grade_Description])),
				[QE_Grade_Sequence_Order] = source.[QE_Grade_Sequence_Order],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QE_Grade],
				[QE_Outcome_Type],
				[QE_Grade_Effective_Date],
				[QE_Grade_Eff_End_Date],
				[QE_Grade_Description],
				[QE_Grade_Sequence_Order],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[QE_Grade])),
				LTRIM(RTRIM(source.[QE_Outcome_Type])),
				source.[QE_Grade_Effective_Date],
				source.[QE_Grade_Eff_End_Date],
				LTRIM(RTRIM(source.[QE_Grade_Description])),
				source.[QE_Grade_Sequence_Order],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEG', 'U') IS NOT NULL
				DROP TABLE #QEG;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Grade block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Grade'
					
		END CATCH

		-------------------------------------------------------
		----- STEP 11.1: IMPORT QE Grade Performance Points ---
		-------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](100)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](100)') Qualification_Element_Type,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Grade/text())[1]','[nvarchar](100)') QE_Grade,
				CN.value('(a2c:QualificationElementGrade_ID/a2c:QE_Outcome_Type/text())[1]','[nvarchar](100)') QE_Outcome_Type,
				PPN.value('(a2c:QEGradePerformancePoints_ID/a2c:Party_Id_Administrator/text())[1]','[nvarchar](100)') Party_Id_Administrator,
				PPN.value('(a2c:Performance_Points/text())[1]','Decimal(6,2)') Performance_Points,
				PPN.value('(a2c:Level_1_Threshold/text())[1]','Decimal(5,2)') Level_1_Threshold,
				PPN.value('(a2c:Level_2_Threshold/text())[1]','Decimal(5,2)') Level_2_Threshold,
				PPN.value('(a2c:Level_3_Threshold/text())[1]','Decimal(5,2)') Level_3_Threshold,
				PPN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](100)') Record_Delete_Flag
			into 
				#QEGPPT	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementGrade_DS/a2c:QualificationElementGrade') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QualificationElementGrade_CN') as QEG(CN) 
				CROSS APPLY QEG.CN.nodes('a2c:QEGradePerformancePoints') as QEGP(PPN) 

			
			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEGPPT 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')='')
			BEGIN
				PRINT 'QE Grade Performance Points - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Grade Performance Points" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '", QE_Outcome_Type="' + ISNULL(QE_Outcome_Type,'')
					+ '", Party_Id_Administrator="' + ISNULL(Party_Id_Administrator,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGPPT 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEGPPT 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
					OR ISNULL(QE_Outcome_Type,'')=''
					OR ISNULL(Party_Id_Administrator,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,
				ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator
				ORDER BY 
					[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator) 'RowRank' 
			FROM 
				#QEGPPT)
			SELECT 
				* 
			INTO 
				#QEGPPTDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEGPPTDUPS)
			BEGIN

				print 'duplicate records found in QE Grade Performance Points'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,
					ROW_NUMBER() OVER(
					PARTITION BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator
					ORDER BY 
						[AOCentreID], AO_Qualification_Element_Id,Qualification_Element_Type,QE_Grade,QE_Outcome_Type,Party_Id_Administrator) 'RowRank' 
				FROM 
					#QEGPPT)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Grade - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Grade=' +  ISNULL(QE_Grade,'')
					+ ', QE_Outcome_Type=' +  ISNULL(QE_Outcome_Type,'')
					+ ', Party_Id_Administrator=' +  ISNULL(Party_Id_Administrator,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEGPPTDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGPPTDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEGPPTDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEGPPT ADD [QualificationElementId] INT null, [QualificationElementGradeId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEGPPT Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QualificationElementGrade]]
			Update Q 
				set [QualificationElementGradeId]=QE.[QualificationElementGradeId]
			from 
				#QEGPPT Q inner join [dbo].[QualificationElementGrade] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and LTRIM(RTRIM(Q.[QE_Grade]))=LTRIM(RTRIM(QE.[QE_Grade]))
				and LTRIM(RTRIM(Q.[QE_Outcome_Type]))=LTRIM(RTRIM(QE.[QE_Outcome_Type]))

			--merge [QEGradePerformancePoints]
			MERGE [dbo].[QEGradePerformancePoints] AS [target]
			USING (SELECT * from #QEGPPT 
					where [QualificationElementId] is not null 
					and [QualificationElementGradeId] is not null
					and [Party_Id_Administrator] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QualificationElementGradeId] = source.[QualificationElementGradeId] AND
				LTRIM(RTRIM([target].[Party_Id_Administrator]))=LTRIM(RTRIM(source.[Party_Id_Administrator])))
			WHEN MATCHED THEN 
			UPDATE SET
				[Performance_Points] = source.[Performance_Points],
				[Level_1_Threshold] = source.[Level_1_Threshold],
				[Level_2_Threshold] = source.[Level_2_Threshold],
				[Level_3_Threshold] = source.[Level_3_Threshold],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QualificationElementGradeId],
				[Party_Id_Administrator],
				[Performance_Points],
				[Level_1_Threshold],
				[Level_2_Threshold],
				[Level_3_Threshold],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				source.[QualificationElementGradeId],
				LTRIM(RTRIM(source.[Party_Id_Administrator])),
				source.[Performance_Points],
				source.[Level_1_Threshold],
				source.[Level_2_Threshold],
				source.[Level_3_Threshold],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEGPPT', 'U') IS NOT NULL
				DROP TABLE #QEGPPT;			

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Grade Performance Points block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Grade Performance Points'
					
		END CATCH
					
		---------------------------------------------------
		---------------------------------------------------
		----- STEP 12: IMPORT QE Objective Statement ------
		---------------------------------------------------
		---------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QualificationElement_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:QualificationElement_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				CN.value('(a2c:QEObjectiveStatement_ID/a2c:QE_Objective_Statement_Name/text())[1]','[nvarchar](max)') QE_Objective_Statement_Name,
				CN.value('(a2c:QE_Objective_Statement_Text/text())[1]','[nvarchar](max)') QE_Objective_Statement_Text,
				CN.value('(a2c:QE_Objctv_Stmnt_Level_Seq_Num/text())[1]','int') QE_Objctv_Stmnt_Level_Seq_Num,
				CN.value('(a2c:QE_Objective_Statement_Level/text())[1]','[nvarchar](max)') QE_Objective_Statement_Level,
				CN.value('(a2c:QE_Objective_Statement_Descr/text())[1]','[nvarchar](max)') QE_Objective_Statement_Descr,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEOS
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEObjectiveStatement_DS/a2c:QEObjectiveStatement') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QEObjectiveStatement_CN') as QEO(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEOS 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')='')
			BEGIN
				PRINT 'QE Objective Statement - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Objective Statement" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QE_Objective_Statement_Name="' + ISNULL(QE_Objective_Statement_Name,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOS 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEOS 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(QE_Objective_Statement_Name,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name 
			ORDER BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name) 'RowRank' 
			FROM 
				#QEOS)
			SELECT 
				* 
			INTO 
				#QEOSDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEOSDUPS)
			BEGIN

				print 'duplicate records found in QE Objective Statement'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QE_Objective_Statement_Name) 'RowRank' 
				FROM 
					#QEOS)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Objective Statement - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QE_Objective_Statement_Name=' +  ISNULL(QE_Objective_Statement_Name,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEOSDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEOS ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEOS Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QEObjectiveStatement]
			MERGE [dbo].[QEObjectiveStatement] AS [target]
			USING (SELECT * from #QEOS where [QualificationElementId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QE_Objective_Statement_Name] = LTRIM(RTRIM(source.[QE_Objective_Statement_Name])))
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Objective_Statement_Text] = LTRIM(RTRIM(source.[QE_Objective_Statement_Text])),
				[QE_Objctv_Stmnt_Level_Seq_Num] = source.[QE_Objctv_Stmnt_Level_Seq_Num],
				[QE_Objective_Statement_Level] = LTRIM(RTRIM(source.[QE_Objective_Statement_Level])),
				[QE_Objective_Statement_Descr] = LTRIM(RTRIM(source.[QE_Objective_Statement_Descr])),
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QE_Objective_Statement_Name],
				[QE_Objective_Statement_Text],
				[QE_Objctv_Stmnt_Level_Seq_Num],
				[QE_Objective_Statement_Level],
				[QE_Objective_Statement_Descr],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[QE_Objective_Statement_Name])),
				LTRIM(RTRIM(source.[QE_Objective_Statement_Text])),
				source.[QE_Objctv_Stmnt_Level_Seq_Num],
				LTRIM(RTRIM(source.[QE_Objective_Statement_Level])),
				LTRIM(RTRIM(source.[QE_Objective_Statement_Descr])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOS', 'U') IS NOT NULL
				DROP TABLE #QEOS;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Objective Statement block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Objective Statement'
					
		END CATCH

		---------------------------------------------------------------
		----- STEP 12.1: IMPORT QE Objective Statement Hierarchy ------
		---------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:AO_QE_Id_First/text())[1]','[nvarchar](max)') AO_QE_Id_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Type_First/text())[1]','[nvarchar](max)') QE_Type_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Objctv_Stmnt_Name_First/text())[1]','[nvarchar](max)') QE_Objctv_Stmnt_Name_First,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:AO_QE_Id_Second/text())[1]','[nvarchar](max)') AO_QE_Id_Second,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Type_Second/text())[1]','[nvarchar](max)') QE_Type_Second,
				QEID.value('(a2c:QEObjectiveStatementHierarchy_ID/a2c:QE_Objctv_Stmnt_Name_Second/text())[1]','[nvarchar](max)') QE_Objctv_Stmnt_Name_Second,
				QEID.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEOSH
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEObjectiveStatement_DS/a2c:QEObjectiveStatementHierarchy') as QE(QEID)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEOSH 
					WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')='')
			BEGIN
				PRINT 'QE Objective Statement Hierarchy - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Objective Statement Hierarchy" - Record AO_QE_Id_First="' + ISNULL(AO_QE_Id_First,'')
					+ '", QE_Type_First="' + ISNULL(QE_Type_First,'')
					+ '", QE_Objctv_Stmnt_Name_First="' + ISNULL(QE_Objctv_Stmnt_Name_First,'')
					+ '", AO_QE_Id_Second="' + ISNULL(AO_QE_Id_Second,'')
					+ '", QE_Type_Second="' + ISNULL(QE_Type_Second,'')
					+ '", QE_Objctv_Stmnt_Name_Second="' + ISNULL(QE_Objctv_Stmnt_Name_Second,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSH 
				WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEOSH 
				WHERE ISNULL(AO_QE_Id_First,'')=''
					OR ISNULL(QE_Type_First,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_First,'')=''
					OR ISNULL(AO_QE_Id_Second,'')=''
					OR ISNULL(QE_Type_Second,'')=''
					OR ISNULL(QE_Objctv_Stmnt_Name_Second,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second
			ORDER BY 
				[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second) 'RowRank' 
			FROM 
				#QEOSH)
			SELECT 
				* 
			INTO 
				#QEOSHDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEOSHDUPS)
			BEGIN

				print 'duplicate records found in QE Objective Statement Hierarchy'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second
				ORDER BY 
					[AOCentreID],AO_QE_Id_First,QE_Type_First,QE_Objctv_Stmnt_Name_First,AO_QE_Id_Second,QE_Type_Second,QE_Objctv_Stmnt_Name_Second) 'RowRank' 
				FROM 
					#QEOSH)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Objective Statement Hierarchy - Record AO_QE_Id_First=' +  ISNULL(AO_QE_Id_First,'')
					+ ', QE_Type_First=' +  ISNULL(QE_Type_First,'')
					+ ', QE_Objctv_Stmnt_Name_First=' +  ISNULL(QE_Objctv_Stmnt_Name_First,'')
					+ ', AO_QE_Id_Second=' +  ISNULL(AO_QE_Id_Second,'')
					+ ', QE_Type_Second=' +  ISNULL(QE_Type_Second,'')
					+ ', QE_Objctv_Stmnt_Name_Second=' +  ISNULL(QE_Objctv_Stmnt_Name_Second,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEOSHDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSHDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEOSHDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk columns to temp table
			ALTER TABLE #QEOSH ADD 
			[QualificationElementId_First] INT null,
			[QEObjectiveStatementId_First] INT null,
			[QualificationElementId_Second] INT null,
			[QEObjectiveStatementId_Second] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId_First]=QE.QualificationElementId
			from 
				#QEOSH Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_First=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_First=QE.[Qualification_Element_Type]

			Update Q 
				set [QualificationElementId_Second]=QE.QualificationElementId
			from 
				#QEOSH Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.AO_QE_Id_Second=QE.[AO_Qualification_Element_Id] 
				and Q.QE_Type_Second=QE.[Qualification_Element_Type]

			--Update existing PKs of [dbo].[[QEObjectiveStatement]]
			Update Q 
				set [QEObjectiveStatementId_First]=QE.[QEObjectiveStatementId]
			from 
				#QEOSH Q inner join [dbo].[QEObjectiveStatement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId_First]=QE.[QualificationElementId] 
				and Q.QE_Objctv_Stmnt_Name_First=QE.QE_Objective_Statement_Name

			Update Q 
				set [QEObjectiveStatementId_Second]=QE.[QEObjectiveStatementId]
			from 
				#QEOSH Q inner join [dbo].[QEObjectiveStatement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId_Second]=QE.[QualificationElementId] 
				and Q.QE_Objctv_Stmnt_Name_Second=QE.QE_Objective_Statement_Name

			--merge [QEObjectiveStatementHierarchy]
			MERGE [dbo].[QEObjectiveStatementHierarchy] AS [target]
			USING (SELECT * from #QEOSH where 
				[QualificationElementId_First] is not null and
				[QEObjectiveStatementId_First] is not null and
				[QualificationElementId_Second] is not null and
				[QEObjectiveStatementId_Second] is not null
			) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId_First] = source.[QualificationElementId_First] AND
				[target].[QEObjectiveStatementId_First] = source.[QEObjectiveStatementId_First] AND
				[target].[QualificationElementId_Second] = source.[QualificationElementId_Second] AND
				[target].[QEObjectiveStatementId_Second] = source.[QEObjectiveStatementId_Second])
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId_First],
				[QEObjectiveStatementId_First],
				[QualificationElementId_Second],
				[QEObjectiveStatementId_Second],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId_First],
				source.[QEObjectiveStatementId_First],
				source.[QualificationElementId_Second],
				source.[QEObjectiveStatementId_Second],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEOSH', 'U') IS NOT NULL
				DROP TABLE #QEOSH;

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Objective Statement Hierarchy block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Objective Statement Hierarchy'
					
		END CATCH

		-----------------------------------------------------------------------
		-----------------------------------------------------------------------
		----- STEP 13: IMPORT Qualification Element Age Range -----------------
		-----------------------------------------------------------------------
		-----------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],
				QEID.value('(a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEID.value('(a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				CN.value('(a2c:AgeRange_ID/a2c:Age_Range_Type/text())[1]','[nvarchar](max)') Age_Range_Type,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEAR
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QualificationElementAgeRange_DS/a2c:QualificationElementAgeRange/a2c:QualificationElementAgeRange_CN/a2c:QEAgeRange_ID') as QE(QEID)
				CROSS APPLY QE.QEID.nodes('a2c:QEAgeRange_CN') as QEO(CN) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAR 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')='')
			BEGIN
				PRINT 'Qualification Element Age Range - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "Qualification Element Age Range" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", Age_Range_Type="' + ISNULL(Age_Range_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAR 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAR 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR ISNULL(Age_Range_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------
		
			
			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type 
			ORDER BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type) 'RowRank' 
			FROM 
				#QEAR)
			SELECT 
				* 
			INTO 
				#QEARDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEARDUPS)
			BEGIN

				print 'duplicate records found in Qualification Element Age Range'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type 
				ORDER BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,Age_Range_Type) 'RowRank' 
				FROM 
					#QEAR)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock Qualification Element Age Range - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', Age_Range_Type=' +  ISNULL(Age_Range_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEARDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEARDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEARDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAR ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAR Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QualificationElementAgeRange]
			MERGE [dbo].[QualificationElementAgeRange] AS [target]
			USING (SELECT * from #QEAR where [QualificationElementId] is not null and [Age_Range_Type] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[Age_Range_Type] = LTRIM(RTRIM(source.[Age_Range_Type])))
			WHEN MATCHED THEN 
			UPDATE SET
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[Age_Range_Type],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				LTRIM(RTRIM(source.[Age_Range_Type])),
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAR', 'U') IS NOT NULL
				DROP TABLE #QEAR;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Age Range block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Age Range'
					
		END CATCH

		--------------------------------------------------------
		--------------------------------------------------------
		----- STEP 14: IMPORT QE Availability Maximum Mark -----
		--------------------------------------------------------
		--------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEA.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QEA.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				CN.value('(a2c:QEAvailabilityMaximumMark_ID/a2c:QE_Outcome_Value_Type/text())[1]','[nvarchar](max)') QE_Outcome_Value_Type,
				CN.value('(a2c:QE_Availability_Maximum_Mark/text())[1]','int') QE_Availability_Maximum_Mark,
				CN.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEAMM
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityGradeBoundary_DS/a2c:QEAvailabilityMaximumMark/a2c:QEAvailability') as QE(QEA)
				CROSS APPLY QE.QEA.nodes('a2c:QEAvailabilityMaximumMark_CN') as QEM(CN)


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEAMM 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')='')
			BEGIN
				PRINT 'QE Availability Maximum Mark - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Availability Maximum Mark" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", QE_Outcome_Value_Type="' + ISNULL(QE_Outcome_Value_Type,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMM 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEAMM 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type 
			ORDER BY
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type) 'RowRank' 
			FROM 
				#QEAMM)
			SELECT 
				* 
			INTO 
				#QEAMMDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEAMMDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Maximum Mark'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type 
				ORDER BY
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type) 'RowRank' 
				FROM 
					#QEAMM)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Maximum Mark - Record AO_Qualification_Element_Id=' +  ISNULL(AO_Qualification_Element_Id,'')
					+ ', Qualification_Element_Type=' +  ISNULL(Qualification_Element_Type,'')
					+ ', QEA_Effective_Start_Date_Time=' + cast(QEA_Effective_Start_Date_Time as varchar)
					+ ', QE_Outcome_Value_Type=' +  ISNULL(QE_Outcome_Value_Type,'')
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEAMMDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMMDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEAMMDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEAMM ADD [QualificationElementId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEAMM Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[AO_Qualification_Element_Id]=QE.[AO_Qualification_Element_Id] 
				and Q.[Qualification_Element_Type]=QE.[Qualification_Element_Type]

			--merge [QEAvailabilityMaximumMark]
			MERGE [dbo].[QEAvailabilityMaximumMark] AS [target]
			USING (SELECT * from #QEAMM 
					where [QualificationElementId] is not null
					and DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) is not null
					and [QE_Outcome_Value_Type] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QualificationElementId] = source.[QualificationElementId] AND
				[target].[QEA_Effective_Start_Date_Time] = DBO.FN_A2C_GETDATETIME(source.QEA_Effective_Start_Date_Time) AND
				[target].[QE_Outcome_Value_Type] = LTRIM(RTRIM(source.[QE_Outcome_Value_Type])))
			WHEN MATCHED THEN 
			UPDATE SET
				[QE_Availability_Maximum_Mark] = source.[QE_Availability_Maximum_Mark],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QualificationElementId],
				[QEA_Effective_Start_Date_Time],
				[QE_Outcome_Value_Type],
				[QE_Availability_Maximum_Mark],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QualificationElementId],
				DBO.FN_A2C_GETDATETIME(source.QEA_Effective_Start_Date_Time),
				LTRIM(RTRIM(source.[QE_Outcome_Value_Type])),
				source.[QE_Availability_Maximum_Mark],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEAMM', 'U') IS NOT NULL
				DROP TABLE #QEAMM;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Maximum Mark block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Maximum Mark'
					
		END CATCH

		-------------------------------------------------------------------------
		----- STEP 14.1: IMPORT QE Availability Maximum Mark Grade Boundary -----
		-------------------------------------------------------------------------
		BEGIN TRY
	
			;WITH XMLNAMESPACES ('http://jcq.org.uk/a2c' as a2c)
			Select	
				@AwardingOrganisationCentreId [AOCentreID],		
				QEA.value('(a2c:QEAvailability_ID/a2c:AO_Qualification_Element_Id/text())[1]','[nvarchar](max)') AO_Qualification_Element_Id,
				QEA.value('(a2c:QEAvailability_ID/a2c:Qualification_Element_Type/text())[1]','[nvarchar](max)') Qualification_Element_Type,
				QEA.value('(a2c:QEAvailability_ID/a2c:QEA_Effective_Start_Date_Time/text())[1]','[nvarchar](100)') QEA_Effective_Start_Date_Time,
				CN.value('(a2c:QEAvailabilityMaximumMark_ID/a2c:QE_Outcome_Value_Type/text())[1]','[nvarchar](max)') QE_Outcome_Value_Type,
				GB.value('(a2c:QEAMaxMarkGradeBoundary_ID/a2c:QE_Grade/text())[1]','[nvarchar](max)') QE_Grade,
				GB.value('(a2c:Grade_Boundary_Lower_Limit/text())[1]','int') Grade_Boundary_Lower_Limit,
				GB.value('(a2c:Record_Delete_Flag/text())[1]','[nvarchar](max)') Record_Delete_Flag
			into 
				#QEMMGB	
			From	
				@XMLDATA.nodes('/a2c:A2CMessage/a2c:DataBlock/a2c:QEAvailabilityGradeBoundary_DS/a2c:QEAvailabilityMaximumMark/a2c:QEAvailability') as QE(QEA)
				CROSS APPLY QE.QEA.nodes('a2c:QEAvailabilityMaximumMark_CN') as QEM(CN)
				CROSS APPLY QEM.CN.nodes('a2c:QEAMaxMarkGradeBoundary') as QEMM(GB) 


			--------------------------------------------------------
			----- Missing mandatory value validation ---------------
			--------------------------------------------------------
			IF EXISTS(SELECT * FROM #QEMMGB 
					WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')='')
			BEGIN
				PRINT 'QE Availability Maximum Mark Grade Boundary - found records misssing mandatory value(s)'

				--log record in error log		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock "QE Availability Maximum Mark Grade Boundary" - Record AO_Qualification_Element_Id="' + ISNULL(AO_Qualification_Element_Id,'')
					+ '", Qualification_Element_Type="' + ISNULL(Qualification_Element_Type,'')
					+ '", QEA_Effective_Start_Date_Time="' + CASE WHEN QEA_Effective_Start_Date_Time IS NULL THEN 'NULL' ELSE ISNULL(QEA_Effective_Start_Date_Time,'') END
					+ '", QE_Outcome_Value_Type="' + ISNULL(QE_Outcome_Value_Type,'')
					+ '", QE_Grade="' + ISNULL(QE_Grade,'')
					+ '" - Mandatory value missing. Record not updated into database.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEMMGB 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')=''

				--delete Missing mandatory value records from source
				DELETE
					#QEMMGB 
				WHERE ISNULL(AO_Qualification_Element_Id,'')=''
					OR ISNULL(Qualification_Element_Type,'')=''
					OR DBO.FN_A2C_GETDATETIME(QEA_Effective_Start_Date_Time) IS NULL
					OR ISNULL(QE_Outcome_Value_Type,'')=''
					OR ISNULL(QE_Grade,'')=''
			END
			--------------------------------------------------------
			----- Missing mandatory value validation finish --------
			--------------------------------------------------------


			----------------------------------------
			----- Duplicate record handling --------
			----------------------------------------
			;WITH CTE AS (
			SELECT 
				*,ROW_NUMBER() OVER(
			PARTITION BY 
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade 
			ORDER BY
				[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade) 'RowRank' 
			FROM 
				#QEMMGB)
			SELECT 
				* 
			INTO 
				#QEMMGBDUPS 
			FROM 
				CTE 
			WHERE 
				RowRank > 1

			--- if duplicate records found, then log error and remove those
			IF EXISTS (SELECT * FROM #QEMMGBDUPS)
			BEGIN

				print 'duplicate records found in QE Availability Maximum Mark'

				--delete duplidate records from source
				;WITH CTE AS (
				SELECT 
					*,ROW_NUMBER() OVER(
				PARTITION BY 
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade 
				ORDER BY
					[AOCentreID],AO_Qualification_Element_Id,Qualification_Element_Type,QEA_Effective_Start_Date_Time, QE_Outcome_Value_Type, QE_Grade) 'RowRank' 
				FROM 
					#QEMMGB)
				DELETE 
					CTE 
				WHERE 
					RowRank > 1;

				--log duplicate IDs		
				INSERT into ErrorLogs
					(ScreenMasterId,A2CSchoolId,AwardingOrganisationCentreId,ErrorMessage,
					--A2CTransactionId, A2CTransactionRequestId, A2CTransactionResponseId, 
					--A2CTransactionResponseEnvelopeId, 
					A2CTransactionResponseEnvelopeMessageId,MessageID)
				SELECT 
					@ScreenMasterId, @SchoolID, @AwardingOrganisationCentreId,
					'Message ID ' + @MessageID + ' - Product Catalogue for AO ID ' + cast(@AONumber as varchar) 
					+ ', Centre ID ' + cast(@CentreNumber as varchar) 
					+ ' - Datablock QE Availability Maximum Mark - Record AO_Qualification_Element_Id=' +  AO_Qualification_Element_Id
					+ ', Qualification_Element_Type=' +  Qualification_Element_Type
					+ ', QEA_Effective_Start_Date_Time=' + cast(QEA_Effective_Start_Date_Time as varchar)
					+ ', QE_Outcome_Value_Type=' +  QE_Outcome_Value_Type
					+ ', QE_Grade=' +  QE_Grade
					+ ' - Duplicate record.' as ErrorMessage,
					--@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, 
					--@A2CTransactionResponseEnvelopeId, 
					@A2CTransactionResponseEnvelopeMessageId,@MessageID
				FROM 
					#QEMMGBDUPS
			END

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEMMGBDUPS', 'U') IS NOT NULL
			  DROP TABLE #QEMMGBDUPS;
			----------------------------------------
			----- duplicates handling finish -------
			----------------------------------------


			--add dummy fk column to temp table
			ALTER TABLE #QEMMGB ADD [QualificationElementId] INT null, [QEAvailabilityMaximumMarkId] INT null

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QualificationElementId]=QE.QualificationElementId
			from 
				#QEMMGB Q inner join [dbo].[QualificationElement] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and LTRIM(RTRIM(Q.[AO_Qualification_Element_Id]))=LTRIM(RTRIM(QE.[AO_Qualification_Element_Id])) 
				and LTRIM(RTRIM(Q.[Qualification_Element_Type]))=LTRIM(RTRIM(QE.[Qualification_Element_Type]))

			--Update existing PKs of [dbo].[QualificationElement]
			Update Q 
				set [QEAvailabilityMaximumMarkId]=QE.[QEAvailabilityMaximumMarkId]
			from 
				#QEMMGB Q inner join [dbo].[QEAvailabilityMaximumMark] QE
			on 
				Q.AOCentreID=QE.AwardingOrganisationCentreId 
				and Q.[QualificationElementId]=QE.[QualificationElementId]		
				and DBO.FN_A2C_GETDATETIME(Q.QEA_Effective_Start_Date_Time)=QE.QEA_Effective_Start_Date_Time
				and LTRIM(RTRIM(Q.[QE_Outcome_Value_Type]))=LTRIM(RTRIM(QE.[QE_Outcome_Value_Type]))

			--merge [QEAMaxMarkGradeBoundary]
			MERGE [dbo].[QEAMaxMarkGradeBoundary] AS [target]
			USING (SELECT * from #QEMMGB 
					where [QualificationElementId] is not null
					and [QEAvailabilityMaximumMarkId] is not null) AS source
			ON ([target].[AwardingOrganisationCentreId] = source.[AOCentreID] AND
				[target].[QEAvailabilityMaximumMarkId] = source.[QEAvailabilityMaximumMarkId] AND
				[target].[QE_Grade] = LTRIM(RTRIM(source.[QE_Grade])))
			WHEN MATCHED THEN 
			UPDATE SET
				[Grade_Boundary_Lower_Limit] = source.[Grade_Boundary_Lower_Limit],
				[Record_Delete_Flag] = DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag])		
			WHEN NOT MATCHED THEN	
			INSERT (
				[AwardingOrganisationCentreId],
				[QEAvailabilityMaximumMarkId],
				[QE_Grade],
				[Grade_Boundary_Lower_Limit],
				[Record_Delete_Flag])
			VALUES (
				source.[AOCentreID],
				source.[QEAvailabilityMaximumMarkId],
				LTRIM(RTRIM(source.[QE_Grade])),
				source.[Grade_Boundary_Lower_Limit],
				DBO.FN_A2C_GETFLAG(source.[Record_Delete_Flag]));

			--drop temp table
			IF OBJECT_ID('tempdb.dbo.#QEMMGB', 'U') IS NOT NULL
				DROP TABLE #QEMMGB;	

		END TRY
		BEGIN CATCH
			PRINT 'Exception in QE Availability Maximum Mark Grade Boundary block'
		
			set @IsError=1

			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId, --@A2CTransactionId, @A2CTransactionRequestId, @A2CTransactionResponseId, @A2CTransactionResponseEnvelopeId, 
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, @MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'QE Availability Maximum Mark Grade Boundary'
					
		END CATCH

		-------------------------------------------------------------------------
		----- STEP 14.1 finished ------------------------------------------------
		-------------------------------------------------------------------------

		--UPDATE IMPORT STATUS
		IF @IsError=1
		BEGIN
			PRINT 'Exiting with error'
			--update import status
			UPDATE 
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
			SET 
				DATAIMPORTSTATUS = 2
			WHERE
				AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId
		END
		ELSE
		BEGIN
			--NO ERROR ENCOUNTERED
			--UPDATE SUCESS STATUS
			UPDATE 
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
			SET 
				DATAIMPORTSTATUS = 1
			WHERE
				AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND				
				A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId	
			
			PRINT 'Exiting with success'	
		END

	END TRY
	BEGIN CATCH

		PRINT 'Exception in Main block/Common area'
		
		IF @ScreenMasterId=0 OR @SchoolID=0 OR @AwardingOrganisationCentreId=0--REQUIRED TO LOG ERROR IN ERROR TABLE, SO CANT LOG ERROR
		BEGIN
			PRINT ERROR_NUMBER() 		
			PRINT ERROR_LINE() 
			PRINT ERROR_MESSAGE()			
		END
		ELSE
		BEGIN
			EXEC USP_IMPORTXMLEXCEPTION @AwardingOrganisationCentreId,
				@A2CTransactionResponseEnvelopeMessageId, @TransactionName, 
				@MessageID, @SchoolID, @ScreenMasterId, @CentreNumber, @AONumber, 'Main block/Common area'			
		END

		--update import status
		UPDATE 
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGES
		SET 
			DATAIMPORTSTATUS = 2
		WHERE
			AWARDINGORGANISATIONCENTREID = @AwardingOrganisationCentreIdPrimaryKey AND
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID = @A2CTransactionResponseEnvelopeMessageId

		PRINT 'Exiting with error from Main block/Common area'

	END CATCH;
END
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.4.1';


GO
PRINT N'Creating [dbo].[A2CTransactionResponseEnvelopeMessages].[DataImportStatus].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'0-not imported, 1-imported successfully, 2-imported with error', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'A2CTransactionResponseEnvelopeMessages', @level2type = N'COLUMN', @level2name = N'DataImportStatus';


GO
PRINT N'Refreshing [dbo].[usp_Insert_A2CTransactionEdis]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Insert_A2CTransactionEdis]';


GO
PRINT N'Refreshing [dbo].[usp_Insert_A2CTransactionErrors]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Insert_A2CTransactionErrors]';


GO
PRINT N'Refreshing [dbo].[usp_Insert_A2CTransactionMessages]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Insert_A2CTransactionMessages]';


GO
PRINT N'Refreshing [dbo].[usp_Insert_A2CTransactionRequests]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Insert_A2CTransactionRequests]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

Insert into ScreenMasters(ScreenMasterId, ScreenName,ScreenDescription)
Select	temp.ScreenMasterId, temp.ScreenName,temp.ScreenDescription
From	(Select 1011 ScreenMasterId, 'Transactions' ScreenName,'Transactions' ScreenDescription
		union all
		Select 1012, 'ViewProductCatalogue','View Product Catalogue' 
		union all
		Select 1014, 'WindowServiceTransactions','Window Service Transactions'
		) As temp
		Left Join ScreenMasters sm 
		on temp.ScreenMasterId = sm.ScreenMasterId
Where sm.ScreenMasterId is null

update A2CTransactionResponseEnvelopeMessages
set MessageAwardingOrganisationCentreId= AwardingOrganisationCentreId
GO
update A2CTransactionResponseEnvelopeEDIs
set MessageAwardingOrganisationCentreId= AwardingOrganisationCentreId

SET IDENTITY_INSERT AwardingOrganisationCertificates on

Insert into AwardingOrganisationCertificates
([AwardingOrganisationCertificateId],[A2CSchoolId]
           ,[AwardingOrganisationId]
           ,[LastModifiedDate]
           ,[AOCentreCertificate]
           ,[CertificatePassword]
           ,[CertificateExpiredDate]
           ,[CertificateFileName])
		   Select 
		    [AwardingOrganisationCertificateId],
		    [A2CSchoolId]
           ,AC.AwardingOrganisationId
           ,AC.[LastModifiedDate]
           ,[AOCentreCertificate]
           ,[CertificatePassword]
           ,[CertificateExpiredDate]
           ,[CertificateFileName]
		   From #AwardingOrganisationCertificates AC
		   

SET IDENTITY_INSERT AwardingOrganisationCertificates off


INSERT INTO AwardingOrganisationCentreCertificates
           ([AwardingOrganisationCentreId]
           ,[AwardingOrganisationCertificateId]
           ,[IsDeleted]
           ,[LastModifiedDate])		   
		   select [AwardingOrganisationCentreId]
           ,[AwardingOrganisationCertificateId]
           ,[IsDeleted]
           ,[LastModifiedDate] from 
		   #AwardingOrganisationCentreCertificates

DROP TABLE #AwardingOrganisationCentreCertificates
DROP TABLE #AwardingOrganisationCertificates

USE [msdb]
GO

DECLARE @Owner VARCHAR(200)   --Job Owner
DECLARE @DBName VARCHAR(200)  --Database Name
SET @Owner = '$(UserName)'
SET @DBName = '$(DatabaseName)'


/****** Object:  Job [A2CXMLDataImport]    Script Date: 7/17/2015 10:33:48 AM ******/
IF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = N'A2CXMLDataImport')
	EXEC msdb.dbo.sp_delete_job @job_name=N'A2CXMLDataImport', @delete_unused_schedule=1

/****** Object:  Job [A2CXMLDataImport]    Script Date: 7/17/2015 10:33:48 AM ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [[Data Import]]]    Script Date: 7/17/2015 10:33:48 AM ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Data Import]' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Data Import]'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'A2CXMLDataImport', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'A2C XML Data Import Job', 
		@category_name=N'[Data Import]', 
		@owner_login_name=@Owner, @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [Import Received XML file from AO]    Script Date: 7/17/2015 10:33:48 AM ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'Import Received XML file from AO', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'
		
		DECLARE 
			@AwardingOrganisationCentreId				int, 			
			@A2CTransactionResponseEnvelopeMessageId	int

		DECLARE TABLE_CURSOR CURSOR FOR 
		SELECT  
			AT.AWARDINGORGANISATIONCENTREID, 
			AT.A2CTRANSACTIONRESPONSEENVELOPEMESSAGEID
		FROM
			A2CTRANSACTIONRESPONSEENVELOPEMESSAGES AT
			INNER JOIN A2CTRANSACTIONRESPONSEENVELOPES AE 
			ON AE.A2CTRANSACTIONRESPONSEENVELOPEID=AT.A2CTRANSACTIONRESPONSEENVELOPEID
			INNER JOIN A2CTRANSACTIONMASTERS AM
			ON AM.A2CTRANSACTIONMASTERID=AT.A2CTRANSACTIONMASTERID
		WHERE 
			ISNULL(ISFEEDBACKMESSAGE, 0) = 0
			AND ISNULL(DATAIMPORTSTATUS, 0) = 0
			AND UPPER(LTRIM(RTRIM(AM.TRANSACTIONNAME))) 
				IN(''PROCESSPRODUCTCATALOGUE'',''PROCESSPRODUCTCATALOGUEINSTANCE'',''PROCESSPRODUCTCATALOGUESTATIC'')
		ORDER BY 
			AT.INCOMINGSEQUENCE

		OPEN TABLE_CURSOR
		FETCH NEXT FROM TABLE_CURSOR 
		INTO @AwardingOrganisationCentreId,
			@A2CTransactionResponseEnvelopeMessageId

		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC USP_IMPORTPRODUCTCATALOGE 
				@AwardingOrganisationCentreId,
				@A2CTransactionResponseEnvelopeMessageId

			FETCH NEXT FROM TABLE_CURSOR 
			INTO @AwardingOrganisationCentreId,
				@A2CTransactionResponseEnvelopeMessageId
		END

		CLOSE TABLE_CURSOR;
		DEALLOCATE TABLE_CURSOR;
		', 
		@database_name=@DBName, 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'A2CXMLDataImportSchedule', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=4, 
		@freq_subday_interval=15, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=0, 
		@active_start_date=20150717, 
		@active_end_date=99991231, 
		@active_start_time=0, 
		@active_end_time=235959, 
		@schedule_uid=N'a4feec81-fe07-4b3d-b5e4-205e705a1899'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:

GO



GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[A2CTransactionEDIs] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionEDIs_A2CTransactions];

ALTER TABLE [dbo].[AwardingOrganisationCentreCertificates] WITH CHECK CHECK CONSTRAINT [FK_AwardingOrganizationCentreCertificates_AwardingOrganizationCertificates];

ALTER TABLE [dbo].[AwardingOrganisationCertificates] WITH CHECK CHECK CONSTRAINT [FK_AwardingOrganizationCertificates_A2CSchools];

ALTER TABLE [dbo].[AwardingOrganisationCertificates] WITH CHECK CHECK CONSTRAINT [FK_AwardingOrganisationCertificates_AwardingOrganisations];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_A2CTransactionResponseEnvelopes];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionResponseEnvelopes];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopes] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopes_A2CTransactionResponses];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignalErrors] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignalErrors_A2CTransactionResponseEnvelopeSignals];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignals_A2CTransactionResponseEnvelopes];

ALTER TABLE [dbo].[A2CTransactionResponses] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponses_A2CTransactionRequests];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeEDIs] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeEDIs_AwardingOrganisationCentres];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeSignals] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeSignals_SignalResponseMasters];

ALTER TABLE [dbo].[A2CTransactionErrors] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionErrors_A2CTransactions];

ALTER TABLE [dbo].[A2CTransactionMessages] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionMessages_A2CTransactions];

ALTER TABLE [dbo].[A2CTransactionRequests] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionRequests_A2CTransactions];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_A2CTransactionMasters];

ALTER TABLE [dbo].[A2CTransactionResponseEnvelopeMessages] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseEnvelopeMessages_AwardingOrganisationCentres];

ALTER TABLE [dbo].[A2CTransactionResponseErrors] WITH CHECK CHECK CONSTRAINT [FK_A2CTransactionResponseErrors_A2CTransactionResponses];


GO
PRINT N'Update complete.';


GO
