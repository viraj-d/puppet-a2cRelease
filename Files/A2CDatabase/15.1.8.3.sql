/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar UserName "A2CUser"
:setvar DatabaseName "A2CDB"
:setvar DefaultFilePrefix "A2CDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Creating [dbo].[QualificationElement].[IX_QualificationElement_QualificationType]...';


GO
CREATE NONCLUSTERED INDEX [IX_QualificationElement_QualificationType]
    ON [dbo].[QualificationElement]([Record_Delete_Flag] ASC)
    INCLUDE([QualificationElementId])
    ON [INDEXES];


GO
PRINT N'Creating [dbo].[Scheme].[IX_Scheme_QualificationType]...';


GO
CREATE NONCLUSTERED INDEX [IX_Scheme_QualificationType]
    ON [dbo].[Scheme]([AwardingOrganisationCentreId] ASC, [Qualification_Type] ASC)
    INCLUDE([QualificationElementId])
    ON [INDEXES];


GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueAssessables]...';


GO



ALTER  PROCEDURE [dbo].[usp_GetProductCatalogueAssessables]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@SearchPCDetialForColumn nvarchar(max) =null,
@SearchTextValue nvarchar(max) =null
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
									
									case when (@SearchTextValue is null or len(ltrim(rtrim(@SearchTextValue))) <= 0) OR (@SearchPCDetialForColumn is null or len(ltrim(rtrim(@SearchPCDetialForColumn))) <= 0) then '' 
									else 
										case	when @SearchPCDetialForColumn = 'AoqeId' then ' and AoqeId LIKE ''%' + @SearchTextValue + '%''' 
												when @SearchPCDetialForColumn = 'QEShortTitle' then ' and QEShortTitle LIKE ''%' + @SearchTextValue + '%''' 
												when @SearchPCDetialForColumn = 'QualificationReferenceNumber' then ' and QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%''' 
												else ' and (AoqeId LIKE ''%' + @SearchTextValue + '%'' OR ' +
																					' QEShortTitle LIKE ''%' + @SearchTextValue + '%'' OR '  + 
																					' QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%'')'
												
										end
									end  +

									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AoqeId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Extra_Time_Required_Flag AS ExtraTimeRequired,						A.Assessment_Method_Type AS AssessmentMethodType,
									A.Assmnt_Actual_DateTime_Reqd_Flag AS AssessmentActualDateTimeRequired,	A.Attendance_Data_Required_Flag AS AttendanceDataRequired,
									A.Cambridge_Assmnt_TimeZone_Num AS CambridgeAssessmentTimeZoneNumber,	A.Carry_Forward_Permissible_Flag AS CarryForwardPermissible,
									A.Maximum_Extra_Time_Minutes AS MaximumExtraTimeMinutes,				A.On_Demand_Flag AS OnDemand,
									A.QE_Timetabled_Flag AS QETimetabled,									A.Test_Day_Photograph_Reqd_Flag AS TestDayPhotographRequired,
									A.Tier_Level_Type AS TierLevelType,									 	A.Tier_Level_Common_Reference AS TierLevelCommonReference,
 									A.Time_Allowed_Mins AS TimeAllowedMinutes,								 	A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
 									A.Party_Role_Type_ADT_Decider AS PartyRoleTypeAdditionalDecider,			 	A.Assessment_Medium_Type AS AssessmentMediumType,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM Assessable A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AoqeId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Extra_Time_Required_Flag AS ExtraTimeRequired,						A.Assessment_Method_Type AS AssessmentMethodType,
									A.Assmnt_Actual_DateTime_Reqd_Flag AS AssessmentActualDateTimeRequired,	A.Attendance_Data_Required_Flag AS AttendanceDataRequired,
									A.Cambridge_Assmnt_TimeZone_Num AS CambridgeAssessmentTimeZoneNumber,	A.Carry_Forward_Permissible_Flag AS CarryForwardPermissible,
									A.Maximum_Extra_Time_Minutes AS MaximumExtraTimeMinutes,				A.On_Demand_Flag AS OnDemand,
									A.QE_Timetabled_Flag AS QETimetabled,									A.Test_Day_Photograph_Reqd_Flag AS TestDayPhotographRequired,
									A.Tier_Level_Type AS TierLevelType,									 	A.Tier_Level_Common_Reference AS TierLevelCommonReference,
 									A.Time_Allowed_Mins AS TimeAllowedMinutes,								 	A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
 									A.Party_Role_Type_ADT_Decider AS PartyRoleTypeAdditionalDecider,			 	A.Assessment_Medium_Type AS AssessmentMediumType,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM Assessable A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') Assessables
							WHERE Assessables.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueAward]...';


GO
ALTER PROCEDURE [dbo].[usp_GetProductCatalogueAward]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@AwardType  nvarchar(60) = null,
@SearchPCDetialForColumn nvarchar(max) =null,
@SearchTextValue nvarchar(max) =null
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +	
									
									case when (@SearchTextValue is null or len(ltrim(rtrim(@SearchTextValue))) <= 0) OR (@SearchPCDetialForColumn is null or len(ltrim(rtrim(@SearchPCDetialForColumn))) <= 0) then '' 
									else 
										case	when @SearchPCDetialForColumn = 'AoqeId' then ' and AoqeId LIKE ''%' + @SearchTextValue + '%''' 
												when @SearchPCDetialForColumn = 'QEShortTitle' then ' and QEShortTitle LIKE ''%' + @SearchTextValue + '%''' 
												when @SearchPCDetialForColumn = 'QualificationReferenceNumber' then ' and QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%''' 
												else ' and (AoqeId LIKE ''%' + @SearchTextValue + '%'' OR ' +
																					' QEShortTitle LIKE ''%' + @SearchTextValue + '%'' OR '  + 
																					' QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%'')'
												
										end
									end  +
															
									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	
	if @AwardType is not null and len(ltrim(rtrim(@AwardType))) > 0 
	begin
		set @WhereClause = @WhereClause + ' and AwardType = ''' + @AwardType + ''''
	end
	--print @WhereClause
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Accreditation_End_Review_Date AS	AccreditationEndReviewDate,			A.Accreditation_Start_Date AS AccreditationStartDate,
									A.AO_Accred_Version_Number AS AOAccredVersionNumber,					A.Assessment_Language_Type AS AssessmentLanguageType,
									A.Award_Level_Type AS AwardLevelType,									A.Award_Type AS AwardType,
									A.Cert_of_Unit_Credit_Issued_Flag AS IsCertificateofUnitCreditIssued,	A.Certification_End_Date AS CertificationEndDate,
									A.Certification_Start_Date AS CertificationStartDate,					A.Contributing_Units_Listed_Flag AS IsContributingUnitsListed,
									A.Course_Length_Type AS CourseLengthType,								A.Endorsed_Title_Reqd_Flag AS IsEndorsedTitleRequired,
									A.Guided_Learning_Hours_Max AS GuidedLearningHoursMax,					A.Guided_Learning_Hours_Min AS GuidedLearningHoursMin,
									A.Operational_End_Date AS OperationalEndDate,							A.Operational_Start_Date AS OperationalStartDate,
									A.QE_Delivery_Model_Type AS QEDeliveryModelType,						A.QE_Evid_Reqmnt_Provided_Flag AS IsQEEvidenceRequirementProvided,
									A.QE_Evidence_Requirement_Type AS QEEvidenceRequirementType,			A.Registration_Expiry_Months AS RegistrationExpiryMonth,
									A.Resit_Rule_Text AS ResitRuleText,										A.Statement_Of_Credit_Issued_Flag AS IsStatementOfCreditIssued,
									A.Study_Guide_Available_Type AS StudyGuideAvailableType,				A.Study_Guide_Details AS StudyGuideDetails,
									A.Study_Guide_Reference AS StudyGuideReference,							A.Study_Guide_Reference_Type AS StudyGuideReferenceType,
									A.QE_Classification AS QEClassification,								A.Party_Id_Accreditor AS PartyIdAccreditor,
									A.Party_Id_Sector_Lead AS PartyIdSectorLead,							A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM Award A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									A.Accreditation_End_Review_Date AS	AccreditationEndReviewDate,			A.Accreditation_Start_Date AS AccreditationStartDate,
									A.AO_Accred_Version_Number AS AOAccredVersionNumber,					A.Assessment_Language_Type AS AssessmentLanguageType,
									A.Award_Level_Type AS AwardLevelType,									A.Award_Type AS AwardType,
									A.Cert_of_Unit_Credit_Issued_Flag AS IsCertificateofUnitCreditIssued,	A.Certification_End_Date AS CertificationEndDate,
									A.Certification_Start_Date AS CertificationStartDate,					A.Contributing_Units_Listed_Flag AS IsContributingUnitsListed,
									A.Course_Length_Type AS CourseLengthType,								A.Endorsed_Title_Reqd_Flag AS IsEndorsedTitleRequired,
									A.Guided_Learning_Hours_Max AS GuidedLearningHoursMax,					A.Guided_Learning_Hours_Min AS GuidedLearningHoursMin,
									A.Operational_End_Date AS OperationalEndDate,							A.Operational_Start_Date AS OperationalStartDate,
									A.QE_Delivery_Model_Type AS QEDeliveryModelType,						A.QE_Evid_Reqmnt_Provided_Flag AS IsQEEvidenceRequirementProvided,
									A.QE_Evidence_Requirement_Type AS QEEvidenceRequirementType,			A.Registration_Expiry_Months AS RegistrationExpiryMonth,
									A.Resit_Rule_Text AS ResitRuleText,										A.Statement_Of_Credit_Issued_Flag AS IsStatementOfCreditIssued,
									A.Study_Guide_Available_Type AS StudyGuideAvailableType,				A.Study_Guide_Details AS StudyGuideDetails,
									A.Study_Guide_Reference AS StudyGuideReference,							A.Study_Guide_Reference_Type AS StudyGuideReferenceType,
									A.QE_Classification AS QEClassification,								A.Party_Id_Accreditor AS PartyIdAccreditor,
									A.Party_Id_Sector_Lead AS PartyIdSectorLead,							A.Party_Role_Type_Assessor AS PartyRoleTypeAssessor,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM Award A
								INNER JOIN QualificationElement QE ON A.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') Awards
							WHERE Awards.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueLearningUnits]...';


GO




ALTER  PROCEDURE [dbo].[usp_GetProductCatalogueLearningUnits]

@TotalCount int = 0 OUTPUT,
@AwardingOrganisationCentreId int,
@SeriesLabel  nvarchar(50) = null,
@OrderBy nvarchar(255) = 'AOQEId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@SearchPCDetialForColumn nvarchar(max) =null,
@SearchTextValue nvarchar(max) =null
As

Begin

	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') AQE WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) AQE
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
									' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
									
									case when (@SearchTextValue is null or len(ltrim(rtrim(@SearchTextValue))) <= 0) OR (@SearchPCDetialForColumn is null or len(ltrim(rtrim(@SearchPCDetialForColumn))) <= 0) then '' 
									else 
										case	when @SearchPCDetialForColumn = 'AoqeId' then ' and AoqeId LIKE ''%' + @SearchTextValue + '%''' 
												when @SearchPCDetialForColumn = 'QEShortTitle' then ' and QEShortTitle LIKE ''%' + @SearchTextValue + '%''' 
												when @SearchPCDetialForColumn = 'QualificationReferenceNumber' then ' and QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%''' 
												else ' and (AoqeId LIKE ''%' + @SearchTextValue + '%'' OR ' +
																					' QEShortTitle LIKE ''%' + @SearchTextValue + '%'' OR '  + 
																					' QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%'')'
										end
									end  +
									
									case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
									else ' and ' + @GridWhereClause end
	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									L.Learning_Unit_Level_Type AS LearningUnitLevelType,					L.Maximum_Resits_Allowed AS MaximumResitsAllowed,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '					
							FROM LearningUnit L
								INNER JOIN QualificationElement QE ON L.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
									 (SELECT
									QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
									QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
									QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
									QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
									QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
									QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
									QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,
									L.Learning_Unit_Level_Type AS LearningUnitLevelType,					L.Maximum_Resits_Allowed AS MaximumResitsAllowed,
									QE.QE_Admin_Code AS QEAdminCode ' + @SeriesLableSelectPart + '
							FROM LearningUnit L
								INNER JOIN QualificationElement QE ON L.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') LU
							WHERE LU.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Altering [dbo].[usp_GetProductCataloguePathways]...';


GO
ALTER PROCEDURE [dbo].[usp_GetProductCataloguePathways]
	@AwardingOrganisationCentreId int,
	@SeriesLabel  nvarchar(50) = null,
	@OrderBy nvarchar(255) = 'AOQEId',
	@GridWhereClause nvarchar(max) = null,
	@PageNumber int = 1,
	@PageSize int = 10,
	@TotalCount int = 0 OUTPUT,
	@SearchPCDetialForColumn nvarchar(max) =null,
	@SearchTextValue nvarchar(max) =null
As

Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;

	Declare 
		@Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	

		@Take int = (@PageNumber * @PageSize),

		@SeriesLableSelectPart nvarchar(max) = '',

		@WhereClause nvarchar(max) =	case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
											' ) AQE WHERE ' 
										else 
											' LEFT OUTER JOIN QEAvailability QEA ON 
											QEA.AwardingOrganisationCentreId = QE.AwardingOrganisationCentreId AND
											QEA.QualificationElementId = QE.QualificationElementId) AQE
											WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND ' end  +
											' IsRecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +								
										
										case when (@SearchTextValue is null or len(ltrim(rtrim(@SearchTextValue))) <= 0) OR (@SearchPCDetialForColumn is null or len(ltrim(rtrim(@SearchPCDetialForColumn))) <= 0) then '' 
										else 
											case	when @SearchPCDetialForColumn = 'AoqeId' then ' and AoqeId LIKE ''%' + @SearchTextValue + '%''' 
													when @SearchPCDetialForColumn = 'QEShortTitle' then ' and QEShortTitle LIKE ''%' + @SearchTextValue + '%''' 
													when @SearchPCDetialForColumn = 'QualificationReferenceNumber' then ' and QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%''' 
													else ' and (AoqeId LIKE ''%' + @SearchTextValue + '%'' OR ' +
																						' QEShortTitle LIKE ''%' + @SearchTextValue + '%'' OR '  + 
																						' QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%'')'
											end
										end  +

										case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
										else ' and ' + @GridWhereClause end

	declare 
		@CountQuery as nvarchar(max), 
		@ListQuery as nvarchar(max) 

	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA.Series_Label AS SeriesLabel '

		set @CountQuery = N'Select @TotalCountOut = Count(1) FROM
							(SELECT
								QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
								QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
								QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
								QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
								QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
								QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
								QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,									
								QE.QE_Admin_Code AS QEAdminCode,
								A.Equals_Indicator_Flag as EqualsIndicator,								A.Mandatory_In_Group_Flag as MandatoryInGroup,								
								A.Minimum_Unit_Selection as MinimumUnitSelection,						A.Maximum_Unit_Selection as MaximumUnitSelection,								
								A.Minimum_Pathway_Selection as MinimumPathwaySelection,					A.Maximum_Pathway_Selection as MaximumPathwaySelection,								
								A.Minimum_Credit_Value as MinimumCreditValue'							+ @SeriesLableSelectPart + '					
							FROM 
								Pathway A
								INNER JOIN QualificationElement QE ON 
								A.AwardingOrganisationCentreId = QE.AwardingOrganisationCentreId AND
								A.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber, AQE.* FROM
								(SELECT
								QE.QualificationElementId,												QE.AwardingOrganisationCentreId,
								QE.AO_Qualification_Element_Id AS AOQEId,								QE.QE_Description AS QEDescription,  
								QE.Qualification_Element_Title AS QualificationElementTitle,			QE.QE_Short_Title AS QEShortTitle,
								QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,					QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,
								QE.Private_Learner_Type AS PrivateLearnerType,							QE.QE_Moderation_Type AS QEModerationType,
								QE.First_Language_Required_Flag AS IsFirstLanguageRequired,				QE.Record_Delete_Flag AS IsRecordDeleted,
								QE.Qualification_Reference_Number AS QualificationReferenceNumber,		QE.Learning_Aim_Code AS LearningAimCode,									
								QE.QE_Admin_Code AS QEAdminCode,
								A.Equals_Indicator_Flag as EqualsIndicator,								A.Mandatory_In_Group_Flag as MandatoryInGroup,								
								A.Minimum_Unit_Selection as MinimumUnitSelection,						A.Maximum_Unit_Selection as MaximumUnitSelection,								
								A.Minimum_Pathway_Selection as MinimumPathwaySelection,					A.Maximum_Pathway_Selection as MaximumPathwaySelection,								
								A.Minimum_Credit_Value as MinimumCreditValue'							+ @SeriesLableSelectPart + '					
							FROM 
								Pathway A
								INNER JOIN QualificationElement QE ON 
								A.AwardingOrganisationCentreId = QE.AwardingOrganisationCentreId AND
								A.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') Pathways
							WHERE Pathways.RowNumber BETWEEN @Skip AND @Take'
	
	--PRINT @CountQuery
	--PRINT @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT

	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
End
GO
PRINT N'Altering [dbo].[usp_GetProductCatalogueSchemes]...';


GO
ALTER  PROCEDURE [dbo].[usp_GetProductCatalogueSchemes]
@AwardingOrganisationCentreId int,
@QualificationType  nvarchar(50) = null,
@SeriesLabel  nvarchar(50) = null,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = 'AoqeId',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10,
@SearchPCDetialForColumn nvarchar(max) =null,
@SearchTextValue nvarchar(max) =null
As
Begin

	SET NOCOUNT ON;

	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),	
	@Take int = (@PageNumber * @PageSize),
	@SeriesLableSelectPart nvarchar(max) = '',
	@WhereClause nvarchar(max) = case when @SeriesLabel is null or len(ltrim(rtrim(@SeriesLabel))) <= 0 then 
										') q1 WHERE' 
									else 'LEFT OUTER JOIN QEAvailability QEA ON QE.QualificationElementId = QEA.QualificationElementId) q1
										  WHERE SeriesLabel = ''' + @SeriesLabel + ''' AND' end  +
								' RecordDeleted = 0 AND AwardingOrganisationCentreId = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								case when @QualificationType is null or len(ltrim(rtrim(@QualificationType))) <= 0 then '' 
								else ' and QualificationType = ''' + @QualificationType + '''' end  +

								case when (@SearchTextValue is null or len(ltrim(rtrim(@SearchTextValue))) <= 0) OR (@SearchPCDetialForColumn is null or len(ltrim(rtrim(@SearchPCDetialForColumn))) <= 0) then '' 
								else 
									case	when @SearchPCDetialForColumn = 'AoqeId' then ' and AoqeId LIKE ''%' + @SearchTextValue + '%''' 
											when @SearchPCDetialForColumn = 'QEShortTitle' then ' and QEShortTitle LIKE ''%' + @SearchTextValue + '%''' 
											when @SearchPCDetialForColumn = 'QualificationReferenceNumber' then ' and QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%''' 
											else ' and (AoqeId LIKE ''%' + @SearchTextValue + '%'' OR ' +
																				' QEShortTitle LIKE ''%' + @SearchTextValue + '%'' OR '  + 
																				' QualificationReferenceNumber LIKE ''%' + @SearchTextValue + '%'')'
									end
								end  +

								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end

	declare @CountQuery as nvarchar(max), @ListQuery as nvarchar(max) 
	if (len(ltrim(rtrim(@SeriesLabel))) > 0)  
		SET  @SeriesLableSelectPart = ' ,QEA. Series_Label AS SeriesLabel'

		set @CountQuery = N'Select @TotalCountOut = Count(1)
							From (Select
										QE.QualificationElementId AS QEId,									QE.AO_Qualification_Element_Id AS AoqeId,							
										QE.QE_Short_Title AS QEShortTitle,									QE.QE_Description AS QEDescription,  
										QE.Qualification_Element_Title AS QETitle,							QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,				
										QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,		QE.Private_Learner_Type AS PrivateLearnerType,						
										QE.QE_Moderation_Type AS QEModerationType,							QE.First_Language_Required_Flag AS FirstLanguageRequired,		
										QE.Record_Delete_Flag AS RecordDeleted,								QE.QE_Admin_Code AS QEAdminCode,	
										QE.Qualification_Reference_Number AS QualificationReferenceNumber,	QE.Learning_Aim_Code AS LearningAimCode, 
										QE.AwardingOrganisationCentreId,
										S.Qualification_Type AS QualificationType,							S.Series_Based_Flag AS SeriesBased,
										S.QE_Availability_Text AS QEAvailabilityText,						S.Assessment_Max_Learner_Age AS AssessmentMaxLearnerAge,
										S.Assessment_Min_Learner_Age AS AssessmentMinLearnerAge,			S.First_Teaching_Date AS FirstTeachingDate,
										S.Last_Teaching_Date AS LastTeachingDate,							S.QE_Centre_Auth_Agreement_Text AS QECentreAuthenticationAgreementText,
										S.Date_Of_Birth_Reqd_Flag AS DateOfBirthRequired,					S.Legal_Sex_Required_Flag AS LegalSexRequired' 
										+ @SeriesLableSelectPart + '
									 FROM Scheme S
											INNER JOIN QualificationElement QE ON S.QualificationElementId = QE.QualificationElementId ' + @WhereClause

		set @ListQuery = N'SELECT * FROM  
							(Select	*, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ' ) AS RowNumber
								From (Select
										QE.QualificationElementId AS QEId,									QE.AO_Qualification_Element_Id AS AoqeId,							
										QE.QE_Short_Title AS QEShortTitle,									QE.QE_Description AS QEDescription,  
										QE.Qualification_Element_Title AS QETitle,							QE.QE_Effective_Version_Date AS QEEffectiveVersionDate,				
										QE.QE_Effective_Version_End_Date AS QEEffectiveVersionEndDate,		QE.Private_Learner_Type AS PrivateLearnerType,						
										QE.QE_Moderation_Type AS QEModerationType,							QE.First_Language_Required_Flag AS FirstLanguageRequired,		
										QE.Record_Delete_Flag AS RecordDeleted,								QE.QE_Admin_Code AS QEAdminCode,	
										QE.Qualification_Reference_Number AS QualificationReferenceNumber,	QE.Learning_Aim_Code AS LearningAimCode, 
										QE.AwardingOrganisationCentreId,
										S.Qualification_Type AS QualificationType,							S.Series_Based_Flag AS SeriesBased,
										S.QE_Availability_Text AS QEAvailabilityText,						S.Assessment_Max_Learner_Age AS AssessmentMaxLearnerAge,
										S.Assessment_Min_Learner_Age AS AssessmentMinLearnerAge,			S.First_Teaching_Date AS FirstTeachingDate,
										S.Last_Teaching_Date AS LastTeachingDate,							S.QE_Centre_Auth_Agreement_Text AS QECentreAuthenticationAgreementText,
										S.Date_Of_Birth_Reqd_Flag AS DateOfBirthRequired,					S.Legal_Sex_Required_Flag AS LegalSexRequired'
										+ @SeriesLableSelectPart + '
									 FROM Scheme S
											INNER JOIN QualificationElement QE ON S.QualificationElementId = QE.QualificationElementId ' + @WhereClause + ') q2
							WHERE q2.RowNumber BETWEEN @Skip AND @Take'

		
	--PRINT @CountQuery
	--PRINT @ListQuery

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT

	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take


End
GO
PRINT N'Altering [dbo].[usp_GetQualificationTypesByAwardingOrganisationCentreID]...';


GO


--usp_GetQualificationTypesByAwardingOrganisationCentreID 1003
ALTER  PROCEDURE [dbo].[usp_GetQualificationTypesByAwardingOrganisationCentreID]
@AwardingOrganisationCentreID INT
As
Begin
	
	SET NOCOUNT ON;

	SELECT distinct S.Qualification_Type FROM dbo.Scheme S
		inner join dbo.QualificationElement QE on s.QualificationElementId=QE.QualificationElementId 
	WHERE QE.Record_Delete_Flag=0 and S.AwardingOrganisationCentreID = @AwardingOrganisationCentreID 
	and s.Qualification_Type is not null
	and Len(LTRIM(RTrim(Qualification_Type)))>0
	ORDER BY S.Qualification_Type
End
GO
PRINT N'Altering [dbo].[usp_SelectA2CRequestList]...';


GO


---usp_SelectA2CRequestList 1001
ALTER PROCEDURE [dbo].[usp_SelectA2CRequestList]
@A2CSchoolId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[LastModifiedDate] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
	@Take int = (@PageNumber * @PageSize),
	@WhereClause nvarchar(max) = '[A2CSchoolId] = ' + cast(@A2CSchoolId as nvarchar(10)) +
								case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' and ' + @GridWhereClause end

 ---print @WhereClause
SET @TotalCount = 0;
	
	

	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(Select c.CentreNumber,a.Name,aod.AONumber
	,case when rpc.AOAssignCentreNumber is null then ''NCN (HCN)'' else ''AO Assigned Centre ID''
	end as IdentifierType
	,''RPC'' as TransactionType
	,case when rpc.AOAssignCentreNumber IS null then c.CentreNumber else rpc.AOAssignCentreNumber
	end as IdentifierValue,
	rpc.Feedback,
	rpc.LastModifiedDate,aoc.A2CSchoolId
	from A2CRequests rpc
	inner join AwardingOrganisationCentres aoc
	on rpc.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
	inner join AwardingOrganisationDetails aod on aoc.AwardingOrganisationDetailId=aod.AwardingOrganisationDetailId
	inner join AwardingOrganisations a on a.AwardingOrganisationId=aod.AwardingOrganisationId
	inner join Centres c on c.CentreId=aoc.CentreId and aoc.A2CSchoolId=c.A2CSchoolId
	) p
	 Where ' + @WhereClause
	 

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'Select p2.CentreNumber,p2.Name,p2.AONumber,p2.IdentifierType,p2.TransactionType,p2.IdentifierValue,
	p2.Feedback,p2.LastModifiedDate,p2.RN
	from (Select p1.CentreNumber,p1.Name,p1.AONumber,p1.IdentifierType,p1.TransactionType,p1.IdentifierValue,
	p1.Feedback,p1.LastModifiedDate,p1.A2CSchoolId,ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	from (Select p.CentreNumber,p.Name,p.AONumber,p.IdentifierType,p.TransactionType,p.IdentifierValue,
	p.Feedback,p.LastModifiedDate,p.A2CSchoolId from
	(Select 	c.CentreNumber,a.Name,aod.AONumber
	,case when rpc.AOAssignCentreNumber is null then ''NCN (HCN)'' else ''AO Assigned Centre ID''
	end as IdentifierType
	,''RPC'' as TransactionType
	,case when rpc.AOAssignCentreNumber IS null then c.CentreNumber else rpc.AOAssignCentreNumber
	end as IdentifierValue,
	rpc.Feedback,
	rpc.LastModifiedDate,aoc.A2CSchoolId
	from A2CRequests rpc
	inner join AwardingOrganisationCentres aoc
	on rpc.AwardingOrganisationCentreId=aoc.AwardingOrganisationCentreId
	inner join AwardingOrganisationDetails aod on aoc.AwardingOrganisationDetailId=aod.AwardingOrganisationDetailId
	inner join AwardingOrganisations a on a.AwardingOrganisationId=aod.AwardingOrganisationId
	inner join Centres c on c.CentreId=aoc.CentreId and aoc.A2CSchoolId=c.A2CSchoolId
	) p
	 Where ' + @WhereClause
	 + ') p1) p2 where p2.[RN] BETWEEN @Skip AND @Take'
	---print @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take


END
GO
PRINT N'Altering [dbo].[usp_SelectQEAdditionalDataList]...';


GO





--usp_SelectQEAdditionalDataList 1968,1001,1, '((( [QeaEffectiveEndDateTime]  between '09/03/2015 18:30:00' and '09/04/2015 18:29:59'))) desc','',1,20
ALTER PROCEDURE [dbo].[usp_SelectQEAdditionalDataList]
@QualificationElementId int,
@AwardingOrganisationCentreId int,
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[QeaEffectiveStartDateTime] desc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20,
@seriesLabel nvarchar(50)
AS
BEGIN

SET NOCOUNT ON;



SET @TotalCount = 0;
Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
@Take int = (@PageNumber * @PageSize),
@WhereClause nvarchar(max) = '[AwardingOrganisationCentreId] = ' + cast(@AwardingOrganisationCentreId as nvarchar(10)) +
								' and [QualificationElementId] = ' + cast(@QualificationElementId as nvarchar(10))  +
								' and Record_Delete_Flag=0'+
							case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
							else ' and ' + @GridWhereClause end


if @seriesLabel is not null and len(ltrim(rtrim(@seriesLabel))) > 0 
begin
		set @WhereClause = @WhereClause + ' and SeriesLabel = ''' + @seriesLabel + ''''
end

SET @TotalCount = 0;
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(Select AwardingOrganisationCentreId,QualificationElementId,Record_Delete_Flag,
		QEA_Effective_Start_Date_Time as QeaEffectiveStartDateTime,QEA_Effective_End_Date_Time as QeaEffectiveEndDateTime,
		Series_Label as SeriesLabel
		from QEAvailability qea) p
		 Where ' + @WhereClause
	 
	 print @CountQuery

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'Select AwardingOrganisationCentreId,
				QualificationElementId,
				QeaEffectiveStartDateTime,QeaEffectiveEndDateTime,
				SeriesLabel,RN
	from (Select AwardingOrganisationCentreId,
				QualificationElementId,
				Record_Delete_Flag,
				QeaEffectiveStartDateTime,QeaEffectiveEndDateTime,
				SeriesLabel,ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	from 
		(Select 
				AwardingOrganisationCentreId,
				QualificationElementId,
				Record_Delete_Flag,
				QEA_Effective_Start_Date_Time as QeaEffectiveStartDateTime,QEA_Effective_End_Date_Time as QeaEffectiveEndDateTime,
				Series_Label as SeriesLabel
				from QEAvailability qea
		) p
		Where ' + @WhereClause
	 + ') p2 where p2.[RN] BETWEEN @Skip AND @Take'

	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

END
GO
PRINT N'Altering [dbo].[usp_SelectSchoolList]...';


GO

--usp_SelectSchoolList 1968,1001,1, '((( [QeaEffectiveEndDateTime]  between '09/03/2015 18:30:00' and '09/04/2015 18:29:59'))) desc','',1,20
ALTER PROCEDURE [dbo].[usp_SelectSchoolList]
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[LAId] asc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


SET @TotalCount = 0;
Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
@Take int = (@PageNumber * @PageSize),
@WhereClause nvarchar(max) = case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then '1=1'
							else @GridWhereClause end


SET @TotalCount = 0;
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(select A2CSchoolId,EstablishmentId,EstablishmentName,LAId,LAName from A2CSchools) p
		 Where ' + @WhereClause
	 
	 --print @CountQuery

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'select A2CSchoolId,EstablishmentId,EstablishmentName,LAId,LAName,RN
	from (select A2CSchoolId,EstablishmentId,EstablishmentName,LAId,LAName ,ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	from 
		(
		  select A2CSchoolId,EstablishmentId,EstablishmentName,LAId,LAName from A2CSchools
		) p
		Where ' + @WhereClause
	 + ') p2 where p2.[RN] BETWEEN @Skip AND @Take'
	 ---print @CountQuery
	print @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	--print @TotalCount

END
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.8.3';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

GO

GO
PRINT N'Update complete.';


GO
