/*
Deployment script for A2CDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/


IF (SELECT is_default
    FROM   [$(DatabaseName)].[sys].[filegroups]
    WHERE  [name] = N'FileStream') = 0
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            MODIFY FILEGROUP [FileStream] DEFAULT;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

delete ur from UsersInRoles ur
where ur.UserId in
(
select u.UserId from Users u
inner join UsersInRoles ur on u.UserId=ur.UserId
where ur.RoleId=1
)
and ur.RoleId>1

GO

update u set u.SchoolId=null from 
dbo.Users AS U 
inner join UsersInRoles au
ON AU.UserId = U.UserId          
INNER JOIN A2CSchools a on a.A2CSchoolId=u.SchoolId
where au.RoleId=1

GO

GO
PRINT N'Altering [dbo].[A2CSchools]...';


GO
ALTER TABLE [dbo].[A2CSchools] ALTER COLUMN [EstablishmentId] NVARCHAR (50) NOT NULL;

ALTER TABLE [dbo].[A2CSchools] ALTER COLUMN [EstablishmentName] NVARCHAR (200) NOT NULL;


GO
PRINT N'Altering [dbo].[SMTPEmailProviders]...';


GO
ALTER TABLE [dbo].[SMTPEmailProviders] ALTER COLUMN [FromEmail] NVARCHAR (255) NULL;

ALTER TABLE [dbo].[SMTPEmailProviders] ALTER COLUMN [HostName] NVARCHAR (255) NULL;

ALTER TABLE [dbo].[SMTPEmailProviders] ALTER COLUMN [Password] NVARCHAR (255) NULL;

ALTER TABLE [dbo].[SMTPEmailProviders] ALTER COLUMN [Port] INT NULL;

ALTER TABLE [dbo].[SMTPEmailProviders] ALTER COLUMN [UserName] NVARCHAR (255) NULL;


GO
ALTER TABLE [dbo].[SMTPEmailProviders]
    ADD [AuthenticationRequired]   BIT CONSTRAINT [DF_SMTPEmailProviders_AuthenticationRequired] DEFAULT ((0)) NULL,
        [EmailConfigurationChoice] INT NULL;


GO
PRINT N'Altering [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD [IsFirstTimeLogin] BIT DEFAULT ((0)) NOT NULL,
        [IsLicenseKeyUser] BIT CONSTRAINT [DF_Users_IsLicenseKeyUser] DEFAULT ((0)) NOT NULL;


GO
PRINT N'Altering [dbo].[usp_GetSMTPProviderDetails]...';


GO
ALTER PROCEDURE [dbo].[usp_GetSMTPProviderDetails]
	@SchoolId int = NULL
AS
BEGIN
    SET NOCOUNT ON;	

	DECLARE @SSURECORDEXIST BIT = 0
	DECLARE @SCHOOLRECORDEXISTS BIT = 0

	IF EXISTS (SELECT * FROM dbo.SMTPEmailProviders WHERE SchoolId is null)
		SET @SSURECORDEXIST = 1

	IF EXISTS (SELECT * FROM dbo.SMTPEmailProviders WHERE SchoolId = @SchoolId)
		SET @SCHOOLRECORDEXISTS = 1

	--NO RECORDS FOUND AT ALL
	IF (@SSURECORDEXIST = 0 AND @SCHOOLRECORDEXISTS = 0)
	BEGIN
		--SELECT NULL
		RETURN
	END

	--GET RECORD FOR SSU
	IF @SSURECORDEXIST = 1
	BEGIN		
		SELECT TOP 1
			SP.HostName as Host, SP.Port,SP.UserName,SP.[Password],SP.FromEmail,SP.SchoolId,SP.[AuthenticationRequired]
		INTO
			#SSU
		FROM   
			dbo.SMTPEmailProviders SP         
		WHERE  
			SP.SchoolId is null		
		ORDER BY 
			SP.SMTPEmailProviderId ASC
	END

	--SELECT DATA AS PER EMAIL CHOICE
	IF @SchoolId IS NULL
	BEGIN
		IF @SSURECORDEXIST = 1
			SELECT * FROM #SSU
		ELSE
			--SELECT NULL
			RETURN
	END
	ELSE
	BEGIN		
		IF @SCHOOLRECORDEXISTS = 0
		BEGIN
			--NO RECORD EXIST AT SCHOOL LEVEL, SELECT SSU DETAILS
			IF @SSURECORDEXIST = 1
				SELECT * FROM #SSU
			ELSE
				--SELECT NULL
				RETURN
		END
		ELSE
		BEGIN
			--RECORD EXISTS AT SCHOOL LEVEL
			SELECT TOP 1
				SP.HostName as Host, SP.Port,SP.UserName,SP.[Password],SP.FromEmail,SP.SchoolId,SP.[AuthenticationRequired],SP.[EmailConfigurationChoice]
			INTO
				#SCHOOL
			FROM   
				dbo.SMTPEmailProviders SP         
			WHERE  
				SP.SchoolId = @SchoolId		
			ORDER BY 
				SP.SMTPEmailProviderId ASC
			
			--NOW SELECT DATA AS PER SCHOOL CONFIGURATION CHOICE			
			IF (SELECT [EmailConfigurationChoice] FROM #SCHOOL) = 1 --SMTP OPTION SELECTED
			BEGIN				
				SELECT * FROM #SCHOOL
			END			
			ELSE IF (SELECT [EmailConfigurationChoice] FROM #SCHOOL) = 2 --AMAZON CLOUD OPTION SELECTED
			BEGIN	
				IF @SSURECORDEXIST = 1	
				BEGIN		
					--SELECT ALL DETAILS OF SSU EXCEPT EMAID ADDRESS
					UPDATE #SSU SET FromEmail = S.FromEmail FROM #SCHOOL S				
					SELECT * FROM #SSU
				END
				ELSE
					--SELECT NULL
					RETURN
			END			
			ELSE  --NONE OPTION SELECTED
			BEGIN
				IF @SSURECORDEXIST = 1
					SELECT * FROM #SSU
				ELSE
					--SELECT NULL
					RETURN
			END
		END
	END
END
GO
PRINT N'Altering [dbo].[usp_GetSchoolUser]...';


GO
ALTER PROCEDURE [dbo].[usp_GetSchoolUser] 
	@SchoolId	int = 0,
	@RoleId		int = 2,
	@UserId		uniqueidentifier = null,
	@UserProfile bit=0
AS
BEGIN
	SET NOCOUNT ON;

	Select	au.[UserName], ap.[Email], u.[ForeName], u.[SurName], ap.[IsApproved],
			stuff((	Select ',' + cast(r.[RoleId] as nchar(1))
					From	[dbo].[UsersInRoles] ur
							join [dbo].[Roles] r on ur.[RoleId] = r.[RoleId]
					where ur.[UserId] = u.[UserId]
					order by r.[RoleId] asc
					for xml path('')),1,1,'') [Role]
	From	[dbo].[aspnet_Membership] ap
			join [dbo].[aspnet_Users] au on ap.[UserId] = au.[UserId]
			join [dbo].[Users] u on ap.[UserId] = u.[UserId]
	where	ap.[UserId] = @UserId and (((u.[SchoolId] = @SchoolId and @SchoolId>0) 
			and (@UserProfile=1 OR (Select	count(1) cnt 
				From	[dbo].[UsersInRoles] ur 
				where	ur.UserId = ap.[UserId] and ur.RoleId >= @RoleId 
						and (Select count(1) From UsersInRoles tur Where tur.UserId = ap.[UserId] and tur.RoleId < @RoleId) = 0) > 0)
						) or ((u.[SchoolId] is null or u.[SchoolId]<=0) and @SchoolId<=0 and u.IsLicenseKeyUser=0))
			
END
GO
PRINT N'Altering [dbo].[usp_GetUserDetailsByUserName]...';


GO



ALTER PROCEDURE [dbo].[usp_GetUserDetailsByUserName] 
@UserName NVARCHAR (256)
AS

BEGIN

    SET NOCOUNT ON;
	
    SELECT AU.UserName,AU.UserId AS UserGUID,U.SchoolId,AU.LastActivityDate,AM.IsApproved,AM.IsLockedOut
           ,Am.LastPasswordChangedDate,AM.FailedPasswordAttemptCount,AM.FailedPasswordAnswerAttemptCount,AM.LastLoginDate
		   ,AM.LastLockoutDate,U.ForeName,U.SurName,AM.Email AS UserEmail,AM.PasswordSalt,a.EstablishmentName as SchoolName, U.IsFirstTimeLogin AS IsFirstTimeLogon
		   ,U.IsLicenseKeyUser
    FROM   dbo.aspnet_Users AS AU
           INNER JOIN dbo.aspnet_Membership AS AM ON AU.UserId = AM.UserId          
           INNER JOIN dbo.Users AS U ON AU.UserId = U.UserId          
		   Left JOIN A2CSchools a on a.A2CSchoolId=u.SchoolId
    WHERE  LoweredUserName = @UserName;

END
GO
PRINT N'Altering [dbo].[usp_InsertSchoolUser]...';


GO
ALTER Proc [dbo].[usp_InsertSchoolUser]
@SchoolId			int = 0,
@UserId				uniqueidentifier,
@RoleId ListInt		readonly,
@Forename			nvarchar(255),
@SurName			nvarchar(255)
As
Begin
	IF @SchoolId = 0
		SET @SchoolId = null;
	Insert into Users(UserId, ForeName, SurName, SchoolId, IsFirstTimeLogin)
	Select @UserId, @Forename, @SurName, @SchoolId, 1

	Insert into UsersInRoles(RoleId, UserId)
	Select	r.ID, @UserId
	From	@RoleId r

End
GO
PRINT N'Altering [dbo].[usp_UpdateSchoolUser]...';


GO

ALTER Proc [dbo].[usp_UpdateSchoolUser]
@SchoolId			int = 0,
@UserId				uniqueidentifier,
@UserName			nvarchar(512),
@Email				nvarchar(512),
@RoleId ListInt		readonly,
@Forename			nvarchar(255),
@SurName			nvarchar(255),
@PasswordHash		nvarchar(256) = null
As
Begin
	
	Update	[dbo].[Users]
	Set		[ForeName] = @Forename,
			[SurName] = @SurName
	Where	[UserId] = @UserId AND (([SchoolId] = @SchoolId and @SchoolId>0) or (([SchoolId] is null OR [SchoolId]<=0)and @SchoolId<=0))

	Delete from [dbo].[UsersInRoles] where UserId = @UserId

	Insert into UsersInRoles(RoleId, UserId)
	Select	r.ID, @UserId
	From	@RoleId r

	if @PasswordHash is null
	Begin
		UPDATE [dbo].[aspnet_Membership]
		SET		[Email]            = @Email,
				[LoweredEmail]     = LOWER(@Email)
		WHERE  @UserId = [UserId]
	end
	Else
	Begin
		UPDATE [dbo].[aspnet_Membership]
		SET		[Email]            = @Email,
				[LoweredEmail]     = LOWER(@Email),
				IsLockedOut = 0,
				FailedPasswordAttemptCount = 0,
				FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
				FailedPasswordAnswerAttemptCount = 0,
				FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
				LastLockoutDate = CONVERT( datetime, '17540101', 112 ),
				[Password] = @PasswordHash,
				LastPasswordChangedDate=GETUTCDATE()
		WHERE  @UserId = [UserId]
	End

	

	

	UPDATE  [dbo].[aspnet_Users]
    SET     UserName = @UserName,
			LoweredUserName = LOWER(@UserName)
    WHERE   @UserId = UserId


	
End
GO
PRINT N'Altering [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]...';


GO


ALTER PROCEDURE [dbo].[usp_Insert_A2CTransactionResponseEnvelopeMessages]
@A2CSchoolId int,
@AwardingOrganisationDetailId int,
@CentreId int,
@A2CTransactionResponseEnvelopeId int,
@MessageId nvarchar(50),
@RefMessageId nvarchar(50)=null,
@TimeStamp datetime,
@TransactionName nvarchar(100)=null,
@IncomingSequence bigint=null,
@data varbinary(max),
@IsFeedbackMessage  bit,
@AwardingOrganisationCentreId int,
@AwardingOrganisationNumber nvarchar(200),
@CentreNumber nvarchar(200),
@IsMessageLevelFeedbackMessage bit
AS
BEGIN
	DECLARE @A2CTransactionMasterId INT
	Declare @MessageAwardingOrganisationCentreId int
	EXEC @A2CTransactionMasterId= [usp_Select_A2CTransactionMasters_IdByName] @TransactionName
	Declare @A2CMessageId int

	Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
	inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
	inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
	where 
	aoc.A2CSchoolId=@A2CSchoolId and
	c.CentreNumber=@CentreNumber and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
	and ad.AONumber=@AwardingOrganisationNumber

	If @MessageAwardingOrganisationCentreId is null
	begin
		Select @MessageAwardingOrganisationCentreId =aoc.AwardingOrganisationCentreId from AwardingOrganisationCentres aoc
		inner join AwardingOrganisationDetails ad on aoc.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		inner join Centres c on c.CentreId=aoc.CentreId and c.A2CSchoolId=aoc.A2CSchoolId
		inner join AwardingOrganisationAOAssignedCentres aoassign on aoassign.AwardingOrganisationDetailId=ad.AwardingOrganisationDetailId
		and aoassign.A2CSchoolId=aoc.A2CSchoolId
		where 
		aoc.A2CSchoolId=@A2CSchoolId 
		and ad.AwardingOrganisationDetailId=aoc.AwardingOrganisationDetailId
		and aoassign.AOAssignCentreNumber=@CentreNumber
		and ad.AONumber=@AwardingOrganisationNumber
	end
	--if @RefMessageId<>null and @RefMessageId<>''
	--begin
	--	SELECT @A2CMessageId= A2CMessageId FROM A2CXmlMessages WHERE A2CSchoolId=@A2CSchoolId
	--	AND CentreId=@CentreId AND AwardingOrganisationDetailId=@AwardingOrganisationDetailId AND A2CMessageGuid=@RefMessageId
	--end

	

	Insert into A2CTransactionResponseEnvelopeMessages (A2CTransactionResponseEnvelopeId,MessageId,RefMessageId,[TimeStamp],A2CTransactionMasterId,IncomingSequence,[data],IsFeedbackMessage,A2CMessageId,AwardingOrganisationCentreId,MessageAwardingOrganisationCentreId,IsMessageLevelFeedbackMessage)
	values(@A2CTransactionResponseEnvelopeId,@MessageId,@RefMessageId,@TimeStamp,@A2CTransactionMasterId,@IncomingSequence,@data,@IsFeedbackMessage,@A2CMessageId,@AwardingOrganisationCentreId,@MessageAwardingOrganisationCentreId,@IsMessageLevelFeedbackMessage)
	select cast(SCOPE_IdENTITY() as int)

	if @IncomingSequence is not null and @IncomingSequence>0 and @MessageAwardingOrganisationCentreId>0
	begin
		update AwardingOrganisationCentres
		set IncomingSequence=@IncomingSequence
		where AwardingOrganisationCentreId = @MessageAwardingOrganisationCentreId
	end
END
GO
PRINT N'Creating [dbo].[usp_ActivateSelectedUsers]...';


GO
Create PROCEDURE [dbo].[usp_ActivateSelectedUsers]   

@UserIds NVARCHAR (MAX),

@newPasswords NVARCHAR (MAX)

AS

BEGIN

    SET NOCOUNT ON;

	DECLARE @userId uniqueidentifier;
	DECLARE @password nvarchar(256);
	DECLARE @posUser INT,@posPassword INT;
	Declare @stringToSplitUserId NVARCHAR (MAX),@stringToSplitPassword NVARCHAR (MAX);
		
	Set @stringToSplitUserId=@UserIds;
	Set @stringToSplitPassword=@newPasswords;

	Declare @inputUserData TABLE (UserId uniqueidentifier primary key, NewPassword nvarchar(128));

	-- Slipt Userid and insert in to temp table

	WHILE LEN(@stringToSplitUserId) > 0
	BEGIN

		SELECT @posUser  = CHARINDEX(',', @stringToSplitUserId)
		SELECT @posPassword  = CHARINDEX(',', @stringToSplitPassword)

		if @posUser = 0
			Begin
				SELECT @posUser = LEN(@stringToSplitUserId)
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser))
				SELECT @posPassword = LEN(@stringToSplitPassword)
				SELECT @password = SUBSTRING(@stringToSplitPassword, 1, @posPassword)
			End
		Else
			Begin
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser-1))
				SELECT @password = SUBSTRING(@stringToSplitPassword, 1, @posPassword-1)
			End

		INSERT INTO @inputUserData 
		SELECT @userId,@password 
			
		SELECT @stringToSplitUserId = SUBSTRING(@stringToSplitUserId, @posUser+1, LEN(@stringToSplitUserId)-@posUser)
		SELECT @stringToSplitPassword = SUBSTRING(@stringToSplitPassword, @posPassword+1, LEN(@stringToSplitPassword)-@posPassword)
	END

	UPDATE dbo.aspnet_Membership
			SET IsApproved=1,IsLockedOut = 0,
				FailedPasswordAttemptCount = 0,
				FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
				FailedPasswordAnswerAttemptCount = 0,
				FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
				LastLockoutDate = CONVERT( datetime, '17540101', 112 ),
				Password=iud.NewPassword,
				LastPasswordChangedDate=GETUTCDATE()
			FROM dbo.aspnet_Membership 
			INNER JOIN @inputUserData iud ON dbo.aspnet_Membership.UserId = iud.UserId

END
GO
PRINT N'Creating [dbo].[usp_ActivateSelectedUsersEmailDisabled]...';


GO
Create PROCEDURE [dbo].[usp_ActivateSelectedUsersEmailDisabled]   

@UserIds NVARCHAR (MAX)

AS

BEGIN

    SET NOCOUNT ON;

	DECLARE @userId uniqueidentifier;
	DECLARE @posUser INT,@posPassword INT;
	Declare @stringToSplitUserId NVARCHAR (MAX);
		
	Set @stringToSplitUserId=@UserIds;

	Declare @inputUserData TABLE (UserId uniqueidentifier primary key);

	-- Slipt Userid and insert in to temp table

	WHILE LEN(@stringToSplitUserId) > 0
	BEGIN

		SELECT @posUser  = CHARINDEX(',', @stringToSplitUserId)

		if @posUser = 0
			Begin
				SELECT @posUser = LEN(@stringToSplitUserId)
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser))
			End
		Else
			Begin
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser-1))
			End

		INSERT INTO @inputUserData 
		SELECT @userId
			
		SELECT @stringToSplitUserId = SUBSTRING(@stringToSplitUserId, @posUser+1, LEN(@stringToSplitUserId)-@posUser)
	END

	UPDATE dbo.aspnet_Membership
		SET IsApproved=1,IsLockedOut = 0,
			FailedPasswordAttemptCount = 0,
			FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
			FailedPasswordAnswerAttemptCount = 0,
			FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
			LastLockoutDate = CONVERT( datetime, '17540101', 112 )
	FROM dbo.aspnet_Membership 
	INNER JOIN @inputUserData iud ON dbo.aspnet_Membership.UserId = iud.UserId

END
GO
PRINT N'Creating [dbo].[usp_DeactivateSelectedUsers]...';


GO
Create PROCEDURE [dbo].[usp_DeactivateSelectedUsers]   

@UserIds NVARCHAR (MAX)

AS

BEGIN

    SET NOCOUNT ON;

	DECLARE @userId uniqueidentifier;
	DECLARE @posUser INT,@posPassword INT;
	Declare @stringToSplitUserId NVARCHAR (MAX);
		
	Set @stringToSplitUserId=@UserIds;

	Declare @inputUserData TABLE (UserId uniqueidentifier primary key);

	-- Slipt Userid and insert in to temp table

	WHILE LEN(@stringToSplitUserId) > 0
	BEGIN

		SELECT @posUser  = CHARINDEX(',', @stringToSplitUserId)

		if @posUser = 0
			Begin
				SELECT @posUser = LEN(@stringToSplitUserId)
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser))
			End
		Else
			Begin
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser-1))
			End

		INSERT INTO @inputUserData 
		SELECT @userId
			
		SELECT @stringToSplitUserId = SUBSTRING(@stringToSplitUserId, @posUser+1, LEN(@stringToSplitUserId)-@posUser)
	END

	UPDATE dbo.aspnet_Membership
			SET IsApproved=0
			FROM dbo.aspnet_Membership 
			INNER JOIN @inputUserData iud ON dbo.aspnet_Membership.UserId = iud.UserId

END
GO
PRINT N'Creating [dbo].[usp_GetSchoolUserApplicationConfiguration]...';


GO
CREATE PROCEDURE [dbo].[usp_GetSchoolUserApplicationConfiguration]
	@SchoolId int
AS   
BEGIN
  SELECT TOP 1 
	SMTPEmailProviderId,
	HostName as 'Host',
	Port,
	UserName as 'UserId',
	[Password],
	case when EmailConfigurationChoice=1 then FromEmail else '' end as 'SMTPEmail',
	case when EmailConfigurationChoice=2 then FromEmail else '' end as 'AmazonCloudEmail',
	SchoolId,
	isnull(AuthenticationRequired,0) as AuthenticationRequired,
	EmailConfigurationChoice
 FROM SMTPEmailProviders E WHERE 
  E.SchoolId = @SchoolId
  ORDER BY E.SMTPEmailProviderId
 END
GO
PRINT N'Creating [dbo].[usp_GetSuperUserApplicationConfiguration]...';


GO
CREATE PROCEDURE [dbo].[usp_GetSuperUserApplicationConfiguration]
AS   
BEGIN
  SELECT TOP 1 
	SMTPEmailProviderId,
	HostName as 'Host',
	Port,
	UserName as 'UserId',
	[Password],
	FromEmail as 'Email',
	isnull(AuthenticationRequired,0) as AuthenticationRequired
  FROM SMTPEmailProviders E WHERE 
  E.SchoolId IS NULL
  ORDER BY E.SMTPEmailProviderId
 END
GO
PRINT N'Creating [dbo].[usp_GetSuperUserList]...';


GO


CREATE proc [dbo].[usp_GetSuperUserList]
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[UserName]',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 10
As
Begin
	
	SET NOCOUNT ON;
	SET @TotalCount = 0;
	Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
	@Take int = (@PageNumber * @PageSize),
	@WhereClause nvarchar(max) = case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then ''
								else ' Where' + @GridWhereClause end
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1)
											From (	Select	u.[SchoolId], am.[UserId], au.[UserName], u.[ForeName], u.[SurName], 
													case when am.[IsApproved] = 0 then ''Deactivated'' 
															 when am.[IsLockedOut] = 1 then ''Locked''
															 else ''Activated'' end [Status], r.[RoleDisplayName] as [Role],u.[IsLicenseKeyUser]
													From	[dbo].[aspnet_Membership] am 
															Join [dbo].[aspnet_Users] au on am.[UserId] = au.[UserId]
															join [dbo].[Users] u on am.[UserId] = u.[UserId]
															join [dbo].[UsersInRoles] ur on ur.[UserId] = u.[UserId]
															join [dbo].[Roles] r on ur.[RoleId] = r.[RoleId]
															where ur.[RoleId] = 1) p1
											' + @WhereClause,

	@ListQuery as nvarchar(max) =	N'Select p2.[SchoolId], p2.[UserId], p2.[UserName], p2.[Forename], p2.[Surname], p2.[Status], p2.[Role], p2.[IsLicenseKeyUser]								
										From	(Select p1.[SchoolId], p1.[UserId], p1.[UserName], p1.[ForeName], p1.[SurName], p1.[Status], p1.[Role], p1.[IsLicenseKeyUser],
														ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
												From (	Select	u.[SchoolId], am.[UserId], au.[UserName], u.[ForeName], u.[SurName],
														case when am.[IsApproved] = 0 then ''Deactivated'' 
															 when am.[IsLockedOut] = 1 then ''Locked''
															 else ''Activated'' end [Status], r.[RoleDisplayName] AS Role, u.[IsLicenseKeyUser]
														From	[dbo].[aspnet_Membership] am 
																Join [dbo].[aspnet_Users] au on am.[UserId] = au.[UserId]
																join [dbo].[Users] u on am.[UserId] = u.[UserId]
																join [dbo].[UsersInRoles] ur on ur.[UserId] = u.[UserId]
																join [dbo].[Roles] r on ur.[RoleId] = r.[RoleId]
																where ur.[RoleId] = 1) p1
												 ' + @WhereClause + ') p2
										 Where p2.[RN] BETWEEN @Skip AND @Take'
	--PRINT @ListQuery 
	--PRINT @CountQuery

	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take

End
GO
PRINT N'Creating [dbo].[usp_ResetFirstLogonForUser]...';


GO


Create PROCEDURE [dbo].[usp_ResetFirstLogonForUser]   

@UserName NVARCHAR (256)

AS

BEGIN

    SET NOCOUNT ON;

	UPDATE U
			SET IsFirstTimeLogin=0
			FROM dbo.Users U
			INNER JOIN aspnet_Users A ON U.UserId = A.UserId
			WHERE A.UserName = @UserName

END
GO
PRINT N'Creating [dbo].[usp_SaveSchoolUserApplicationConfiguration]...';


GO
CREATE Procedure usp_SaveSchoolUserApplicationConfiguration
	@SMTPEmailProviderId int = 0,
	@HostName nvarchar(255),
	@Port int,
	@UserName nvarchar(255),
	@Password nvarchar(255),
	@PasswordChanged bit,	
	@AuthenticationRequired bit,
	@SMTPEmail nvarchar(255),	
	@AmazonCloudEmail nvarchar(255),
	@EmailChoice smallint,
	@SchoolId int,
	@RecordId int OUTPUT
as
begin

	Declare @Email nvarchar(255)

	if @EmailChoice = 1 
	begin
		set @Email = @SMTPEmail
	end
	else if @EmailChoice = 2 
	begin
		set @Email = @AmazonCloudEmail 		
	end
	else
	begin 
		set @Email = null 		
	end

	--PK of record is not supplied from web app
	if @SMTPEmailProviderId = 0
	begin
		--concurrency: try to get school user record if some one has inserted meanwhile
		select TOP 1 @SMTPEmailProviderId = SMTPEmailProviderId
		FROM SMTPEmailProviders E 
		WHERE E.SchoolId = @SchoolId
		ORDER BY E.SMTPEmailProviderId
	end
	
	--record still not exist, then insert new
	if @SMTPEmailProviderId = 0
	begin
		--there is no record so insert new record
		INSERT INTO [dbo].[SMTPEmailProviders]
			([HostName]
			,[Port]
			,[UserName]
			,[Password]
			,[FromEmail]
			,[SchoolId]
			,[AuthenticationRequired]
			,[EmailConfigurationChoice])
		VALUES
			(@HostName
			,@Port
			,@UserName
			,@Password
			,@Email
			,@SchoolId
			,@AuthenticationRequired
			,@EmailChoice)

		SET @RecordId=SCOPE_IDENTITY()
	end
	else
	begin
		--edit existing record
		UPDATE [dbo].[SMTPEmailProviders]
		SET [HostName] = @HostName
			,[Port] = @Port
			,[UserName] = @UserName
			,[Password] = case @PasswordChanged when 1 then isnull(@Password,'') else [Password] end
			,[FromEmail] = @Email
			,[AuthenticationRequired] = @AuthenticationRequired
			,[EmailConfigurationChoice] = @EmailChoice
		WHERE SMTPEmailProviderId=@SMTPEmailProviderId and SchoolId = @SchoolId

		if @EmailChoice <> 1
		begin 
			UPDATE [dbo].[SMTPEmailProviders]
			SET [Password] = null
			WHERE SMTPEmailProviderId=@SMTPEmailProviderId and SchoolId = @SchoolId
		end
		SET @RecordId=@SMTPEmailProviderId
	end
end
GO
PRINT N'Creating [dbo].[usp_SaveSuperUserApplicationConfiguration]...';


GO
CREATE Procedure usp_SaveSuperUserApplicationConfiguration
	@SMTPEmailProviderId int = 0,
	@HostName nvarchar(255),
	@Port int,
	@UserName nvarchar(255),
	@Password nvarchar(255),
	@PasswordChanged bit,	
	@AuthenticationRequired bit,
	@FromEmail nvarchar(255),
	@RecordId int OUTPUT
as
begin

	--PK of record is not supplied from web app
	if @SMTPEmailProviderId = 0
	begin
		--concurrency: try to get super user record if some one has inserted meanwhile
		select TOP 1 @SMTPEmailProviderId = SMTPEmailProviderId
		FROM SMTPEmailProviders E 
		WHERE E.SchoolId IS NULL
		ORDER BY E.SMTPEmailProviderId		
	end

	if @SMTPEmailProviderId = 0
	begin
		--there is no record so insert new record
		INSERT INTO [dbo].[SMTPEmailProviders]
			([HostName]
			,[Port]
			,[UserName]
			,[Password]
			,[FromEmail]
			,[SchoolId]
			,[AuthenticationRequired])
		VALUES
			(@HostName
			,@Port
			,@UserName
			,isnull(@Password,'')
			,@FromEmail
			,NULL
			,@AuthenticationRequired)

		SET @RecordId=SCOPE_IDENTITY()
	end
	else
	begin
		--edit existing record
		UPDATE [dbo].[SMTPEmailProviders]
		SET [HostName] = @HostName
			,[Port] = @Port
			,[UserName] = @UserName
			,[Password] = case @PasswordChanged when 1 then isnull(@Password,'') else [Password] end
			,[FromEmail] = @FromEmail			
			,[AuthenticationRequired] = @AuthenticationRequired
		WHERE SMTPEmailProviderId=@SMTPEmailProviderId and SchoolId is null

		SET @RecordId=@SMTPEmailProviderId

	end
	
end
GO
PRINT N'Creating [dbo].[usp_SelectSchoolList]...';


GO
--usp_SelectSchoolList 1968,1001,1, '((( [QeaEffectiveEndDateTime]  between '09/03/2015 18:30:00' and '09/04/2015 18:29:59'))) desc','',1,20
CREATE PROCEDURE [dbo].[usp_SelectSchoolList]
@TotalCount int = 0 OUTPUT,
@OrderBy nvarchar(255) = '[LAId] asc',
@GridWhereClause nvarchar(max) = null,
@PageNumber int = 1,
@PageSize int = 20
AS
BEGIN

SET NOCOUNT ON;


SET @TotalCount = 0;
Declare @Skip int = (@PageNumber * @PageSize) - (@PageSize-1),
@Take int = (@PageNumber * @PageSize),
@WhereClause nvarchar(max) = case when @GridWhereClause is null or len(ltrim(rtrim(@GridWhereClause))) <= 0 then '1=1'
							else @GridWhereClause end


SET @TotalCount = 0;
	declare @CountQuery as nvarchar(max) = N'Select @TotalCountOut = Count(1) from
	(select A2CSchoolId,EstablishmentId,EstablishmentName,LAId,LAName from A2CSchools) p
		 Where ' + @WhereClause
	 
	 print @CountQuery

	 Declare @ListQuery as nvarchar(max)
	

	Set @ListQuery=
	'select A2CSchoolId,EstablishmentId,EstablishmentName,LAId,LAName,RN
	from (select A2CSchoolId,EstablishmentId,EstablishmentName,LAId,LAName ,ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') AS RN
	from 
		(
		  select A2CSchoolId,EstablishmentId,EstablishmentName,LAId,LAName from A2CSchools
		) p
		Where ' + @WhereClause
	 + ') p2 where p2.[RN] BETWEEN @Skip AND @Take'
	 ---print @CountQuery
	print @ListQuery
	
	EXECUTE sp_executesql	@CountQuery, 
							N'@TotalCountOut int OUTPUT', 
							@TotalCountOut = @TotalCount OUTPUT
	EXECUTE sp_executesql @ListQuery, N'@Skip int, @Take int', @Skip = @Skip, @Take = @Take
	print @TotalCount

END
GO
PRINT N'Creating [dbo].[usp_UnlockSelectedUsersEmailDisabled]...';


GO
Create PROCEDURE [dbo].[usp_UnlockSelectedUsersEmailDisabled]   
@UserIds NVARCHAR (MAX)
AS
BEGIN

    SET NOCOUNT ON;

	DECLARE @userId uniqueidentifier;
	DECLARE @posUser INT,@posPassword INT;
	Declare @stringToSplitUserId NVARCHAR (MAX);

	Set @stringToSplitUserId=@UserIds;

	Declare @inputUserData TABLE (UserId uniqueidentifier primary key);
	-- Slipt Userid and insert in to temp table
	WHILE LEN(@stringToSplitUserId) > 0
	BEGIN
		SELECT @posUser  = CHARINDEX(',', @stringToSplitUserId)
		if @posUser = 0
			Begin
				SELECT @posUser = LEN(@stringToSplitUserId)
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser))
			End
		Else
			Begin
				SELECT @userId = CONVERT(UNIQUEIDENTIFIER,SUBSTRING(@stringToSplitUserId, 1, @posUser-1))
			End

		INSERT INTO @inputUserData 
		SELECT @userId

		SELECT @stringToSplitUserId = SUBSTRING(@stringToSplitUserId, @posUser+1, LEN(@stringToSplitUserId)-@posUser)
	END

	UPDATE dbo.aspnet_Membership
		SET IsLockedOut = 0,
			FailedPasswordAttemptCount = 0,
			FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
			FailedPasswordAnswerAttemptCount = 0,
			FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
			LastLockoutDate = CONVERT( datetime, '17540101', 112 )
	FROM dbo.aspnet_Membership 
	INNER JOIN @inputUserData iud ON dbo.aspnet_Membership.UserId = iud.UserId
END
GO
PRINT N'Altering [Version]...';


GO
EXECUTE sp_updateextendedproperty @name = N'Version', @value = N'15.1.5.5';


GO
PRINT N'Creating [dbo].[SMTPEmailProviders].[EmailConfigurationChoice].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'None = 0,SMTP = 1, AmazonCloud = 2', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'SMTPEmailProviders', @level2type = N'COLUMN', @level2name = N'EmailConfigurationChoice';


GO
PRINT N'Refreshing [dbo].[usp_GetActiveAwardingOrganisation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetActiveAwardingOrganisation]';


GO
PRINT N'Refreshing [dbo].[usp_GetCentresByAwardingOrganization]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetCentresByAwardingOrganization]';


GO
PRINT N'Refreshing [dbo].[usp_GetSchoolsByAwardingOrganization]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetSchoolsByAwardingOrganization]';


GO
PRINT N'Refreshing [dbo].[usp_DeleteUsers]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_DeleteUsers]';


GO
PRINT N'Refreshing [dbo].[usp_GetUserDetailsByUserIds]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_GetUserDetailsByUserIds]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

Insert into ScreenMasters(ScreenMasterId, ScreenName,ScreenDescription)
Select	temp.ScreenMasterId, temp.ScreenName,temp.ScreenDescription
From	(Select 1015 ScreenMasterId, 'SelectSchool' ScreenName,'Select School' ScreenDescription
		union all
		Select 1016, 'ApplicationConfiguration','Application Configuration' 
		union all
		Select 1017, 'ChangePassword','Change Password'
		) As temp
		Left Join ScreenMasters sm 
		on temp.ScreenMasterId = sm.ScreenMasterId
Where sm.ScreenMasterId is null

declare @now datetime, @UserId uniqueidentifier

BEGIN TRAN main

BEGIN TRY

  set @now= GETDATE()
  
  if not exists (select * from aspnet_Users au where au.UserName='MIS_SuperUser')
  Begin
   exec aspnet_Membership_CreateUser  'A2C', 'MIS_SuperUser', 'ctW+mEamD2jiJwFofhuAtuqvjEY=','Gx7WqjttjuBNRoJX8cDpDg==','admin-a2c@progresso.net'
      ,null,null,1,@now,@now,0,1,@UserId output

   SELECT @UserId as N'UserId'

   
   insert into Users (UserId,ForeName,SurName,SchoolId,IsLicenseKeyUser) values (@UserId,'Admin','A2C-Progresso',null,1)
   
   insert into UsersInRoles (UserId,RoleId) values (@UserId,1)   
  End

  
 IF @@TRANCOUNT > 0
  COMMIT TRAN main
  
END TRY
BEGIN CATCH   
     IF @@TRANCOUNT > 0
    ROLLBACK TRAN main
END CATCH

GO

GO
PRINT N'Update complete.';


GO
